{"total":394,"p":1,"ps":500,"rules":[{"key":"common-java:DuplicatedBlocks","repo":"common-java","name":"Source files should not have any duplicated blocks","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"An issue is created on a file as soon as there is at least one block of duplicated code on this file","mdDesc":"An issue is created on a file as soon as there is at least one block of duplicated code on this file","severity":"MAJOR","status":"DEPRECATED","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"LINEAR_OFFSET","defaultDebtRemFnCoeff":"10min","defaultDebtRemFnOffset":"10min","effortToFixDescription":"number of duplicate blocks","debtOverloaded":false,"debtRemFnType":"LINEAR_OFFSET","debtRemFnCoeff":"10min","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"LINEAR_OFFSET","defaultRemFnGapMultiplier":"10min","defaultRemFnBaseEffort":"10min","remFnType":"LINEAR_OFFSET","remFnGapMultiplier":"10min","remFnBaseEffort":"10min","remFnOverloaded":false,"gapDescription":"number of duplicate blocks","scope":"MAIN","isExternal":false},{"key":"common-java:InsufficientBranchCoverage","repo":"common-java","name":"Branches should have sufficient coverage by tests","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.","mdDesc":"An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.","severity":"MAJOR","status":"DEPRECATED","isTemplate":false,"tags":[],"sysTags":["bad-practice"],"lang":"java","langName":"Java","params":[{"key":"minimumBranchCoverageRatio","defaultValue":"65","type":"FLOAT"}],"defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"5min","effortToFixDescription":"number of uncovered conditions","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"5min","type":"CODE_SMELL","defaultRemFnType":"LINEAR","defaultRemFnGapMultiplier":"5min","remFnType":"LINEAR","remFnGapMultiplier":"5min","remFnOverloaded":false,"gapDescription":"number of uncovered conditions","scope":"MAIN","isExternal":false},{"key":"common-java:InsufficientCommentDensity","repo":"common-java","name":"Source files should have a sufficient density of comment lines","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.","mdDesc":"An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.","severity":"MAJOR","status":"DEPRECATED","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"minimumCommentDensity","defaultValue":"25","type":"FLOAT"}],"defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"2min","effortToFixDescription":"number of lines required to meet minimum density","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"2min","type":"CODE_SMELL","defaultRemFnType":"LINEAR","defaultRemFnGapMultiplier":"2min","remFnType":"LINEAR","remFnGapMultiplier":"2min","remFnOverloaded":false,"gapDescription":"number of lines required to meet minimum density","scope":"MAIN","isExternal":false},{"key":"common-java:InsufficientLineCoverage","repo":"common-java","name":"Lines should have sufficient coverage by tests","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.","mdDesc":"An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.","severity":"MAJOR","status":"DEPRECATED","isTemplate":false,"tags":[],"sysTags":["bad-practice"],"lang":"java","langName":"Java","params":[{"key":"minimumLineCoverageRatio","defaultValue":"65","type":"FLOAT"}],"defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"2min","effortToFixDescription":"number of lines under the coverage threshold","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"2min","type":"CODE_SMELL","defaultRemFnType":"LINEAR","defaultRemFnGapMultiplier":"2min","remFnType":"LINEAR","remFnGapMultiplier":"2min","remFnOverloaded":false,"gapDescription":"number of lines under the coverage threshold","scope":"MAIN","isExternal":false},{"key":"common-java:SkippedUnitTests","repo":"common-java","name":"Skipped unit tests should be either removed or fixed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.","mdDesc":"Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.","severity":"MAJOR","status":"DEPRECATED","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"10min","effortToFixDescription":"number of skipped tests","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"10min","type":"CODE_SMELL","defaultRemFnType":"LINEAR","defaultRemFnGapMultiplier":"10min","remFnType":"LINEAR","remFnGapMultiplier":"10min","remFnOverloaded":false,"gapDescription":"number of skipped tests","scope":"MAIN","isExternal":false},{"key":"java:S1130","repo":"java","name":"\"throws\" declarations should not be superfluous","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAn exception in a \u003ccode\u003ethrows\u003c/code\u003e declaration in Java is superfluous if it is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e listed multiple times \u003c/li\u003e\n  \u003cli\u003e a subclass of another listed exception \u003c/li\u003e\n  \u003cli\u003e completely unnecessary because the declared exception type cannot actually be thrown \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid foo() throws MyException, MyException {}  // Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThe rule will not raise any issue for exceptions that cannot be thrown from the method body:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e in overriding and implementation methods \u003c/li\u003e\n  \u003cli\u003e in interface \u003ccode\u003edefault\u003c/code\u003e methods \u003c/li\u003e\n  \u003cli\u003e in non-private methods that only \u003ccode\u003ethrow\u003c/code\u003e, have empty bodies, or a single return statement. \u003c/li\u003e\n  \u003cli\u003e in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper\n  JavaDoc \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAlso, the rule won’t raise issues on \u003ccode\u003eRuntimeException\u003c/code\u003e, or one of its descendants, because explicating runtime exceptions which could\nbe thrown can ultimately help the method’s users, and can even be considered as good practice.\u003c/p\u003e\n\u003cpre\u003e\nclass A extends B {\n  @Override\n  void doSomething() throws IOException {\n    compute(a);\n  }\n\n  public void foo() throws IOException {}\n\n  public void qix() throws MyRuntimeException {}\n\n  protected void bar() throws IOException {\n    throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n  }\n\n  Object foobar(String s) throws IOException {\n    return null;\n  }\n\n  /**\n   * @throws IOException Overriding classes may throw this exception if they print values into a file\n   */\n  protected void print() throws IOException { // no issue, method is overridable and the exception has proper javadoc\n    System.out.println(\"foo\");\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAn exception in a \u003ccode\u003ethrows\u003c/code\u003e declaration in Java is superfluous if it is:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e listed multiple times \u003c/li\u003e\n  \u003cli\u003e a subclass of another listed exception \u003c/li\u003e\n  \u003cli\u003e completely unnecessary because the declared exception type cannot actually be thrown \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid foo() throws MyException, MyException {}  // Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThe rule will not raise any issue for exceptions that cannot be thrown from the method body:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e in overriding and implementation methods \u003c/li\u003e\n  \u003cli\u003e in interface \u003ccode\u003edefault\u003c/code\u003e methods \u003c/li\u003e\n  \u003cli\u003e in non-private methods that only \u003ccode\u003ethrow\u003c/code\u003e, have empty bodies, or a single return statement. \u003c/li\u003e\n  \u003cli\u003e in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper\n  JavaDoc \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAlso, the rule won’t raise issues on \u003ccode\u003eRuntimeException\u003c/code\u003e, or one of its descendants, because explicating runtime exceptions which could\nbe thrown can ultimately help the method’s users, and can even be considered as good practice.\u003c/p\u003e\n\u003cpre\u003e\nclass A extends B {\n  @Override\n  void doSomething() throws IOException {\n    compute(a);\n  }\n\n  public void foo() throws IOException {}\n\n  public void qix() throws MyRuntimeException {}\n\n  protected void bar() throws IOException {\n    throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n  }\n\n  Object foobar(String s) throws IOException {\n    return null;\n  }\n\n  /**\n   * @throws IOException Overriding classes may throw this exception if they print values into a file\n   */\n  protected void print() throws IOException { // no issue, method is overridable and the exception has proper javadoc\n    System.out.println(\"foo\");\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy","error-handling","redundant","unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:RedundantThrowsDeclarationCheck"]}},{"key":"java:S1132","repo":"java","name":"Strings literals should be placed on the left side when checking for equality","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIt is preferable to place string literals on the left-hand side of an \u003ccode\u003eequals()\u003c/code\u003e or \u003ccode\u003eequalsIgnoreCase()\u003c/code\u003e method call.\u003c/p\u003e\n\u003cp\u003eThis prevents null pointer exceptions from being raised, as a string literal can never be null by definition.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString myString \u003d null;\n\nSystem.out.println(\"Equal? \" + myString.equals(\"foo\"));                        // Noncompliant; will raise a NPE\nSystem.out.println(\"Equal? \" + (myString !\u003d null \u0026amp;\u0026amp; myString.equals(\"foo\")));  // Noncompliant; null check could be removed\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nSystem.out.println(\"Equal?\" + \"foo\".equals(myString));                         // properly deals with the null case\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIt is preferable to place string literals on the left-hand side of an \u003ccode\u003eequals()\u003c/code\u003e or \u003ccode\u003eequalsIgnoreCase()\u003c/code\u003e method call.\u003c/p\u003e\n\u003cp\u003eThis prevents null pointer exceptions from being raised, as a string literal can never be null by definition.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString myString \u003d null;\n\nSystem.out.println(\"Equal? \" + myString.equals(\"foo\"));                        // Noncompliant; will raise a NPE\nSystem.out.println(\"Equal? \" + (myString !\u003d null \u0026amp;\u0026amp; myString.equals(\"foo\")));  // Noncompliant; null check could be removed\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nSystem.out.println(\"Equal?\" + \"foo\".equals(myString));                         // properly deals with the null case\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1132"]}},{"key":"java:S1133","repo":"java","name":"Deprecated code should be removed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThis rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThis rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n\u003c/pre\u003e","severity":"INFO","status":"READY","isTemplate":false,"tags":[],"sysTags":["obsolete"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1133"]}},{"key":"java:S1134","repo":"java","name":"Track uses of \"FIXME\" tags","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003eFIXME\u003c/code\u003e tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\u003c/p\u003e\n\u003cp\u003eSometimes the developer will not have the time or will simply forget to get back to that tag.\u003c/p\u003e\n\u003cp\u003eThis rule is meant to track those tags and to ensure that they do not go unnoticed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546.html\"\u003eMITRE, CWE-546\u003c/a\u003e - Suspicious Comment \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003eFIXME\u003c/code\u003e tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.\u003c/p\u003e\n\u003cp\u003eSometimes the developer will not have the time or will simply forget to get back to that tag.\u003c/p\u003e\n\u003cp\u003eThis rule is meant to track those tags and to ensure that they do not go unnoticed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546.html\"\u003eMITRE, CWE-546\u003c/a\u003e - Suspicious Comment \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cwe"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"0min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"0min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"0min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"0min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1134"]}},{"key":"java:S1135","repo":"java","name":"Track uses of \"TODO\" tags","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003eTODO\u003c/code\u003e tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\u003c/p\u003e\n\u003cp\u003eSometimes the developer will not have the time or will simply forget to get back to that tag.\u003c/p\u003e\n\u003cp\u003eThis rule is meant to track those tags and to ensure that they do not go unnoticed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid doSomething() {\n  // TODO\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546.html\"\u003eMITRE, CWE-546\u003c/a\u003e - Suspicious Comment \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003eTODO\u003c/code\u003e tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.\u003c/p\u003e\n\u003cp\u003eSometimes the developer will not have the time or will simply forget to get back to that tag.\u003c/p\u003e\n\u003cp\u003eThis rule is meant to track those tags and to ensure that they do not go unnoticed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid doSomething() {\n  // TODO\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/546.html\"\u003eMITRE, CWE-546\u003c/a\u003e - Suspicious Comment \u003c/li\u003e\n\u003c/ul\u003e","severity":"INFO","status":"READY","isTemplate":false,"tags":[],"sysTags":["cwe"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"0min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"0min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"0min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"0min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1135"]}},{"key":"java:S1258","repo":"java","name":"Classes and enums with private members should have a constructor","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eNon-abstract classes and enums with non-\u003ccode\u003estatic\u003c/code\u003e, \u003ccode\u003eprivate\u003c/code\u003e members should explicitly initialize those members, either in a\nconstructor or with a default value.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass A { // Noncompliant\n  private int field;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field \u003d field;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Class implementing a Builder Pattern (name ending with \"Builder\"). \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/tutorial/index.html\"\u003eJava EE\u003c/a\u003e class annotated with:\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/annotation/ManagedBean.html\"\u003eManagedBean\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/ejb/MessageDriven.html\"\u003eMessageDriven\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/ejb/Singleton.html\"\u003eSingleton\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/ejb/Stateful.html\"\u003eStateful\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/ejb/Stateless.html\"\u003eStateless\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/jws/WebService.html\"\u003eWebService\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebFilter.html\"\u003eWebFilter\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebServlet.html\"\u003eWebServlet\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Class and field annotated with:\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://codehaus-plexus.github.io/plexus-containers/plexus-component-annotations/index.html\"\u003ePlexus Component Annotations\u003c/a\u003e\n      \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://maven.apache.org/developers/mojo-api-specification.html\"\u003eMaven Mojo\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Field annotated with:\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html\"\u003eResource\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/ejb/EJB.html\"\u003eEJB\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/inject/Inject.html\"\u003eInject\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca\n      href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html\"\u003eAutowired\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eNon-abstract classes and enums with non-\u003ccode\u003estatic\u003c/code\u003e, \u003ccode\u003eprivate\u003c/code\u003e members should explicitly initialize those members, either in a\nconstructor or with a default value.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass A { // Noncompliant\n  private int field;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field \u003d field;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Class implementing a Builder Pattern (name ending with \"Builder\"). \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/tutorial/index.html\"\u003eJava EE\u003c/a\u003e class annotated with:\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/annotation/ManagedBean.html\"\u003eManagedBean\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/ejb/MessageDriven.html\"\u003eMessageDriven\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/ejb/Singleton.html\"\u003eSingleton\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/ejb/Stateful.html\"\u003eStateful\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/ejb/Stateless.html\"\u003eStateless\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/jws/WebService.html\"\u003eWebService\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebFilter.html\"\u003eWebFilter\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebServlet.html\"\u003eWebServlet\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Class and field annotated with:\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://codehaus-plexus.github.io/plexus-containers/plexus-component-annotations/index.html\"\u003ePlexus Component Annotations\u003c/a\u003e\n      \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://maven.apache.org/developers/mojo-api-specification.html\"\u003eMaven Mojo\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Field annotated with:\n    \u003cul\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html\"\u003eResource\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/ejb/EJB.html\"\u003eEJB\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javaee/7/api/javax/inject/Inject.html\"\u003eInject\u003c/a\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ca\n      href\u003d\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html\"\u003eAutowired\u003c/a\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1258"]}},{"key":"java:S2221","repo":"java","name":"\"Exception\" should not be caught when not required by called methods","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eCatching \u003ccode\u003eException\u003c/code\u003e seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,\nboth checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime\nexceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed\nin the \u003ccode\u003ecatch\u003c/code\u003e clause.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue if \u003ccode\u003eException\u003c/code\u003e is caught when it is not explicitly thrown by a method in the \u003ccode\u003etry\u003c/code\u003e block.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException\n} catch (Exception e) { // Noncompliant\n  // log exception ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {\n  // log exception ...\n}\n\u003c/pre\u003e\n\u003cp\u003eor if runtime exceptions should not be caught:\u003c/p\u003e\n\u003cpre\u003e\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {\n  // log exception ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/396.html\"\u003eMITRE, CWE-396\u003c/a\u003e - Declaration of Catch for Generic Exception \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eCatching \u003ccode\u003eException\u003c/code\u003e seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,\nboth checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime\nexceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed\nin the \u003ccode\u003ecatch\u003c/code\u003e clause.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue if \u003ccode\u003eException\u003c/code\u003e is caught when it is not explicitly thrown by a method in the \u003ccode\u003etry\u003c/code\u003e block.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException\n} catch (Exception e) { // Noncompliant\n  // log exception ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {\n  // log exception ...\n}\n\u003c/pre\u003e\n\u003cp\u003eor if runtime exceptions should not be caught:\u003c/p\u003e\n\u003cpre\u003e\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {\n  // log exception ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/396.html\"\u003eMITRE, CWE-396\u003c/a\u003e - Declaration of Catch for Generic Exception \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cwe","error-handling"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2221"]}},{"key":"java:S2589","repo":"java","name":"Boolean expressions should not be gratuitous","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIf a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\na \u003d true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b \u0026amp;\u0026amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\na \u003d true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/571.html\"\u003eMITRE, CWE-571\u003c/a\u003e - Expression is Always True \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/570.html\"\u003eMITRE, CWE-570\u003c/a\u003e - Expression is Always False \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eIf a boolean expression doesn’t change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer’s intent, then it’s a bug and the expression should be fixed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\na \u003d true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b \u0026amp;\u0026amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\na \u003d true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/571.html\"\u003eMITRE, CWE-571\u003c/a\u003e - Expression is Always True \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/570.html\"\u003eMITRE, CWE-570\u003c/a\u003e - Expression is Always False \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe","redundant","suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2589"]}},{"key":"java:S3437","repo":"java","name":"Value-based objects should not be serialized","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAccording to the documentation,\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eA program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization…​\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFor example (credit to Brian Goetz), imagine Foo is a value-based class:\u003c/p\u003e\n\u003cpre\u003e\nFoo[] arr \u003d new Foo[2];\narr[0] \u003d new Foo(0);\narr[1] \u003d new Foo(0);\n\u003c/pre\u003e\n\u003cp\u003eSerialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:\u003c/p\u003e\n\u003cpre\u003e\nFoo[] arr \u003d new Foo[2];\narr[0] \u003d new Foo(0);\narr[1] \u003d arr[0];\n\u003c/pre\u003e\n\u003cp\u003eSerialization promises that on deserialization of \u003ccode\u003earr\u003c/code\u003e, elements 0 and 1 \u003cstrong\u003ewill\u003c/strong\u003e be aliased.\u003c/p\u003e\n\u003cp\u003eWhile these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true\nvalue types are introduced in the language.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003eSerializable\u003c/code\u003e class defines a non-transient, non-static field field whose type is a known serializable\nvalue-based class. Known serializable value-based classes are: all the classes in the \u003ccode\u003ejava.time\u003c/code\u003e package except \u003ccode\u003eClock\u003c/code\u003e; the\ndate classes for alternate calendars: \u003ccode\u003eHijrahDate\u003c/code\u003e, \u003ccode\u003eJapaneseDate\u003c/code\u003e, \u003ccode\u003eMinguoDate\u003c/code\u003e, \u003ccode\u003eThaiBuddhistDate\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass implements Serializable {\n  private HijrahDate date;  // Noncompliant; mark this transient\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass implements Serializable {\n  private transient HijrahDate date;\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\"\u003eValue-based classes\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eAccording to the documentation,\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eA program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization…​\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eFor example (credit to Brian Goetz), imagine Foo is a value-based class:\u003c/p\u003e\n\u003cpre\u003e\nFoo[] arr \u003d new Foo[2];\narr[0] \u003d new Foo(0);\narr[1] \u003d new Foo(0);\n\u003c/pre\u003e\n\u003cp\u003eSerialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:\u003c/p\u003e\n\u003cpre\u003e\nFoo[] arr \u003d new Foo[2];\narr[0] \u003d new Foo(0);\narr[1] \u003d arr[0];\n\u003c/pre\u003e\n\u003cp\u003eSerialization promises that on deserialization of \u003ccode\u003earr\u003c/code\u003e, elements 0 and 1 \u003cstrong\u003ewill\u003c/strong\u003e be aliased.\u003c/p\u003e\n\u003cp\u003eWhile these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true\nvalue types are introduced in the language.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003eSerializable\u003c/code\u003e class defines a non-transient, non-static field field whose type is a known serializable\nvalue-based class. Known serializable value-based classes are: all the classes in the \u003ccode\u003ejava.time\u003c/code\u003e package except \u003ccode\u003eClock\u003c/code\u003e; the\ndate classes for alternate calendars: \u003ccode\u003eHijrahDate\u003c/code\u003e, \u003ccode\u003eJapaneseDate\u003c/code\u003e, \u003ccode\u003eMinguoDate\u003c/code\u003e, \u003ccode\u003eThaiBuddhistDate\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass implements Serializable {\n  private HijrahDate date;  // Noncompliant; mark this transient\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass implements Serializable {\n  private transient HijrahDate date;\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\"\u003eValue-based classes\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8","lock-in","serialization"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3437"]}},{"key":"java:S3553","repo":"java","name":"\"Optional\" should not be used for parameters","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe Java language authors have been quite frank that \u003ccode\u003eOptional\u003c/code\u003e was intended for use only as a return type, as a way to convey that a\nmethod may or may not return a value.\u003c/p\u003e\n\u003cp\u003eAnd for that, it’s valuable but using \u003ccode\u003eOptional\u003c/code\u003e on the input side increases the work you have to do in the method without really\nincreasing the value. With an \u003ccode\u003eOptional\u003c/code\u003e parameter, you go from having 2 possible inputs: null and not-null, to three: null,\nnon-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are\noptional, and there’s really no reason to have \u003ccode\u003eOptional\u003c/code\u003e parameters.\u003c/p\u003e\n\u003cp\u003eThe rule also checks for Guava’s \u003ccode\u003eOptional\u003c/code\u003e, as it was the inspiration for the JDK \u003ccode\u003eOptional\u003c/code\u003e. Although it is different in\nsome aspects (serialization, being recommended for use as collection elements), using it as a parameter type causes exactly the same problems as for\nJDK \u003ccode\u003eOptional\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic String sayHello(Optional\u0026lt;String\u0026gt; name) {  // Noncompliant\n  if (name \u003d\u003d null || !name.isPresent()) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic String sayHello(String name) {\n  if (name \u003d\u003d null) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe Java language authors have been quite frank that \u003ccode\u003eOptional\u003c/code\u003e was intended for use only as a return type, as a way to convey that a\nmethod may or may not return a value.\u003c/p\u003e\n\u003cp\u003eAnd for that, it’s valuable but using \u003ccode\u003eOptional\u003c/code\u003e on the input side increases the work you have to do in the method without really\nincreasing the value. With an \u003ccode\u003eOptional\u003c/code\u003e parameter, you go from having 2 possible inputs: null and not-null, to three: null,\nnon-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are\noptional, and there’s really no reason to have \u003ccode\u003eOptional\u003c/code\u003e parameters.\u003c/p\u003e\n\u003cp\u003eThe rule also checks for Guava’s \u003ccode\u003eOptional\u003c/code\u003e, as it was the inspiration for the JDK \u003ccode\u003eOptional\u003c/code\u003e. Although it is different in\nsome aspects (serialization, being recommended for use as collection elements), using it as a parameter type causes exactly the same problems as for\nJDK \u003ccode\u003eOptional\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic String sayHello(Optional\u0026lt;String\u0026gt; name) {  // Noncompliant\n  if (name \u003d\u003d null || !name.isPresent()) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic String sayHello(String name) {\n  if (name \u003d\u003d null) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3553"]}},{"key":"java:S3688","repo":"java","name":"Track uses of disallowed classes","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThis rule allows banning certain classes.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eGiven parameters:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e className:java.lang.String \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nString name;  // Noncompliant\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThis rule allows banning certain classes.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eGiven parameters:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e className:java.lang.String \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nString name;  // Noncompliant\n\u003c/pre\u003e","severity":"INFO","status":"READY","isTemplate":true,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[{"key":"className","htmlDesc":"Fully qualified name of the forbidden class. Use a regex to forbid a package.","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"0min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"0min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"0min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"0min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3688"]}},{"key":"java:S4524","repo":"java","name":"\"default\" clauses should be last","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003eswitch\u003c/code\u003e can contain a \u003ccode\u003edefault\u003c/code\u003e clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.\u003c/p\u003e\n\u003cp\u003eFor readability purpose, to help a developer to quickly find the default behavior of a \u003ccode\u003eswitch\u003c/code\u003e statement, it is recommended to put the\n\u003ccode\u003edefault\u003c/code\u003e clause at the end of the \u003ccode\u003eswitch\u003c/code\u003e statement. This rule raises an issue if the \u003ccode\u003edefault\u003c/code\u003e clause is not the\nlast one of the \u003ccode\u003eswitch\u003c/code\u003e\u0027s cases.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  default: // default clause should be the last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003eswitch\u003c/code\u003e can contain a \u003ccode\u003edefault\u003c/code\u003e clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.\u003c/p\u003e\n\u003cp\u003eFor readability purpose, to help a developer to quickly find the default behavior of a \u003ccode\u003eswitch\u003c/code\u003e statement, it is recommended to put the\n\u003ccode\u003edefault\u003c/code\u003e clause at the end of the \u003ccode\u003eswitch\u003c/code\u003e statement. This rule raises an issue if the \u003ccode\u003edefault\u003c/code\u003e clause is not the\nlast one of the \u003ccode\u003eswitch\u003c/code\u003e\u0027s cases.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  default: // default clause should be the last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4524"]}},{"key":"java:S5612","repo":"java","name":"Lambdas should not have too many lines","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eLambdas (introduced with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class or method.\nBut those lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly\nbecome unreadable.\u003c/p\u003e","mdDesc":"\u003cp\u003eLambdas (introduced with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class or method.\nBut those lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly\nbecome unreadable.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[{"key":"Max","htmlDesc":"Maximum allowed lines in a lambda","defaultValue":"10","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5612"]}},{"key":"java:S5738","repo":"java","name":"\"@Deprecated\" code marked for removal should never be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eJava 9 introduced a flag for the \u003ccode\u003e@Deprecated\u003c/code\u003e annotation, which allows to explicitly say if the deprecated code is planned to be\nremoved at some point or not. This is done using \u003ccode\u003eforRemoval\u003dtrue\u003c/code\u003e as annotation parameter. The javadoc of the annotation explicitly\nmention the following:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eIf true, it means that this API element is earmarked for removal in a future release.\u003c/p\u003e\n  \u003cp\u003eIf false, the API element is deprecated, but there is currently no intention to remove it in a future release.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWhile usually deprecated classes, interfaces, and their deprecated members should be avoided rather than used, inherited or extended, those already\nmarked for removal are much more sensitive to causing trouble in your code soon. Consequently, any usage of such deprecated code should be avoided or\nremoved.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n/**\n * @deprecated As of release 1.3, replaced by {@link #Fee}. Will be dropped with release 1.4.\n */\n@Deprecated(forRemoval\u003dtrue)\npublic class Foo { ... }\n\npublic class Bar {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated(forRemoval\u003dtrue)\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n\n  /**\n   * @deprecated As of release 1.14 due to poor performances.\n   */\n  @Deprecated(forRemoval\u003dfalse)\n  public void doTheOtherThing() { ... }\n}\n\npublic class Qix extends Bar {\n  @Override\n  public void doTheThing() { ... } // Noncompliant; don\u0027t override a deprecated method marked for removal\n}\n\npublic class Bar extends Foo {  // Noncompliant; Foo is deprecated and will be removed\n\n  public void myMethod() {\n    Bar bar \u003d new Bar();  // okay; the class isn\u0027t deprecated\n    bar.doTheThing();  // Noncompliant; doTheThing method is deprecated and will be removed\n\n    bar.doTheOtherThing(); // Okay; deprecated, but not marked for removal\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/477.html\"\u003eMITRE, CWE-477\u003c/a\u003e - Use of Obsolete Functions \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/6TdGBQ\"\u003eCERT, MET02-J.\u003c/a\u003e - Do not use deprecated or obsolete classes or methods \u003c/li\u003e\n  \u003cli\u003e RSPEC-1874 for standard deprecation use \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eJava 9 introduced a flag for the \u003ccode\u003e@Deprecated\u003c/code\u003e annotation, which allows to explicitly say if the deprecated code is planned to be\nremoved at some point or not. This is done using \u003ccode\u003eforRemoval\u003dtrue\u003c/code\u003e as annotation parameter. The javadoc of the annotation explicitly\nmention the following:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eIf true, it means that this API element is earmarked for removal in a future release.\u003c/p\u003e\n  \u003cp\u003eIf false, the API element is deprecated, but there is currently no intention to remove it in a future release.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eWhile usually deprecated classes, interfaces, and their deprecated members should be avoided rather than used, inherited or extended, those already\nmarked for removal are much more sensitive to causing trouble in your code soon. Consequently, any usage of such deprecated code should be avoided or\nremoved.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n/**\n * @deprecated As of release 1.3, replaced by {@link #Fee}. Will be dropped with release 1.4.\n */\n@Deprecated(forRemoval\u003dtrue)\npublic class Foo { ... }\n\npublic class Bar {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated(forRemoval\u003dtrue)\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n\n  /**\n   * @deprecated As of release 1.14 due to poor performances.\n   */\n  @Deprecated(forRemoval\u003dfalse)\n  public void doTheOtherThing() { ... }\n}\n\npublic class Qix extends Bar {\n  @Override\n  public void doTheThing() { ... } // Noncompliant; don\u0027t override a deprecated method marked for removal\n}\n\npublic class Bar extends Foo {  // Noncompliant; Foo is deprecated and will be removed\n\n  public void myMethod() {\n    Bar bar \u003d new Bar();  // okay; the class isn\u0027t deprecated\n    bar.doTheThing();  // Noncompliant; doTheThing method is deprecated and will be removed\n\n    bar.doTheOtherThing(); // Okay; deprecated, but not marked for removal\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/477.html\"\u003eMITRE, CWE-477\u003c/a\u003e - Use of Obsolete Functions \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/6TdGBQ\"\u003eCERT, MET02-J.\u003c/a\u003e - Do not use deprecated or obsolete classes or methods \u003c/li\u003e\n  \u003cli\u003e RSPEC-1874 for standard deprecation use \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe","obsolete"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5738"]}},{"key":"java:S5853","repo":"java","name":"Consecutive AssertJ \"assertThat\" statements should be chained","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAssertJ assertions methods targeting the same object can be chained instead of using multiple \u003ccode\u003eassertThat\u003c/code\u003e. It avoids duplication and\nincreases the clarity of the code.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when multiples \u003ccode\u003eassertThat\u003c/code\u003e target the same tested value.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nassertThat(someList).hasSize(3);\nassertThat(someList).contains(\"something\");\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nassertThat(someList)\n  .hasSize(3)\n  .contains(\"something\");\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAssertJ assertions methods targeting the same object can be chained instead of using multiple \u003ccode\u003eassertThat\u003c/code\u003e. It avoids duplication and\nincreases the clarity of the code.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when multiples \u003ccode\u003eassertThat\u003c/code\u003e target the same tested value.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nassertThat(someList).hasSize(3);\nassertThat(someList).contains(\"something\");\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nassertThat(someList)\n  .hasSize(3)\n  .contains(\"something\");\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["assertj","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5853"]}},{"key":"java:S5854","repo":"java","name":"Regexes containing characters subject to normalization should use the CANON_EQ flag","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eCharacters like \u003ccode\u003e\u0027é\u0027\u003c/code\u003e can be expressed either as a single code point or as a cluster of the letter \u003ccode\u003e\u0027e\u0027\u003c/code\u003e and a combining\naccent mark. Without the \u003ccode\u003eCANON_EQ\u003c/code\u003e flag, a regex will only match a string in which the characters are expressed in the same way.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString s \u003d \"e\\u0300\";\nPattern p \u003d Pattern.compile(\"é|ë|è\"); // Noncompliant\nSystem.out.println(p.matcher(s).replaceAll(\"e\")); // print \u0027è\u0027\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString s \u003d \"e\\u0300\";\nPattern p \u003d Pattern.compile(\"é|ë|è\", Pattern.CANON_EQ);\nSystem.out.println(p.matcher(s).replaceAll(\"e\")); // print \u0027e\u0027\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eCharacters like \u003ccode\u003e\u0027é\u0027\u003c/code\u003e can be expressed either as a single code point or as a cluster of the letter \u003ccode\u003e\u0027e\u0027\u003c/code\u003e and a combining\naccent mark. Without the \u003ccode\u003eCANON_EQ\u003c/code\u003e flag, a regex will only match a string in which the characters are expressed in the same way.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString s \u003d \"e\\u0300\";\nPattern p \u003d Pattern.compile(\"é|ë|è\"); // Noncompliant\nSystem.out.println(p.matcher(s).replaceAll(\"e\")); // print \u0027è\u0027\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString s \u003d \"e\\u0300\";\nPattern p \u003d Pattern.compile(\"é|ë|è\", Pattern.CANON_EQ);\nSystem.out.println(p.matcher(s).replaceAll(\"e\")); // print \u0027e\u0027\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["regex"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"3min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"3min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"3min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"3min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5854"]}},{"key":"java:S5857","repo":"java","name":"Character classes should be preferred over reluctant quantifiers in regular expressions","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUsing reluctant quantifiers (also known as lazy or non-greedy quantifiers) in patterns can often lead to needless backtracking, making the regex\nneedlessly inefficient and potentially vulnerable to \u003ca href\u003d\"https://www.regular-expressions.info/catastrophic.html\"\u003ecatastrophic backtracking\u003c/a\u003e.\nParticularly when using \u003ccode\u003e.*?\u003c/code\u003e or \u003ccode\u003e.+?\u003c/code\u003e to match anything up to some terminating character, it is usually a better idea to\ninstead use a greedily or possessively quantified negated character class containing the terminating character. For example \u003ccode\u003e\u0026lt;.+?\u0026gt;\u003c/code\u003e\nshould be replaced with \u003ccode\u003e\u0026lt;[^\u0026gt;]++\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n\u0026lt;.+?\u0026gt;\n\".*?\"\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n\u0026lt;[^\u0026gt;]++\u0026gt;\n\"[^\"]*+\"\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;[^\u0026gt;]+\u0026gt;\n\"[^\"]*\"\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule only applies in cases where the reluctant quantifier can easily be replaced with a negated character class. That means the repetition has\nto be terminated by a single character or character class. Patterns such as the following, where the alternatives without reluctant quantifiers are\nmore complicated, are therefore not subject to this rule:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;!--.*?--\u0026gt;\n/\\*.*?\\*/\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eUsing reluctant quantifiers (also known as lazy or non-greedy quantifiers) in patterns can often lead to needless backtracking, making the regex\nneedlessly inefficient and potentially vulnerable to \u003ca href\u003d\"https://www.regular-expressions.info/catastrophic.html\"\u003ecatastrophic backtracking\u003c/a\u003e.\nParticularly when using \u003ccode\u003e.*?\u003c/code\u003e or \u003ccode\u003e.+?\u003c/code\u003e to match anything up to some terminating character, it is usually a better idea to\ninstead use a greedily or possessively quantified negated character class containing the terminating character. For example \u003ccode\u003e\u0026lt;.+?\u0026gt;\u003c/code\u003e\nshould be replaced with \u003ccode\u003e\u0026lt;[^\u0026gt;]++\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n\u0026lt;.+?\u0026gt;\n\".*?\"\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n\u0026lt;[^\u0026gt;]++\u0026gt;\n\"[^\"]*+\"\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;[^\u0026gt;]+\u0026gt;\n\"[^\"]*\"\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule only applies in cases where the reluctant quantifier can easily be replaced with a negated character class. That means the repetition has\nto be terminated by a single character or character class. Patterns such as the following, where the alternatives without reluctant quantifiers are\nmore complicated, are therefore not subject to this rule:\u003c/p\u003e\n\u003cpre\u003e\n\u0026lt;!--.*?--\u0026gt;\n/\\*.*?\\*/\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["regex"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"3min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"3min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"3min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"3min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5857"]}},{"key":"java:S5970","repo":"java","name":"Spring\u0027s ModelAndViewAssert assertions should be used instead of other assertions","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe Spring framework comes with dedicated classes to help writing better and simpler unit tests. In particular, when testing applications built on\ntop of Spring MVC, it is recommended to use Spring’s \u003ccode\u003eModelAndViewAssert\u003c/code\u003e assertions class, instead of manually testing MVC’s\nproperties.\u003c/p\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when\u0026nbsp;Spring’s \u003ccode\u003eModelAndViewAssert\u003c/code\u003e assertions should be used instead of manual testing.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nModelAndView mav \u003d getMyModelAndView();\n\nAssert.assertEquals(\"register\", mav.getViewName());\nAssert.assertTrue((Boolean) mav.getModelMap().get(\"myAttribute\"));\nAssert.assertFalse((Boolean) mav.getModelMap().get(\"myAttribute\"));\nAssert.assertEquals(myObject, mav.getModelMap().get(\"myAttribute\"));\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nModelAndView mav \u003d getMyModelAndView();\n\nModelAndViewAssert.assertViewName(mav, \"register\");\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", Boolean.TRUE);\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", Boolean.FALSE);\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", myObject);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html#unit-testing-spring-mvc\"\u003eUnit Testing\n  Spring MVC\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/test/web/ModelAndViewAssert.html\"\u003eModelAndViewAssert Javadoc\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThe Spring framework comes with dedicated classes to help writing better and simpler unit tests. In particular, when testing applications built on\ntop of Spring MVC, it is recommended to use Spring’s \u003ccode\u003eModelAndViewAssert\u003c/code\u003e assertions class, instead of manually testing MVC’s\nproperties.\u003c/p\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when\u0026nbsp;Spring’s \u003ccode\u003eModelAndViewAssert\u003c/code\u003e assertions should be used instead of manual testing.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nModelAndView mav \u003d getMyModelAndView();\n\nAssert.assertEquals(\"register\", mav.getViewName());\nAssert.assertTrue((Boolean) mav.getModelMap().get(\"myAttribute\"));\nAssert.assertFalse((Boolean) mav.getModelMap().get(\"myAttribute\"));\nAssert.assertEquals(myObject, mav.getModelMap().get(\"myAttribute\"));\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nModelAndView mav \u003d getMyModelAndView();\n\nModelAndViewAssert.assertViewName(mav, \"register\");\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", Boolean.TRUE);\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", Boolean.FALSE);\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", myObject);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html#unit-testing-spring-mvc\"\u003eUnit Testing\n  Spring MVC\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca\n  href\u003d\"https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/test/web/ModelAndViewAssert.html\"\u003eModelAndViewAssert Javadoc\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["spring","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5970"]}},{"key":"java:S5973","repo":"java","name":"Tests should be stable","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUnstable / flaky tests are tests which sometimes pass and sometimes fail, without any code change. Obviously, they slow down developments when\nengineers have to rerun failed tests. However the real problem is that you can’t completely trust these tests, they might fail for many different\nreasons and you don’t know if any of them will happen in production.\u003c/p\u003e\n\u003cp\u003eSome tools, such as TestNG, enable developers to automatically retry flaky tests. This might be ok as a temporary solution, but it should\ndefinitely be fixed. The more flaky tests you add, the more chances there are for a bug to arrive in production.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the annotation \u003ccode\u003eorg.testng.annotations.Test\u003c/code\u003e is given a \u003ccode\u003esuccessPercentage\u003c/code\u003e argument with a\nvalue lower than \u003ccode\u003e100\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nimport org.testng.annotations.Test;\n\npublic class PercentageTest {\n    @Test(successPercentage \u003d 80, invocationCount \u003d 10)  // Noncompliant. The test is allowed to fail 2 times.\n    public void flakyTest() {\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://testng.org/doc/documentation-main.html#annotations\"\u003eTestNG documentation - Annotations\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://engineering.atspotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/\"\u003eTest Flakiness -\n  Methods for identifying and dealing with flaky tests\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eUnstable / flaky tests are tests which sometimes pass and sometimes fail, without any code change. Obviously, they slow down developments when\nengineers have to rerun failed tests. However the real problem is that you can’t completely trust these tests, they might fail for many different\nreasons and you don’t know if any of them will happen in production.\u003c/p\u003e\n\u003cp\u003eSome tools, such as TestNG, enable developers to automatically retry flaky tests. This might be ok as a temporary solution, but it should\ndefinitely be fixed. The more flaky tests you add, the more chances there are for a bug to arrive in production.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the annotation \u003ccode\u003eorg.testng.annotations.Test\u003c/code\u003e is given a \u003ccode\u003esuccessPercentage\u003c/code\u003e argument with a\nvalue lower than \u003ccode\u003e100\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nimport org.testng.annotations.Test;\n\npublic class PercentageTest {\n    @Test(successPercentage \u003d 80, invocationCount \u003d 10)  // Noncompliant. The test is allowed to fail 2 times.\n    public void flakyTest() {\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://testng.org/doc/documentation-main.html#annotations\"\u003eTestNG documentation - Annotations\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://engineering.atspotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/\"\u003eTest Flakiness -\n  Methods for identifying and dealing with flaky tests\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["design","tests","unpredictable"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5973"]}},{"key":"java:S5976","repo":"java","name":"Similar tests should be grouped in a single Parameterized test","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen multiple tests differ only by a few hardcoded values they should be refactored as a single \"parameterized\" test. This reduces the chances of\nadding a bug and makes them more readable. Parameterized tests exist in most test frameworks (JUnit, TestNG, etc…​).\u003c/p\u003e\n\u003cp\u003eThe right balance needs of course to be found. There is no point in factorizing test methods when the parameterized version is a lot more complex\nthan initial tests.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when at least 3 tests could be refactored as one parameterized test with less than 4 parameters. Only test methods which\nhave at least one duplicated statement are considered.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003ewith JUnit 5\u003c/p\u003e\n\u003cpre\u003e\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class AppTest\n{\n    @Test\n    void test_not_null1() {  // Noncompliant. The 3 following tests differ only by one hardcoded number.\n      setupTax();\n      assertNotNull(getTax(1));\n    }\n\n    @Test\n    void test_not_null2() {\n      setupTax();\n      assertNotNull(getTax(2));\n    }\n\n    @Test\n    void test_not_nul3l() {\n      setupTax();\n      assertNotNull(getTax(3));\n    }\n\n    @Test\n    void testLevel1() {  // Noncompliant. The 3 following tests differ only by a few hardcoded numbers.\n        setLevel(1);\n        runGame();\n        assertEquals(playerHealth(), 100);\n    }\n\n    @Test\n    void testLevel2() {  // Similar test\n        setLevel(2);\n        runGame();\n        assertEquals(playerHealth(), 200);\n    }\n\n    @Test\n    void testLevel3() {  // Similar test\n        setLevel(3);\n        runGame();\n        assertEquals(playerHealth(), 300);\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n\npublic class AppTest\n{\n\n   @ParameterizedTest\n   @ValueSource(ints \u003d {1, 2, 3})\n   void test_not_null(int arg) {\n     setupTax();\n     assertNotNull(getTax(arg));\n   }\n\n    @ParameterizedTest\n    @CsvSource({\n        \"1, 100\",\n        \"2, 200\",\n        \"3, 300\",\n    })\n    void testLevels(int level, int health) {\n        setLevel(level);\n        runGame();\n        assertEquals(playerHealth(), health);\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://phauer.com/2019/modern-best-practices-testing-java/#use-parameterized-tests\"\u003eModern Best Practices for Testing in Java -\n  Philipp Hauer\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests\"\u003eJUnit 5 documentation - Parameterized tests\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.testwithspring.com/lesson/writing-parameterized-tests-with-junit-4/\"\u003eWriting Parameterized Tests With JUnit 4\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://testng.org/doc/documentation-main.html#parameters\"\u003eTestNG documentation - Parameters\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eWhen multiple tests differ only by a few hardcoded values they should be refactored as a single \"parameterized\" test. This reduces the chances of\nadding a bug and makes them more readable. Parameterized tests exist in most test frameworks (JUnit, TestNG, etc…​).\u003c/p\u003e\n\u003cp\u003eThe right balance needs of course to be found. There is no point in factorizing test methods when the parameterized version is a lot more complex\nthan initial tests.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when at least 3 tests could be refactored as one parameterized test with less than 4 parameters. Only test methods which\nhave at least one duplicated statement are considered.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003ewith JUnit 5\u003c/p\u003e\n\u003cpre\u003e\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class AppTest\n{\n    @Test\n    void test_not_null1() {  // Noncompliant. The 3 following tests differ only by one hardcoded number.\n      setupTax();\n      assertNotNull(getTax(1));\n    }\n\n    @Test\n    void test_not_null2() {\n      setupTax();\n      assertNotNull(getTax(2));\n    }\n\n    @Test\n    void test_not_nul3l() {\n      setupTax();\n      assertNotNull(getTax(3));\n    }\n\n    @Test\n    void testLevel1() {  // Noncompliant. The 3 following tests differ only by a few hardcoded numbers.\n        setLevel(1);\n        runGame();\n        assertEquals(playerHealth(), 100);\n    }\n\n    @Test\n    void testLevel2() {  // Similar test\n        setLevel(2);\n        runGame();\n        assertEquals(playerHealth(), 200);\n    }\n\n    @Test\n    void testLevel3() {  // Similar test\n        setLevel(3);\n        runGame();\n        assertEquals(playerHealth(), 300);\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n\npublic class AppTest\n{\n\n   @ParameterizedTest\n   @ValueSource(ints \u003d {1, 2, 3})\n   void test_not_null(int arg) {\n     setupTax();\n     assertNotNull(getTax(arg));\n   }\n\n    @ParameterizedTest\n    @CsvSource({\n        \"1, 100\",\n        \"2, 200\",\n        \"3, 300\",\n    })\n    void testLevels(int level, int health) {\n        setLevel(level);\n        runGame();\n        assertEquals(playerHealth(), health);\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://phauer.com/2019/modern-best-practices-testing-java/#use-parameterized-tests\"\u003eModern Best Practices for Testing in Java -\n  Philipp Hauer\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests\"\u003eJUnit 5 documentation - Parameterized tests\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.testwithspring.com/lesson/writing-parameterized-tests-with-junit-4/\"\u003eWriting Parameterized Tests With JUnit 4\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://testng.org/doc/documentation-main.html#parameters\"\u003eTestNG documentation - Parameters\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice","clumsy","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5976"]}},{"key":"java:S5977","repo":"java","name":"Tests should use fixed data instead of randomized data","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eTests should always:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Make sure that production code behaves as expected, including edge cases. \u003c/li\u003e\n  \u003cli\u003e Be easy to debug, i.e. understandable and reproducible. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUsing random values in tests will not necessarily check edge cases, and it will make test logs a lot harder to read. It is better to use easily\nreadable hardcoded values. If this makes your code bigger you can use helper functions.\u003c/p\u003e\n\u003cp\u003eThere is one valid use case for random data in tests: when testing every value would make tests impractically slow. In this case the best you can\ndo is use random to test every value on the long run. You should however make sure that random values are logged so that you can reproduce failures.\nSome libraries exist to make all this easier. You can for example use property-based testing libraries such as \u003ca\nhref\u003d\"https://github.com/jlink/jqwik\"\u003ejqwik\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003enew Random()\u003c/code\u003e or \u003ccode\u003eUUID.randomUUID()\u003c/code\u003e are called in test code.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint userAge \u003d new Random().nextInt(42);  // Noncompliant\nUUID userID \u003d UUID.randomUUID(); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint userAge \u003d 31;\nUUID userID \u003d UUID.fromString(\"00000000-000-0000-0000-000000000001\");\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://phauer.com/2019/modern-best-practices-testing-java/#use-fixed-data-instead-of-randomized-data\"\u003eModern Best Practices for\n  Testing in Java - Philipp Hauer\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://jqwik.net/\"\u003eJqwik test engine\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eTests should always:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Make sure that production code behaves as expected, including edge cases. \u003c/li\u003e\n  \u003cli\u003e Be easy to debug, i.e. understandable and reproducible. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eUsing random values in tests will not necessarily check edge cases, and it will make test logs a lot harder to read. It is better to use easily\nreadable hardcoded values. If this makes your code bigger you can use helper functions.\u003c/p\u003e\n\u003cp\u003eThere is one valid use case for random data in tests: when testing every value would make tests impractically slow. In this case the best you can\ndo is use random to test every value on the long run. You should however make sure that random values are logged so that you can reproduce failures.\nSome libraries exist to make all this easier. You can for example use property-based testing libraries such as \u003ca\nhref\u003d\"https://github.com/jlink/jqwik\"\u003ejqwik\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003enew Random()\u003c/code\u003e or \u003ccode\u003eUUID.randomUUID()\u003c/code\u003e are called in test code.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint userAge \u003d new Random().nextInt(42);  // Noncompliant\nUUID userID \u003d UUID.randomUUID(); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint userAge \u003d 31;\nUUID userID \u003d UUID.fromString(\"00000000-000-0000-0000-000000000001\");\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://phauer.com/2019/modern-best-practices-testing-java/#use-fixed-data-instead-of-randomized-data\"\u003eModern Best Practices for\n  Testing in Java - Philipp Hauer\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://jqwik.net/\"\u003eJqwik test engine\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing","design","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5977"]}},{"key":"java:S864","repo":"java","name":"Limited dependence should be placed on operator precedence","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements. However, this does not mean that parentheses should be gratuitously added around every operation.\u003c/p\u003e\n\u003cp\u003eThis rule raises issues when \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e are used in combination, when assignment and equality or relational\noperators are used in together in a condition, and for other operator combinations according to the following table:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.667%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e-\u003c/code\u003e, \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e/\u003c/code\u003e, \u003ccode\u003e%\u003c/code\u003e\u003c/th\u003e\n      \u003cth\u003e\u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/code\u003e\u003c/th\u003e\n      \u003cth\u003e\u003ccode\u003e\u0026amp;\u003c/code\u003e\u003c/th\u003e\n      \u003cth\u003e\u003ccode\u003e^\u003c/code\u003e\u003c/th\u003e\n      \u003cth\u003e\u003ccode\u003e|\u003c/code\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e-\u003c/code\u003e, \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e/\u003c/code\u003e, \u003ccode\u003e%\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u0026amp;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e^\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e|\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThis rule also raises an issue when the \"true\" or \"false\" expression of a ternary operator is not trivial and not wrapped inside parentheses.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nx \u003d a + b - c;\nx \u003d a + 1 \u0026lt;\u0026lt; b;  // Noncompliant\ny \u003d a \u003d\u003d b ? a * 2 : a + b;  // Noncompliant\n\nif ( a \u0026gt; b || c \u0026lt; d || a \u003d\u003d d) {...}\nif ( a \u0026gt; b \u0026amp;\u0026amp; c \u0026lt; d || a \u003d\u003d b) {...}  // Noncompliant\nif (a \u003d f(b,c) \u003d\u003d 1) { ... } // Noncompliant; \u003d\u003d evaluated first\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nx \u003d a + b - c;\nx \u003d (a + 1) \u0026lt;\u0026lt; b;\ny \u003d a \u003d\u003d b ? (a * 2) : (a + b);\n\nif ( a \u0026gt; b || c \u0026lt; d || a \u003d\u003d d) {...}\nif ( (a \u0026gt; b \u0026amp;\u0026amp; c \u0026lt; d) || a \u003d\u003d b) {...}\nif ( (a \u003d f(b,c)) \u003d\u003d 1) { ... }\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/YdYxBQ\"\u003eCERT, EXP00-C.\u003c/a\u003e - Use parentheses for precedence of operation \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/ZzZGBQ\"\u003eCERT, EXP53-J.\u003c/a\u003e - Use parentheses for precedence of operation \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/783.html\"\u003eMITRE, CWE-783\u003c/a\u003e - Operator Precedence Logic Error \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThe rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements. However, this does not mean that parentheses should be gratuitously added around every operation.\u003c/p\u003e\n\u003cp\u003eThis rule raises issues when \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e and \u003ccode\u003e||\u003c/code\u003e are used in combination, when assignment and equality or relational\noperators are used in together in a condition, and for other operator combinations according to the following table:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.6666%;\"\u003e\n    \u003ccol style\u003d\"width: 16.667%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003e\u003c/th\u003e\n      \u003cth\u003e\u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e-\u003c/code\u003e, \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e/\u003c/code\u003e, \u003ccode\u003e%\u003c/code\u003e\u003c/th\u003e\n      \u003cth\u003e\u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/code\u003e\u003c/th\u003e\n      \u003cth\u003e\u003ccode\u003e\u0026amp;\u003c/code\u003e\u003c/th\u003e\n      \u003cth\u003e\u003ccode\u003e^\u003c/code\u003e\u003c/th\u003e\n      \u003cth\u003e\u003ccode\u003e|\u003c/code\u003e\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e-\u003c/code\u003e, \u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e/\u003c/code\u003e, \u003ccode\u003e%\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u0026lt;\u0026lt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u003c/code\u003e, \u003ccode\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e\u0026amp;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e^\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e|\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ex\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eThis rule also raises an issue when the \"true\" or \"false\" expression of a ternary operator is not trivial and not wrapped inside parentheses.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nx \u003d a + b - c;\nx \u003d a + 1 \u0026lt;\u0026lt; b;  // Noncompliant\ny \u003d a \u003d\u003d b ? a * 2 : a + b;  // Noncompliant\n\nif ( a \u0026gt; b || c \u0026lt; d || a \u003d\u003d d) {...}\nif ( a \u0026gt; b \u0026amp;\u0026amp; c \u0026lt; d || a \u003d\u003d b) {...}  // Noncompliant\nif (a \u003d f(b,c) \u003d\u003d 1) { ... } // Noncompliant; \u003d\u003d evaluated first\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nx \u003d a + b - c;\nx \u003d (a + 1) \u0026lt;\u0026lt; b;\ny \u003d a \u003d\u003d b ? (a * 2) : (a + b);\n\nif ( a \u0026gt; b || c \u0026lt; d || a \u003d\u003d d) {...}\nif ( (a \u0026gt; b \u0026amp;\u0026amp; c \u0026lt; d) || a \u003d\u003d b) {...}\nif ( (a \u003d f(b,c)) \u003d\u003d 1) { ... }\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/YdYxBQ\"\u003eCERT, EXP00-C.\u003c/a\u003e - Use parentheses for precedence of operation \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/ZzZGBQ\"\u003eCERT, EXP53-J.\u003c/a\u003e - Use parentheses for precedence of operation \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/783.html\"\u003eMITRE, CWE-783\u003c/a\u003e - Operator Precedence Logic Error \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S864"]}},{"key":"java:S1144","repo":"java","name":"Unused \"private\" methods should be removed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003eprivate\u003c/code\u003e methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\u003c/p\u003e\n\u003cp\u003eNote that this rule does not take reflection into account, which means that issues will be raised on \u003ccode\u003eprivate\u003c/code\u003e methods that are only\naccessed using the reflection API.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo \u003d new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo \u003d new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule doesn’t raise any issue on annotated methods.\u003c/p\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003eprivate\u003c/code\u003e methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\u003c/p\u003e\n\u003cp\u003eNote that this rule does not take reflection into account, which means that issues will be raised on \u003ccode\u003eprivate\u003c/code\u003e methods that are only\naccessed using the reflection API.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo \u003d new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo \u003d new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule doesn’t raise any issue on annotated methods.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:UnusedPrivateMethod"]}},{"key":"java:S1147","repo":"java","name":"Exit methods should not be called","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eCalling \u003ccode\u003eSystem.exit(int status)\u003c/code\u003e or \u003ccode\u003eRutime.getRuntime().exit(int status)\u003c/code\u003e calls the shutdown hooks and shuts downs the\nentire Java virtual machine. Calling \u003ccode\u003eRuntime.getRuntime().halt(int)\u003c/code\u003e does an immediate shutdown, without calling the shutdown hooks, and\nskipping finalization.\u003c/p\u003e\n\u003cp\u003eEach of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them\nshould be called from applications running in a J2EE container.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThese methods are ignored inside \u003ccode\u003emain\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/382.html\"\u003eMITRE, CWE-382\u003c/a\u003e - Use of System.exit() \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/7zZGBQ\"\u003eCERT, ERR09-J.\u003c/a\u003e - Do not allow untrusted code to terminate the JVM \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eCalling \u003ccode\u003eSystem.exit(int status)\u003c/code\u003e or \u003ccode\u003eRutime.getRuntime().exit(int status)\u003c/code\u003e calls the shutdown hooks and shuts downs the\nentire Java virtual machine. Calling \u003ccode\u003eRuntime.getRuntime().halt(int)\u003c/code\u003e does an immediate shutdown, without calling the shutdown hooks, and\nskipping finalization.\u003c/p\u003e\n\u003cp\u003eEach of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them\nshould be called from applications running in a J2EE container.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThese methods are ignored inside \u003ccode\u003emain\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/382.html\"\u003eMITRE, CWE-382\u003c/a\u003e - Use of System.exit() \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/7zZGBQ\"\u003eCERT, ERR09-J.\u003c/a\u003e - Do not allow untrusted code to terminate the JVM \u003c/li\u003e\n\u003c/ul\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe","suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1147"]}},{"key":"java:S2234","repo":"java","name":"Parameters should be passed in the correct order","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when\nthe names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead\nto unexpected results.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor \u003d 15;\n  int dividend \u003d 5;\n\n  double result \u003d divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor \u003d 15;\n  int dividend \u003d 5;\n\n  double result \u003d divide(divisor, dividend);\n  //...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when\nthe names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead\nto unexpected results.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor \u003d 15;\n  int dividend \u003d 5;\n\n  double result \u003d divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor \u003d 15;\n  int dividend \u003d 5;\n\n  double result \u003d divide(divisor, dividend);\n  //...\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2234"]}},{"key":"java:S2235","repo":"java","name":"IllegalMonitorStateException should not be caught","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAccording to Oracle Javadoc:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003e\u003ccode\u003eIllegalMonitorStateException\u003c/code\u003e is thrown when a thread has attempted to wait on an object’s monitor or to notify other threads waiting\n  on an object’s monitor without owning the specified monitor.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIn other words, this exception can be thrown only in case of bad design because \u003ccode\u003eObject.wait(...)\u003c/code\u003e, \u003ccode\u003eObject.notify()\u003c/code\u003e and\n\u003ccode\u003eObject.notifyAll()\u003c/code\u003e methods should never be called on an object whose monitor is not held.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAccording to Oracle Javadoc:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003e\u003ccode\u003eIllegalMonitorStateException\u003c/code\u003e is thrown when a thread has attempted to wait on an object’s monitor or to notify other threads waiting\n  on an object’s monitor without owning the specified monitor.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIn other words, this exception can be thrown only in case of bad design because \u003ccode\u003eObject.wait(...)\u003c/code\u003e, \u003ccode\u003eObject.notify()\u003c/code\u003e and\n\u003ccode\u003eObject.notifyAll()\u003c/code\u003e methods should never be called on an object whose monitor is not held.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["error-handling","multi-threading"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2235"]}},{"key":"java:S2479","repo":"java","name":"Whitespace and control characters in literals should be explicit","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eNon-encoded control characters and whitespace characters are often injected in the source code because of a bad manipulation. They are either\ninvisible or difficult to recognize, which can result in bugs when the string is not what the developer expects. If you actually need to use a control\ncharacter use their encoded version (ex: ASCII \u003ccode\u003e\\n,\\t,\u003c/code\u003e…​ or Unicode \u003ccode\u003eU+000D, U+0009,\u003c/code\u003e…​).\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the following characters are seen in a literal string:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/ASCII#Control_characters\"\u003eASCII control character\u003c/a\u003e. (character index \u0026lt; 32 or \u003d 127) \u003c/li\u003e\n  \u003cli\u003e Unicode \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace\"\u003ewhitespace characters\u003c/a\u003e. \u003c/li\u003e\n  \u003cli\u003e Unicode \u003ca href\u003d\"https://en.wikipedia.org/wiki/C0_and_C1_control_codes\"\u003eC0 control characters\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Unicode characters \u003ccode\u003eU+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNo issue will be raised on the simple space character. Unicode \u003ccode\u003eU+0020\u003c/code\u003e, ASCII 32.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString tabInside \u003d \"A\tB\";  // Noncompliant, contains a tabulation\nString zeroWidthSpaceInside \u003d \"foo​bar\"; // Noncompliant, it contains a U+200B character inside\nchar tab \u003d \u0027\t\u0027;\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString tabInside \u003d \"A\\tB\";  // Compliant, uses escaped value\nString zeroWidthSpaceInside \u003d \"foo\\u200Bbar\";  // Compliant, uses escaped value\nchar tab \u003d \u0027\\t\u0027;\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eNon-encoded control characters and whitespace characters are often injected in the source code because of a bad manipulation. They are either\ninvisible or difficult to recognize, which can result in bugs when the string is not what the developer expects. If you actually need to use a control\ncharacter use their encoded version (ex: ASCII \u003ccode\u003e\\n,\\t,\u003c/code\u003e…​ or Unicode \u003ccode\u003eU+000D, U+0009,\u003c/code\u003e…​).\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the following characters are seen in a literal string:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/ASCII#Control_characters\"\u003eASCII control character\u003c/a\u003e. (character index \u0026lt; 32 or \u003d 127) \u003c/li\u003e\n  \u003cli\u003e Unicode \u003ca href\u003d\"https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace\"\u003ewhitespace characters\u003c/a\u003e. \u003c/li\u003e\n  \u003cli\u003e Unicode \u003ca href\u003d\"https://en.wikipedia.org/wiki/C0_and_C1_control_codes\"\u003eC0 control characters\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Unicode characters \u003ccode\u003eU+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eNo issue will be raised on the simple space character. Unicode \u003ccode\u003eU+0020\u003c/code\u003e, ASCII 32.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString tabInside \u003d \"A\tB\";  // Noncompliant, contains a tabulation\nString zeroWidthSpaceInside \u003d \"foo​bar\"; // Noncompliant, it contains a U+200B character inside\nchar tab \u003d \u0027\t\u0027;\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString tabInside \u003d \"A\\tB\";  // Compliant, uses escaped value\nString zeroWidthSpaceInside \u003d \"foo\\u200Bbar\";  // Compliant, uses escaped value\nchar tab \u003d \u0027\\t\u0027;\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[{"key":"allowTabsInTextBlocks","htmlDesc":"Allow tabs in text blocks","defaultValue":"false","type":"BOOLEAN"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2479"]}},{"key":"java:S5867","repo":"java","name":"Unicode-aware versions of character classes should be preferred","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen using POSIX classes like \u003ccode\u003e\\p{Alpha}\u003c/code\u003e without the \u003ccode\u003eUNICODE_CHARACTER_CLASS\u003c/code\u003e flag or when using hard-coded character\nclasses like \u003ccode\u003e\"[a-zA-Z]\"\u003c/code\u003e, letters outside of the ASCII range, such as umlauts, accented letters or letter from non-Latin languages, won’t\nbe matched. This may cause code to incorrectly handle input containing such letters.\u003c/p\u003e\n\u003cp\u003eTo correctly handle non-ASCII input, it is recommended to use Unicode classes like \u003ccode\u003e\\p{IsAlphabetic}\u003c/code\u003e. When using POSIX classes, Unicode\nsupport should be enabled by either passing \u003ccode\u003ePattern.UNICODE_CHARACTER_CLASS\u003c/code\u003e as a flag to \u003ccode\u003ePattern.compile\u003c/code\u003e or by using\n\u003ccode\u003e(?U)\u003c/code\u003e inside the regex.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nPattern.compile(\"[a-zA-Z]\");\nPattern.compile(\"\\\\p{Alpha}\");\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nPattern.compile(\"\\\\p{IsAlphabetic}\"); // matches all letters from all languages\nPattern.compile(\"\\\\p{IsLatin}\"); // matches latin letters, including umlauts and other non-ASCII variations\nPattern.compile(\"\\\\p{Alpha}\", Pattern.UNICODE_CHARACTER_CLASS);\nPattern.compile(\"(?U)\\\\p{Alpha}\");\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen using POSIX classes like \u003ccode\u003e\\p{Alpha}\u003c/code\u003e without the \u003ccode\u003eUNICODE_CHARACTER_CLASS\u003c/code\u003e flag or when using hard-coded character\nclasses like \u003ccode\u003e\"[a-zA-Z]\"\u003c/code\u003e, letters outside of the ASCII range, such as umlauts, accented letters or letter from non-Latin languages, won’t\nbe matched. This may cause code to incorrectly handle input containing such letters.\u003c/p\u003e\n\u003cp\u003eTo correctly handle non-ASCII input, it is recommended to use Unicode classes like \u003ccode\u003e\\p{IsAlphabetic}\u003c/code\u003e. When using POSIX classes, Unicode\nsupport should be enabled by either passing \u003ccode\u003ePattern.UNICODE_CHARACTER_CLASS\u003c/code\u003e as a flag to \u003ccode\u003ePattern.compile\u003c/code\u003e or by using\n\u003ccode\u003e(?U)\u003c/code\u003e inside the regex.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nPattern.compile(\"[a-zA-Z]\");\nPattern.compile(\"\\\\p{Alpha}\");\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nPattern.compile(\"\\\\p{IsAlphabetic}\"); // matches all letters from all languages\nPattern.compile(\"\\\\p{IsLatin}\"); // matches latin letters, including umlauts and other non-ASCII variations\nPattern.compile(\"\\\\p{Alpha}\", Pattern.UNICODE_CHARACTER_CLASS);\nPattern.compile(\"(?U)\\\\p{Alpha}\");\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["regex"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5867"]}},{"key":"java:S1141","repo":"java","name":"Try-catch blocks should not be nested","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eNesting \u003ccode\u003etry\u003c/code\u003e/\u003ccode\u003ecatch\u003c/code\u003e blocks severely impacts the readability of source code because it makes it too difficult to understand\nwhich block will catch which exception.\u003c/p\u003e","mdDesc":"\u003cp\u003eNesting \u003ccode\u003etry\u003c/code\u003e/\u003ccode\u003ecatch\u003c/code\u003e blocks severely impacts the readability of source code because it makes it too difficult to understand\nwhich block will catch which exception.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing","error-handling"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1141"]}},{"key":"java:S1142","repo":"java","name":"Methods should not have too many return statements","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eHaving too many return statements in a method increases the method’s essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the method.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default threshold of 3:\u003c/p\u003e\n\u003cpre\u003e\npublic boolean myMethod() { // Noncompliant; there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eHaving too many return statements in a method increases the method’s essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the method.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default threshold of 3:\u003c/p\u003e\n\u003cpre\u003e\npublic boolean myMethod() { // Noncompliant; there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"max","htmlDesc":"Maximum allowed return statements per method","defaultValue":"3","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1142"]}},{"key":"java:S1149","repo":"java","name":"Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eEarly classes of the Java API, such as \u003ccode\u003eVector\u003c/code\u003e, \u003ccode\u003eHashtable\u003c/code\u003e and \u003ccode\u003eStringBuffer\u003c/code\u003e, were synchronized to make them\nthread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.\u003c/p\u003e\n\u003cp\u003eIt is better to use their new unsynchronized replacements:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eArrayList\u003c/code\u003e or \u003ccode\u003eLinkedList\u003c/code\u003e instead of \u003ccode\u003eVector\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDeque\u003c/code\u003e instead of \u003ccode\u003eStack\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eHashMap\u003c/code\u003e instead of \u003ccode\u003eHashtable\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eStringBuilder\u003c/code\u003e instead of \u003ccode\u003eStringBuffer\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEven when used in synchronized context, you should think twice before using it, since it’s usage can be tricky. If you are confident the usage is\nlegitimate, you can safely ignore this warning.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nVector cats \u003d new Vector();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nArrayList cats \u003d new ArrayList();\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eUse of those synchronized classes is ignored in the signatures of overriding methods.\u003c/p\u003e\n\u003cpre\u003e\n@Override\npublic Vector getCats() {...}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eEarly classes of the Java API, such as \u003ccode\u003eVector\u003c/code\u003e, \u003ccode\u003eHashtable\u003c/code\u003e and \u003ccode\u003eStringBuffer\u003c/code\u003e, were synchronized to make them\nthread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.\u003c/p\u003e\n\u003cp\u003eIt is better to use their new unsynchronized replacements:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eArrayList\u003c/code\u003e or \u003ccode\u003eLinkedList\u003c/code\u003e instead of \u003ccode\u003eVector\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eDeque\u003c/code\u003e instead of \u003ccode\u003eStack\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eHashMap\u003c/code\u003e instead of \u003ccode\u003eHashtable\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eStringBuilder\u003c/code\u003e instead of \u003ccode\u003eStringBuffer\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEven when used in synchronized context, you should think twice before using it, since it’s usage can be tricky. If you are confident the usage is\nlegitimate, you can safely ignore this warning.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nVector cats \u003d new Vector();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nArrayList cats \u003d new ArrayList();\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eUse of those synchronized classes is ignored in the signatures of overriding methods.\u003c/p\u003e\n\u003cpre\u003e\n@Override\npublic Vector getCats() {...}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1149"]}},{"key":"java:S1264","repo":"java","name":"A \"while\" loop should be used instead of a \"for\" loop","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen only the condition expression is defined in a \u003ccode\u003efor\u003c/code\u003e loop, and the initialization and increment expressions are missing, a\n\u003ccode\u003ewhile\u003c/code\u003e loop should be used instead to increase readability.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfor (;condition;) { /*...*/ }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nwhile (condition) { /*...*/ }\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen only the condition expression is defined in a \u003ccode\u003efor\u003c/code\u003e loop, and the initialization and increment expressions are missing, a\n\u003ccode\u003ewhile\u003c/code\u003e loop should be used instead to increase readability.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfor (;condition;) { /*...*/ }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nwhile (condition) { /*...*/ }\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1264"]}},{"key":"java:S2112","repo":"java","name":"\"URL.hashCode\" and \"URL.equals\" should be avoided","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe \u003ccode\u003eequals\u003c/code\u003e and \u003ccode\u003ehashCode\u003c/code\u003e methods of \u003ccode\u003ejava.net.URL\u003c/code\u003e both may trigger a name service (usually DNS) lookup to\nresolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. \u003ccode\u003eURI\u003c/code\u003e on the other hand\nmakes no such calls and should be used instead unless the specific \u003ccode\u003eURL\u003c/code\u003e functionality is required.\u003c/p\u003e\n\u003cp\u003eIn general it is better to use the \u003ccode\u003eURI\u003c/code\u003e class until access to the resource is actually needed, at which point you can just convert the\n\u003ccode\u003eURI\u003c/code\u003e to a \u003ccode\u003eURL\u003c/code\u003e using \u003ccode\u003eURI.toURL()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule checks for uses of \u003ccode\u003eURL\u003c/code\u003e \u0027s in \u003ccode\u003eMap\u003c/code\u003e and \u003ccode\u003eSet\u003c/code\u003e , and for explicit calls to the \u003ccode\u003eequals\u003c/code\u003e and\n\u003ccode\u003ehashCode\u003c/code\u003e methods.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void checkUrl(URL url) {\n  Set\u0026lt;URL\u0026gt; sites \u003d new HashSet\u0026lt;URL\u0026gt;();  // Noncompliant\n\n  URL homepage \u003d new URL(\"http://sonarsource.com\");  // Compliant\n  if (homepage.equals(url)) { // Noncompliant\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void checkUrl(URL url) {\n  Set\u0026lt;URI\u0026gt; sites \u003d new HashSet\u0026lt;URI\u0026gt;();  // Compliant\n\n  URI homepage \u003d new URI(\"http://sonarsource.com\");  // Compliant\n  URI uri \u003d url.toURI();\n  if (homepage.equals(uri)) {  // Compliant\n    // ...\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe \u003ccode\u003eequals\u003c/code\u003e and \u003ccode\u003ehashCode\u003c/code\u003e methods of \u003ccode\u003ejava.net.URL\u003c/code\u003e both may trigger a name service (usually DNS) lookup to\nresolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. \u003ccode\u003eURI\u003c/code\u003e on the other hand\nmakes no such calls and should be used instead unless the specific \u003ccode\u003eURL\u003c/code\u003e functionality is required.\u003c/p\u003e\n\u003cp\u003eIn general it is better to use the \u003ccode\u003eURI\u003c/code\u003e class until access to the resource is actually needed, at which point you can just convert the\n\u003ccode\u003eURI\u003c/code\u003e to a \u003ccode\u003eURL\u003c/code\u003e using \u003ccode\u003eURI.toURL()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule checks for uses of \u003ccode\u003eURL\u003c/code\u003e \u0027s in \u003ccode\u003eMap\u003c/code\u003e and \u003ccode\u003eSet\u003c/code\u003e , and for explicit calls to the \u003ccode\u003eequals\u003c/code\u003e and\n\u003ccode\u003ehashCode\u003c/code\u003e methods.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void checkUrl(URL url) {\n  Set\u0026lt;URL\u0026gt; sites \u003d new HashSet\u0026lt;URL\u0026gt;();  // Noncompliant\n\n  URL homepage \u003d new URL(\"http://sonarsource.com\");  // Compliant\n  if (homepage.equals(url)) { // Noncompliant\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void checkUrl(URL url) {\n  Set\u0026lt;URI\u0026gt; sites \u003d new HashSet\u0026lt;URI\u0026gt;();  // Compliant\n\n  URI homepage \u003d new URI(\"http://sonarsource.com\");  // Compliant\n  URI uri \u003d url.toURI();\n  if (homepage.equals(uri)) {  // Compliant\n    // ...\n  }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2112"]}},{"key":"java:S2203","repo":"java","name":"\"collect\" should be used with \"Streams\" instead of \"list::add\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhile you can use either \u003ccode\u003eforEach(list::add)\u003c/code\u003e or \u003ccode\u003ecollect\u003c/code\u003e with a \u003ccode\u003eStream\u003c/code\u003e, \u003ccode\u003ecollect\u003c/code\u003e is by far the\nbetter choice because it’s automatically thread-safe and parallellizable.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; bookNames \u003d new ArrayList\u0026lt;\u0026gt;();\nbooks.stream().filter(book -\u0026gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .forEach(bookNames::add);  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; bookNames \u003d books.stream().filter(book -\u0026gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .collect(Collectors.toList());\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhile you can use either \u003ccode\u003eforEach(list::add)\u003c/code\u003e or \u003ccode\u003ecollect\u003c/code\u003e with a \u003ccode\u003eStream\u003c/code\u003e, \u003ccode\u003ecollect\u003c/code\u003e is by far the\nbetter choice because it’s automatically thread-safe and parallellizable.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; bookNames \u003d new ArrayList\u0026lt;\u0026gt;();\nbooks.stream().filter(book -\u0026gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .forEach(bookNames::add);  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; bookNames \u003d books.stream().filter(book -\u0026gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .collect(Collectors.toList());\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2203"]}},{"key":"java:S2232","repo":"java","name":"\"ResultSet.isLast()\" should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere are several reasons to avoid \u003ccode\u003eResultSet.isLast()\u003c/code\u003e. First, support for this method is optional for \u003ccode\u003eTYPE_FORWARD_ONLY\u003c/code\u003e\nresult sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear\non what should be returned when the \u003ccode\u003eResultSet\u003c/code\u003e is empty, so some drivers may return the opposite of what is expected.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nstmt.executeQuery(\"SELECT name, address FROM PERSON\");\nResultSet rs \u003d stmt.getResultSet();\nwhile (! rs.isLast()) { // Noncompliant\n  // process row\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nResultSet rs \u003d stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nwhile (rs.next()) {\n  // process row\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThere are several reasons to avoid \u003ccode\u003eResultSet.isLast()\u003c/code\u003e. First, support for this method is optional for \u003ccode\u003eTYPE_FORWARD_ONLY\u003c/code\u003e\nresult sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear\non what should be returned when the \u003ccode\u003eResultSet\u003c/code\u003e is empty, so some drivers may return the opposite of what is expected.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nstmt.executeQuery(\"SELECT name, address FROM PERSON\");\nResultSet rs \u003d stmt.getResultSet();\nwhile (! rs.isLast()) { // Noncompliant\n  // process row\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nResultSet rs \u003d stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nwhile (rs.next()) {\n  // process row\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance","pitfall","sql"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2232"]}},{"key":"java:S3776","repo":"java","name":"Cognitive Complexity of methods should not be too high","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eCognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"\u003eCognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eCognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.sonarsource.com/docs/CognitiveComplexity.pdf\"\u003eCognitive Complexity\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"Threshold","htmlDesc":"The maximum authorized complexity.","defaultValue":"15","type":"INTEGER"}],"defaultDebtRemFnType":"LINEAR_OFFSET","defaultDebtRemFnCoeff":"1min","defaultDebtRemFnOffset":"5min","effortToFixDescription":"per complexity point over the threshold","debtOverloaded":false,"debtRemFnType":"LINEAR_OFFSET","debtRemFnCoeff":"1min","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"LINEAR_OFFSET","defaultRemFnGapMultiplier":"1min","defaultRemFnBaseEffort":"5min","remFnType":"LINEAR_OFFSET","remFnGapMultiplier":"1min","remFnBaseEffort":"5min","remFnOverloaded":false,"gapDescription":"per complexity point over the threshold","scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3776"]}},{"key":"java:S5860","repo":"java","name":"Names of regular expressions named groups should be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhy use named groups only to never use any of them later on in the code?\u003c/p\u003e\n\u003cp\u003eThis rule raises issues every time named groups are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e defined but never called anywhere in the code through their name; \u003c/li\u003e\n  \u003cli\u003e defined but called elsewhere in the code by their number instead; \u003c/li\u003e\n  \u003cli\u003e referenced while not defined. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString date \u003d \"01/02\";\n\nPattern datePattern \u003d Pattern.compile(\"(?\u0026lt;month\u0026gt;[0-9]{2})/(?\u0026lt;year\u0026gt;[0-9]{2})\");\nMatcher dateMatcher \u003d datePattern.matcher(date);\n\nif (dateMatcher.matches()) {\n  checkValidity(dateMatcher.group(1), dateMatcher.group(2));  // Noncompliant - numbers instead of names of groups are used\n  checkValidity(dateMatcher.group(\"day\")); // Noncompliant - there is no group called \"day\"\n}\n\n// ...\n\nString score \u003d \"14:1\";\n\nPattern scorePattern \u003d Pattern.compile(\"(?\u0026lt;player1\u0026gt;[0-9]+):(?\u0026lt;player2\u0026gt;[0-9]+)\"); // Noncompliant - named groups are never used\nMatcher scoreMatcher \u003d scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(score);\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString date \u003d \"01/02\";\n\nPattern datePattern \u003d Pattern.compile(\"(?\u0026lt;month\u0026gt;[0-9]{2})/(?\u0026lt;year\u0026gt;[0-9]{2})\");\nMatcher dateMatcher \u003d datePattern.matcher(date);\n\nif (dateMatcher.matches()) {\n  checkValidity(dateMatcher.group(\"month\"), dateMatcher.group(\"year\"));\n}\n\n// ...\n\nString score \u003d \"14:1\";\n\nPattern scorePattern \u003d Pattern.compile(\"(?\u0026lt;player1\u0026gt;[0-9]+):(?\u0026lt;player2\u0026gt;[0-9]+)\");\nMatcher scoreMatcher \u003d scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(scoreMatcher.group(\"player1\"));\n  checkScore(scoreMatcher.group(\"player2\"));\n}\n\u003c/pre\u003e\n\u003cp\u003eOr, using dedicated variables instead of group names:\u003c/p\u003e\n\u003cpre\u003e\nString score \u003d \"14:1\";\n\nString player \u003d \"([0-9]+)\";\nString gameScore \u003d player + \":\" + player;\n\nPattern scorePattern \u003d Pattern.compile(gameScore);\nMatcher scoreMatcher \u003d scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(score);\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhy use named groups only to never use any of them later on in the code?\u003c/p\u003e\n\u003cp\u003eThis rule raises issues every time named groups are:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e defined but never called anywhere in the code through their name; \u003c/li\u003e\n  \u003cli\u003e defined but called elsewhere in the code by their number instead; \u003c/li\u003e\n  \u003cli\u003e referenced while not defined. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString date \u003d \"01/02\";\n\nPattern datePattern \u003d Pattern.compile(\"(?\u0026lt;month\u0026gt;[0-9]{2})/(?\u0026lt;year\u0026gt;[0-9]{2})\");\nMatcher dateMatcher \u003d datePattern.matcher(date);\n\nif (dateMatcher.matches()) {\n  checkValidity(dateMatcher.group(1), dateMatcher.group(2));  // Noncompliant - numbers instead of names of groups are used\n  checkValidity(dateMatcher.group(\"day\")); // Noncompliant - there is no group called \"day\"\n}\n\n// ...\n\nString score \u003d \"14:1\";\n\nPattern scorePattern \u003d Pattern.compile(\"(?\u0026lt;player1\u0026gt;[0-9]+):(?\u0026lt;player2\u0026gt;[0-9]+)\"); // Noncompliant - named groups are never used\nMatcher scoreMatcher \u003d scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(score);\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString date \u003d \"01/02\";\n\nPattern datePattern \u003d Pattern.compile(\"(?\u0026lt;month\u0026gt;[0-9]{2})/(?\u0026lt;year\u0026gt;[0-9]{2})\");\nMatcher dateMatcher \u003d datePattern.matcher(date);\n\nif (dateMatcher.matches()) {\n  checkValidity(dateMatcher.group(\"month\"), dateMatcher.group(\"year\"));\n}\n\n// ...\n\nString score \u003d \"14:1\";\n\nPattern scorePattern \u003d Pattern.compile(\"(?\u0026lt;player1\u0026gt;[0-9]+):(?\u0026lt;player2\u0026gt;[0-9]+)\");\nMatcher scoreMatcher \u003d scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(scoreMatcher.group(\"player1\"));\n  checkScore(scoreMatcher.group(\"player2\"));\n}\n\u003c/pre\u003e\n\u003cp\u003eOr, using dedicated variables instead of group names:\u003c/p\u003e\n\u003cpre\u003e\nString score \u003d \"14:1\";\n\nString player \u003d \"([0-9]+)\";\nString gameScore \u003d player + \":\" + player;\n\nPattern scorePattern \u003d Pattern.compile(gameScore);\nMatcher scoreMatcher \u003d scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(score);\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["regex"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5860"]}},{"key":"java:S5869","repo":"java","name":"Character classes in regular expressions should not contain the same character twice","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eCharacter classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this\nhas no effect.\u003c/p\u003e\n\u003cp\u003eThus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is\nintended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter\nmistake is trying to use a range like \u003ccode\u003e[0-99]\u003c/code\u003e to match numbers of up to two digits, when in fact it is equivalent to \u003ccode\u003e[0-9]\u003c/code\u003e.\nAnother common cause is forgetting to escape the \u003ccode\u003e-\u003c/code\u003e character, creating an unintended range that overlaps with other characters in the\ncharacter class.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nstr.matches(\"[0-99]\") // Noncompliant, this won\u0027t actually match strings with two digits\nstr.matches(\"[0-9.-_]\") // Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nstr.matches(\"[0-9]{1,2}\")\nstr.matches(\"[0-9.\\\\-_]\")\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eCharacter classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this\nhas no effect.\u003c/p\u003e\n\u003cp\u003eThus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is\nintended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter\nmistake is trying to use a range like \u003ccode\u003e[0-99]\u003c/code\u003e to match numbers of up to two digits, when in fact it is equivalent to \u003ccode\u003e[0-9]\u003c/code\u003e.\nAnother common cause is forgetting to escape the \u003ccode\u003e-\u003c/code\u003e character, creating an unintended range that overlaps with other characters in the\ncharacter class.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nstr.matches(\"[0-99]\") // Noncompliant, this won\u0027t actually match strings with two digits\nstr.matches(\"[0-9.-_]\") // Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nstr.matches(\"[0-9]{1,2}\")\nstr.matches(\"[0-9.\\\\-_]\")\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["regex"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5869"]}},{"key":"java:S881","repo":"java","name":"Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It can significantly impair the readability of the code. \u003c/li\u003e\n  \u003cli\u003e It introduces additional side effects into a statement, with the potential for undefined behavior. \u003c/li\u003e\n  \u003cli\u003e It is safer to use these operators in isolation from any other arithmetic operators. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nu8a \u003d ++u8b + u8c--;\nfoo \u003d bar++ / 4;\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eThe following sequence is clearer and therefore safer:\u003c/p\u003e\n\u003cpre\u003e\n++u8b;\nu8a \u003d u8b + u8c;\nu8c--;\nfoo \u003d bar / 4;\nbar++;\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/StYxBQ\"\u003eCERT, EXP30-C.\u003c/a\u003e - Do not depend on the order of evaluation for side effects \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/IXw-BQ\"\u003eCERT, EXP50-CPP.\u003c/a\u003e - Do not depend on the order of evaluation for side effects \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/NDdGBQ\"\u003eCERT, EXP05-J.\u003c/a\u003e - Do not follow a write by a subsequent write or read of the same\n  object within an expression \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThe use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It can significantly impair the readability of the code. \u003c/li\u003e\n  \u003cli\u003e It introduces additional side effects into a statement, with the potential for undefined behavior. \u003c/li\u003e\n  \u003cli\u003e It is safer to use these operators in isolation from any other arithmetic operators. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nu8a \u003d ++u8b + u8c--;\nfoo \u003d bar++ / 4;\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eThe following sequence is clearer and therefore safer:\u003c/p\u003e\n\u003cpre\u003e\n++u8b;\nu8a \u003d u8b + u8c;\nu8c--;\nfoo \u003d bar / 4;\nbar++;\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/StYxBQ\"\u003eCERT, EXP30-C.\u003c/a\u003e - Do not depend on the order of evaluation for side effects \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/IXw-BQ\"\u003eCERT, EXP50-CPP.\u003c/a\u003e - Do not depend on the order of evaluation for side effects \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/NDdGBQ\"\u003eCERT, EXP05-J.\u003c/a\u003e - Do not follow a write by a subsequent write or read of the same\n  object within an expression \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S881"]}},{"key":"java:NoSonar","repo":"java","name":"Track uses of \"NOSONAR\" comments","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAny issue to quality rule can be deactivated with the \u003ccode\u003eNOSONAR\u003c/code\u003e marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eNOSONAR\u003c/code\u003e is used.\u003c/p\u003e","mdDesc":"\u003cp\u003eAny issue to quality rule can be deactivated with the \u003ccode\u003eNOSONAR\u003c/code\u003e marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eNOSONAR\u003c/code\u003e is used.\u003c/p\u003e","severity":"MAJOR","status":"READY","internalKey":"S1291","isTemplate":false,"tags":[],"sysTags":["bad-practice"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:NoSonar"]}},{"key":"java:S1110","repo":"java","name":"Redundant pairs of parentheses should be removed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint x \u003d (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a \u0026amp;\u0026amp; ((x+y \u0026gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint x \u003d (y / 2 + 1);\n\nif (a \u0026amp;\u0026amp; (x+y \u0026gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint x \u003d (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a \u0026amp;\u0026amp; ((x+y \u0026gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint x \u003d (y / 2 + 1);\n\nif (a \u0026amp;\u0026amp; (x+y \u0026gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:UselessParenthesesCheck"]}},{"key":"java:S1113","repo":"java","name":"The Object.finalize() method should not be overridden","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe \u003ccode\u003eObject.finalize()\u003c/code\u003e method is called on an object by the garbage collector when it determines that there are no more references to\nthe object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be\nfew microseconds to few minutes later. So when system resources need to be disposed by an object, it’s better to not rely on this asynchronous\nmechanism to dispose them.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  ...\n  protected void finalize() {\n    releaseSomeResources();    // Noncompliant\n  }\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\"\u003eCERT, MET12-J.\u003c/a\u003e - Do not use finalizers \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThe \u003ccode\u003eObject.finalize()\u003c/code\u003e method is called on an object by the garbage collector when it determines that there are no more references to\nthe object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be\nfew microseconds to few minutes later. So when system resources need to be disposed by an object, it’s better to not rely on this asynchronous\nmechanism to dispose them.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  ...\n  protected void finalize() {\n    releaseSomeResources();    // Noncompliant\n  }\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\"\u003eCERT, MET12-J.\u003c/a\u003e - Do not use finalizers \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","unpredictable"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:ObjectFinalizeOverridenCheck"]}},{"key":"java:S1117","repo":"java","name":"Local variables should not shadow class fields","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eOverriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of\ncode. Further, it could lead maintainers to introduce bugs because they think they’re using one variable but are really using another.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField \u003d 0;\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes\"\u003eCERT, DCL01-C.\u003c/a\u003e - Do not reuse\n  variable names in subscopes \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes\"\u003eCERT, DCL51-J.\u003c/a\u003e - Do\n  not shadow or obscure identifiers in subscopes \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eOverriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of\ncode. Further, it could lead maintainers to introduce bugs because they think they’re using one variable but are really using another.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField \u003d 0;\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes\"\u003eCERT, DCL01-C.\u003c/a\u003e - Do not reuse\n  variable names in subscopes \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes\"\u003eCERT, DCL51-J.\u003c/a\u003e - Do\n  not shadow or obscure identifiers in subscopes \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","pitfall","suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:HiddenFieldCheck"]}},{"key":"java:S1118","repo":"java","name":"Utility classes should not have public constructors","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUtility classes, which are collections of \u003ccode\u003estatic\u003c/code\u003e members, are not meant to be instantiated. Even abstract utility classes, which can\nbe extended, should not have public constructors.\u003c/p\u003e\n\u003cp\u003eJava adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor\nshould be defined.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen class contains \u003ccode\u003epublic static void main(String[] args)\u003c/code\u003e method it is not considered as utility class and will be ignored by this\nrule.\u003c/p\u003e","mdDesc":"\u003cp\u003eUtility classes, which are collections of \u003ccode\u003estatic\u003c/code\u003e members, are not meant to be instantiated. Even abstract utility classes, which can\nbe extended, should not have public constructors.\u003c/p\u003e\n\u003cp\u003eJava adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor\nshould be defined.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen class contains \u003ccode\u003epublic static void main(String[] args)\u003c/code\u003e method it is not considered as utility class and will be ignored by this\nrule.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["design"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1118"]}},{"key":"java:S1119","repo":"java","name":"Labels should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eLabels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to\nfollow, which reduces the code’s readability.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint matrix[][] \u003d {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row \u003d 0; row \u0026lt; matrix.length; row++) {   // Non-Compliant\n  for (int col \u003d 0; col \u0026lt; matrix[row].length; col++) {\n    if (col \u003d\u003d row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nfor (int row \u003d 1; row \u0026lt; matrix.length; row++) {          // Compliant\n  for (int col \u003d 0; col \u0026lt; row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eLabels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to\nfollow, which reduces the code’s readability.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint matrix[][] \u003d {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row \u003d 0; row \u0026lt; matrix.length; row++) {   // Non-Compliant\n  for (int col \u003d 0; col \u0026lt; matrix[row].length; col++) {\n    if (col \u003d\u003d row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nfor (int row \u003d 1; row \u0026lt; matrix.length; row++) {          // Compliant\n  for (int col \u003d 0; col \u0026lt; row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:LabelsShouldNotBeUsedCheck"]}},{"key":"java:S1479","repo":"java","name":"\"switch\" statements should not have too many \"case\" clauses","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen \u003ccode\u003eswitch\u003c/code\u003e statements have large sets of \u003ccode\u003ecase\u003c/code\u003e clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule ignores \u003ccode\u003eswitch\u003c/code\u003ees over \u003ccode\u003eEnum\u003c/code\u003es and empty, fall-through cases.\u003c/p\u003e","mdDesc":"\u003cp\u003eWhen \u003ccode\u003eswitch\u003c/code\u003e statements have large sets of \u003ccode\u003ecase\u003c/code\u003e clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule ignores \u003ccode\u003eswitch\u003c/code\u003ees over \u003ccode\u003eEnum\u003c/code\u003es and empty, fall-through cases.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"maximum","htmlDesc":"Maximum number of case","defaultValue":"30","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1479"]}},{"key":"java:S1596","repo":"java","name":"\"Collections.EMPTY_LIST\", \"EMPTY_MAP\", and \"EMPTY_SET\" should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eSince the introduction of generics in Java 5, the use of generic types such as \u003ccode\u003eList\u0026lt;String\u0026gt;\u003c/code\u003e is recommended over the use of raw\nones such as \u003ccode\u003eList\u003c/code\u003e. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old \u003ccode\u003eEMPTY_...\u003c/code\u003e\nfields of the \u003ccode\u003eCollections\u003c/code\u003e class return raw types, whereas the newer \u003ccode\u003eempty...()\u003c/code\u003e methods return generic ones.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; collection1 \u003d Collections.EMPTY_LIST;  // Noncompliant\nMap\u0026lt;String, String\u0026gt; collection2 \u003d Collections.EMPTY_MAP;  // Noncompliant\nSet\u0026lt;String\u0026gt; collection3 \u003d Collections.EMPTY_SET;  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; collection1 \u003d Collections.emptyList();\nMap\u0026lt;String, String\u0026gt; collection2 \u003d Collections.emptyMap();\nSet\u0026lt;String\u0026gt; collection3 \u003d Collections.emptySet();\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eSince the introduction of generics in Java 5, the use of generic types such as \u003ccode\u003eList\u0026lt;String\u0026gt;\u003c/code\u003e is recommended over the use of raw\nones such as \u003ccode\u003eList\u003c/code\u003e. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old \u003ccode\u003eEMPTY_...\u003c/code\u003e\nfields of the \u003ccode\u003eCollections\u003c/code\u003e class return raw types, whereas the newer \u003ccode\u003eempty...()\u003c/code\u003e methods return generic ones.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; collection1 \u003d Collections.EMPTY_LIST;  // Noncompliant\nMap\u0026lt;String, String\u0026gt; collection2 \u003d Collections.EMPTY_MAP;  // Noncompliant\nSet\u0026lt;String\u0026gt; collection3 \u003d Collections.EMPTY_SET;  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; collection1 \u003d Collections.emptyList();\nMap\u0026lt;String, String\u0026gt; collection2 \u003d Collections.emptyMap();\nSet\u0026lt;String\u0026gt; collection3 \u003d Collections.emptySet();\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["obsolete","pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1596"]}},{"key":"java:S1598","repo":"java","name":"Package declaration should match source file directory","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eBy convention, a Java class\u0027 physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java\nfile located at \u003ccode\u003e\"src/org/bar/Foo.java\"\u003c/code\u003e should have a package of \u003ccode\u003e\"org.bar\"\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eUnfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the \"Foo.java\" class part of the\n\"com.apple\" package, which could degrade the maintainability of both the class and its application.\u003c/p\u003e\n\u003cp\u003eSimilarly, source placed in a folder with dots in its name instead of having the equivalent folder structure will compile but cause problems at run\ntime. For instance, code with a package declaration of \u003ccode\u003eorg.foo.bar\u003c/code\u003e that is placed in \u003ccode\u003eorg/foo.bar\u003c/code\u003e will compile, but the\nclassloader will always search for the class into the folder based on package structure, and will consequently expect sources to be in\n\u003ccode\u003eorg/foo/bar\u003c/code\u003e folder. \u003ccode\u003efoo.bar\u003c/code\u003e is therefore not a proper folder name for sources.\u003c/p\u003e","mdDesc":"\u003cp\u003eBy convention, a Java class\u0027 physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java\nfile located at \u003ccode\u003e\"src/org/bar/Foo.java\"\u003c/code\u003e should have a package of \u003ccode\u003e\"org.bar\"\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eUnfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the \"Foo.java\" class part of the\n\"com.apple\" package, which could degrade the maintainability of both the class and its application.\u003c/p\u003e\n\u003cp\u003eSimilarly, source placed in a folder with dots in its name instead of having the equivalent folder structure will compile but cause problems at run\ntime. For instance, code with a package declaration of \u003ccode\u003eorg.foo.bar\u003c/code\u003e that is placed in \u003ccode\u003eorg/foo.bar\u003c/code\u003e will compile, but the\nclassloader will always search for the class into the folder based on package structure, and will consequently expect sources to be in\n\u003ccode\u003eorg/foo/bar\u003c/code\u003e folder. \u003ccode\u003efoo.bar\u003c/code\u003e is therefore not a proper folder name for sources.\u003c/p\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1598"]}},{"key":"java:S2208","repo":"java","name":"Wildcard imports should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eBlindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eStatic imports are ignored by this rule. E.G.\u003c/p\u003e\n\u003cpre\u003e\nimport static java.lang.Math.*;\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eBlindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eStatic imports are ignored by this rule. E.G.\u003c/p\u003e\n\u003cpre\u003e\nimport static java.lang.Math.*;\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2208"]}},{"key":"java:S2209","repo":"java","name":"\"static\" members should be accessed statically","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhile it is \u003cem\u003epossible\u003c/em\u003e to access \u003ccode\u003estatic\u003c/code\u003e members from a class instance, it’s bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there’s an instance of the member per class instance.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class A {\n  public static int counter \u003d 0;\n}\n\npublic class B {\n  private A first \u003d new A();\n  private A second \u003d new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class A {\n  public static int counter \u003d 0;\n}\n\npublic class B {\n  private A first \u003d new A();\n  private A second \u003d new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhile it is \u003cem\u003epossible\u003c/em\u003e to access \u003ccode\u003estatic\u003c/code\u003e members from a class instance, it’s bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there’s an instance of the member per class instance.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class A {\n  public static int counter \u003d 0;\n}\n\npublic class B {\n  private A first \u003d new A();\n  private A second \u003d new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class A {\n  public static int counter \u003d 0;\n}\n\npublic class B {\n  private A first \u003d new A();\n  private A second \u003d new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2209"]}},{"key":"java:S2325","repo":"java","name":"\"private\" and \"final\" methods that don\u0027t access instance data should be \"static\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eNon-overridable methods (\u003ccode\u003eprivate\u003c/code\u003e or \u003ccode\u003efinal\u003c/code\u003e) that don’t access instance data can be \u003ccode\u003estatic\u003c/code\u003e to prevent any\nmisunderstanding about the contract of the method.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Utilities {\n  private static String magicWord \u003d \"magic\";\n\n  private String getMagicWord() { // Noncompliant\n    return magicWord;\n  }\n\n  private void setMagicWord(String value) { // Noncompliant\n    magicWord \u003d value;\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass Utilities {\n  private static String magicWord \u003d \"magic\";\n\n  private static String getMagicWord() {\n    return magicWord;\n  }\n\n  private static void setMagicWord(String value) {\n    magicWord \u003d value;\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen \u003ccode\u003ejava.io.Serializable\u003c/code\u003e is implemented the following three methods are excluded by the rule:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eprivate void writeObject(java.io.ObjectOutputStream out) throws IOException;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eprivate void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eprivate void readObjectNoData() throws ObjectStreamException;\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eNon-overridable methods (\u003ccode\u003eprivate\u003c/code\u003e or \u003ccode\u003efinal\u003c/code\u003e) that don’t access instance data can be \u003ccode\u003estatic\u003c/code\u003e to prevent any\nmisunderstanding about the contract of the method.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Utilities {\n  private static String magicWord \u003d \"magic\";\n\n  private String getMagicWord() { // Noncompliant\n    return magicWord;\n  }\n\n  private void setMagicWord(String value) { // Noncompliant\n    magicWord \u003d value;\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass Utilities {\n  private static String magicWord \u003d \"magic\";\n\n  private static String getMagicWord() {\n    return magicWord;\n  }\n\n  private static void setMagicWord(String value) {\n    magicWord \u003d value;\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen \u003ccode\u003ejava.io.Serializable\u003c/code\u003e is implemented the following three methods are excluded by the rule:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eprivate void writeObject(java.io.ObjectOutputStream out) throws IOException;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eprivate void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eprivate void readObjectNoData() throws ObjectStreamException;\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2325"]}},{"key":"java:S2326","repo":"java","name":"Unused type parameters should be removed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eType parameters that aren’t used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint \u0026lt;T\u0026gt; Add(int a, int b) // Noncompliant; \u0026lt;T\u0026gt; is ignored\n{\n  return a + b;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint Add(int a, int b)\n{\n  return a + b;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eType parameters that aren’t used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint \u0026lt;T\u0026gt; Add(int a, int b) // Noncompliant; \u0026lt;T\u0026gt; is ignored\n{\n  return a + b;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint Add(int a, int b)\n{\n  return a + b;\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2326"]}},{"key":"java:S2440","repo":"java","name":"Classes with only \"static\" methods should not be instantiated","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003estatic\u003c/code\u003e methods can be accessed without an instance of the enclosing class, so there’s no reason to instantiate a class that has only\n\u003ccode\u003estatic\u003c/code\u003e methods.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"\u0026lt;[^\u0026gt;]+\u0026gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils \u003d new TextUtils(); // Noncompliant\n\n    String stripped \u003d textUtils.stripHtml(source);\n\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"\u0026lt;[^\u0026gt;]+\u0026gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped \u003d TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee Also\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/coding_rules#rule_key\u003djava%3AS1118\u0027\u003eS1118\u003c/a\u003e - Utility classes should not have public constructors \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003estatic\u003c/code\u003e methods can be accessed without an instance of the enclosing class, so there’s no reason to instantiate a class that has only\n\u003ccode\u003estatic\u003c/code\u003e methods.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"\u0026lt;[^\u0026gt;]+\u0026gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils \u003d new TextUtils(); // Noncompliant\n\n    String stripped \u003d textUtils.stripHtml(source);\n\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"\u0026lt;[^\u0026gt;]+\u0026gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped \u003d TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee Also\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:java:S1118} - Utility classes should not have public constructors \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2440"]}},{"key":"java:S2442","repo":"java","name":"\"Lock\" objects should not be \"synchronized\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003ejava.util.concurrent.locks.Lock\u003c/code\u003e offers far more powerful and flexible locking operations than are available with\n\u003ccode\u003esynchronized\u003c/code\u003e blocks. So synchronizing on a \u003ccode\u003eLock\u003c/code\u003e throws away the power of the object, and is just silly. Instead, such\nobjects should be locked and unlocked using \u003ccode\u003etryLock()\u003c/code\u003e and \u003ccode\u003eunlock()\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nLock lock \u003d new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nLock lock \u003d new MyLockImpl();\nlock.tryLock();\n//...\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/qjdGBQ\"\u003eCERT, LCK03-J.\u003c/a\u003e - Do not synchronize on the intrinsic locks of high-level concurrency\n  objects \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003ejava.util.concurrent.locks.Lock\u003c/code\u003e offers far more powerful and flexible locking operations than are available with\n\u003ccode\u003esynchronized\u003c/code\u003e blocks. So synchronizing on a \u003ccode\u003eLock\u003c/code\u003e throws away the power of the object, and is just silly. Instead, such\nobjects should be locked and unlocked using \u003ccode\u003etryLock()\u003c/code\u003e and \u003ccode\u003eunlock()\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nLock lock \u003d new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nLock lock \u003d new MyLockImpl();\nlock.tryLock();\n//...\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/qjdGBQ\"\u003eCERT, LCK03-J.\u003c/a\u003e - Do not synchronize on the intrinsic locks of high-level concurrency\n  objects \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","clumsy","multi-threading"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2442"]}},{"key":"java:S2444","repo":"java","name":"Lazy initialization of \"static\" fields should be \"synchronized\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn a multi-threaded situation, un-\u003ccode\u003esynchronized\u003c/code\u003e lazy initialization of static fields could mean that a second thread has access to a\nhalf-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block\nshould be \u003ccode\u003esynchronized\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSimilarly, updates of such fields should also be \u003ccode\u003esynchronized\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue whenever a lazy static initialization is done on a class with at least one \u003ccode\u003esynchronized\u003c/code\u003e method, indicating\nintended usage in multi-threaded applications.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nprivate static Properties fPreferences \u003d null;\n\nprivate static Properties getPreferences() {\n        if (fPreferences \u003d\u003d null) {\n            fPreferences \u003d new Properties(); // Noncompliant\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nprivate static Properties fPreferences \u003d null;\n\nprivate static synchronized Properties getPreferences() {\n        if (fPreferences \u003d\u003d null) {\n            fPreferences \u003d new Properties();\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIn a multi-threaded situation, un-\u003ccode\u003esynchronized\u003c/code\u003e lazy initialization of static fields could mean that a second thread has access to a\nhalf-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block\nshould be \u003ccode\u003esynchronized\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eSimilarly, updates of such fields should also be \u003ccode\u003esynchronized\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue whenever a lazy static initialization is done on a class with at least one \u003ccode\u003esynchronized\u003c/code\u003e method, indicating\nintended usage in multi-threaded applications.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nprivate static Properties fPreferences \u003d null;\n\nprivate static Properties getPreferences() {\n        if (fPreferences \u003d\u003d null) {\n            fPreferences \u003d new Properties(); // Noncompliant\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nprivate static Properties fPreferences \u003d null;\n\nprivate static synchronized Properties getPreferences() {\n        if (fPreferences \u003d\u003d null) {\n            fPreferences \u003d new Properties();\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["multi-threading"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2444"]}},{"key":"java:S2447","repo":"java","name":"Null should not be returned from a \"Boolean\" method","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhile \u003ccode\u003enull\u003c/code\u003e is technically a valid \u003ccode\u003eBoolean\u003c/code\u003e value, that fact, and the distinction between \u003ccode\u003eBoolean\u003c/code\u003e and\n\u003ccode\u003eboolean\u003c/code\u003e is easy to forget. So returning \u003ccode\u003enull\u003c/code\u003e from a \u003ccode\u003eBoolean\u003c/code\u003e method is likely to cause problems with callers\u0027\ncode.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/476.html\"\u003eMITRE, CWE-476\u003c/a\u003e - NULL Pointer Dereference \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\"\u003eCERT, EXP01-J.\u003c/a\u003e - Do not use a null in a case where an object is required \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eWhile \u003ccode\u003enull\u003c/code\u003e is technically a valid \u003ccode\u003eBoolean\u003c/code\u003e value, that fact, and the distinction between \u003ccode\u003eBoolean\u003c/code\u003e and\n\u003ccode\u003eboolean\u003c/code\u003e is easy to forget. So returning \u003ccode\u003enull\u003c/code\u003e from a \u003ccode\u003eBoolean\u003c/code\u003e method is likely to cause problems with callers\u0027\ncode.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/476.html\"\u003eMITRE, CWE-476\u003c/a\u003e - NULL Pointer Dereference \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\"\u003eCERT, EXP01-J.\u003c/a\u003e - Do not use a null in a case where an object is required \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe","pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2447"]}},{"key":"java:S2681","repo":"java","name":"Multiline blocks should be enclosed in curly braces","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eCurly braces can be omitted from a one-line block, such as with an \u003ccode\u003eif\u003c/code\u003e statement or \u003ccode\u003efor\u003c/code\u003e loop, but doing so can be\nmisleading and induce bugs.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.\u003c/p\u003e\n\u003cp\u003eNote that this rule considers tab characters to be equivalent to 1 space. If you mix spaces and tabs you will sometimes see issues in code which\nlook fine in your editor but are confusing when you change the size of tabs.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nif (condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\nif (condition); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nString str \u003d null;\nfor (int i \u003d 0; i \u0026lt; array.length; i++)\n  str \u003d array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str \u003d null;\nfor (int i \u003d 0; i \u0026lt; array.length; i++) {\n  str \u003d array[i];\n  doTheThing(str);\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/483.html\"\u003eMITRE, CWE-483\u003c/a\u003e - Incorrect Block Delimitation \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/MzZGBQ\"\u003eCERT, EXP52-J.\u003c/a\u003e - Use braces for the body of an if, for, or while statement \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eCurly braces can be omitted from a one-line block, such as with an \u003ccode\u003eif\u003c/code\u003e statement or \u003ccode\u003efor\u003c/code\u003e loop, but doing so can be\nmisleading and induce bugs.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.\u003c/p\u003e\n\u003cp\u003eNote that this rule considers tab characters to be equivalent to 1 space. If you mix spaces and tabs you will sometimes see issues in code which\nlook fine in your editor but are confusing when you change the size of tabs.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nif (condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\nif (condition); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nString str \u003d null;\nfor (int i \u003d 0; i \u0026lt; array.length; i++)\n  str \u003d array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str \u003d null;\nfor (int i \u003d 0; i \u0026lt; array.length; i++) {\n  str \u003d array[i];\n  doTheThing(str);\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/483.html\"\u003eMITRE, CWE-483\u003c/a\u003e - Incorrect Block Delimitation \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/MzZGBQ\"\u003eCERT, EXP52-J.\u003c/a\u003e - Use braces for the body of an if, for, or while statement \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2681"]}},{"key":"java:S3414","repo":"java","name":"Tests should be kept in a dedicated source directory","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIt is a good practice to isolate test classes in a separate package so that what is shipped to production is neither polluted by nor bloated with\nthem. Further, including unit tests in code assemblies could affect build processes.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when test classes are found in projects containing non-test-related code.\u003c/p\u003e","mdDesc":"\u003cp\u003eIt is a good practice to isolate test classes in a separate package so that what is shipped to production is neither polluted by nor bloated with\nthem. Further, including unit tests in code assemblies could affect build processes.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when test classes are found in projects containing non-test-related code.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["suspicious","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3414"]}},{"key":"java:S3415","repo":"java","name":"Assertion arguments should be passed in the correct order","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe standard assertions library methods such as \u003ccode\u003eorg.junit.Assert.assertEquals\u003c/code\u003e, and \u003ccode\u003eorg.junit.Assert.assertSame\u003c/code\u003e expect the\nfirst argument to be the expected value and the second argument to be the actual value. For AssertJ, it’s the other way around, the argument of\n\u003ccode\u003eorg.assertj.core.api.Assertions.assertThat\u003c/code\u003e is the actual value, and the subsequent calls contain the expected values. Swap them, and your\ntest will still have the same outcome (succeed/fail when it should) but the error messages will be confusing.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the actual argument to an assertions library method is a hard-coded value and the expected argument is not.\u003c/p\u003e\n\u003cp\u003eSupported frameworks:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit4 \u003c/li\u003e\n  \u003cli\u003e JUnit5 \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://assertj.github.io/doc/\"\u003eAssertJ\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\norg.junit.Assert.assertEquals(runner.exitCode(), 0, \"Unexpected exit code\");  // Noncompliant; Yields error message like: Expected:\u0026lt;-1\u0026gt;. Actual:\u0026lt;0\u0026gt;.\norg.assertj.core.api.Assertions.assertThat(0).isEqualTo(runner.exitCode()); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\norg.junit.Assert.assertEquals(0, runner.exitCode(), \"Unexpected exit code\");\norg.assertj.core.api.Assertions.assertThat(runner.exitCode()).isEqualTo(0);\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe standard assertions library methods such as \u003ccode\u003eorg.junit.Assert.assertEquals\u003c/code\u003e, and \u003ccode\u003eorg.junit.Assert.assertSame\u003c/code\u003e expect the\nfirst argument to be the expected value and the second argument to be the actual value. For AssertJ, it’s the other way around, the argument of\n\u003ccode\u003eorg.assertj.core.api.Assertions.assertThat\u003c/code\u003e is the actual value, and the subsequent calls contain the expected values. Swap them, and your\ntest will still have the same outcome (succeed/fail when it should) but the error messages will be confusing.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the actual argument to an assertions library method is a hard-coded value and the expected argument is not.\u003c/p\u003e\n\u003cp\u003eSupported frameworks:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit4 \u003c/li\u003e\n  \u003cli\u003e JUnit5 \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://assertj.github.io/doc/\"\u003eAssertJ\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\norg.junit.Assert.assertEquals(runner.exitCode(), 0, \"Unexpected exit code\");  // Noncompliant; Yields error message like: Expected:\u0026lt;-1\u0026gt;. Actual:\u0026lt;0\u0026gt;.\norg.assertj.core.api.Assertions.assertThat(0).isEqualTo(runner.exitCode()); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\norg.junit.Assert.assertEquals(0, runner.exitCode(), \"Unexpected exit code\");\norg.assertj.core.api.Assertions.assertThat(runner.exitCode()).isEqualTo(0);\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["junit","suspicious","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3415"]}},{"key":"java:S3416","repo":"java","name":"Loggers should be named for their enclosing classes","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIt is convention to name each class’s logger for the class itself. Doing so allows you to set up clear, communicative logger configuration. Naming\nloggers by some other convention confuses configuration, and using the same class name for multiple class loggers prevents the granular configuration\nof each class\u0027 logger. Some libraries, such as SLF4J warn about this, but not all do.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a logger is not named for its enclosing class.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  private final static Logger LOG \u003d LoggerFactory.getLogger(WrongClass.class);  // Noncompliant; multiple classes using same logger\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  private final static Logger LOG \u003d LoggerFactory.getLogger(MyClass.class);\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIt is convention to name each class’s logger for the class itself. Doing so allows you to set up clear, communicative logger configuration. Naming\nloggers by some other convention confuses configuration, and using the same class name for multiple class loggers prevents the granular configuration\nof each class\u0027 logger. Some libraries, such as SLF4J warn about this, but not all do.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a logger is not named for its enclosing class.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  private final static Logger LOG \u003d LoggerFactory.getLogger(WrongClass.class);  // Noncompliant; multiple classes using same logger\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  private final static Logger LOG \u003d LoggerFactory.getLogger(MyClass.class);\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3416"]}},{"key":"java:S3658","repo":"java","name":"Unit tests should throw exceptions","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a\n\u003ccode\u003etry\u003c/code\u003e-\u003ccode\u003ecatch\u003c/code\u003e structure to detect failure. Instead, you can simply move the exception type to the method signature.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when there is a fail assertion inside a \u003ccode\u003ecatch\u003c/code\u003e block.\u003c/p\u003e\n\u003cp\u003eSupported frameworks:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit3 \u003c/li\u003e\n  \u003cli\u003e JUnit4 \u003c/li\u003e\n  \u003cli\u003e JUnit5 \u003c/li\u003e\n  \u003cli\u003e Fest assert \u003c/li\u003e\n  \u003cli\u003e AssertJ \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testMethod() {\n  try {\n            // Some code\n  } catch (MyException e) {\n    Assert.fail(e.getMessage());  // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testMethod() throws MyException {\n    // Some code\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a\n\u003ccode\u003etry\u003c/code\u003e-\u003ccode\u003ecatch\u003c/code\u003e structure to detect failure. Instead, you can simply move the exception type to the method signature.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when there is a fail assertion inside a \u003ccode\u003ecatch\u003c/code\u003e block.\u003c/p\u003e\n\u003cp\u003eSupported frameworks:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit3 \u003c/li\u003e\n  \u003cli\u003e JUnit4 \u003c/li\u003e\n  \u003cli\u003e JUnit5 \u003c/li\u003e\n  \u003cli\u003e Fest assert \u003c/li\u003e\n  \u003cli\u003e AssertJ \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testMethod() {\n  try {\n            // Some code\n  } catch (MyException e) {\n    Assert.fail(e.getMessage());  // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testMethod() throws MyException {\n    // Some code\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy","error-handling","junit","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3658"]}},{"key":"java:S5838","repo":"java","name":"Chained AssertJ assertions should be simplified to the corresponding dedicated assertion","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAssertJ contains many assertions methods specific to common types. Both versions will test the same things, but the dedicated one will provide a\nbetter error message, simplifying the debugging process.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when an assertion can be simplified to a dedicated one.\u003c/p\u003e\n\u003cp\u003eThe array below gives a non-exhaustive list of assertion reported by the rule. Code behaving similarly, or with a negation will also be\nreported.\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eOriginal\u003c/th\u003e\n      \u003cth\u003eDedicated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003eRelated to Object\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getObject()).isEqualTo(null)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getObject()).isNull()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getBoolean()).isEqualTo(true)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getBoolean()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getBoolean()).isEqualTo(false)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getBoolean()).isFalse()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x.equals(y)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isEqualTo(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x \u003d\u003d y).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isSameAs(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x \u003d\u003d null).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isNull()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x.toString()).isEqualTo(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).hasToString(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x.hashCode()).isEqualTo(y.hashCode())\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).hasSameHashCodeAs(y));\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getObject() instanceof MyClass).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getObject()).isInstanceOf(MyClass.class)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003eRelated to \u003ccode\u003eComparable\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x.compareTo(y)).isZero()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isEqualByComparingTo(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x \u0026gt;\u003d y).isGreaterThanOrEqualTo(0)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isGreaterThanOrEqualTo(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x \u0026gt; y).isPositive()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isGreaterThan(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x \u0026lt;\u003d y).isNotPositive()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isLessThanOrEqualTo(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x \u0026lt; y).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isLessThan(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003eRelated to \u003ccode\u003eString\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().isEmpty()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(\u003c/code\u003e\u003ccode\u003egetString\u003c/code\u003e\u003ccode\u003e()).hasSize(0)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(\u003c/code\u003e\u003ccode\u003egetString\u003c/code\u003e\u003ccode\u003e()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().equals(expected)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).isEqualTo(expected)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().equalsIgnoreCase(expected)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).isEqualToIgnoringCase(expected)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().contains(expected)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).contains(expected)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().startsWith(expected)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).startsWith(expected)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().endsWith(expected)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).endsWith(expected)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().matches(expected)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).matches(expected)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().trim()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).isBlank()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().length()).isEqualTo(length)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).hasSize(length)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().length()).hasSize(expected.length())\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).hasSameSizeAs(expected)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003e\u0026nbsp;Related to \u003ccode\u003eFile\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).hasSize(0)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().length()).isZero()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().length()).isEqualTo(length)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).hasSize(length)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().canRead()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).canRead()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().canWrite()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).canWrite()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().exists()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).exists()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().getName()).isEqualTo(name)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).hasName(name)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().getParent()).isEqualTo(pathname)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).hasParent(pathname)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().getParentFile()).isNull()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).hasNoParent()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().isAbsolute()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).isAbsolute()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().isAbsolute()).isFalse()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).isRelative()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().isDirectory()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).isDirectory()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().isFile()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).isFile()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().list()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).isEmptyDirectory()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003e\u0026nbsp;Related to \u003ccode\u003ePath\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath().startsWith(path)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath()).startsWithRaw(path)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath().endsWith(path)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath()).endsWithRaw(path)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath().getParent()).isEqualTo(name)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath()).hasParentRaw(name)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath().getParent()).isNull()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath()).hasNoParentRaw()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath().isAbsolute()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath()).isAbsolute()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath().isAbsolute()).isFalse()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath()).isRelative()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003e\u0026nbsp;Related to \u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray().length).isZero()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray().length).isEqualTo(length)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray()).hasSize(length)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray().length).isEqualTo(anotherArray.length)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray()).hasSameSizeAs(getAnotherArray())\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray().length).isLessThanOrEqualTo(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray()).hasSizeLessThanOrEqualTo(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray().length).isLessThan(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray()).hasSizeLessThan(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray().length).isGreaterThan(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray()).hasSizeGreaterThan(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray().length).isGreaterThanOrEqualTo(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray()).hasSizeGreaterThanOrEqualTo(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003eRelated to \u003ccode\u003eCollection\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection().isEmpty()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection().size()).isZero()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection().contains(something)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection()).contains(something)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection().containsAll(otherCollection)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection()).containsAll(otherCollection)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003eRelated to \u003ccode\u003eMap\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap().size()).isEqualTo(otherMap().size()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap()).hasSameSizeAs(otherMap())\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap().containsKey(key)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap()).containsKey(key)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap().keySet()).contains(key)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap()).containsKey(key)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap().keySet()).containsOnlyKey(key)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap()).containsOnlyKey(key)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap().containsValue(value)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap()).containsValue(value)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap().values()).contains(value)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap()).containsValue(\u003c/code\u003e\u003ccode\u003evalue\u003c/code\u003e\u003ccode\u003e)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap().get(key)).isEqualTo(value)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap()).containsEntry(key, value)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003eRelated to \u003ccode\u003eOptional\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getOptional().isPresent()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getOptional()).isPresent()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getOptional().get()).isEqualTo(something)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getOptional()).contains(something)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getOptional().get()).isSameAs(something)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getOptional()).containsSame(something)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nassertThat(getObject()).isEqualTo(null); // Noncompliant\nassertThat(getObject()).isNotEqualTo(null); // Noncompliant - not listed above but also supported\n\nassertThat(getString().trim()).isEmpty();\nassertThat(getFile().canRead()).isTrue();\nassertThat(getPath().getParent()).isNull();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nassertThat(getObject()).isNull();\n\nassertThat(getString()).isBlank();\nassertThat(getFile()).canRead();\nassertThat(getPath()).hasNoParentRaw();\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAssertJ contains many assertions methods specific to common types. Both versions will test the same things, but the dedicated one will provide a\nbetter error message, simplifying the debugging process.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when an assertion can be simplified to a dedicated one.\u003c/p\u003e\n\u003cp\u003eThe array below gives a non-exhaustive list of assertion reported by the rule. Code behaving similarly, or with a negation will also be\nreported.\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eOriginal\u003c/th\u003e\n      \u003cth\u003eDedicated\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003eRelated to Object\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getObject()).isEqualTo(null)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getObject()).isNull()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getBoolean()).isEqualTo(true)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getBoolean()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getBoolean()).isEqualTo(false)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getBoolean()).isFalse()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x.equals(y)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isEqualTo(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x \u003d\u003d y).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isSameAs(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x \u003d\u003d null).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isNull()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x.toString()).isEqualTo(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).hasToString(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x.hashCode()).isEqualTo(y.hashCode())\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).hasSameHashCodeAs(y));\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getObject() instanceof MyClass).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getObject()).isInstanceOf(MyClass.class)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003eRelated to \u003ccode\u003eComparable\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x.compareTo(y)).isZero()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isEqualByComparingTo(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x \u0026gt;\u003d y).isGreaterThanOrEqualTo(0)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isGreaterThanOrEqualTo(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x \u0026gt; y).isPositive()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isGreaterThan(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x \u0026lt;\u003d y).isNotPositive()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isLessThanOrEqualTo(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x \u0026lt; y).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(x).isLessThan(y)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003eRelated to \u003ccode\u003eString\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().isEmpty()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(\u003c/code\u003e\u003ccode\u003egetString\u003c/code\u003e\u003ccode\u003e()).hasSize(0)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(\u003c/code\u003e\u003ccode\u003egetString\u003c/code\u003e\u003ccode\u003e()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().equals(expected)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).isEqualTo(expected)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().equalsIgnoreCase(expected)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).isEqualToIgnoringCase(expected)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().contains(expected)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).contains(expected)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().startsWith(expected)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).startsWith(expected)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().endsWith(expected)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).endsWith(expected)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().matches(expected)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).matches(expected)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().trim()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).isBlank()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().length()).isEqualTo(length)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).hasSize(length)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString().length()).hasSize(expected.length())\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getString()).hasSameSizeAs(expected)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003e\u0026nbsp;Related to \u003ccode\u003eFile\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).hasSize(0)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().length()).isZero()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().length()).isEqualTo(length)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).hasSize(length)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().canRead()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).canRead()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().canWrite()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).canWrite()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().exists()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).exists()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().getName()).isEqualTo(name)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).hasName(name)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().getParent()).isEqualTo(pathname)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).hasParent(pathname)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().getParentFile()).isNull()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).hasNoParent()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().isAbsolute()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).isAbsolute()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().isAbsolute()).isFalse()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).isRelative()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().isDirectory()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).isDirectory()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().isFile()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).isFile()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile().list()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getFile()).isEmptyDirectory()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003e\u0026nbsp;Related to \u003ccode\u003ePath\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath().startsWith(path)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath()).startsWithRaw(path)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath().endsWith(path)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath()).endsWithRaw(path)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath().getParent()).isEqualTo(name)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath()).hasParentRaw(name)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath().getParent()).isNull()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath()).hasNoParentRaw()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath().isAbsolute()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath()).isAbsolute()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath().isAbsolute()).isFalse()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getPath()).isRelative()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003e\u0026nbsp;Related to \u003ccode\u003eArray\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray().length).isZero()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray().length).isEqualTo(length)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray()).hasSize(length)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray().length).isEqualTo(anotherArray.length)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray()).hasSameSizeAs(getAnotherArray())\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray().length).isLessThanOrEqualTo(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray()).hasSizeLessThanOrEqualTo(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray().length).isLessThan(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray()).hasSizeLessThan(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray().length).isGreaterThan(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray()).hasSizeGreaterThan(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray().length).isGreaterThanOrEqualTo(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getArray()).hasSizeGreaterThanOrEqualTo(expression)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003eRelated to \u003ccode\u003eCollection\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection().isEmpty()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection().size()).isZero()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection()).isEmpty()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection().contains(something)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection()).contains(something)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection().containsAll(otherCollection)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getCollection()).containsAll(otherCollection)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003eRelated to \u003ccode\u003eMap\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap().size()).isEqualTo(otherMap().size()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap()).hasSameSizeAs(otherMap())\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap().containsKey(key)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap()).containsKey(key)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap().keySet()).contains(key)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap()).containsKey(key)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap().keySet()).containsOnlyKey(key)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap()).containsOnlyKey(key)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap().containsValue(value)).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap()).containsValue(value)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap().values()).contains(value)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap()).containsValue(\u003c/code\u003e\u003ccode\u003evalue\u003c/code\u003e\u003ccode\u003e)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap().get(key)).isEqualTo(value)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getMap()).containsEntry(key, value)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003cstrong\u003eRelated to \u003ccode\u003eOptional\u003c/code\u003e\u003c/strong\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getOptional().isPresent()).isTrue()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getOptional()).isPresent()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getOptional().get()).isEqualTo(something)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getOptional()).contains(something)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getOptional().get()).isSameAs(something)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eassertThat(getOptional()).containsSame(something)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nassertThat(getObject()).isEqualTo(null); // Noncompliant\nassertThat(getObject()).isNotEqualTo(null); // Noncompliant - not listed above but also supported\n\nassertThat(getString().trim()).isEmpty();\nassertThat(getFile().canRead()).isTrue();\nassertThat(getPath().getParent()).isNull();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nassertThat(getObject()).isNull();\n\nassertThat(getString()).isBlank();\nassertThat(getFile()).canRead();\nassertThat(getPath()).hasNoParentRaw();\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["assertj","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5838"]}},{"key":"java:S5958","repo":"java","name":"AssertJ \"assertThatThrownBy\" should not be used alone","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUnlike similar AssertJ methods testing exceptions (\u003ccode\u003eassertThatCode()\u003c/code\u003e, \u003ccode\u003eassertThatExceptionOfType()\u003c/code\u003e, …​), the\n\u003ccode\u003eassertThatThrownBy()\u003c/code\u003e method can be used alone, failing if the code did not raise any exception.\u003c/p\u003e\n\u003cp\u003eStill, only testing that an exception was raised is not enough to guarantee that it was the expected one, and you should test the exception type or\ncontent further. In addition, it will make explicit what you are expecting, without relying on side-effects.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eassertThatThrownBy\u003c/code\u003e is used, without testing the exception further.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nassertThatThrownBy(() -\u0026gt; shouldThrow()); // Noncompliant, is it really the exception you expected?\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nassertThatThrownBy(() -\u0026gt; shouldThrow()).isInstanceOf(IOException.class);\n//or\nassertThatThrownBy(() -\u0026gt; shouldThrow()).hasMessage(\"My exception\");\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eUnlike similar AssertJ methods testing exceptions (\u003ccode\u003eassertThatCode()\u003c/code\u003e, \u003ccode\u003eassertThatExceptionOfType()\u003c/code\u003e, …​), the\n\u003ccode\u003eassertThatThrownBy()\u003c/code\u003e method can be used alone, failing if the code did not raise any exception.\u003c/p\u003e\n\u003cp\u003eStill, only testing that an exception was raised is not enough to guarantee that it was the expected one, and you should test the exception type or\ncontent further. In addition, it will make explicit what you are expecting, without relying on side-effects.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eassertThatThrownBy\u003c/code\u003e is used, without testing the exception further.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nassertThatThrownBy(() -\u0026gt; shouldThrow()); // Noncompliant, is it really the exception you expected?\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nassertThatThrownBy(() -\u0026gt; shouldThrow()).isInstanceOf(IOException.class);\n//or\nassertThatThrownBy(() -\u0026gt; shouldThrow()).hasMessage(\"My exception\");\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["assertj","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5958"]}},{"key":"java:S1116","repo":"java","name":"Empty statements should be removed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eEmpty statements, i.e. \u003ccode\u003e;\u003c/code\u003e, are usually introduced by mistake, for example because:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It was meant to be replaced by an actual statement, but this was forgotten. \u003c/li\u003e\n  \u003cli\u003e There was a typo which lead the semicolon to be doubled, i.e. \u003ccode\u003e;;\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid doSomething() {\n  ;                                                       // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");;                     // Noncompliant - double ;\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvoid doSomething() {}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");\n  ...\n  for (int i \u003d 0; i \u0026lt; 3; i++) ; // compliant if unique statement of a loop\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\"\u003eCERT, MSC12-C.\u003c/a\u003e - Detect and remove code that has no effect or is never executed\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/IDZGBQ\"\u003eCERT, MSC51-J.\u003c/a\u003e - Do not place a semicolon immediately following an if, for, or while\n  condition \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/WtYxBQ\"\u003eCERT, EXP15-C.\u003c/a\u003e - Do not place a semicolon on the same line as an if, for, or while\n  statement \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eEmpty statements, i.e. \u003ccode\u003e;\u003c/code\u003e, are usually introduced by mistake, for example because:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It was meant to be replaced by an actual statement, but this was forgotten. \u003c/li\u003e\n  \u003cli\u003e There was a typo which lead the semicolon to be doubled, i.e. \u003ccode\u003e;;\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid doSomething() {\n  ;                                                       // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");;                     // Noncompliant - double ;\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvoid doSomething() {}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");\n  ...\n  for (int i \u003d 0; i \u0026lt; 3; i++) ; // compliant if unique statement of a loop\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\"\u003eCERT, MSC12-C.\u003c/a\u003e - Detect and remove code that has no effect or is never executed\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/IDZGBQ\"\u003eCERT, MSC51-J.\u003c/a\u003e - Do not place a semicolon immediately following an if, for, or while\n  condition \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/WtYxBQ\"\u003eCERT, EXP15-C.\u003c/a\u003e - Do not place a semicolon on the same line as an if, for, or while\n  statement \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:EmptyStatementUsageCheck"]}},{"key":"java:S1123","repo":"java","name":"Deprecated elements should have both the annotation and the Javadoc tag","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eDeprecation should be marked with both the \u003ccode\u003e@Deprecated\u003c/code\u003e annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {    // Noncompliant: Add the missing @deprecated Javadoc tag.\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant: Add the missing @Deprecated annotation.\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThe members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.\u003c/p\u003e\n\u003cpre\u003e\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eDeprecation should be marked with both the \u003ccode\u003e@Deprecated\u003c/code\u003e annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {    // Noncompliant: Add the missing @deprecated Javadoc tag.\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant: Add the missing @Deprecated annotation.\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThe members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.\u003c/p\u003e\n\u003cpre\u003e\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice","obsolete"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:MissingDeprecatedCheck"]}},{"key":"java:S1124","repo":"java","name":"Modifiers should be declared in the correct order","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe Java Language Specification recommends listing modifiers in the following order:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e Annotations \u003c/li\u003e\n  \u003cli\u003e public \u003c/li\u003e\n  \u003cli\u003e protected \u003c/li\u003e\n  \u003cli\u003e private \u003c/li\u003e\n  \u003cli\u003e abstract \u003c/li\u003e\n  \u003cli\u003e static \u003c/li\u003e\n  \u003cli\u003e final \u003c/li\u003e\n  \u003cli\u003e transient \u003c/li\u003e\n  \u003cli\u003e volatile \u003c/li\u003e\n  \u003cli\u003e synchronized \u003c/li\u003e\n  \u003cli\u003e native \u003c/li\u003e\n  \u003cli\u003e default \u003c/li\u003e\n  \u003cli\u003e strictfp \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eNot following this convention has no technical impact, but will reduce the code’s readability because most developers are used to the standard\norder.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nstatic public void main(String[] args) {   // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic static void main(String[] args) {   // Compliant\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe Java Language Specification recommends listing modifiers in the following order:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e Annotations \u003c/li\u003e\n  \u003cli\u003e public \u003c/li\u003e\n  \u003cli\u003e protected \u003c/li\u003e\n  \u003cli\u003e private \u003c/li\u003e\n  \u003cli\u003e abstract \u003c/li\u003e\n  \u003cli\u003e static \u003c/li\u003e\n  \u003cli\u003e final \u003c/li\u003e\n  \u003cli\u003e transient \u003c/li\u003e\n  \u003cli\u003e volatile \u003c/li\u003e\n  \u003cli\u003e synchronized \u003c/li\u003e\n  \u003cli\u003e native \u003c/li\u003e\n  \u003cli\u003e default \u003c/li\u003e\n  \u003cli\u003e strictfp \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eNot following this convention has no technical impact, but will reduce the code’s readability because most developers are used to the standard\norder.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nstatic public void main(String[] args) {   // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic static void main(String[] args) {   // Compliant\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:ModifiersOrderCheck"]}},{"key":"java:S1125","repo":"java","name":"Boolean literals should not be redundant","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eRedundant Boolean literals should be removed from expressions to improve readability.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (booleanMethod() \u003d\u003d true) { /* ... */ }\nif (booleanMethod() \u003d\u003d false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() \u003d\u003d true);\n\nbooleanVariable \u003d booleanMethod() ? true : false;\nbooleanVariable \u003d booleanMethod() ? true : exp;\nbooleanVariable \u003d booleanMethod() ? false : exp;\nbooleanVariable \u003d booleanMethod() ? exp : true;\nbooleanVariable \u003d booleanMethod() ? exp : false;\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable \u003d booleanMethod();\nbooleanVariable \u003d booleanMethod() || exp;\nbooleanVariable \u003d !booleanMethod() \u0026amp;\u0026amp; exp;\nbooleanVariable \u003d !booleanMethod() || exp;\nbooleanVariable \u003d booleanMethod() \u0026amp;\u0026amp; exp;\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eRedundant Boolean literals should be removed from expressions to improve readability.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (booleanMethod() \u003d\u003d true) { /* ... */ }\nif (booleanMethod() \u003d\u003d false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() \u003d\u003d true);\n\nbooleanVariable \u003d booleanMethod() ? true : false;\nbooleanVariable \u003d booleanMethod() ? true : exp;\nbooleanVariable \u003d booleanMethod() ? false : exp;\nbooleanVariable \u003d booleanMethod() ? exp : true;\nbooleanVariable \u003d booleanMethod() ? exp : false;\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable \u003d booleanMethod();\nbooleanVariable \u003d booleanMethod() || exp;\nbooleanVariable \u003d !booleanMethod() \u0026amp;\u0026amp; exp;\nbooleanVariable \u003d !booleanMethod() || exp;\nbooleanVariable \u003d booleanMethod() \u0026amp;\u0026amp; exp;\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1125"]}},{"key":"java:S1126","repo":"java","name":"Return of boolean expressions should not be wrapped into an \"if-then-else\" statement","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eReturn of boolean literal statements wrapped into \u003ccode\u003eif-then-else\u003c/code\u003e ones should be simplified.\u003c/p\u003e\n\u003cp\u003eSimilarly, method invocations wrapped into \u003ccode\u003eif-then-else\u003c/code\u003e differing only from boolean literals should be simplified into a single\ninvocation.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nboolean foo(Object param) {\n  if (expression) { // Noncompliant\n    bar(param, true, \"qix\");\n  } else {\n    bar(param, false, \"qix\");\n  }\n\n  if (expression) {  // Noncompliant\n    return true;\n  } else {\n    return false;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nboolean foo(Object param) {\n  bar(param, expression, \"qix\");\n\n  return expression;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eReturn of boolean literal statements wrapped into \u003ccode\u003eif-then-else\u003c/code\u003e ones should be simplified.\u003c/p\u003e\n\u003cp\u003eSimilarly, method invocations wrapped into \u003ccode\u003eif-then-else\u003c/code\u003e differing only from boolean literals should be simplified into a single\ninvocation.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nboolean foo(Object param) {\n  if (expression) { // Noncompliant\n    bar(param, true, \"qix\");\n  } else {\n    bar(param, false, \"qix\");\n  }\n\n  if (expression) {  // Noncompliant\n    return true;\n  } else {\n    return false;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nboolean foo(Object param) {\n  bar(param, expression, \"qix\");\n\n  return expression;\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1126"]}},{"key":"java:S1488","repo":"java","name":"Local variables should not be declared and then immediately returned or thrown","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eDeclaring a variable only to immediately return or throw it is a bad practice.\u003c/p\u003e\n\u003cp\u003eSome developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic long computeDurationInMilliseconds() {\n  long duration \u003d (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException \u003d new RuntimeException();\n  throw myException;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eDeclaring a variable only to immediately return or throw it is a bad practice.\u003c/p\u003e\n\u003cp\u003eSome developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic long computeDurationInMilliseconds() {\n  long duration \u003d (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException \u003d new RuntimeException();\n  throw myException;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1488"]}},{"key":"java:S2333","repo":"java","name":"Redundant modifiers should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe methods declared in an \u003ccode\u003einterface\u003c/code\u003e are \u003ccode\u003epublic\u003c/code\u003e and \u003ccode\u003eabstract\u003c/code\u003e by default. Any variables are automatically\n\u003ccode\u003epublic static final\u003c/code\u003e. Finally, \u003ccode\u003eclass\u003c/code\u003e and \u003ccode\u003einterface\u003c/code\u003e are automatically \u003ccode\u003epublic static\u003c/code\u003e. There is no\nneed to explicitly declare them so.\u003c/p\u003e\n\u003cp\u003eSince annotations are implicitly interfaces, the same holds true for them as well.\u003c/p\u003e\n\u003cp\u003eSimilarly, the \u003ccode\u003efinal\u003c/code\u003e modifier is redundant on any method of a \u003ccode\u003efinal\u003c/code\u003e class, \u003ccode\u003eprivate\u003c/code\u003e is redundant on the\nconstructor of an \u003ccode\u003eEnum\u003c/code\u003e, and \u003ccode\u003estatic\u003c/code\u003e is redundant for \u003ccode\u003einterface\u003c/code\u003e nested into a \u003ccode\u003eclass\u003c/code\u003e or\n\u003ccode\u003eenum\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic interface Vehicle {\n\n  public void go(int speed, Direction direction);  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic interface Vehicle {\n\n  void go(int speed, Direction direction);\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe methods declared in an \u003ccode\u003einterface\u003c/code\u003e are \u003ccode\u003epublic\u003c/code\u003e and \u003ccode\u003eabstract\u003c/code\u003e by default. Any variables are automatically\n\u003ccode\u003epublic static final\u003c/code\u003e. Finally, \u003ccode\u003eclass\u003c/code\u003e and \u003ccode\u003einterface\u003c/code\u003e are automatically \u003ccode\u003epublic static\u003c/code\u003e. There is no\nneed to explicitly declare them so.\u003c/p\u003e\n\u003cp\u003eSince annotations are implicitly interfaces, the same holds true for them as well.\u003c/p\u003e\n\u003cp\u003eSimilarly, the \u003ccode\u003efinal\u003c/code\u003e modifier is redundant on any method of a \u003ccode\u003efinal\u003c/code\u003e class, \u003ccode\u003eprivate\u003c/code\u003e is redundant on the\nconstructor of an \u003ccode\u003eEnum\u003c/code\u003e, and \u003ccode\u003estatic\u003c/code\u003e is redundant for \u003ccode\u003einterface\u003c/code\u003e nested into a \u003ccode\u003eclass\u003c/code\u003e or\n\u003ccode\u003eenum\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic interface Vehicle {\n\n  public void go(int speed, Direction direction);  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic interface Vehicle {\n\n  void go(int speed, Direction direction);\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy","finding"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2333"]}},{"key":"java:S2696","repo":"java","name":"Instance methods should not write to \"static\" fields","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eCorrectly updating a \u003ccode\u003estatic\u003c/code\u003e field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. Ideally, \u003ccode\u003estatic\u003c/code\u003e fields are only updated from \u003ccode\u003esynchronized static\u003c/code\u003e\nmethods.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue each time a \u003ccode\u003estatic\u003c/code\u003e field is updated from a non-static method.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  private static int count \u003d 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eCorrectly updating a \u003ccode\u003estatic\u003c/code\u003e field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. Ideally, \u003ccode\u003estatic\u003c/code\u003e fields are only updated from \u003ccode\u003esynchronized static\u003c/code\u003e\nmethods.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue each time a \u003ccode\u003estatic\u003c/code\u003e field is updated from a non-static method.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  private static int count \u003d 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["multi-threading"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2696"]}},{"key":"java:S2698","repo":"java","name":"Test assertions should include messages","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAdding messages to JUnit, FEST and AssertJ assertions is an investment in your future productivity. Spend a few seconds writing them now, and\nyou’ll save a lot of time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the\ntests and the assertion messages work as a sort of documentation.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nassertEquals(4, list.size());  // Noncompliant\n\ntry {\n  fail();  // Noncompliant\n} catch (Exception e) {\n  assertThat(list.get(0)).isEqualTo(\"pear\");  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nassertEquals(\"There should have been 4 Fruits in the list\", 4, list.size());\n\ntry {\n  fail(\"And exception is expected here\");\n} catch (Exception e) {\n  assertThat(list.get(0)).as(\"check first element\").overridingErrorMessage(\"The first element should be a pear, not a %s\", list.get(0)).isEqualTo(\"pear\");\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAdding messages to JUnit, FEST and AssertJ assertions is an investment in your future productivity. Spend a few seconds writing them now, and\nyou’ll save a lot of time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the\ntests and the assertion messages work as a sort of documentation.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nassertEquals(4, list.size());  // Noncompliant\n\ntry {\n  fail();  // Noncompliant\n} catch (Exception e) {\n  assertThat(list.get(0)).isEqualTo(\"pear\");  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nassertEquals(\"There should have been 4 Fruits in the list\", 4, list.size());\n\ntry {\n  fail(\"And exception is expected here\");\n} catch (Exception e) {\n  assertThat(list.get(0)).as(\"check first element\").overridingErrorMessage(\"The first element should be a pear, not a %s\", list.get(0)).isEqualTo(\"pear\");\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["junit","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2698"]}},{"key":"java:S2699","repo":"java","name":"Tests should include assertions","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.\u003c/p\u003e\n\u003cp\u003eThis rule raises an exception when no assertions from any of the following known frameworks are found in a test:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e AssertJ \u003c/li\u003e\n  \u003cli\u003e Awaitility \u003c/li\u003e\n  \u003cli\u003e EasyMock \u003c/li\u003e\n  \u003cli\u003e Eclipse Vert.x \u003c/li\u003e\n  \u003cli\u003e Fest 1.x and 2.x \u003c/li\u003e\n  \u003cli\u003e Hamcrest \u003c/li\u003e\n  \u003cli\u003e JMock \u003c/li\u003e\n  \u003cli\u003e JMockit \u003c/li\u003e\n  \u003cli\u003e JUnit \u003c/li\u003e\n  \u003cli\u003e Mockito \u003c/li\u003e\n  \u003cli\u003e Rest-assured 2.x, 3.x and 4.x \u003c/li\u003e\n  \u003cli\u003e RxJava 1.x and 2.x \u003c/li\u003e\n  \u003cli\u003e Selenide \u003c/li\u003e\n  \u003cli\u003e Spring’s \u003ccode\u003eorg.springframework.test.web.servlet.ResultActions.andExpect()\u003c/code\u003e and\n  \u003ccode\u003eorg.springframework.test.web.servlet.ResultActions.andExpectAll()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Truth Framework \u003c/li\u003e\n  \u003cli\u003e WireMock \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFurthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be\nconsidered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format\n\u003ccode\u003e\u0026lt;FullyQualifiedClassName\u0026gt;#\u0026lt;MethodName\u0026gt;\u003c/code\u003e, where \u003ccode\u003eMethodName\u003c/code\u003e can end with the wildcard character. For constructors,\nthe pattern should be \u003ccode\u003e\u0026lt;FullyQualifiedClassName\u0026gt;#\u0026lt;init\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eExample:\u0026nbsp;\u003ccode\u003ecom.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#\u0026lt;init\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testDoSomething() {  // Noncompliant\n  MyClass myClass \u003d new MyClass();\n  myClass.doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eExample when \u003ccode\u003ecom.company.CompareToTester#compare*\u003c/code\u003e is used as parameter to the rule.\u003c/p\u003e\n\u003cpre\u003e\nimport com.company.CompareToTester;\n\n@Test\npublic void testDoSomething() {\n  MyClass myClass \u003d new MyClass();\n  assertNull(myClass.doSomething());  // JUnit assertion\n  assertThat(myClass.doSomething()).isNull();  // Fest assertion\n}\n\n@Test\npublic void testDoSomethingElse() {\n  MyClass myClass \u003d new MyClass();\n  new CompareToTester().compareWith(myClass);  // Compliant - custom assertion method defined as rule parameter\n  CompareToTester.compareStatic(myClass);  // Compliant\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eA test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.\u003c/p\u003e\n\u003cp\u003eThis rule raises an exception when no assertions from any of the following known frameworks are found in a test:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e AssertJ \u003c/li\u003e\n  \u003cli\u003e Awaitility \u003c/li\u003e\n  \u003cli\u003e EasyMock \u003c/li\u003e\n  \u003cli\u003e Eclipse Vert.x \u003c/li\u003e\n  \u003cli\u003e Fest 1.x and 2.x \u003c/li\u003e\n  \u003cli\u003e Hamcrest \u003c/li\u003e\n  \u003cli\u003e JMock \u003c/li\u003e\n  \u003cli\u003e JMockit \u003c/li\u003e\n  \u003cli\u003e JUnit \u003c/li\u003e\n  \u003cli\u003e Mockito \u003c/li\u003e\n  \u003cli\u003e Rest-assured 2.x, 3.x and 4.x \u003c/li\u003e\n  \u003cli\u003e RxJava 1.x and 2.x \u003c/li\u003e\n  \u003cli\u003e Selenide \u003c/li\u003e\n  \u003cli\u003e Spring’s \u003ccode\u003eorg.springframework.test.web.servlet.ResultActions.andExpect()\u003c/code\u003e and\n  \u003ccode\u003eorg.springframework.test.web.servlet.ResultActions.andExpectAll()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Truth Framework \u003c/li\u003e\n  \u003cli\u003e WireMock \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFurthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be\nconsidered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format\n\u003ccode\u003e\u0026lt;FullyQualifiedClassName\u0026gt;#\u0026lt;MethodName\u0026gt;\u003c/code\u003e, where \u003ccode\u003eMethodName\u003c/code\u003e can end with the wildcard character. For constructors,\nthe pattern should be \u003ccode\u003e\u0026lt;FullyQualifiedClassName\u0026gt;#\u0026lt;init\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eExample:\u0026nbsp;\u003ccode\u003ecom.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#\u0026lt;init\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testDoSomething() {  // Noncompliant\n  MyClass myClass \u003d new MyClass();\n  myClass.doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eExample when \u003ccode\u003ecom.company.CompareToTester#compare*\u003c/code\u003e is used as parameter to the rule.\u003c/p\u003e\n\u003cpre\u003e\nimport com.company.CompareToTester;\n\n@Test\npublic void testDoSomething() {\n  MyClass myClass \u003d new MyClass();\n  assertNull(myClass.doSomething());  // JUnit assertion\n  assertThat(myClass.doSomething()).isNull();  // Fest assertion\n}\n\n@Test\npublic void testDoSomethingElse() {\n  MyClass myClass \u003d new MyClass();\n  new CompareToTester().compareWith(myClass);  // Compliant - custom assertion method defined as rule parameter\n  CompareToTester.compareStatic(myClass);  // Compliant\n}\n\u003c/pre\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["junit","tests"],"lang":"java","langName":"Java","params":[{"key":"customAssertionMethods","htmlDesc":"Comma-separated list of fully qualified method symbols that should be considered as assertion methods. The wildcard character can be used at the end of the method name.","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2699"]}},{"key":"java:S4635","repo":"java","name":"String offset-based methods should be preferred for finding substrings from offsets","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eLooking for a given substring starting from a specified offset can be achieved by such code: \u003ccode\u003estr.substring(beginIndex).indexOf(char1)\u003c/code\u003e.\nThis works well, but it creates a new \u003ccode\u003eString\u003c/code\u003e for each call to the \u003ccode\u003esubstring\u003c/code\u003e method. When this is done in a loop, a lot of\n\u003ccode\u003eStrings\u003c/code\u003e are created for nothing, which can lead to performance problems if \u003ccode\u003estr\u003c/code\u003e is large.\u003c/p\u003e\n\u003cp\u003eTo avoid performance problems, \u003ccode\u003eString.substring(beginIndex)\u003c/code\u003e should not be chained with the following methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eindexOf(int ch)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eindexOf(String str)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003elastIndexOf(int ch)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003elastIndexOf(String str)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003estartsWith(String prefix)\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor each of these methods, another method with an additional parameter is available to specify an offset.\u003c/p\u003e\n\u003cp\u003eUsing these methods will avoid the creation of additional \u003ccode\u003eString\u003c/code\u003e instances. For indexOf methods, adjust the returned value by\nsubtracting the substring index parameter to obtain the same result.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nstr.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by \"substring\"\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nstr.indexOf(char1, beginIndex) - beginIndex; // index for char1 not found is (-1-beginIndex)\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eLooking for a given substring starting from a specified offset can be achieved by such code: \u003ccode\u003estr.substring(beginIndex).indexOf(char1)\u003c/code\u003e.\nThis works well, but it creates a new \u003ccode\u003eString\u003c/code\u003e for each call to the \u003ccode\u003esubstring\u003c/code\u003e method. When this is done in a loop, a lot of\n\u003ccode\u003eStrings\u003c/code\u003e are created for nothing, which can lead to performance problems if \u003ccode\u003estr\u003c/code\u003e is large.\u003c/p\u003e\n\u003cp\u003eTo avoid performance problems, \u003ccode\u003eString.substring(beginIndex)\u003c/code\u003e should not be chained with the following methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eindexOf(int ch)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eindexOf(String str)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003elastIndexOf(int ch)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003elastIndexOf(String str)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003estartsWith(String prefix)\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor each of these methods, another method with an additional parameter is available to specify an offset.\u003c/p\u003e\n\u003cp\u003eUsing these methods will avoid the creation of additional \u003ccode\u003eString\u003c/code\u003e instances. For indexOf methods, adjust the returned value by\nsubtracting the substring index parameter to obtain the same result.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nstr.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by \"substring\"\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nstr.indexOf(char1, beginIndex) - beginIndex; // index for char1 not found is (-1-beginIndex)\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4635"]}},{"key":"java:S5843","repo":"java","name":"Regular expressions should not be too complicated","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eOverly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you\nshould consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.\u003c/p\u003e\n\u003cp\u003eThe complexity of a regular expression is determined as follows:\u003c/p\u003e\n\u003cp\u003eEach of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting\nlevel by one for its arguments:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e|\u003c/code\u003e - when multiple \u003ccode\u003e|\u003c/code\u003e operators are used together, the subsequent ones only increase the complexity by 1 \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e (inside character classes) - when multiple \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operators are used together, the subsequent ones\n  only increase the complexity by 1 \u003c/li\u003e\n  \u003cli\u003e Quantifiers (\u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e?\u003c/code\u003e, \u003ccode\u003e{n,m}\u003c/code\u003e, \u003ccode\u003e{n,}\u003c/code\u003e or \u003ccode\u003e{n}\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e Non-capturing groups that set flags (such as \u003ccode\u003e(?i:some_pattern)\u003c/code\u003e or \u003ccode\u003e(?i)some_pattern\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e Lookahead and lookbehind assertions \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdditionally, each use of the following features increase the complexity by 1 regardless of nesting:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e character classes \u003c/li\u003e\n  \u003cli\u003e back references \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf a regular expression is split among multiple variables, the complexity is calculated for each variable individually, not for the whole regular\nexpression. If a regular expression is split over multiple lines, each line is treated individually if it is accompanied by a comment (either a Java\ncomment or a comment within the regular expression), otherwise the regular expression is analyzed as a whole.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (dateString.matches(\"^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[13-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\")) {\n    handleDate(dateString);\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (dateString.matches(\"^\\\\d{1,2}([-/.])\\\\d{1,2}\\\\1\\\\d{1,4}$\")) {\n    String dateParts[] \u003d dateString.split(\"[-/.]\");\n    int day \u003d Integer.parseInt(dateParts[0]);\n    int month \u003d Integer.parseInt(dateParts[1]);\n    int year \u003d Integer.parseInt(dateParts[2]);\n    // Put logic to validate and process the date based on its integer parts here\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eRegular expressions are only analyzed if all parts of the regular expression are either string literals, effectively final local variables or\n\u003ccode\u003estatic final\u003c/code\u003e fields, all of which can be combined using the \u0027\u003ccode\u003e+\u003c/code\u003e\u0027 operator.\u003c/p\u003e\n\u003cp\u003eWhen a regular expression is split among multiple variables or commented lines, each part is only analyzed if it is syntactically valid by\nitself.\u003c/p\u003e","mdDesc":"\u003cp\u003eOverly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you\nshould consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.\u003c/p\u003e\n\u003cp\u003eThe complexity of a regular expression is determined as follows:\u003c/p\u003e\n\u003cp\u003eEach of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting\nlevel by one for its arguments:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e|\u003c/code\u003e - when multiple \u003ccode\u003e|\u003c/code\u003e operators are used together, the subsequent ones only increase the complexity by 1 \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e (inside character classes) - when multiple \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e operators are used together, the subsequent ones\n  only increase the complexity by 1 \u003c/li\u003e\n  \u003cli\u003e Quantifiers (\u003ccode\u003e*\u003c/code\u003e, \u003ccode\u003e+\u003c/code\u003e, \u003ccode\u003e?\u003c/code\u003e, \u003ccode\u003e{n,m}\u003c/code\u003e, \u003ccode\u003e{n,}\u003c/code\u003e or \u003ccode\u003e{n}\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e Non-capturing groups that set flags (such as \u003ccode\u003e(?i:some_pattern)\u003c/code\u003e or \u003ccode\u003e(?i)some_pattern\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e Lookahead and lookbehind assertions \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eAdditionally, each use of the following features increase the complexity by 1 regardless of nesting:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e character classes \u003c/li\u003e\n  \u003cli\u003e back references \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf a regular expression is split among multiple variables, the complexity is calculated for each variable individually, not for the whole regular\nexpression. If a regular expression is split over multiple lines, each line is treated individually if it is accompanied by a comment (either a Java\ncomment or a comment within the regular expression), otherwise the regular expression is analyzed as a whole.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (dateString.matches(\"^(?:(?:31(\\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\\/|-|\\\\.)(?:0?[13-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\d|2[0-8])(\\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\")) {\n    handleDate(dateString);\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (dateString.matches(\"^\\\\d{1,2}([-/.])\\\\d{1,2}\\\\1\\\\d{1,4}$\")) {\n    String dateParts[] \u003d dateString.split(\"[-/.]\");\n    int day \u003d Integer.parseInt(dateParts[0]);\n    int month \u003d Integer.parseInt(dateParts[1]);\n    int year \u003d Integer.parseInt(dateParts[2]);\n    // Put logic to validate and process the date based on its integer parts here\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eRegular expressions are only analyzed if all parts of the regular expression are either string literals, effectively final local variables or\n\u003ccode\u003estatic final\u003c/code\u003e fields, all of which can be combined using the \u0027\u003ccode\u003e+\u003c/code\u003e\u0027 operator.\u003c/p\u003e\n\u003cp\u003eWhen a regular expression is split among multiple variables or commented lines, each part is only analyzed if it is syntactically valid by\nitself.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["regex"],"lang":"java","langName":"Java","params":[{"key":"maxComplexity","htmlDesc":"The maximum authorized complexity.","defaultValue":"20","type":"INTEGER"}],"defaultDebtRemFnType":"LINEAR_OFFSET","defaultDebtRemFnCoeff":"2min","defaultDebtRemFnOffset":"8min","effortToFixDescription":"number of complexity points over the configurable limit","debtOverloaded":false,"debtRemFnType":"LINEAR_OFFSET","debtRemFnCoeff":"2min","debtRemFnOffset":"8min","type":"CODE_SMELL","defaultRemFnType":"LINEAR_OFFSET","defaultRemFnGapMultiplier":"2min","defaultRemFnBaseEffort":"8min","remFnType":"LINEAR_OFFSET","remFnGapMultiplier":"2min","remFnBaseEffort":"8min","remFnOverloaded":false,"gapDescription":"number of complexity points over the configurable limit","scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5843"]}},{"key":"java:S1120","repo":"java","name":"Source code should be indented consistently","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eProper indentation is a simple and effective way to improve the code’s readability. Consistent indentation among the developers within a team also\nreduces the differences that are committed to source control systems, making code reviews easier.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith an indent size of 2:\u003c/p\u003e\n\u003cpre\u003e\nclass Foo {\n  public int a;\n   public int b;   // Noncompliant, expected to start at column 4\n\n...\n\n  public void doSomething() {\n    if(something) {\n          doSomethingElse();  // Noncompliant, expected to start at column 6\n  }   // Noncompliant, expected to start at column 4\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass Foo {\n  public int a;\n  public int b;\n\n...\n\n  public void doSomething() {\n    if(something) {\n        doSomethingElse();\n    }\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eProper indentation is a simple and effective way to improve the code’s readability. Consistent indentation among the developers within a team also\nreduces the differences that are committed to source control systems, making code reviews easier.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith an indent size of 2:\u003c/p\u003e\n\u003cpre\u003e\nclass Foo {\n  public int a;\n   public int b;   // Noncompliant, expected to start at column 4\n\n...\n\n  public void doSomething() {\n    if(something) {\n          doSomethingElse();  // Noncompliant, expected to start at column 6\n  }   // Noncompliant, expected to start at column 4\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass Foo {\n  public int a;\n  public int b;\n\n...\n\n  public void doSomething() {\n    if(something) {\n        doSomethingElse();\n    }\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"indentationLevel","htmlDesc":"Number of white-spaces of an indent.","defaultValue":"2","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:IndentationCheck"]}},{"key":"java:S1121","repo":"java","name":"Assignments should not be made from within sub-expressions","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAssignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif ((str \u003d cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant\n  //...\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nstr \u003d cont.substring(pos1, pos2);\nif (str.isEmpty()) {\n  //...\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eAssignments in \u003ccode\u003ewhile\u003c/code\u003e statement conditions, and assignments enclosed in relational expressions are ignored.\u003c/p\u003e\n\u003cpre\u003e\nBufferedReader br \u003d new BufferedReader(/* ... */);\nString line;\nwhile ((line \u003d br.readLine()) !\u003d null) {...}\n\u003c/pre\u003e\n\u003cp\u003eChained assignments, including compound assignments, are ignored.\u003c/p\u003e\n\u003cpre\u003e\nint i \u003d j \u003d 0;\nint k \u003d (j +\u003d 1);\nresult \u003d (bresult \u003d new byte[len]);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/481.html\"\u003eMITRE, CWE-481\u003c/a\u003e - Assigning instead of Comparing \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/ZNYxBQ\"\u003eCERT, EXP45-C.\u003c/a\u003e - Do not perform assignments in selection statements \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/ITZGBQ\"\u003eCERT, EXP51-J.\u003c/a\u003e - Do not perform assignments in conditional expressions \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eAssignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif ((str \u003d cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant\n  //...\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nstr \u003d cont.substring(pos1, pos2);\nif (str.isEmpty()) {\n  //...\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eAssignments in \u003ccode\u003ewhile\u003c/code\u003e statement conditions, and assignments enclosed in relational expressions are ignored.\u003c/p\u003e\n\u003cpre\u003e\nBufferedReader br \u003d new BufferedReader(/* ... */);\nString line;\nwhile ((line \u003d br.readLine()) !\u003d null) {...}\n\u003c/pre\u003e\n\u003cp\u003eChained assignments, including compound assignments, are ignored.\u003c/p\u003e\n\u003cpre\u003e\nint i \u003d j \u003d 0;\nint k \u003d (j +\u003d 1);\nresult \u003d (bresult \u003d new byte[len]);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/481.html\"\u003eMITRE, CWE-481\u003c/a\u003e - Assigning instead of Comparing \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/ZNYxBQ\"\u003eCERT, EXP45-C.\u003c/a\u003e - Do not perform assignments in selection statements \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/ITZGBQ\"\u003eCERT, EXP51-J.\u003c/a\u003e - Do not perform assignments in conditional expressions \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe","suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:AssignmentInSubExpressionCheck"]}},{"key":"java:S1128","repo":"java","name":"Unnecessary imports should be removed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.\u003c/p\u003e\n\u003cp\u003eUnused and useless imports should not occur if that is the case.\u003c/p\u003e\n\u003cp\u003eLeaving them in reduces the code’s readability, since their presence can be confusing.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; \u0027SomeType\u0027 is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eImports for types mentioned in Javadocs are ignored.\u003c/p\u003e","mdDesc":"\u003cp\u003eThe imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer.\u003c/p\u003e\n\u003cp\u003eUnused and useless imports should not occur if that is the case.\u003c/p\u003e\n\u003cp\u003eLeaving them in reduces the code’s readability, since their presence can be confusing.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; \u0027SomeType\u0027 is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eImports for types mentioned in Javadocs are ignored.\u003c/p\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:UselessImportCheck"]}},{"key":"java:S1174","repo":"java","name":"\"Object.finalize()\" should remain protected (versus public) when overriding","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe contract of the \u003ccode\u003eObject.finalize()\u003c/code\u003e method is clear: only the Garbage Collector is supposed to call this method.\u003c/p\u003e\n\u003cp\u003eMaking this method public is misleading, because it implies that any caller can use it.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/583.html\"\u003eMITRE, CWE-583\u003c/a\u003e - finalize() Method Declared Public \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\"\u003eCERT, MET12-J.\u003c/a\u003e - Do not use finalizers \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThe contract of the \u003ccode\u003eObject.finalize()\u003c/code\u003e method is clear: only the Garbage Collector is supposed to call this method.\u003c/p\u003e\n\u003cp\u003eMaking this method public is misleading, because it implies that any caller can use it.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/583.html\"\u003eMITRE, CWE-583\u003c/a\u003e - finalize() Method Declared Public \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\"\u003eCERT, MET12-J.\u003c/a\u003e - Do not use finalizers \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1174"]}},{"key":"java:S1176","repo":"java","name":"Public types, methods and fields (API) should be documented with Javadoc","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eTry to imagine using the standard Java API (Collections, JDBC, IO, …​) without Javadoc. It would be a nightmare, because Javadoc is the only way to\nunderstand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.\u003c/p\u003e\n\u003cp\u003eOn top of a main description for each member of a public API, the following Javadoc elements are required to be described:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Parameters, using \u003ccode\u003e@param parameterName\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Thrown exceptions, using \u003ccode\u003e@throws exceptionName\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Method return values, using \u003ccode\u003e@return\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Generic types, using \u003ccode\u003e@param \u0026lt;T\u0026gt;\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFurthermore the following guidelines should be followed:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e At least 1 line of description. \u003c/li\u003e\n  \u003cli\u003e All parameters documented with \u003ccode\u003e@param\u003c/code\u003e, and names should match. \u003c/li\u003e\n  \u003cli\u003e All checked exceptions documented with \u003ccode\u003e@throws\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e@return\u003c/code\u003e present and documented when not \u003ccode\u003evoid\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Placeholders like \u003ccode\u003e\"TODO\"\u003c/code\u003e, \u003ccode\u003e\"FIXME\"\u003c/code\u003e, \u003ccode\u003e\"...\"\u003c/code\u003e should be avoided. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe following public methods and constructors are not taken into account by this rule:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Getters and setters. \u003c/li\u003e\n  \u003cli\u003e Methods overriding another method (usually decorated with \u003ccode\u003e@Override\u003c/code\u003e). \u003c/li\u003e\n  \u003cli\u003e Empty constructors. \u003c/li\u003e\n  \u003cli\u003e Static constants. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor the parameters of the rule, the following rules are applied:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e?\u003c/code\u003e matches a single character \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e*\u003c/code\u003e matches zero or more characters \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e**\u003c/code\u003e matches zero or more packages \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003ejava.internal.InternalClass\u003c/code\u003e will match only \u003ccode\u003eInternalClass\u003c/code\u003e class. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ejava.internal.*\u003c/code\u003e will match any member of \u003ccode\u003ejava.internal\u003c/code\u003e package. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ejava.internal.**\u003c/code\u003e same as above, but including sub-packages. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass\u0026lt;T\u0026gt; implements Runnable {    // Noncompliant - missing \u0027@param \u0026lt;T\u0026gt;\u0027\n\n  public static final DEFAULT_STATUS \u003d 0;    // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                  // Noncompliant\n\n  public MyClass() {                         // Noncompliant - missing documentation\n    this.status \u003d DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {  // Compliant - setter\n    this.status \u003d status;\n  }\n\n  @Override\n  public void run() {                          // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {    // Compliant - not public\n  }\n\n  public void doSomething2(int value) {  // Noncompliant\n  }\n\n  public int doSomething3(int value) {  // Noncompliant\n    return value;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n/**\n  * This is a Javadoc comment\n  * @param \u0026lt;T\u0026gt; the parameter of the class\n  */\npublic class MyClass\u0026lt;T\u0026gt; implements Runnable {\n\n  public static final DEFAULT_STATUS \u003d 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status \u003d DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status \u003d status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * Will do something.\n    * @param value the value to be used\n    */\n  public void doSomething(int value) {\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eTry to imagine using the standard Java API (Collections, JDBC, IO, …​) without Javadoc. It would be a nightmare, because Javadoc is the only way to\nunderstand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.\u003c/p\u003e\n\u003cp\u003eOn top of a main description for each member of a public API, the following Javadoc elements are required to be described:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Parameters, using \u003ccode\u003e@param parameterName\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Thrown exceptions, using \u003ccode\u003e@throws exceptionName\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Method return values, using \u003ccode\u003e@return\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Generic types, using \u003ccode\u003e@param \u0026lt;T\u0026gt;\u003c/code\u003e. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFurthermore the following guidelines should be followed:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e At least 1 line of description. \u003c/li\u003e\n  \u003cli\u003e All parameters documented with \u003ccode\u003e@param\u003c/code\u003e, and names should match. \u003c/li\u003e\n  \u003cli\u003e All checked exceptions documented with \u003ccode\u003e@throws\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e@return\u003c/code\u003e present and documented when not \u003ccode\u003evoid\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e Placeholders like \u003ccode\u003e\"TODO\"\u003c/code\u003e, \u003ccode\u003e\"FIXME\"\u003c/code\u003e, \u003ccode\u003e\"...\"\u003c/code\u003e should be avoided. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThe following public methods and constructors are not taken into account by this rule:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Getters and setters. \u003c/li\u003e\n  \u003cli\u003e Methods overriding another method (usually decorated with \u003ccode\u003e@Override\u003c/code\u003e). \u003c/li\u003e\n  \u003cli\u003e Empty constructors. \u003c/li\u003e\n  \u003cli\u003e Static constants. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor the parameters of the rule, the following rules are applied:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e?\u003c/code\u003e matches a single character \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e*\u003c/code\u003e matches zero or more characters \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e**\u003c/code\u003e matches zero or more packages \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003ejava.internal.InternalClass\u003c/code\u003e will match only \u003ccode\u003eInternalClass\u003c/code\u003e class. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ejava.internal.*\u003c/code\u003e will match any member of \u003ccode\u003ejava.internal\u003c/code\u003e package. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ejava.internal.**\u003c/code\u003e same as above, but including sub-packages. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass\u0026lt;T\u0026gt; implements Runnable {    // Noncompliant - missing \u0027@param \u0026lt;T\u0026gt;\u0027\n\n  public static final DEFAULT_STATUS \u003d 0;    // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                  // Noncompliant\n\n  public MyClass() {                         // Noncompliant - missing documentation\n    this.status \u003d DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {  // Compliant - setter\n    this.status \u003d status;\n  }\n\n  @Override\n  public void run() {                          // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {    // Compliant - not public\n  }\n\n  public void doSomething2(int value) {  // Noncompliant\n  }\n\n  public int doSomething3(int value) {  // Noncompliant\n    return value;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n/**\n  * This is a Javadoc comment\n  * @param \u0026lt;T\u0026gt; the parameter of the class\n  */\npublic class MyClass\u0026lt;T\u0026gt; implements Runnable {\n\n  public static final DEFAULT_STATUS \u003d 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status \u003d DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status \u003d status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * Will do something.\n    * @param value the value to be used\n    */\n  public void doSomething(int value) {\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"forClasses","htmlDesc":"Pattern of classes which should adhere to this constraint. Ex : *\u003cstrong\u003e.api.\u003c/strong\u003e*","defaultValue":"**.api.**","type":"STRING"},{"key":"exclusion","htmlDesc":"Pattern of classes which are excluded from adhering to this constraint.","defaultValue":"**.internal.**","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:UndocumentedApi"]}},{"key":"java:S1481","repo":"java","name":"Unused local variables should be removed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIf a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic int numberOfMinutes(int hours) {\n  int seconds \u003d 0;   // seconds is never used\n  return hours * 60;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIf a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic int numberOfMinutes(int hours) {\n  int seconds \u003d 0;   // seconds is never used\n  return hours * 60;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1481"]}},{"key":"java:S2143","repo":"java","name":"\"java.time\" classes should be used for dates and times","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe old, much-derided \u003ccode\u003eDate\u003c/code\u003e and \u003ccode\u003eCalendar\u003c/code\u003e classes have always been confusing and difficult to use properly, particularly in\na multi-threaded context. \u003ccode\u003eJodaTime\u003c/code\u003e has long been a popular alternative, but now an even better option is built-in. Java 8’s JSR 310\nimplementation offers specific classes for:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eClass\u003c/th\u003e\n      \u003cth\u003eUse for\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLocalDate\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ea date, without time of day, offset, or zone\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLocalTime\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ethe time of day, without date, offset, or zone\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLocalDateTime\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ethe date and time, without offset, or zone\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eOffsetDate\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ea date with an offset such as +02:00, without time of day, or zone\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eOffsetTime\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ethe time of day with an offset such as +02:00, without date, or zone\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eOffsetDateTime\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ethe date and time with an offset such as +02:00, without a zone\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eZonedDateTime\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ethe date and time with a time zone and offset\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eYearMonth\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ea year and month\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMonthDay\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003emonth and day\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eYear/MonthOfDay/DayOfWeek/…​\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eclasses for the important fields\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eDateTimeFields\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003estores a map of field-value pairs which may be invalid\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eCalendrical\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eaccess to the low-level API\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ePeriod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ea descriptive amount of time, such as \"2 months and 3 days\"\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nDate now \u003d new Date();  // Noncompliant\nDateFormat df \u003d new SimpleDateFormat(\"dd.MM.yyyy\");\nCalendar christmas  \u003d Calendar.getInstance();  // Noncompliant\nchristmas.setTime(df.parse(\"25.12.2020\"));\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nLocalDate now \u003d LocalDate.now();  // gets calendar date. no time component\nLocalTime now2 \u003d LocalTime.now(); // gets current time. no date component\nLocalDate christmas \u003d LocalDate.of(2020,12,25);\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe old, much-derided \u003ccode\u003eDate\u003c/code\u003e and \u003ccode\u003eCalendar\u003c/code\u003e classes have always been confusing and difficult to use properly, particularly in\na multi-threaded context. \u003ccode\u003eJodaTime\u003c/code\u003e has long been a popular alternative, but now an even better option is built-in. Java 8’s JSR 310\nimplementation offers specific classes for:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eClass\u003c/th\u003e\n      \u003cth\u003eUse for\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLocalDate\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ea date, without time of day, offset, or zone\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLocalTime\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ethe time of day, without date, offset, or zone\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eLocalDateTime\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ethe date and time, without offset, or zone\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eOffsetDate\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ea date with an offset such as +02:00, without time of day, or zone\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eOffsetTime\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ethe time of day with an offset such as +02:00, without date, or zone\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eOffsetDateTime\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ethe date and time with an offset such as +02:00, without a zone\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eZonedDateTime\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ethe date and time with a time zone and offset\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eYearMonth\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ea year and month\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eMonthDay\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003emonth and day\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eYear/MonthOfDay/DayOfWeek/…​\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eclasses for the important fields\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eDateTimeFields\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003estores a map of field-value pairs which may be invalid\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eCalendrical\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003eaccess to the low-level API\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ePeriod\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ea descriptive amount of time, such as \"2 months and 3 days\"\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nDate now \u003d new Date();  // Noncompliant\nDateFormat df \u003d new SimpleDateFormat(\"dd.MM.yyyy\");\nCalendar christmas  \u003d Calendar.getInstance();  // Noncompliant\nchristmas.setTime(df.parse(\"25.12.2020\"));\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nLocalDate now \u003d LocalDate.now();  // gets calendar date. no time component\nLocalTime now2 \u003d LocalTime.now(); // gets current time. no date component\nLocalDate christmas \u003d LocalDate.of(2020,12,25);\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8","pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2143"]}},{"key":"java:S2147","repo":"java","name":"Catches should be combined","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eSince Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple \u003ccode\u003ecatch\u003c/code\u003e blocks have the same code, they\nshould be combined for better readability.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e7\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eSince Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple \u003ccode\u003ecatch\u003c/code\u003e blocks have the same code, they\nshould be combined for better readability.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e7\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2147"]}},{"key":"java:S2148","repo":"java","name":"Underscores should be used to make large numbers readable","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eBeginning with Java 7, it is possible to add underscores (\u0027_\u0027) to numeric literals to enhance readability. The addition of underscores in this\nmanner has no semantic meaning, but makes it easier for maintainers to understand the code.\u003c/p\u003e\n\u003cp\u003eThe number of digits to the left of a decimal point needed to trigger this rule varies by base.\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eBase\u003c/th\u003e\n      \u003cth\u003eMinimum digits\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ebinary\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eoctal\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003edecimal\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ehexadecimal\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eIt is only the presence of underscores, not their spacing that is scrutinized by this rule.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e7\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint i \u003d 10000000;  // Noncompliant; is this 10 million or 100 million?\nint  j \u003d 0b01101001010011011110010101011110;  // Noncompliant\nlong l \u003d 0x7fffffffffffffffL;  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint i \u003d 10_000_000;\nint  j \u003d 0b01101001_01001101_11100101_01011110;\nlong l \u003d 0x7fff_ffff_ffff_ffffL;\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eBeginning with Java 7, it is possible to add underscores (\u0027_\u0027) to numeric literals to enhance readability. The addition of underscores in this\nmanner has no semantic meaning, but makes it easier for maintainers to understand the code.\u003c/p\u003e\n\u003cp\u003eThe number of digits to the left of a decimal point needed to trigger this rule varies by base.\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eBase\u003c/th\u003e\n      \u003cth\u003eMinimum digits\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ebinary\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eoctal\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003edecimal\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e6\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ehexadecimal\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eIt is only the presence of underscores, not their spacing that is scrutinized by this rule.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e7\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint i \u003d 10000000;  // Noncompliant; is this 10 million or 100 million?\nint  j \u003d 0b01101001010011011110010101011110;  // Noncompliant\nlong l \u003d 0x7fffffffffffffffL;  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint i \u003d 10_000_000;\nint  j \u003d 0b01101001_01001101_11100101_01011110;\nlong l \u003d 0x7fff_ffff_ffff_ffffL;\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2148"]}},{"key":"java:S2211","repo":"java","name":"Types should be used in lambdas","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the\ncode clearer and easier to read.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nArrays.sort(rosterAsArray,\n    (a, b) -\u0026gt; {  // Noncompliant\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nArrays.sort(rosterAsArray,\n    (Person a, Person b) -\u0026gt; {\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen the lambda has one or two parameters and does not have a block this rule will not fire up an issue as things are considered more readable in\nthose cases.\u003c/p\u003e\n\u003cpre\u003e\nstream.map((a, b) -\u0026gt; a.length); // compliant\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the\ncode clearer and easier to read.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nArrays.sort(rosterAsArray,\n    (a, b) -\u0026gt; {  // Noncompliant\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nArrays.sort(rosterAsArray,\n    (Person a, Person b) -\u0026gt; {\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen the lambda has one or two parameters and does not have a block this rule will not fire up an issue as things are considered more readable in\nthose cases.\u003c/p\u003e\n\u003cpre\u003e\nstream.map((a, b) -\u0026gt; a.length); // compliant\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention","java8"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2211"]}},{"key":"java:S2384","repo":"java","name":"Mutable members should not be stored or returned directly","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eMutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be\nreturned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.\u003c/p\u003e\n\u003cp\u003eInstead use an unmodifiable \u003ccode\u003eCollection\u003c/code\u003e (via \u003ccode\u003eCollections.unmodifiableCollection\u003c/code\u003e,\n\u003ccode\u003eCollections.unmodifiableList\u003c/code\u003e, …​) or make a copy of the mutable object, and store or return the copy instead.\u003c/p\u003e\n\u003cp\u003eThis rule checks that arrays, collections and Dates are not stored or returned directly.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings \u003d new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings \u003d strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a \u003d new A();  // At this point a.strings \u003d {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] \u003d \"yellow\";  // a.strings \u003d {\"yellow\", \"second\"};\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings \u003d new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings.clone();\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings \u003d strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a \u003d new A();  // At this point a.strings \u003d {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] \u003d \"yellow\";  // a.strings \u003d {\"first\", \"second\"};\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/374.html\"\u003eMITRE, CWE-374\u003c/a\u003e - Passing Mutable Objects to an Untrusted Method \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/375.html\"\u003eMITRE, CWE-375\u003c/a\u003e - Returning a Mutable Object to an Untrusted Caller \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/OTdGBQ\"\u003eCERT, OBJ05-J.\u003c/a\u003e - Do not return references to private mutable class members \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/HTdGBQ\"\u003eCERT, OBJ06-J.\u003c/a\u003e - Defensively copy mutable inputs and mutable internal components\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/VzZGBQ\"\u003eCERT, OBJ13-J.\u003c/a\u003e - Ensure that references to mutable objects are not exposed \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eMutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be\nreturned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.\u003c/p\u003e\n\u003cp\u003eInstead use an unmodifiable \u003ccode\u003eCollection\u003c/code\u003e (via \u003ccode\u003eCollections.unmodifiableCollection\u003c/code\u003e,\n\u003ccode\u003eCollections.unmodifiableList\u003c/code\u003e, …​) or make a copy of the mutable object, and store or return the copy instead.\u003c/p\u003e\n\u003cp\u003eThis rule checks that arrays, collections and Dates are not stored or returned directly.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings \u003d new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings \u003d strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a \u003d new A();  // At this point a.strings \u003d {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] \u003d \"yellow\";  // a.strings \u003d {\"yellow\", \"second\"};\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings \u003d new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings.clone();\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings \u003d strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a \u003d new A();  // At this point a.strings \u003d {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] \u003d \"yellow\";  // a.strings \u003d {\"first\", \"second\"};\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/374.html\"\u003eMITRE, CWE-374\u003c/a\u003e - Passing Mutable Objects to an Untrusted Method \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/375.html\"\u003eMITRE, CWE-375\u003c/a\u003e - Returning a Mutable Object to an Untrusted Caller \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/OTdGBQ\"\u003eCERT, OBJ05-J.\u003c/a\u003e - Do not return references to private mutable class members \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/HTdGBQ\"\u003eCERT, OBJ06-J.\u003c/a\u003e - Defensively copy mutable inputs and mutable internal components\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/VzZGBQ\"\u003eCERT, OBJ13-J.\u003c/a\u003e - Ensure that references to mutable objects are not exposed \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe","unpredictable"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2384"]}},{"key":"java:S2386","repo":"java","name":"Mutable fields should not be \"public static\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere is no good reason to have a mutable object as the \u003ccode\u003epublic\u003c/code\u003e (by default), \u003ccode\u003estatic\u003c/code\u003e member of an \u003ccode\u003einterface\u003c/code\u003e.\nSuch variables should be moved into classes and their visibility lowered.\u003c/p\u003e\n\u003cp\u003eSimilarly, mutable \u003ccode\u003estatic\u003c/code\u003e members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field \u003ccode\u003efinal\u003c/code\u003e if appropriate.\u003c/p\u003e\n\u003cp\u003eNote that making a mutable field, such as an array, \u003ccode\u003efinal\u003c/code\u003e will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn’t accomplish the goal).\u003c/p\u003e\n\u003cp\u003eThis rule raises issues for \u003ccode\u003epublic static\u003c/code\u003e array, \u003ccode\u003eCollection\u003c/code\u003e, \u003ccode\u003eDate\u003c/code\u003e, and \u003ccode\u003eawt.Point\u003c/code\u003e members.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 \u003d {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 \u003d {\"first\",\"second\"};  // Noncompliant\n  public static List\u0026lt;String\u0026gt; strings3 \u003d new ArrayList\u0026lt;\u0026gt;();  // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/582.html\"\u003eMITRE, CWE-582\u003c/a\u003e - Array Declared Public, Final, and Static \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/607.html\"\u003eMITRE, CWE-607\u003c/a\u003e - Public Static Final Field References Mutable Object \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/LjdGBQ\"\u003eCERT, OBJ01-J.\u003c/a\u003e - Limit accessibility of fields \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/VzZGBQ\"\u003eCERT, OBJ13-J.\u003c/a\u003e - Ensure that references to mutable objects are not exposed \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThere is no good reason to have a mutable object as the \u003ccode\u003epublic\u003c/code\u003e (by default), \u003ccode\u003estatic\u003c/code\u003e member of an \u003ccode\u003einterface\u003c/code\u003e.\nSuch variables should be moved into classes and their visibility lowered.\u003c/p\u003e\n\u003cp\u003eSimilarly, mutable \u003ccode\u003estatic\u003c/code\u003e members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field \u003ccode\u003efinal\u003c/code\u003e if appropriate.\u003c/p\u003e\n\u003cp\u003eNote that making a mutable field, such as an array, \u003ccode\u003efinal\u003c/code\u003e will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn’t accomplish the goal).\u003c/p\u003e\n\u003cp\u003eThis rule raises issues for \u003ccode\u003epublic static\u003c/code\u003e array, \u003ccode\u003eCollection\u003c/code\u003e, \u003ccode\u003eDate\u003c/code\u003e, and \u003ccode\u003eawt.Point\u003c/code\u003e members.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 \u003d {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 \u003d {\"first\",\"second\"};  // Noncompliant\n  public static List\u0026lt;String\u0026gt; strings3 \u003d new ArrayList\u0026lt;\u0026gt;();  // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/582.html\"\u003eMITRE, CWE-582\u003c/a\u003e - Array Declared Public, Final, and Static \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/607.html\"\u003eMITRE, CWE-607\u003c/a\u003e - Public Static Final Field References Mutable Object \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/LjdGBQ\"\u003eCERT, OBJ01-J.\u003c/a\u003e - Limit accessibility of fields \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/VzZGBQ\"\u003eCERT, OBJ13-J.\u003c/a\u003e - Ensure that references to mutable objects are not exposed \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe","unpredictable"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2386"]}},{"key":"java:S2387","repo":"java","name":"Child class fields should not shadow parent class fields","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eHaving a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you’ll get confusion at\nbest, chaos at worst.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule ignores same-name fields that are \u003ccode\u003estatic\u003c/code\u003e in both the parent and child classes. This rule ignores \u003ccode\u003eprivate\u003c/code\u003e parent\nclass fields, but in all other such cases, the child class field should be renamed.\u003c/p\u003e\n\u003cpre\u003e\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field \u0027ripe\u0027 is anyway not visible from Raspberry\n  // ...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eHaving a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you’ll get confusion at\nbest, chaos at worst.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule ignores same-name fields that are \u003ccode\u003estatic\u003c/code\u003e in both the parent and child classes. This rule ignores \u003ccode\u003eprivate\u003c/code\u003e parent\nclass fields, but in all other such cases, the child class field should be renamed.\u003c/p\u003e\n\u003cpre\u003e\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field \u0027ripe\u0027 is anyway not visible from Raspberry\n  // ...\n}\n\u003c/pre\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2387"]}},{"key":"java:S2388","repo":"java","name":"Inner class calls to super class methods should be unambiguous","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can\nbe confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called\nexplicitly, using \u003ccode\u003esuper.\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can\nbe confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called\nexplicitly, using \u003ccode\u003esuper.\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2388"]}},{"key":"java:S2692","repo":"java","name":"\"indexOf\" checks should not be for positive numbers","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eMost checks against an \u003ccode\u003eindexOf\u003c/code\u003e value compare it with -1 because 0 is a valid index. Any checks which look for values \u0026gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a \u003ccode\u003eString\u003c/code\u003e or a \u003ccode\u003eList\u003c/code\u003e, consider\nusing the \u003ccode\u003econtains\u003c/code\u003e method instead.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an \u003ccode\u003eindexOf\u003c/code\u003e value retrieved either from a \u003ccode\u003eString\u003c/code\u003e or a \u003ccode\u003eList\u003c/code\u003e is tested against\n\u003ccode\u003e\u0026gt;0\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString color \u003d \"blue\";\nString name \u003d \"ishmael\";\n\nList\u0026lt;String\u0026gt; strings \u003d new ArrayList\u0026lt;String\u0026gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) \u0026gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") \u0026gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") \u0026gt; 0) { // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString color \u003d \"blue\";\nString name \u003d \"ishmael\";\n\nList\u0026lt;String\u0026gt; strings \u003d new ArrayList\u0026lt;String\u0026gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) \u0026gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") \u0026gt;\u003d 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eMost checks against an \u003ccode\u003eindexOf\u003c/code\u003e value compare it with -1 because 0 is a valid index. Any checks which look for values \u0026gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a \u003ccode\u003eString\u003c/code\u003e or a \u003ccode\u003eList\u003c/code\u003e, consider\nusing the \u003ccode\u003econtains\u003c/code\u003e method instead.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an \u003ccode\u003eindexOf\u003c/code\u003e value retrieved either from a \u003ccode\u003eString\u003c/code\u003e or a \u003ccode\u003eList\u003c/code\u003e is tested against\n\u003ccode\u003e\u0026gt;0\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString color \u003d \"blue\";\nString name \u003d \"ishmael\";\n\nList\u0026lt;String\u0026gt; strings \u003d new ArrayList\u0026lt;String\u0026gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) \u0026gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") \u0026gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") \u0026gt; 0) { // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString color \u003d \"blue\";\nString name \u003d \"ishmael\";\n\nList\u0026lt;String\u0026gt; strings \u003d new ArrayList\u0026lt;String\u0026gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) \u0026gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") \u0026gt;\u003d 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2692"]}},{"key":"java:S2693","repo":"java","name":"Threads should not be started in constructors","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe problem with invoking \u003ccode\u003eThread.start()\u003c/code\u003e in a constructor is that you’ll have a confusing mess on your hands if the class is ever\nextended because the superclass\u0027 constructor will start the thread before the child class has truly been initialized.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue any time \u003ccode\u003estart\u003c/code\u003e is invoked in the constructor of a non-\u003ccode\u003efinal\u003c/code\u003e class.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  Thread thread \u003d null;\n\n  public MyClass(Runnable runnable) {\n    thread \u003d new Thread(runnable);\n    thread.start(); // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/FDdGBQ\"\u003eCERT, TSM02-J.\u003c/a\u003e - Do not use background threads during class initialization \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThe problem with invoking \u003ccode\u003eThread.start()\u003c/code\u003e in a constructor is that you’ll have a confusing mess on your hands if the class is ever\nextended because the superclass\u0027 constructor will start the thread before the child class has truly been initialized.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue any time \u003ccode\u003estart\u003c/code\u003e is invoked in the constructor of a non-\u003ccode\u003efinal\u003c/code\u003e class.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  Thread thread \u003d null;\n\n  public MyClass(Runnable runnable) {\n    thread \u003d new Thread(runnable);\n    thread.start(); // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/FDdGBQ\"\u003eCERT, TSM02-J.\u003c/a\u003e - Do not use background threads during class initialization \u003c/li\u003e\n\u003c/ul\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","multi-threading","pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2693"]}},{"key":"java:S2694","repo":"java","name":"Inner classes which do not reference their owning classes should be \"static\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA non-static inner class has a reference to its outer class, and access to the outer class\u0027 fields and methods. That class reference makes the\ninner class larger and could cause the outer class instance to live in memory longer than necessary.\u003c/p\u003e\n\u003cp\u003eIf the reference to the outer class isn’t used, it is more efficient to make the inner class \u003ccode\u003estatic\u003c/code\u003e (also called nested). If the\nreference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will\nalso be necessary to name it.\u003c/p\u003e\n\u003cp\u003eHowever, while a nested/\u003ccode\u003estatic\u003c/code\u003e class would be more efficient, it’s worth noting that there are semantic differences between an inner\nclass and a nested one:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e an inner class can only be instantiated within the context of an instance of the outer class. \u003c/li\u003e\n  \u003cli\u003e a nested (\u003ccode\u003estatic\u003c/code\u003e) class can be instantiated independently of the outer class. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there\u0027s no use of the outer class reference so make it static\n    int germinationDays \u003d 0;\n    public Seed(int germinationDays) {\n      this.germinationDays \u003d germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays \u003d 0;\n    public Seed(int germinationDays) {\n      this.germinationDays \u003d germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eA non-static inner class has a reference to its outer class, and access to the outer class\u0027 fields and methods. That class reference makes the\ninner class larger and could cause the outer class instance to live in memory longer than necessary.\u003c/p\u003e\n\u003cp\u003eIf the reference to the outer class isn’t used, it is more efficient to make the inner class \u003ccode\u003estatic\u003c/code\u003e (also called nested). If the\nreference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will\nalso be necessary to name it.\u003c/p\u003e\n\u003cp\u003eHowever, while a nested/\u003ccode\u003estatic\u003c/code\u003e class would be more efficient, it’s worth noting that there are semantic differences between an inner\nclass and a nested one:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e an inner class can only be instantiated within the context of an instance of the outer class. \u003c/li\u003e\n  \u003cli\u003e a nested (\u003ccode\u003estatic\u003c/code\u003e) class can be instantiated independently of the outer class. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there\u0027s no use of the outer class reference so make it static\n    int germinationDays \u003d 0;\n    public Seed(int germinationDays) {\n      this.germinationDays \u003d germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays \u003d 0;\n    public Seed(int germinationDays) {\n      this.germinationDays \u003d germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2694"]}},{"key":"java:S3305","repo":"java","name":"Factory method injection should be used in \"@Configuration\" classes","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen \u003ccode\u003e@Autowired\u003c/code\u003e is used, dependencies need to be resolved when the class is instantiated, which may cause early initialization of\nbeans or lead the context to look in places it shouldn’t to find the bean. To avoid this tricky issue and optimize the way the context loads,\ndependencies should be requested as late as possible. That means using parameter injection instead of field injection for dependencies that are only\nused in a single \u003ccode\u003e@Bean\u003c/code\u003e method.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Configuration\npublic class ​FooConfiguration {\n\n  @Autowired private ​DataSource dataSource​;  // Noncompliant\n\n  @Bean\n  public ​MyService myService() {\n    return new ​MyService(this​.dataSource​);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Configuration\npublic class ​FooConfiguration {\n\n @Bean\n  public ​MyService myService(DataSource dataSource) {\n    return new ​MyService(dataSource);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eFields used in methods that are called directly by other methods in the application (as opposed to being invoked automatically by the Spring\nframework) are ignored by this rule so that direct callers don’t have to provide the dependencies themselves.\u003c/p\u003e","mdDesc":"\u003cp\u003eWhen \u003ccode\u003e@Autowired\u003c/code\u003e is used, dependencies need to be resolved when the class is instantiated, which may cause early initialization of\nbeans or lead the context to look in places it shouldn’t to find the bean. To avoid this tricky issue and optimize the way the context loads,\ndependencies should be requested as late as possible. That means using parameter injection instead of field injection for dependencies that are only\nused in a single \u003ccode\u003e@Bean\u003c/code\u003e method.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Configuration\npublic class ​FooConfiguration {\n\n  @Autowired private ​DataSource dataSource​;  // Noncompliant\n\n  @Bean\n  public ​MyService myService() {\n    return new ​MyService(this​.dataSource​);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Configuration\npublic class ​FooConfiguration {\n\n @Bean\n  public ​MyService myService(DataSource dataSource) {\n    return new ​MyService(dataSource);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eFields used in methods that are called directly by other methods in the application (as opposed to being invoked automatically by the Spring\nframework) are ignored by this rule so that direct callers don’t have to provide the dependencies themselves.\u003c/p\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance","spring"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3305"]}},{"key":"java:S3358","repo":"java","name":"Ternary operators should not be nested","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eJust because you \u003cem\u003ecan\u003c/em\u003e do something, doesn’t mean you should, and that’s the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.\u003c/p\u003e\n\u003cp\u003eInstead, err on the side of clarity, and use another line to express the nested operation as a separate statement.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic String getReadableStatus(Job j) {\n  return j.isRunning() ? \"Running\" : j.hasErrors() ? \"Failed\" : \"Succeeded\";  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic String getReadableStatus(Job j) {\n  if (j.isRunning()) {\n    return \"Running\";\n  }\n  return j.hasErrors() ? \"Failed\" : \"Succeeded\";\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eJust because you \u003cem\u003ecan\u003c/em\u003e do something, doesn’t mean you should, and that’s the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.\u003c/p\u003e\n\u003cp\u003eInstead, err on the side of clarity, and use another line to express the nested operation as a separate statement.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic String getReadableStatus(Job j) {\n  return j.isRunning() ? \"Running\" : j.hasErrors() ? \"Failed\" : \"Succeeded\";  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic String getReadableStatus(Job j) {\n  if (j.isRunning()) {\n    return \"Running\";\n  }\n  return j.hasErrors() ? \"Failed\" : \"Succeeded\";\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3358"]}},{"key":"java:S4201","repo":"java","name":"Null checks should not be used with \"instanceof\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere’s no need to null test in conjunction with an \u003ccode\u003einstanceof\u003c/code\u003e test. \u003ccode\u003enull\u003c/code\u003e is not an \u003ccode\u003einstanceof\u003c/code\u003e anything, so\na null check is redundant.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (x !\u003d null \u0026amp;\u0026amp; x instanceof MyClass) { ... }  // Noncompliant\n\nif (x \u003d\u003d null || ! x instanceof MyClass) { ... } // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (x instanceof MyClass) { ... }\n\nif (! x instanceof MyClass) { ... }\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThere’s no need to null test in conjunction with an \u003ccode\u003einstanceof\u003c/code\u003e test. \u003ccode\u003enull\u003c/code\u003e is not an \u003ccode\u003einstanceof\u003c/code\u003e anything, so\na null check is redundant.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (x !\u003d null \u0026amp;\u0026amp; x instanceof MyClass) { ... }  // Noncompliant\n\nif (x \u003d\u003d null || ! x instanceof MyClass) { ... } // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (x instanceof MyClass) { ... }\n\nif (! x instanceof MyClass) { ... }\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["redundant"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4201"]}},{"key":"java:S5411","repo":"java","name":"Boxed \"Boolean\" should be avoided in boolean expressions","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen boxed type \u003ccode\u003ejava.lang.Boolean\u003c/code\u003e is used as an expression it will throw \u003ccode\u003eNullPointerException\u003c/code\u003e if the value is\n\u003ccode\u003enull\u003c/code\u003e as defined in \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8\"\u003eJava Language Specification §5.1.8\nUnboxing Conversion\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIt is safer to avoid such conversion altogether and handle the \u003ccode\u003enull\u003c/code\u003e value explicitly.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nBoolean b \u003d getBoolean();\nif (b) {  // Noncompliant, it will throw NPE when b \u003d\u003d null\n  foo();\n} else {\n  bar();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nBoolean b \u003d getBoolean();\nif (Boolean.TRUE.equals(b)) {\n  foo();\n} else {\n  bar();  // will be invoked for both b \u003d\u003d false and b \u003d\u003d null\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8\"\u003eJava Language Specification §5.1.8 Unboxing Conversion\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eWhen boxed type \u003ccode\u003ejava.lang.Boolean\u003c/code\u003e is used as an expression it will throw \u003ccode\u003eNullPointerException\u003c/code\u003e if the value is\n\u003ccode\u003enull\u003c/code\u003e as defined in \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8\"\u003eJava Language Specification §5.1.8\nUnboxing Conversion\u003c/a\u003e.\u003c/p\u003e\n\u003cp\u003eIt is safer to avoid such conversion altogether and handle the \u003ccode\u003enull\u003c/code\u003e value explicitly.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nBoolean b \u003d getBoolean();\nif (b) {  // Noncompliant, it will throw NPE when b \u003d\u003d null\n  foo();\n} else {\n  bar();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nBoolean b \u003d getBoolean();\nif (Boolean.TRUE.equals(b)) {\n  foo();\n} else {\n  bar();  // will be invoked for both b \u003d\u003d false and b \u003d\u003d null\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8\"\u003eJava Language Specification §5.1.8 Unboxing Conversion\u003c/a\u003e\n  \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5411"]}},{"key":"java:S5413","repo":"java","name":"\u0027List.remove()\u0027 should not be used in ascending \u0027for\u0027 loops","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen \u003ccode\u003eList.remove()\u003c/code\u003e is called it will shrink the list. If this is done inside the ascending loop iterating through all elements it will\nskip the element after the removed index.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid removeFrom(List\u0026lt;String\u0026gt; list) {\n  // expected: iterate over all the elements of the list\n  for (int i \u003d 0; i \u0026lt; list.size(); i++) {\n    if (list.get(i).isEmpty()) {\n      // actual: remaining elements are shifted, so the one immediately following will be skipped\n      list.remove(i); // Noncompliant\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eYou can either adjust the loop index to account for the change in the size of the list\u003c/p\u003e\n\u003cpre\u003e\nstatic void removeFrom(List\u0026lt;String\u0026gt; list) {\n    // expected: iterate over all the elements of the list\n    for (int i \u003d 0; i \u0026lt; list.size(); i++) {\n      if (list.get(i).isEmpty()) {\n        // actual: remaining elements are shifted, so the one immediately following will be skipped\n        list.remove(i);\n        i--;\n      }\n    }\n  }\n\u003c/pre\u003e\n\u003cp\u003eOr preferably it’s probably better to rely on Java 8’s \u003ccode\u003eremoveIf\u003c/code\u003e method\u003c/p\u003e\n\u003cpre\u003e\n static void removeFrom(List\u0026lt;String\u0026gt; list) {\n    list.removeIf(String::isEmpty);\n  }\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThe descending loop doesn’t have this issue, because the index will be correct when we loop in descending order\u003c/p\u003e\n\u003cpre\u003e\nvoid removeFrom(List\u0026lt;String\u0026gt; list) {\n  for (int i \u003d list.size() - 1; i \u0026gt;\u003d 0; i--) {\n    if (list.get(i).isEmpty()) {\n      list.remove(i);\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e","mdDesc":"\u003cp\u003eWhen \u003ccode\u003eList.remove()\u003c/code\u003e is called it will shrink the list. If this is done inside the ascending loop iterating through all elements it will\nskip the element after the removed index.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid removeFrom(List\u0026lt;String\u0026gt; list) {\n  // expected: iterate over all the elements of the list\n  for (int i \u003d 0; i \u0026lt; list.size(); i++) {\n    if (list.get(i).isEmpty()) {\n      // actual: remaining elements are shifted, so the one immediately following will be skipped\n      list.remove(i); // Noncompliant\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eYou can either adjust the loop index to account for the change in the size of the list\u003c/p\u003e\n\u003cpre\u003e\nstatic void removeFrom(List\u0026lt;String\u0026gt; list) {\n    // expected: iterate over all the elements of the list\n    for (int i \u003d 0; i \u0026lt; list.size(); i++) {\n      if (list.get(i).isEmpty()) {\n        // actual: remaining elements are shifted, so the one immediately following will be skipped\n        list.remove(i);\n        i--;\n      }\n    }\n  }\n\u003c/pre\u003e\n\u003cp\u003eOr preferably it’s probably better to rely on Java 8’s \u003ccode\u003eremoveIf\u003c/code\u003e method\u003c/p\u003e\n\u003cpre\u003e\n static void removeFrom(List\u0026lt;String\u0026gt; list) {\n    list.removeIf(String::isEmpty);\n  }\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThe descending loop doesn’t have this issue, because the index will be correct when we loop in descending order\u003c/p\u003e\n\u003cpre\u003e\nvoid removeFrom(List\u0026lt;String\u0026gt; list) {\n  for (int i \u003d list.size() - 1; i \u0026gt;\u003d 0; i--) {\n    if (list.get(i).isEmpty()) {\n      list.remove(i);\n    }\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003e\u0026nbsp;\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5413"]}},{"key":"java:S5776","repo":"java","name":"Exception testing via JUnit ExpectedException rule should not be mixed with other assertions","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen testing exception via \u003ccode\u003eorg.junit.rules.ExpectedException\u003c/code\u003e any code after the raised exception will not be executed, so adding\nsubsequent assertions is wrong and misleading. This rule raises an issue when an assertion is done after the \"expect(…​)\" invocation, only the code\nthrowing the expected exception should be after \"expect(…​)\".\u003c/p\u003e\n\u003cp\u003eYou should consider using \u003ca\nhref\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\"\u003eorg.junit.Assert.assertThrows\u003c/a\u003e instead, it’s available\nsince JUnit 4.13 and it allows additional subsequent assertions.\u003c/p\u003e\n\u003cp\u003eAlternatively, you could use \u003ca href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\"\u003etry-catch idiom\u003c/a\u003e for JUnit\nversion \u0026lt; 4.13 or if your project does not support lambdas.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Rule\npublic ExpectedException thrown \u003d ExpectedException.none();\n\n@Test\npublic void test() throws IndexOutOfBoundsException {\n  thrown.expect(IndexOutOfBoundsException.class); // Noncompliant\n  Object o \u003d get();\n  // This test pass since execution will never get past this line.\n  Assert.assertEquals(0, 1);\n}\n\nprivate Object get() {\n  throw new IndexOutOfBoundsException();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e For JUnit \u0026gt;\u003d 4.13, use \u003ca\n  href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\"\u003eorg.junit.Assert.assertThrows\u003c/a\u003e: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nAssert.assertThrows(IndexOutOfBoundsException.class, () -\u0026gt; get());\n// This test correctly fails.\nAssert.assertEquals(0, 1);\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e For JUnit \u0026lt; 4.13, use the \u003ca href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\"\u003etry-catch idiom\u003c/a\u003e: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\ntry {\n  get();\n  Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n} catch (IndexOutOfBoundsException e) {}\nAssert.assertEquals(0, 1); // Correctly fails.\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing\"\u003eJUnit exception testing documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eWhen testing exception via \u003ccode\u003eorg.junit.rules.ExpectedException\u003c/code\u003e any code after the raised exception will not be executed, so adding\nsubsequent assertions is wrong and misleading. This rule raises an issue when an assertion is done after the \"expect(…​)\" invocation, only the code\nthrowing the expected exception should be after \"expect(…​)\".\u003c/p\u003e\n\u003cp\u003eYou should consider using \u003ca\nhref\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\"\u003eorg.junit.Assert.assertThrows\u003c/a\u003e instead, it’s available\nsince JUnit 4.13 and it allows additional subsequent assertions.\u003c/p\u003e\n\u003cp\u003eAlternatively, you could use \u003ca href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\"\u003etry-catch idiom\u003c/a\u003e for JUnit\nversion \u0026lt; 4.13 or if your project does not support lambdas.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Rule\npublic ExpectedException thrown \u003d ExpectedException.none();\n\n@Test\npublic void test() throws IndexOutOfBoundsException {\n  thrown.expect(IndexOutOfBoundsException.class); // Noncompliant\n  Object o \u003d get();\n  // This test pass since execution will never get past this line.\n  Assert.assertEquals(0, 1);\n}\n\nprivate Object get() {\n  throw new IndexOutOfBoundsException();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e For JUnit \u0026gt;\u003d 4.13, use \u003ca\n  href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\"\u003eorg.junit.Assert.assertThrows\u003c/a\u003e: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nAssert.assertThrows(IndexOutOfBoundsException.class, () -\u0026gt; get());\n// This test correctly fails.\nAssert.assertEquals(0, 1);\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e For JUnit \u0026lt; 4.13, use the \u003ca href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\"\u003etry-catch idiom\u003c/a\u003e: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\ntry {\n  get();\n  Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n} catch (IndexOutOfBoundsException e) {}\nAssert.assertEquals(0, 1); // Correctly fails.\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing\"\u003eJUnit exception testing documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["junit","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5776"]}},{"key":"java:S5777","repo":"java","name":"Exception testing via JUnit @Test annotation should be avoided","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen testing exception via \u003ccode\u003e@Test\u003c/code\u003e annotation, having additional assertions inside that test method can be problematic because any code\nafter the raised exception will not be executed. It will prevent you to test the state of the program after the raised exception and, at worst, make\nyou\u0026nbsp;misleadingly think that it is executed.\u003c/p\u003e\n\u003cp\u003eYou should consider moving any assertions into a separate test method where possible, or using \u003ca\nhref\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\"\u003eorg.junit.Assert.assertThrows\u003c/a\u003e instead.\u003c/p\u003e\n\u003cp\u003eAlternatively, you could use \u003ca href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\"\u003etry-catch idiom\u003c/a\u003e for JUnit\nversion \u0026lt; 4.13 or if your project does not support lambdas.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Test(expected \u003d IndexOutOfBoundsException.class)\npublic void testShouldFail() {\n  get();\n  // This test pass since execution will never get past this line.\n  Assert.assertEquals(0, 1);\n}\n\nprivate Object get() {\n  throw new IndexOutOfBoundsException();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e For JUnit \u0026gt;\u003d 4.13, use \u003ca\n  href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\"\u003eorg.junit.Assert.assertThrows\u003c/a\u003e: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n// This test correctly fails.\n@Test\npublic void testToString() {\n    Object obj \u003d get();\n    Assert.assertThrows(IndexOutOfBoundsException.class, () -\u0026gt; obj.toString());\n    Assert.assertEquals(0, 1);\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e For JUnit \u0026lt; 4.13, use the \u003ca href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\"\u003etry-catch idiom\u003c/a\u003e: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n@Test\npublic void testShouldFail() {\n    Object obj \u003d get();\n    try {\n        obj.toString();\n        Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n    } catch (IndexOutOfBoundsException e) {}\n    Assert.assertEquals(0, 1); // Correctly fails.\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing\"\u003eJUnit exception testing documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eWhen testing exception via \u003ccode\u003e@Test\u003c/code\u003e annotation, having additional assertions inside that test method can be problematic because any code\nafter the raised exception will not be executed. It will prevent you to test the state of the program after the raised exception and, at worst, make\nyou\u0026nbsp;misleadingly think that it is executed.\u003c/p\u003e\n\u003cp\u003eYou should consider moving any assertions into a separate test method where possible, or using \u003ca\nhref\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\"\u003eorg.junit.Assert.assertThrows\u003c/a\u003e instead.\u003c/p\u003e\n\u003cp\u003eAlternatively, you could use \u003ca href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\"\u003etry-catch idiom\u003c/a\u003e for JUnit\nversion \u0026lt; 4.13 or if your project does not support lambdas.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Test(expected \u003d IndexOutOfBoundsException.class)\npublic void testShouldFail() {\n  get();\n  // This test pass since execution will never get past this line.\n  Assert.assertEquals(0, 1);\n}\n\nprivate Object get() {\n  throw new IndexOutOfBoundsException();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e For JUnit \u0026gt;\u003d 4.13, use \u003ca\n  href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\"\u003eorg.junit.Assert.assertThrows\u003c/a\u003e: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n// This test correctly fails.\n@Test\npublic void testToString() {\n    Object obj \u003d get();\n    Assert.assertThrows(IndexOutOfBoundsException.class, () -\u0026gt; obj.toString());\n    Assert.assertEquals(0, 1);\n}\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e For JUnit \u0026lt; 4.13, use the \u003ca href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\"\u003etry-catch idiom\u003c/a\u003e: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n@Test\npublic void testShouldFail() {\n    Object obj \u003d get();\n    try {\n        obj.toString();\n        Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n    } catch (IndexOutOfBoundsException e) {}\n    Assert.assertEquals(0, 1); // Correctly fails.\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing\"\u003eJUnit exception testing documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["junit","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5777"]}},{"key":"java:S5778","repo":"java","name":"Only one method invocation is expected when testing runtime exceptions","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen verifying that code raises a runtime exception, a good practice is to avoid having multiple method calls inside the tested code, to be\nexplicit about which method call is expected to raise the exception.\u003c/p\u003e\n\u003cp\u003eIt increases the clarity of the test, and avoid incorrect testing when another method is actually raising the exception.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testToString() {\n  // Do you expect get() or toString() throwing the exception?\n  org.junit.Assert.assertThrows(IndexOutOfBoundsException.class, () -\u0026gt; get().toString());\n}\n\n@Test\npublic void testToStringTryCatchIdiom() {\n  try {\n    // Do you expect get() or toString() throwing the exception?\n    get().toString();\n    Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n  } catch (IndexOutOfBoundsException e) {\n    // Test exception message...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testToString() {\n   Object obj \u003d get();\n   Assert.assertThrows(IndexOutOfBoundsException.class, () -\u0026gt; obj.toString());\n}\n\n@Test\npublic void testToStringTryCatchIdiom() {\n  Object obj \u003d get();\n  try {\n    obj.toString();\n    Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n  } catch (IndexOutOfBoundsException e) {\n    // Test exception message...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing\"\u003eJUnit exception testing documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eWhen verifying that code raises a runtime exception, a good practice is to avoid having multiple method calls inside the tested code, to be\nexplicit about which method call is expected to raise the exception.\u003c/p\u003e\n\u003cp\u003eIt increases the clarity of the test, and avoid incorrect testing when another method is actually raising the exception.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testToString() {\n  // Do you expect get() or toString() throwing the exception?\n  org.junit.Assert.assertThrows(IndexOutOfBoundsException.class, () -\u0026gt; get().toString());\n}\n\n@Test\npublic void testToStringTryCatchIdiom() {\n  try {\n    // Do you expect get() or toString() throwing the exception?\n    get().toString();\n    Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n  } catch (IndexOutOfBoundsException e) {\n    // Test exception message...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testToString() {\n   Object obj \u003d get();\n   Assert.assertThrows(IndexOutOfBoundsException.class, () -\u0026gt; obj.toString());\n}\n\n@Test\npublic void testToStringTryCatchIdiom() {\n  Object obj \u003d get();\n  try {\n    obj.toString();\n    Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n  } catch (IndexOutOfBoundsException e) {\n    // Test exception message...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/junit-team/junit4/wiki/Exception-testing\"\u003eJUnit exception testing documentation\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["junit","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5778"]}},{"key":"java:S5846","repo":"java","name":"Empty lines should not be tested with regex MULTILINE flag","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eOne way to test for empty lines is to use the regex \u003ccode\u003e\"^$\"\u003c/code\u003e, which can be extremely handy when filtering out empty lines from collections\nof Strings, for instance. With regard to this, the Javadoc for \u003ca\nhref\u003d\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html\"\u003ePattern (Line Terminators)\u003c/a\u003e states the\nfollowing:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eBy default, the regular expressions ^ and \u003ccode\u003e$\u003c/code\u003e ignore line terminators and only match at the beginning and the end, respectively, of\n  the entire input sequence. If \u003ccode\u003eMULTILINE\u003c/code\u003e mode is activated then ^ matches at the beginning of input and after any line terminator\n  \u003cstrong\u003eexcept at the end of input\u003c/strong\u003e. When in \u003ccode\u003eMULTILINE\u003c/code\u003e mode \u003ccode\u003e$\u003c/code\u003e matches just before a line terminator or the end of\n  the input sequence.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAs emphasized, ^ is not going to match at the end of an input, and the end of the input is necessarily included in the empty string, which might\nlead to completely missing empty lines, while it would be the initial reason for using such regex.\u003c/p\u003e\n\u003cp\u003eTherefore, when searching for empty lines using a multi-line regular expression, you should also check whether the string is empty.\u003c/p\u003e\n\u003cp\u003eThis rule is raising an issue every time a pattern that can match the empty string is used with \u003ccode\u003eMULTILINE\u003c/code\u003e flag and without calling\n\u003ccode\u003eisEmpty()\u003c/code\u003e on the string.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nstatic final Pattern p \u003d Pattern.compile(\"^$\", Pattern.MULTILINE); // Noncompliant\n\n// Alternatively\nstatic final Pattern p \u003d Pattern.compile(\"(?m)^$\"); // Noncompliant\n\n\nboolean containsEmptyLines(String str) {\n    return p.matcher(str).find();\n}\n\n// ...\nSystem.out.println(containsEmptyLines(\"a\\n\\nb\")); // correctly prints \u0027true\u0027\nSystem.out.println(containsEmptyLines(\"\")); // incorrectly prints \u0027false\u0027\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nstatic final Pattern p \u003d Pattern.compile(\"^$\", Pattern.MULTILINE);\n\nboolean containsEmptyLines(String str) {\n    return p.matcher(str).find() || str.isEmpty();\n}\n\n// ...\nSystem.out.println(containsEmptyLines(\"a\\n\\nb\")); // correctly prints \u0027true\u0027\nSystem.out.println(containsEmptyLines(\"\")); // also correctly prints \u0027true\u0027\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eOne way to test for empty lines is to use the regex \u003ccode\u003e\"^$\"\u003c/code\u003e, which can be extremely handy when filtering out empty lines from collections\nof Strings, for instance. With regard to this, the Javadoc for \u003ca\nhref\u003d\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html\"\u003ePattern (Line Terminators)\u003c/a\u003e states the\nfollowing:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eBy default, the regular expressions ^ and \u003ccode\u003e$\u003c/code\u003e ignore line terminators and only match at the beginning and the end, respectively, of\n  the entire input sequence. If \u003ccode\u003eMULTILINE\u003c/code\u003e mode is activated then ^ matches at the beginning of input and after any line terminator\n  \u003cstrong\u003eexcept at the end of input\u003c/strong\u003e. When in \u003ccode\u003eMULTILINE\u003c/code\u003e mode \u003ccode\u003e$\u003c/code\u003e matches just before a line terminator or the end of\n  the input sequence.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eAs emphasized, ^ is not going to match at the end of an input, and the end of the input is necessarily included in the empty string, which might\nlead to completely missing empty lines, while it would be the initial reason for using such regex.\u003c/p\u003e\n\u003cp\u003eTherefore, when searching for empty lines using a multi-line regular expression, you should also check whether the string is empty.\u003c/p\u003e\n\u003cp\u003eThis rule is raising an issue every time a pattern that can match the empty string is used with \u003ccode\u003eMULTILINE\u003c/code\u003e flag and without calling\n\u003ccode\u003eisEmpty()\u003c/code\u003e on the string.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nstatic final Pattern p \u003d Pattern.compile(\"^$\", Pattern.MULTILINE); // Noncompliant\n\n// Alternatively\nstatic final Pattern p \u003d Pattern.compile(\"(?m)^$\"); // Noncompliant\n\n\nboolean containsEmptyLines(String str) {\n    return p.matcher(str).find();\n}\n\n// ...\nSystem.out.println(containsEmptyLines(\"a\\n\\nb\")); // correctly prints \u0027true\u0027\nSystem.out.println(containsEmptyLines(\"\")); // incorrectly prints \u0027false\u0027\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nstatic final Pattern p \u003d Pattern.compile(\"^$\", Pattern.MULTILINE);\n\nboolean containsEmptyLines(String str) {\n    return p.matcher(str).find() || str.isEmpty();\n}\n\n// ...\nSystem.out.println(containsEmptyLines(\"a\\n\\nb\")); // correctly prints \u0027true\u0027\nSystem.out.println(containsEmptyLines(\"\")); // also correctly prints \u0027true\u0027\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["regex"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5846"]}},{"key":"java:S5961","repo":"java","name":"Test methods should not contain too many assertions","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA common good practice is to write test methods targeting only one logical concept, that can only fail for one reason.\u003c/p\u003e\n\u003cp\u003eWhile it might make sense to have more than one assertion to test one concept, having too many is a sign that a test became too complex and should\nbe refactored to multiples ones.\u003c/p\u003e\n\u003cp\u003eThis rule will report any test method containing more than a given number of assertion.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith a parameter of 2.\u003c/p\u003e\n\u003cpre\u003e\n@Test\nvoid test() { // Refactor this method.\n  assertEquals(1, f(1));\n  assertEquals(2, f(2));\n  assertEquals(3, g(1));\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvoid test_f() {\n  assertEquals(1, f(1));\n  assertEquals(2, f(2));\n}\nvoid test_g() {\n  assertEquals(3, g(1));\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eA common good practice is to write test methods targeting only one logical concept, that can only fail for one reason.\u003c/p\u003e\n\u003cp\u003eWhile it might make sense to have more than one assertion to test one concept, having too many is a sign that a test became too complex and should\nbe refactored to multiples ones.\u003c/p\u003e\n\u003cp\u003eThis rule will report any test method containing more than a given number of assertion.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith a parameter of 2.\u003c/p\u003e\n\u003cpre\u003e\n@Test\nvoid test() { // Refactor this method.\n  assertEquals(1, f(1));\n  assertEquals(2, f(2));\n  assertEquals(3, g(1));\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvoid test_f() {\n  assertEquals(1, f(1));\n  assertEquals(2, f(2));\n}\nvoid test_g() {\n  assertEquals(3, g(1));\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["tests"],"lang":"java","langName":"Java","params":[{"key":"MaximumAssertionNumber","htmlDesc":"The maximum authorized number of assertions in a test method","defaultValue":"25","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5961"]}},{"key":"java:S5969","repo":"java","name":"Mocking all non-private methods of a class should be avoided","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIf you end up mocking every non-private method of a class in order to write tests, it is a strong sign that your test became too complex, or that\nyou misunderstood the way you are supposed to use the mocking mechanism.\u003c/p\u003e\n\u003cp\u003eYou should either refactor the test code into multiple units, or consider using the class itself, by either directly instantiating it, or creating\na new one inheriting from it, with the expected behavior.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when every member of a given class are mocked.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Test\nvoid test_requiring_MyClass() {\n  MyClass myClassMock \u003d mock(MyClass.class); // Noncompliant\n  when(myClassMock.f()).thenReturn(1);\n  when(myClassMock.g()).thenReturn(2);\n  //...\n}\n\nabstract class MyClass {\n  abstract int f();\n  abstract int g();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Test\nvoid test_requiring_MyClass() {\n  MyClass myClass \u003d new MyClassForTest();\n  //...\n}\n\nclass MyClassForTest extends MyClass {\n\n  @Override\n  int f() {\n    return 1;\n  }\n\n  @Override\n  int g() {\n    return 2;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n@Test\nvoid test_requiring_f() {\n  MyClass myClassMock \u003d mock(MyClass.class);\n  when(myClassMock.f()).thenReturn(1);\n  //...\n}\n\n@Test\nvoid test_requiring_g() {\n  MyClass myClassMock \u003d mock(MyClass.class);\n  when(myClassMock.g()).thenReturn(2);\n  //...\n}\n\nabstract class MyClass {\n  abstract int f();\n  abstract int g();\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIf you end up mocking every non-private method of a class in order to write tests, it is a strong sign that your test became too complex, or that\nyou misunderstood the way you are supposed to use the mocking mechanism.\u003c/p\u003e\n\u003cp\u003eYou should either refactor the test code into multiple units, or consider using the class itself, by either directly instantiating it, or creating\na new one inheriting from it, with the expected behavior.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when every member of a given class are mocked.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Test\nvoid test_requiring_MyClass() {\n  MyClass myClassMock \u003d mock(MyClass.class); // Noncompliant\n  when(myClassMock.f()).thenReturn(1);\n  when(myClassMock.g()).thenReturn(2);\n  //...\n}\n\nabstract class MyClass {\n  abstract int f();\n  abstract int g();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Test\nvoid test_requiring_MyClass() {\n  MyClass myClass \u003d new MyClassForTest();\n  //...\n}\n\nclass MyClassForTest extends MyClass {\n\n  @Override\n  int f() {\n    return 1;\n  }\n\n  @Override\n  int g() {\n    return 2;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n@Test\nvoid test_requiring_f() {\n  MyClass myClassMock \u003d mock(MyClass.class);\n  when(myClassMock.f()).thenReturn(1);\n  //...\n}\n\n@Test\nvoid test_requiring_g() {\n  MyClass myClassMock \u003d mock(MyClass.class);\n  when(myClassMock.g()).thenReturn(2);\n  //...\n}\n\nabstract class MyClass {\n  abstract int f();\n  abstract int g();\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["mockito","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5969"]}},{"key":"java:S1065","repo":"java","name":"Unused labels should be removed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIf a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.\u003c/p\u003e\n\u003cp\u003eThis will improve maintainability as developers will not wonder what this label is used for.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid foo() {\n  outer: //label is not used.\n  for(int i \u003d 0; i\u0026lt;10; i++) {\n    break;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvoid foo() {\n  for(int i \u003d 0; i\u0026lt;10; i++) {\n    break;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\"\u003eCERT, MSC12-C.\u003c/a\u003e - Detect and remove code that has no effect or is never executed\n  \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eIf a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.\u003c/p\u003e\n\u003cp\u003eThis will improve maintainability as developers will not wonder what this label is used for.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid foo() {\n  outer: //label is not used.\n  for(int i \u003d 0; i\u0026lt;10; i++) {\n    break;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvoid foo() {\n  for(int i \u003d 0; i\u0026lt;10; i++) {\n    break;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\"\u003eCERT, MSC12-C.\u003c/a\u003e - Detect and remove code that has no effect or is never executed\n  \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1065"]}},{"key":"java:S1066","repo":"java","name":"Collapsible \"if\" statements should be merged","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eMerging collapsible \u003ccode\u003eif\u003c/code\u003e statements increases the code’s readability.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (file !\u003d null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (file !\u003d null \u0026amp;\u0026amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eMerging collapsible \u003ccode\u003eif\u003c/code\u003e statements increases the code’s readability.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (file !\u003d null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (file !\u003d null \u0026amp;\u0026amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1066"]}},{"key":"java:S1067","repo":"java","name":"Expressions should not be too complex","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe complexity of an expression is defined by the number of \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, \u003ccode\u003e||\u003c/code\u003e and \u003ccode\u003econdition ? ifTrue : ifFalse\u003c/code\u003e\noperators it contains.\u003c/p\u003e\n\u003cp\u003eA single expression’s complexity should not become too high to keep the code readable.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default threshold value of 3:\u003c/p\u003e\n\u003cpre\u003e\nif (((condition1 \u0026amp;\u0026amp; condition2) || (condition3 \u0026amp;\u0026amp; condition4)) \u0026amp;\u0026amp; condition5) { ... }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif ( (myFirstCondition() || mySecondCondition()) \u0026amp;\u0026amp; myLastCondition()) { ... }\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eNo issue is reported inside \u003ccode\u003eequals\u003c/code\u003e methods, because it is common to compare all the fields of a class for equality inside this kind of\nmethod.\u003c/p\u003e","mdDesc":"\u003cp\u003eThe complexity of an expression is defined by the number of \u003ccode\u003e\u0026amp;\u0026amp;\u003c/code\u003e, \u003ccode\u003e||\u003c/code\u003e and \u003ccode\u003econdition ? ifTrue : ifFalse\u003c/code\u003e\noperators it contains.\u003c/p\u003e\n\u003cp\u003eA single expression’s complexity should not become too high to keep the code readable.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default threshold value of 3:\u003c/p\u003e\n\u003cpre\u003e\nif (((condition1 \u0026amp;\u0026amp; condition2) || (condition3 \u0026amp;\u0026amp; condition4)) \u0026amp;\u0026amp; condition5) { ... }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif ( (myFirstCondition() || mySecondCondition()) \u0026amp;\u0026amp; myLastCondition()) { ... }\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eNo issue is reported inside \u003ccode\u003eequals\u003c/code\u003e methods, because it is common to compare all the fields of a class for equality inside this kind of\nmethod.\u003c/p\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"max","htmlDesc":"Maximum number of allowed conditional operators in an expression","defaultValue":"3","type":"INTEGER"}],"defaultDebtRemFnType":"LINEAR_OFFSET","defaultDebtRemFnCoeff":"1min","defaultDebtRemFnOffset":"5min","effortToFixDescription":"per complexity point above the threshold","debtOverloaded":false,"debtRemFnType":"LINEAR_OFFSET","debtRemFnCoeff":"1min","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"LINEAR_OFFSET","defaultRemFnGapMultiplier":"1min","defaultRemFnBaseEffort":"5min","remFnType":"LINEAR_OFFSET","remFnGapMultiplier":"1min","remFnBaseEffort":"5min","remFnOverloaded":false,"gapDescription":"per complexity point above the threshold","scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1067"]}},{"key":"java:S1068","repo":"java","name":"Unused \"private\" fields should be removed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIf a \u003ccode\u003eprivate\u003c/code\u003e field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.\u003c/p\u003e\n\u003cp\u003eNote that this rule does not take reflection into account, which means that issues will be raised on \u003ccode\u003eprivate\u003c/code\u003e fields that are only\naccessed using the reflection API.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  private int foo \u003d 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThe rule admits 3 exceptions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Serialization id fields \u003c/li\u003e\n  \u003cli\u003e Annotated fields \u003c/li\u003e\n  \u003cli\u003e Fields from classes with native methods \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eSerialization id fields\u003c/h3\u003e\n\u003cp\u003eThe Java serialization runtime associates with each serializable class a version number, called \u003ccode\u003eserialVersionUID\u003c/code\u003e, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.\u003c/p\u003e\n\u003cp\u003eA serializable class can declare its own \u003ccode\u003eserialVersionUID\u003c/code\u003e explicitly by declaring a field named \u003ccode\u003eserialVersionUID\u003c/code\u003e that\nmust be static, final, and of type long. By definition those \u003ccode\u003eserialVersionUID\u003c/code\u003e fields should not be reported by this rule:\u003c/p\u003e\n\u003cpre\u003e\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID \u003d 42L;\n}\n\u003c/pre\u003e\n\u003ch3\u003eAnnotated fields\u003c/h3\u003e\n\u003cp\u003eThe unused field in this class will not be reported by the rule as it is annotated.\u003c/p\u003e\n\u003cpre\u003e\npublic class MyClass {\n  @SomeAnnotation\n  private int unused;\n}\n\u003c/pre\u003e\n\u003ch3\u003eFields from classes with native methods\u003c/h3\u003e\n\u003cp\u003eThe unused field in this class will not be reported by the rule as it might be used by native code.\u003c/p\u003e\n\u003cpre\u003e\npublic class MyClass {\n  private int unused \u003d 42;\n  private native static void doSomethingNative();\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIf a \u003ccode\u003eprivate\u003c/code\u003e field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.\u003c/p\u003e\n\u003cp\u003eNote that this rule does not take reflection into account, which means that issues will be raised on \u003ccode\u003eprivate\u003c/code\u003e fields that are only\naccessed using the reflection API.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  private int foo \u003d 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThe rule admits 3 exceptions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Serialization id fields \u003c/li\u003e\n  \u003cli\u003e Annotated fields \u003c/li\u003e\n  \u003cli\u003e Fields from classes with native methods \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eSerialization id fields\u003c/h3\u003e\n\u003cp\u003eThe Java serialization runtime associates with each serializable class a version number, called \u003ccode\u003eserialVersionUID\u003c/code\u003e, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.\u003c/p\u003e\n\u003cp\u003eA serializable class can declare its own \u003ccode\u003eserialVersionUID\u003c/code\u003e explicitly by declaring a field named \u003ccode\u003eserialVersionUID\u003c/code\u003e that\nmust be static, final, and of type long. By definition those \u003ccode\u003eserialVersionUID\u003c/code\u003e fields should not be reported by this rule:\u003c/p\u003e\n\u003cpre\u003e\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID \u003d 42L;\n}\n\u003c/pre\u003e\n\u003ch3\u003eAnnotated fields\u003c/h3\u003e\n\u003cp\u003eThe unused field in this class will not be reported by the rule as it is annotated.\u003c/p\u003e\n\u003cpre\u003e\npublic class MyClass {\n  @SomeAnnotation\n  private int unused;\n}\n\u003c/pre\u003e\n\u003ch3\u003eFields from classes with native methods\u003c/h3\u003e\n\u003cp\u003eThe unused field in this class will not be reported by the rule as it might be used by native code.\u003c/p\u003e\n\u003cpre\u003e\npublic class MyClass {\n  private int unused \u003d 42;\n  private native static void doSomethingNative();\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1068"]}},{"key":"java:S1170","repo":"java","name":"Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eMaking a \u003ccode\u003epublic\u003c/code\u003e constant just \u003ccode\u003efinal\u003c/code\u003e as opposed to \u003ccode\u003estatic final\u003c/code\u003e leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.\u003c/p\u003e\n\u003cp\u003eFurther, when a non-\u003ccode\u003epublic\u003c/code\u003e, \u003ccode\u003efinal\u003c/code\u003e field isn’t also \u003ccode\u003estatic\u003c/code\u003e, it implies that different instances can have\ndifferent values. However, initializing a non-\u003ccode\u003estatic final\u003c/code\u003e field in its declaration forces every instance to have the same value. So such\nfields should either be made \u003ccode\u003estatic\u003c/code\u003e or initialized in the constructor.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Myclass {\n  public final int THRESHOLD \u003d 3;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Myclass {\n  public static final int THRESHOLD \u003d 3;    // Compliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eNo issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eAn inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).\u003c/p\u003e\n\u003c/blockquote\u003e","mdDesc":"\u003cp\u003eMaking a \u003ccode\u003epublic\u003c/code\u003e constant just \u003ccode\u003efinal\u003c/code\u003e as opposed to \u003ccode\u003estatic final\u003c/code\u003e leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.\u003c/p\u003e\n\u003cp\u003eFurther, when a non-\u003ccode\u003epublic\u003c/code\u003e, \u003ccode\u003efinal\u003c/code\u003e field isn’t also \u003ccode\u003estatic\u003c/code\u003e, it implies that different instances can have\ndifferent values. However, initializing a non-\u003ccode\u003estatic final\u003c/code\u003e field in its declaration forces every instance to have the same value. So such\nfields should either be made \u003ccode\u003estatic\u003c/code\u003e or initialized in the constructor.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Myclass {\n  public final int THRESHOLD \u003d 3;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Myclass {\n  public static final int THRESHOLD \u003d 3;    // Compliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eNo issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eAn inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).\u003c/p\u003e\n\u003c/blockquote\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1170"]}},{"key":"java:S1171","repo":"java","name":"Only static class initializers should be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eNon-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When\npossible, non-static initializers should be refactored into standard constructors or field initializers.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n  private static final Map\u0026lt;String, String\u0026gt; MY_MAP \u003d new HashMap\u0026lt;String, String\u0026gt;() {\n\n    // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put(\"a\", \"b\");\n    }\n\n  };\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n  private static final Map\u0026lt;String, String\u0026gt; MY_MAP \u003d new HashMap\u0026lt;String, String\u0026gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor using Java 9 \u003ccode\u003eMap.of\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {\n  // Compliant\n  private static final Map\u0026lt;String, String\u0026gt; MY_MAP \u003d java.util.Map.of(\"a\", \"b\");\n}\n\u003c/pre\u003e\n\u003cp\u003eor using Guava:\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {\n  // Compliant\n  private static final Map\u0026lt;String, String\u0026gt; MY_MAP \u003d ImmutableMap.of(\"a\", \"b\");\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eNon-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When\npossible, non-static initializers should be refactored into standard constructors or field initializers.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n  private static final Map\u0026lt;String, String\u0026gt; MY_MAP \u003d new HashMap\u0026lt;String, String\u0026gt;() {\n\n    // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put(\"a\", \"b\");\n    }\n\n  };\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n  private static final Map\u0026lt;String, String\u0026gt; MY_MAP \u003d new HashMap\u0026lt;String, String\u0026gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eor using Java 9 \u003ccode\u003eMap.of\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {\n  // Compliant\n  private static final Map\u0026lt;String, String\u0026gt; MY_MAP \u003d java.util.Map.of(\"a\", \"b\");\n}\n\u003c/pre\u003e\n\u003cp\u003eor using Guava:\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {\n  // Compliant\n  private static final Map\u0026lt;String, String\u0026gt; MY_MAP \u003d ImmutableMap.of(\"a\", \"b\");\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1171"]}},{"key":"java:S1172","repo":"java","name":"Unused method parameters should be removed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUnused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid doSomething(int a, int b) {     // \"b\" is unused\n  compute(a);\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvoid doSomething(int a) {\n  compute(a);\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThe rule will not raise issues for unused parameters:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e that are annotated with \u003ccode\u003e@javax.enterprise.event.Observes\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e in overrides and implementation methods \u003c/li\u003e\n  \u003cli\u003e in interface \u003ccode\u003edefault\u003c/code\u003e methods \u003c/li\u003e\n  \u003cli\u003e in non-private methods that only \u003ccode\u003ethrow\u003c/code\u003e or that have empty bodies \u003c/li\u003e\n  \u003cli\u003e in annotated methods, unless the annotation is \u003ccode\u003e@SuppressWarning(\"unchecked\")\u003c/code\u003e or \u003ccode\u003e@SuppressWarning(\"rawtypes\")\u003c/code\u003e, in\n  which case the annotation will be ignored \u003c/li\u003e\n  \u003cli\u003e in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper\n  javadoc. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n@Override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n\n/**\n * @param s This string may be use for further computation in overriding classes\n */\nprotected void foobar(int a, String s) { // no issue, method is overridable and unused parameter has proper javadoc\n  compute(a);\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\"\u003eCERT, MSC12-C.\u003c/a\u003e - Detect and remove code that has no effect or is never executed\n  \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eUnused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid doSomething(int a, int b) {     // \"b\" is unused\n  compute(a);\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvoid doSomething(int a) {\n  compute(a);\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThe rule will not raise issues for unused parameters:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e that are annotated with \u003ccode\u003e@javax.enterprise.event.Observes\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e in overrides and implementation methods \u003c/li\u003e\n  \u003cli\u003e in interface \u003ccode\u003edefault\u003c/code\u003e methods \u003c/li\u003e\n  \u003cli\u003e in non-private methods that only \u003ccode\u003ethrow\u003c/code\u003e or that have empty bodies \u003c/li\u003e\n  \u003cli\u003e in annotated methods, unless the annotation is \u003ccode\u003e@SuppressWarning(\"unchecked\")\u003c/code\u003e or \u003ccode\u003e@SuppressWarning(\"rawtypes\")\u003c/code\u003e, in\n  which case the annotation will be ignored \u003c/li\u003e\n  \u003cli\u003e in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper\n  javadoc. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n@Override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n\n/**\n * @param s This string may be use for further computation in overriding classes\n */\nprotected void foobar(int a, String s) { // no issue, method is overridable and unused parameter has proper javadoc\n  compute(a);\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\"\u003eCERT, MSC12-C.\u003c/a\u003e - Detect and remove code that has no effect or is never executed\n  \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1172"]}},{"key":"java:S1185","repo":"java","name":"Overriding methods should do more than simply call the same method in the super class","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eOverriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in \u003ccode\u003efinal\u003c/code\u003e overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of \u003ccode\u003eequals\u003c/code\u003e, \u003ccode\u003ehashCode\u003c/code\u003e and \u003ccode\u003etoString\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eOverriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in \u003ccode\u003efinal\u003c/code\u003e overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of \u003ccode\u003eequals\u003c/code\u003e, \u003ccode\u003ehashCode\u003c/code\u003e and \u003ccode\u003etoString\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy","redundant"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1185"]}},{"key":"java:S1186","repo":"java","name":"Methods should not be empty","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere are several reasons for a method not to have a method body:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \u003c/li\u003e\n  \u003cli\u003e It is not yet, or never will be, supported. In this case an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e should be thrown. \u003c/li\u003e\n  \u003cli\u003e The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Override\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eDefault (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.\u003c/p\u003e\n\u003cpre\u003e\npublic abstract class Animal {\n  void speak() {  // default implementation ignored\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThere are several reasons for a method not to have a method body:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. \u003c/li\u003e\n  \u003cli\u003e It is not yet, or never will be, supported. In this case an \u003ccode\u003eUnsupportedOperationException\u003c/code\u003e should be thrown. \u003c/li\u003e\n  \u003cli\u003e The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Override\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eDefault (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.\u003c/p\u003e\n\u003cpre\u003e\npublic abstract class Animal {\n  void speak() {  // default implementation ignored\n  }\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1186"]}},{"key":"java:S1188","repo":"java","name":"Anonymous classes should not have too many lines","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAnonymous classes are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner\nclasses should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become\nunreadable.\u003c/p\u003e","mdDesc":"\u003cp\u003eAnonymous classes are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner\nclasses should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become\nunreadable.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[{"key":"Max","htmlDesc":"Maximum allowed lines in an anonymous class","defaultValue":"20","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1188"]}},{"key":"java:S2039","repo":"java","name":"Member variable visibility should be specified","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eFailing to explicitly declare the visibility of a member variable could result it in having a visibility you don’t expect, and potentially leave it\nopen to unexpected modification by other classes.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Ball {\n    String color\u003d\"red\";  // Noncompliant\n}\nenum A {\n  B;\n  int a;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass Ball {\n    private String color\u003d\"red\";  // Compliant\n}\nenum A {\n  B;\n  private int a;\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eMembers annotated with \u003ccode\u003e@VisibleForTesting\u003c/code\u003e annotation are ignored, as it indicates that visibility has been purposely relaxed to make\nthe code testable.\u003c/p\u003e\n\u003cpre\u003e\nclass Cone {\n  @VisibleForTesting\n  Logger logger; // Compliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eDeprecated\u003c/h2\u003e\n\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e","mdDesc":"\u003cp\u003eFailing to explicitly declare the visibility of a member variable could result it in having a visibility you don’t expect, and potentially leave it\nopen to unexpected modification by other classes.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Ball {\n    String color\u003d\"red\";  // Noncompliant\n}\nenum A {\n  B;\n  int a;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass Ball {\n    private String color\u003d\"red\";  // Compliant\n}\nenum A {\n  B;\n  private int a;\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eMembers annotated with \u003ccode\u003e@VisibleForTesting\u003c/code\u003e annotation are ignored, as it indicates that visibility has been purposely relaxed to make\nthe code testable.\u003c/p\u003e\n\u003cpre\u003e\nclass Cone {\n  @VisibleForTesting\n  Logger logger; // Compliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eDeprecated\u003c/h2\u003e\n\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e","severity":"MINOR","status":"DEPRECATED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2039"]}},{"key":"java:S2140","repo":"java","name":"Methods of \"Random\" that return floating point values should not be used in random integer generation","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere is no need to multiply the output of \u003ccode\u003eRandom\u003c/code\u003e\u0027s \u003ccode\u003enextDouble\u003c/code\u003e method to get a random integer. Use the\n\u003ccode\u003enextInt\u003c/code\u003e method instead.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the return value of any of \u003ccode\u003eRandom\u003c/code\u003e\u0027s methods that return a floating point value is converted to an\ninteger.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nRandom r \u003d new Random();\nint rand \u003d (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 \u003d (int)r.nextFloat(); // Noncompliant; will always be 0;\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nRandom r \u003d new Random();\nint rand \u003d r.nextInt(50);  // returns pseudo-random value between 0 and 50\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThere is no need to multiply the output of \u003ccode\u003eRandom\u003c/code\u003e\u0027s \u003ccode\u003enextDouble\u003c/code\u003e method to get a random integer. Use the\n\u003ccode\u003enextInt\u003c/code\u003e method instead.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the return value of any of \u003ccode\u003eRandom\u003c/code\u003e\u0027s methods that return a floating point value is converted to an\ninteger.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nRandom r \u003d new Random();\nint rand \u003d (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 \u003d (int)r.nextFloat(); // Noncompliant; will always be 0;\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nRandom r \u003d new Random();\nint rand \u003d r.nextInt(50);  // returns pseudo-random value between 0 and 50\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2140"]}},{"key":"java:S2156","repo":"java","name":"\"final\" classes should not have \"protected\" members","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe difference between \u003ccode\u003eprivate\u003c/code\u003e and \u003ccode\u003eprotected\u003c/code\u003e visibility is that child classes can see and use \u003ccode\u003eprotected\u003c/code\u003e\nmembers, but they cannot see \u003ccode\u003eprivate\u003c/code\u003e ones. Since a \u003ccode\u003efinal\u003c/code\u003e class will have no children, marking the members of a\n\u003ccode\u003efinal\u003c/code\u003e class \u003ccode\u003eprotected\u003c/code\u003e is confusingly pointless.\u003c/p\u003e\n\u003cp\u003eNote that the \u003ccode\u003eprotected\u003c/code\u003e members of a class can also be seen and used by other classes that are placed within the same package, this\ncould lead to accidental, unintended access to otherwise private members.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic final class MyFinalClass {\n\n  protected String name \u003d \"Fred\";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic final class MyFinalClass {\n\n  private String name \u003d \"Fred\";\n  public void setName(String name) {\n    // ...\n  }\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eMembers annotated with\u0026nbsp;\u003ccode\u003e@VisibleForTesting\u003c/code\u003e annotation are ignored, as it indicates that visibility has been purposely relaxed to\nmake the code testable.\u003c/p\u003e\n\u003cpre\u003e\npublic final class MyFinalClass {\n  @VisibleForTesting\n  protected Logger logger; // Compliant\n\n  @VisibleForTesting\n  protected int calculateSomethingComplex(String input) { // Compliant\n    // ...\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe difference between \u003ccode\u003eprivate\u003c/code\u003e and \u003ccode\u003eprotected\u003c/code\u003e visibility is that child classes can see and use \u003ccode\u003eprotected\u003c/code\u003e\nmembers, but they cannot see \u003ccode\u003eprivate\u003c/code\u003e ones. Since a \u003ccode\u003efinal\u003c/code\u003e class will have no children, marking the members of a\n\u003ccode\u003efinal\u003c/code\u003e class \u003ccode\u003eprotected\u003c/code\u003e is confusingly pointless.\u003c/p\u003e\n\u003cp\u003eNote that the \u003ccode\u003eprotected\u003c/code\u003e members of a class can also be seen and used by other classes that are placed within the same package, this\ncould lead to accidental, unintended access to otherwise private members.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic final class MyFinalClass {\n\n  protected String name \u003d \"Fred\";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic final class MyFinalClass {\n\n  private String name \u003d \"Fred\";\n  public void setName(String name) {\n    // ...\n  }\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eMembers annotated with\u0026nbsp;\u003ccode\u003e@VisibleForTesting\u003c/code\u003e annotation are ignored, as it indicates that visibility has been purposely relaxed to\nmake the code testable.\u003c/p\u003e\n\u003cpre\u003e\npublic final class MyFinalClass {\n  @VisibleForTesting\n  protected Logger logger; // Compliant\n\n  @VisibleForTesting\n  protected int calculateSomethingComplex(String input) { // Compliant\n    // ...\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2156"]}},{"key":"java:S2157","repo":"java","name":"\"Cloneables\" should implement \"clone\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eSimply implementing \u003ccode\u003eCloneable\u003c/code\u003e without also overriding \u003ccode\u003eObject.clone()\u003c/code\u003e does not necessarily make the class cloneable. While\nthe \u003ccode\u003eCloneable\u003c/code\u003e interface does not include a \u003ccode\u003eclone\u003c/code\u003e method, it is required by convention, and ensures true cloneability.\nOtherwise the default JVM \u003ccode\u003eclone\u003c/code\u003e will be used, which copies primitive values and object references from the source to the target. I.e.\nwithout overriding \u003ccode\u003eclone\u003c/code\u003e, any cloned instances will potentially share members with the source instance.\u003c/p\u003e\n\u003cp\u003eRemoving the \u003ccode\u003eCloneable\u003c/code\u003e implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a\nclass to be copied.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Team implements Cloneable {  // Noncompliant\n  private Person coach;\n  private List\u0026lt;Person\u0026gt; players;\n  public void addPlayer(Person p) {...}\n  public Person getCoach() {...}\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass Team implements Cloneable {\n  private Person coach;\n  private List\u0026lt;Person\u0026gt; players;\n  public void addPlayer(Person p) { ... }\n  public Person getCoach() { ... }\n\n  @Override\n  public Object clone() {\n    Team clone \u003d (Team) super.clone();\n    //...\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eSimply implementing \u003ccode\u003eCloneable\u003c/code\u003e without also overriding \u003ccode\u003eObject.clone()\u003c/code\u003e does not necessarily make the class cloneable. While\nthe \u003ccode\u003eCloneable\u003c/code\u003e interface does not include a \u003ccode\u003eclone\u003c/code\u003e method, it is required by convention, and ensures true cloneability.\nOtherwise the default JVM \u003ccode\u003eclone\u003c/code\u003e will be used, which copies primitive values and object references from the source to the target. I.e.\nwithout overriding \u003ccode\u003eclone\u003c/code\u003e, any cloned instances will potentially share members with the source instance.\u003c/p\u003e\n\u003cp\u003eRemoving the \u003ccode\u003eCloneable\u003c/code\u003e implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a\nclass to be copied.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Team implements Cloneable {  // Noncompliant\n  private Person coach;\n  private List\u0026lt;Person\u0026gt; players;\n  public void addPlayer(Person p) {...}\n  public Person getCoach() {...}\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass Team implements Cloneable {\n  private Person coach;\n  private List\u0026lt;Person\u0026gt; players;\n  public void addPlayer(Person p) { ... }\n  public Person getCoach() { ... }\n\n  @Override\n  public Object clone() {\n    Team clone \u003d (Team) super.clone();\n    //...\n  }\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["api-design","convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2157"]}},{"key":"java:S2260","repo":"java","name":"Java parser failure","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.\u003c/p\u003e","mdDesc":"\u003cp\u003eWhen the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:ParsingError"]}},{"key":"java:S2274","repo":"java","name":"\"Object.wait(...)\" and \"Condition.await(...)\" should be called inside a \"while\" loop","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAccording to the documentation of the Java \u003ccode\u003eCondition\u003c/code\u003e interface:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eWhen waiting upon a \u003ccode\u003eCondition\u003c/code\u003e, a \"spurious wakeup\" is permitted to occur, in general, as a concession to the underlying platform\n  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state\n  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications\n  programmers always assume that they can occur and so always wait in a loop.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe same advice is also found for the \u003ccode\u003eObject.wait(...)\u003c/code\u003e method:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003ewaits should always occur in loops, like this one:\u003c/p\u003e\n  \u003cpre\u003e\nsynchronized (obj) {\n  while (\u0026lt;condition does not hold\u0026gt;){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n\u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout);   //the thread can wake up even if the condition is still false\n  }\n   ... // Perform action appropriate to condition\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/EzdGBQ\"\u003eCERT THI03-J.\u003c/a\u003e - Always invoke wait() and await() methods inside a loop \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eAccording to the documentation of the Java \u003ccode\u003eCondition\u003c/code\u003e interface:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eWhen waiting upon a \u003ccode\u003eCondition\u003c/code\u003e, a \"spurious wakeup\" is permitted to occur, in general, as a concession to the underlying platform\n  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state\n  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications\n  programmers always assume that they can occur and so always wait in a loop.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe same advice is also found for the \u003ccode\u003eObject.wait(...)\u003c/code\u003e method:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003ewaits should always occur in loops, like this one:\u003c/p\u003e\n  \u003cpre\u003e\nsynchronized (obj) {\n  while (\u0026lt;condition does not hold\u0026gt;){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n\u003c/pre\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout);   //the thread can wake up even if the condition is still false\n  }\n   ... // Perform action appropriate to condition\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/EzdGBQ\"\u003eCERT THI03-J.\u003c/a\u003e - Always invoke wait() and await() methods inside a loop \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","multi-threading"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2274"]}},{"key":"java:S3008","repo":"java","name":"Static non-final field names should comply with a naming convention","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular\nexpression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic final class MyClass {\n   private static String foo_bar;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n   private static String fooBar;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular\nexpression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic final class MyClass {\n   private static String foo_bar;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n   private static String fooBar;\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"format","htmlDesc":"Regular expression used to check the field names against.","defaultValue":"^[a-z][a-zA-Z0-9]*$","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3008"]}},{"key":"java:S3242","repo":"java","name":"Method parameters should be declared with base types","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eFor maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class\nare required by a method, a type higher up the class hierarchy should be used instead.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void printSize(ArrayList\u0026lt;Object\u0026gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(List\u0026lt;Object\u0026gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void printSize(Collection\u0026lt;?\u0026gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(Iterable\u0026lt;?\u0026gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eParameters in non-public methods are not checked, because such methods are not intended to be generally reusable. \u003ccode\u003ejava.lang.String\u003c/code\u003e\nparameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context\nthan method invocation or enhanced for loop are also excluded.\u003c/p\u003e","mdDesc":"\u003cp\u003eFor maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class\nare required by a method, a type higher up the class hierarchy should be used instead.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void printSize(ArrayList\u0026lt;Object\u0026gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(List\u0026lt;Object\u0026gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void printSize(Collection\u0026lt;?\u0026gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(Iterable\u0026lt;?\u0026gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eParameters in non-public methods are not checked, because such methods are not intended to be generally reusable. \u003ccode\u003ejava.lang.String\u003c/code\u003e\nparameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context\nthan method invocation or enhanced for loop are also excluded.\u003c/p\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["api-design"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3242"]}},{"key":"java:S3366","repo":"java","name":"\"this\" should not be exposed from constructors","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn single-threaded environments, the use of \u003ccode\u003ethis\u003c/code\u003e in constructors is normal, and expected. But in multi-threaded environments, it could\nexpose partially-constructed objects to other threads, and should be used with caution.\u003c/p\u003e\n\u003cp\u003eThe classic example is a class with a \u003ccode\u003estatic\u003c/code\u003e list of its instances. If the constructor stores \u003ccode\u003ethis\u003c/code\u003e in the list, another\nthread could access the object before it’s fully-formed. Even when the storage of \u003ccode\u003ethis\u003c/code\u003e is the last instruction in the constructor,\nthere’s still a danger if the class is not \u003ccode\u003efinal\u003c/code\u003e. In that case, the initialization of subclasses won’t be complete before\n\u003ccode\u003ethis\u003c/code\u003e is exposed.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003ethis\u003c/code\u003e is assigned to any globally-visible object in a constructor, and when it is passed to the method\nof another object in a constructor\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Monument {\n\n  public static final List\u0026lt;Monument\u0026gt; ALL_MONUMENTS \u003d new ArrayList()\u0026lt;\u0026gt;;\n  // ...\n\n  public Monument(String location, ...) {\n    ALL_MONUMENTS.add(this);  // Noncompliant; passed to a method of another object\n\n    this.location \u003d location;\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule ignores instances of assigning \u003ccode\u003ethis\u003c/code\u003e directly to a \u003ccode\u003estatic\u003c/code\u003e field of the same class because that case is covered\nby \u003ca href\u003d\u0027/coding_rules#rule_key\u003djava%3AS3010\u0027\u003eS3010\u003c/a\u003e .\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/iDdGBQ\"\u003eCERT, TSM01-J.\u003c/a\u003e - Do not let the this reference escape during object construction\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/vzdGBQ\"\u003eCERT, TSM03-J.\u003c/a\u003e - Do not publish partially initialized objects \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eIn single-threaded environments, the use of \u003ccode\u003ethis\u003c/code\u003e in constructors is normal, and expected. But in multi-threaded environments, it could\nexpose partially-constructed objects to other threads, and should be used with caution.\u003c/p\u003e\n\u003cp\u003eThe classic example is a class with a \u003ccode\u003estatic\u003c/code\u003e list of its instances. If the constructor stores \u003ccode\u003ethis\u003c/code\u003e in the list, another\nthread could access the object before it’s fully-formed. Even when the storage of \u003ccode\u003ethis\u003c/code\u003e is the last instruction in the constructor,\nthere’s still a danger if the class is not \u003ccode\u003efinal\u003c/code\u003e. In that case, the initialization of subclasses won’t be complete before\n\u003ccode\u003ethis\u003c/code\u003e is exposed.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003ethis\u003c/code\u003e is assigned to any globally-visible object in a constructor, and when it is passed to the method\nof another object in a constructor\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Monument {\n\n  public static final List\u0026lt;Monument\u0026gt; ALL_MONUMENTS \u003d new ArrayList()\u0026lt;\u0026gt;;\n  // ...\n\n  public Monument(String location, ...) {\n    ALL_MONUMENTS.add(this);  // Noncompliant; passed to a method of another object\n\n    this.location \u003d location;\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule ignores instances of assigning \u003ccode\u003ethis\u003c/code\u003e directly to a \u003ccode\u003estatic\u003c/code\u003e field of the same class because that case is covered\nby {rule:java:S3010} .\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/iDdGBQ\"\u003eCERT, TSM01-J.\u003c/a\u003e - Do not let the this reference escape during object construction\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/vzdGBQ\"\u003eCERT, TSM03-J.\u003c/a\u003e - Do not publish partially initialized objects \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","multi-threading","suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3366"]}},{"key":"java:S4449","repo":"java","name":"Nullness of parameters should be guaranteed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen using null-related annotations at global scope level, for instance using \u003ccode\u003ejavax.annotation.ParametersAreNonnullByDefault\u003c/code\u003e (from\nJSR-305) at package level, it means that all the parameters to all the methods included in the package will, or should, be considered\nNon-\u003ccode\u003enull\u003c/code\u003e. It is equivalent to annotating every parameter in every method with non-null annotations (such as \u003ccode\u003e@Nonnull\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eThe rule raises an issue every time a parameter could be \u003ccode\u003enull\u003c/code\u003e for a method invocation, where the method is annotated as forbidding\nnull parameters.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@javax.annotation.ParametersAreNonnullByDefault\nclass A {\n\n  void foo() {\n    bar(getValue()); // Noncompliant - method \u0027bar\u0027 do not expect \u0027null\u0027 values as parameter\n  }\n\n  void bar(Object o) { // \u0027o\u0027 is by contract expected never to be null\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eTwo solutions are possible:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The signature of the method is correct, and null check should be done prior to the call. \u003c/li\u003e\n  \u003cli\u003e The signature of the method is not coherent and should be annotated to allow null values being passed as parameter \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n      Object o \u003d getValue();\n      if (o !\u003d null) {\n        bar(o); // Compliant - \u0027o\u0027 can not be null\n      }\n  }\n\n  void bar(Object o) {\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n    bar(getValue());\n  }\n\n  void bar(@javax.annotation.Nullable Object o) { // annotation was missing\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen using null-related annotations at global scope level, for instance using \u003ccode\u003ejavax.annotation.ParametersAreNonnullByDefault\u003c/code\u003e (from\nJSR-305) at package level, it means that all the parameters to all the methods included in the package will, or should, be considered\nNon-\u003ccode\u003enull\u003c/code\u003e. It is equivalent to annotating every parameter in every method with non-null annotations (such as \u003ccode\u003e@Nonnull\u003c/code\u003e).\u003c/p\u003e\n\u003cp\u003eThe rule raises an issue every time a parameter could be \u003ccode\u003enull\u003c/code\u003e for a method invocation, where the method is annotated as forbidding\nnull parameters.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@javax.annotation.ParametersAreNonnullByDefault\nclass A {\n\n  void foo() {\n    bar(getValue()); // Noncompliant - method \u0027bar\u0027 do not expect \u0027null\u0027 values as parameter\n  }\n\n  void bar(Object o) { // \u0027o\u0027 is by contract expected never to be null\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eTwo solutions are possible:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The signature of the method is correct, and null check should be done prior to the call. \u003c/li\u003e\n  \u003cli\u003e The signature of the method is not coherent and should be annotated to allow null values being passed as parameter \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n      Object o \u003d getValue();\n      if (o !\u003d null) {\n        bar(o); // Compliant - \u0027o\u0027 can not be null\n      }\n  }\n\n  void bar(Object o) {\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n    bar(getValue());\n  }\n\n  void bar(@javax.annotation.Nullable Object o) { // annotation was missing\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4449"]}},{"key":"java:S4454","repo":"java","name":"\"equals\" method parameters should not be marked \"@Nonnull\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eBy contract, the \u003ccode\u003eequals(Object)\u003c/code\u003e method, from \u003ccode\u003ejava.lang.Object\u003c/code\u003e, should accept a \u003ccode\u003enull\u003c/code\u003e argument. Among all the\nother cases, the \u003ccode\u003enull\u003c/code\u003e case is even explicitly detailed in the \u003ccode\u003eObject.equals(...)\u003c/code\u003e Javadoc, stating \u003cem\u003e\"For any non-null\nreference value x, x.equals(null) should return false.\"\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eAssuming that the argument to \u003ccode\u003eequals\u003c/code\u003e is always non-null, and enforcing that assumption with an annotation is not only a fundamental\nviolation of the contract of \u003ccode\u003eequals\u003c/code\u003e, but it is also likely to cause problems in the future as the use of the class evolves over time.\u003c/p\u003e\n\u003cp\u003eThe rule raises an issue when the \u003ccode\u003eequals\u003c/code\u003e method is overridden and its parameter annotated with any kind of \u003ccode\u003e@Nonnull\u003c/code\u003e\nannotation.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean equals(@javax.annotation.Nonnull Object obj) { // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean equals(Object obj) {\n  if (obj \u003d\u003d null) {\n    return false;\n  }\n  // ...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eBy contract, the \u003ccode\u003eequals(Object)\u003c/code\u003e method, from \u003ccode\u003ejava.lang.Object\u003c/code\u003e, should accept a \u003ccode\u003enull\u003c/code\u003e argument. Among all the\nother cases, the \u003ccode\u003enull\u003c/code\u003e case is even explicitly detailed in the \u003ccode\u003eObject.equals(...)\u003c/code\u003e Javadoc, stating \u003cem\u003e\"For any non-null\nreference value x, x.equals(null) should return false.\"\u003c/em\u003e\u003c/p\u003e\n\u003cp\u003eAssuming that the argument to \u003ccode\u003eequals\u003c/code\u003e is always non-null, and enforcing that assumption with an annotation is not only a fundamental\nviolation of the contract of \u003ccode\u003eequals\u003c/code\u003e, but it is also likely to cause problems in the future as the use of the class evolves over time.\u003c/p\u003e\n\u003cp\u003eThe rule raises an issue when the \u003ccode\u003eequals\u003c/code\u003e method is overridden and its parameter annotated with any kind of \u003ccode\u003e@Nonnull\u003c/code\u003e\nannotation.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean equals(@javax.annotation.Nonnull Object obj) { // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean equals(Object obj) {\n  if (obj \u003d\u003d null) {\n    return false;\n  }\n  // ...\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"3min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"3min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"3min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"3min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4454"]}},{"key":"java:S4682","repo":"java","name":"\"@CheckForNull\" or \"@Nullable\" should not be used on primitive types","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eBy definition, primitive types are not Objects and so they can’t be \u003ccode\u003enull\u003c/code\u003e. Adding \u003ccode\u003e@CheckForNull\u003c/code\u003e or \u003ccode\u003e@Nullable\u003c/code\u003e\non primitive types adds confusion and is useless.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003e@CheckForNull\u003c/code\u003e or \u003ccode\u003e@Nullable\u003c/code\u003e is set on a method returning a primitive type: byte, short,\nint, long, float, double, boolean, char.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@CheckForNull\nboolean isFoo() {\n ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nboolean isFoo() {\n ...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eBy definition, primitive types are not Objects and so they can’t be \u003ccode\u003enull\u003c/code\u003e. Adding \u003ccode\u003e@CheckForNull\u003c/code\u003e or \u003ccode\u003e@Nullable\u003c/code\u003e\non primitive types adds confusion and is useless.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003e@CheckForNull\u003c/code\u003e or \u003ccode\u003e@Nullable\u003c/code\u003e is set on a method returning a primitive type: byte, short,\nint, long, float, double, boolean, char.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@CheckForNull\nboolean isFoo() {\n ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nboolean isFoo() {\n ...\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4682"]}},{"key":"java:S5663","repo":"java","name":"Simple string literal should be used for single line strings","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIf a string fits on a single line, without concatenation and escaped newlines, you should probably continue to use a string literal.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString question \u003d \"\"\"\n              What\u0027s the point, really?\"\"\";\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString question \u003d \"What\u0027s the point, really?\";\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/378\"\u003eJEP 378: Text Blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\"\u003eProgrammer’s Guide To Text Blocks\u003c/a\u003e, by Jim Laskey and Stuart\n  Marks \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eIf a string fits on a single line, without concatenation and escaped newlines, you should probably continue to use a string literal.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString question \u003d \"\"\"\n              What\u0027s the point, really?\"\"\";\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString question \u003d \"What\u0027s the point, really?\";\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/378\"\u003eJEP 378: Text Blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\"\u003eProgrammer’s Guide To Text Blocks\u003c/a\u003e, by Jim Laskey and Stuart\n  Marks \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java14"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5663"]}},{"key":"java:S5664","repo":"java","name":"Whitespace for text block indent should be consistent","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eEither use only spaces or only tabs for the indentation of a text block. Mixing white space will lead to a result with irregular indentation.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString textBlock \u003d \"\"\"\n        this is\n\u0026lt;tab\u0026gt;text block!\n        !!!!\n      \"\"\";\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString textBlock \u003d \"\"\"\n        this is\n        text block!\n        !!!!\n      \"\"\";\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/378\"\u003eJEP 378: Text Blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\"\u003eProgrammer’s Guide To Text Blocks\u003c/a\u003e, by Jim Laskey and Stuart\n  Marks \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eEither use only spaces or only tabs for the indentation of a text block. Mixing white space will lead to a result with irregular indentation.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString textBlock \u003d \"\"\"\n        this is\n\u0026lt;tab\u0026gt;text block!\n        !!!!\n      \"\"\";\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString textBlock \u003d \"\"\"\n        this is\n        text block!\n        !!!!\n      \"\"\";\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/378\"\u003eJEP 378: Text Blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\"\u003eProgrammer’s Guide To Text Blocks\u003c/a\u003e, by Jim Laskey and Stuart\n  Marks \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java14"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5664"]}},{"key":"java:S5665","repo":"java","name":"Escape sequences should not be used in text blocks","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe use of escape sequences is mostly unnecessary in text blocks.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e\\n\u003c/code\u003e can be replaced by simply introducing the newline, \u003ccode\u003e\\\"\\\"\\\"\u003c/code\u003e it is sufficient to escape only the first qoute.\u003c/p\u003e\n\u003cpre\u003e\nString textBlock \u003d \"\"\"\n        \\\"\\\"\\\" this \\nis\n        text  block!\n        !!!!\n      \"\"\";\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString textBlock \u003d \"\"\"\n        \\\"\"\" this\n        is\n        text  block!\n        !!!!\n      \"\"\";\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/378\"\u003eJEP 378: Text Blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\"\u003eProgrammer’s Guide To Text Blocks\u003c/a\u003e, by Jim Laskey and Stuart\n  Marks \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThe use of escape sequences is mostly unnecessary in text blocks.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003e\\n\u003c/code\u003e can be replaced by simply introducing the newline, \u003ccode\u003e\\\"\\\"\\\"\u003c/code\u003e it is sufficient to escape only the first qoute.\u003c/p\u003e\n\u003cpre\u003e\nString textBlock \u003d \"\"\"\n        \\\"\\\"\\\" this \\nis\n        text  block!\n        !!!!\n      \"\"\";\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString textBlock \u003d \"\"\"\n        \\\"\"\" this\n        is\n        text  block!\n        !!!!\n      \"\"\";\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/378\"\u003eJEP 378: Text Blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\"\u003eProgrammer’s Guide To Text Blocks\u003c/a\u003e, by Jim Laskey and Stuart\n  Marks \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java14"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5665"]}},{"key":"java:S5669","repo":"java","name":"Vararg method arguments should not be confusing","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003ePassing single \u003ccode\u003enull\u003c/code\u003e or primitive array argument to the variable arity method may not work as expected. In the case of\n\u003ccode\u003enull\u003c/code\u003e, it is not passed as array with single element, but the argument itself is \u003ccode\u003enull\u003c/code\u003e. In the case of a primitive array, if\nthe formal parameter is \u003ccode\u003eObject...\u003c/code\u003e, it is passed as a single element array. This may not be obvious to someone not familiar with such\ncorner cases, and it is probably better to avoid such ambiguities by explicitly casting the argument to the desired type.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass A {\n  public static void main(String[] args) {\n    vararg(null);  // Noncompliant, prints \"null\"\n    int[] arr \u003d {1,2,3};\n    vararg(arr);  // Noncompliant, prints \"length: 1\"\n  }\n\n  static void vararg(Object... s) {\n    if (s \u003d\u003d null) {\n      System.out.println(\"null\");\n    } else {\n      System.out.println(\"length: \" + s.length);\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass A {\n  public static void main(String[] args) {\n    vararg((Object) null); // prints 1\n    Object[] arr \u003d {1,2,3};\n    vararg(arr); // prints 3\n  }\n\n  static void vararg(Object... s) {\n    if (s \u003d\u003d null) {\n      System.out.println(\"null\"); // not reached\n    } else {\n      System.out.println(\"length: \" + s.length);\n    }\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003ePassing single \u003ccode\u003enull\u003c/code\u003e or primitive array argument to the variable arity method may not work as expected. In the case of\n\u003ccode\u003enull\u003c/code\u003e, it is not passed as array with single element, but the argument itself is \u003ccode\u003enull\u003c/code\u003e. In the case of a primitive array, if\nthe formal parameter is \u003ccode\u003eObject...\u003c/code\u003e, it is passed as a single element array. This may not be obvious to someone not familiar with such\ncorner cases, and it is probably better to avoid such ambiguities by explicitly casting the argument to the desired type.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass A {\n  public static void main(String[] args) {\n    vararg(null);  // Noncompliant, prints \"null\"\n    int[] arr \u003d {1,2,3};\n    vararg(arr);  // Noncompliant, prints \"length: 1\"\n  }\n\n  static void vararg(Object... s) {\n    if (s \u003d\u003d null) {\n      System.out.println(\"null\");\n    } else {\n      System.out.println(\"length: \" + s.length);\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass A {\n  public static void main(String[] args) {\n    vararg((Object) null); // prints 1\n    Object[] arr \u003d {1,2,3};\n    vararg(arr); // prints 3\n  }\n\n  static void vararg(Object... s) {\n    if (s \u003d\u003d null) {\n      System.out.println(\"null\"); // not reached\n    } else {\n      System.out.println(\"length: \" + s.length);\n    }\n  }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5669"]}},{"key":"java:S5785","repo":"java","name":"JUnit assertTrue/assertFalse should be simplified to the corresponding dedicated assertion","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eTesting equality or nullness with JUnit’s \u003ccode\u003eassertTrue()\u003c/code\u003e or \u003ccode\u003eassertFalse()\u003c/code\u003e should be simplified to the corresponding\ndedicated assertion.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nAssert.assertTrue(a.equals(b));\nAssert.assertTrue(a \u003d\u003d b);\nAssert.assertTrue(a \u003d\u003d null);\nAssert.assertTrue(a !\u003d null);\nAssert.assertFalse(a.equals(b));\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nAssert.assertEquals(a, b);\nAssert.assertSame(a, b);\nAssert.assertNull(a);\nAssert.assertNotNull(a);\nAssert.assertNotEquals(a, b);\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eTesting equality or nullness with JUnit’s \u003ccode\u003eassertTrue()\u003c/code\u003e or \u003ccode\u003eassertFalse()\u003c/code\u003e should be simplified to the corresponding\ndedicated assertion.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nAssert.assertTrue(a.equals(b));\nAssert.assertTrue(a \u003d\u003d b);\nAssert.assertTrue(a \u003d\u003d null);\nAssert.assertTrue(a !\u003d null);\nAssert.assertFalse(a.equals(b));\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nAssert.assertEquals(a, b);\nAssert.assertSame(a, b);\nAssert.assertNull(a);\nAssert.assertNotNull(a);\nAssert.assertNotEquals(a, b);\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["junit","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5785"]}},{"key":"java:S5786","repo":"java","name":"JUnit5 test classes and methods should have default package visibility","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eJUnit5 is more tolerant regarding the visibilities of Test classes than JUnit4, which required everything to be \u003ccode\u003epublic\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn this context, JUnit5 test classes can have any visibility but \u003ccode\u003eprivate\u003c/code\u003e, however, it is recommended to use the default package\nvisibility, which improves readability of code.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nimport org.junit.jupiter.api.Test;\n\npublic class MyClassTest { // Noncompliant - modifier can be removed\n  @Test\n  protected void test() { // Noncompliant - modifier can be removed\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nimport org.junit.jupiter.api.Test;\n\nclass MyClassTest {\n  @Test\n  void test() {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule does not raise an issue about \u003ccode\u003eprivate\u003c/code\u003e visibility, because \u003ccode\u003eprivate\u003c/code\u003e test methods and classes are systematically\nignored by JUnit5, without a proper warning. It’s not a \u003ccode\u003eCode Smell\u003c/code\u003e but a \u003ccode\u003eBug\u003c/code\u003e handled by the rule \u003ca href\u003d\u0027/coding_rules#rule_key\u003djava%3AS5810\u0027\u003eS5810\u003c/a\u003e .\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-classes-and-methods\"\u003eJUnit 5 Test Classes and Methods\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eJUnit5 is more tolerant regarding the visibilities of Test classes than JUnit4, which required everything to be \u003ccode\u003epublic\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIn this context, JUnit5 test classes can have any visibility but \u003ccode\u003eprivate\u003c/code\u003e, however, it is recommended to use the default package\nvisibility, which improves readability of code.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nimport org.junit.jupiter.api.Test;\n\npublic class MyClassTest { // Noncompliant - modifier can be removed\n  @Test\n  protected void test() { // Noncompliant - modifier can be removed\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nimport org.junit.jupiter.api.Test;\n\nclass MyClassTest {\n  @Test\n  void test() {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule does not raise an issue about \u003ccode\u003eprivate\u003c/code\u003e visibility, because \u003ccode\u003eprivate\u003c/code\u003e test methods and classes are systematically\nignored by JUnit5, without a proper warning. It’s not a \u003ccode\u003eCode Smell\u003c/code\u003e but a \u003ccode\u003eBug\u003c/code\u003e handled by the rule {rule:java:S5810} .\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-classes-and-methods\"\u003eJUnit 5 Test Classes and Methods\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"INFO","status":"READY","isTemplate":false,"tags":[],"sysTags":["junit","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5786"]}},{"key":"java:S1150","repo":"java","name":"Enumeration should not be implemented","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eFrom the official Oracle Javadoc:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eNOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove\n  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass implements Enumeration {  // Non-Compliant\n  /* ... */\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eFrom the official Oracle Javadoc:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eNOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove\n  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass implements Enumeration {  // Non-Compliant\n  /* ... */\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["obsolete"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1150"]}},{"key":"java:S1151","repo":"java","name":"\"switch case\" clauses should not have too many lines of code","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe \u003ccode\u003eswitch\u003c/code\u003e statement should be used only to clearly define some new branches in the control flow. As soon as a \u003ccode\u003ecase\u003c/code\u003e\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n\u003ccode\u003ecase\u003c/code\u003e clause should be extracted into a dedicated method.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default threshold of 5:\u003c/p\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 0: // Noncompliant: 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe \u003ccode\u003eswitch\u003c/code\u003e statement should be used only to clearly define some new branches in the control flow. As soon as a \u003ccode\u003ecase\u003c/code\u003e\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n\u003ccode\u003ecase\u003c/code\u003e clause should be extracted into a dedicated method.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default threshold of 5:\u003c/p\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 0: // Noncompliant: 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"max","htmlDesc":"Maximum number of lines","defaultValue":"5","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1151"]}},{"key":"java:S1153","repo":"java","name":"String.valueOf() should not be appended to a String","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAppending \u003ccode\u003eString.valueOf()\u003c/code\u003e to a \u003ccode\u003eString\u003c/code\u003e decreases the code readability.\u003c/p\u003e\n\u003cp\u003eThe argument passed to \u003ccode\u003eString.valueOf()\u003c/code\u003e should be directly appended instead.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void display(int i){\n  System.out.println(\"Output is \" + String.valueOf(i));    // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void display(int i){\n  System.out.println(\"Output is \" + i);                    // Compliant\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAppending \u003ccode\u003eString.valueOf()\u003c/code\u003e to a \u003ccode\u003eString\u003c/code\u003e decreases the code readability.\u003c/p\u003e\n\u003cp\u003eThe argument passed to \u003ccode\u003eString.valueOf()\u003c/code\u003e should be directly appended instead.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void display(int i){\n  System.out.println(\"Output is \" + String.valueOf(i));    // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void display(int i){\n  System.out.println(\"Output is \" + i);                    // Compliant\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1153"]}},{"key":"java:S1155","repo":"java","name":"Collection.isEmpty() should be used to test for emptiness","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUsing \u003ccode\u003eCollection.size()\u003c/code\u003e to test for emptiness works, but using \u003ccode\u003eCollection.isEmpty()\u003c/code\u003e makes the code more readable and can\nbe more performant. The time complexity of any \u003ccode\u003eisEmpty()\u003c/code\u003e method implementation should be \u003ccode\u003eO(1)\u003c/code\u003e whereas some implementations\nof \u003ccode\u003esize()\u003c/code\u003e can be \u003ccode\u003eO(n)\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (myCollection.size() \u003d\u003d 0) {  // Noncompliant\n  /* ... */\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (myCollection.isEmpty()) {\n  /* ... */\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eUsing \u003ccode\u003eCollection.size()\u003c/code\u003e to test for emptiness works, but using \u003ccode\u003eCollection.isEmpty()\u003c/code\u003e makes the code more readable and can\nbe more performant. The time complexity of any \u003ccode\u003eisEmpty()\u003c/code\u003e method implementation should be \u003ccode\u003eO(1)\u003c/code\u003e whereas some implementations\nof \u003ccode\u003esize()\u003c/code\u003e can be \u003ccode\u003eO(n)\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (myCollection.size() \u003d\u003d 0) {  // Noncompliant\n  /* ... */\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (myCollection.isEmpty()) {\n  /* ... */\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1155"]}},{"key":"java:S1157","repo":"java","name":"Case insensitive string comparisons should be made without intermediate upper or lower casing","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUsing \u003ccode\u003etoLowerCase()\u003c/code\u003e or \u003ccode\u003etoUpperCase()\u003c/code\u003e to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate \u003ccode\u003eString\u003c/code\u003e objects.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nboolean result1 \u003d foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 \u003d foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 \u003d foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nboolean result \u003d foo.equalsIgnoreCase(bar);                  // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eNo issue will be raised when a locale is specified because the result could be different from \"equalsIgnoreCase\". (e.g.: using the Turkish\nlocale)\u003c/p\u003e\n\u003cpre\u003e\nboolean result1 \u003d foo.toUpperCase(locale).equals(bar);             // Compliant\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eUsing \u003ccode\u003etoLowerCase()\u003c/code\u003e or \u003ccode\u003etoUpperCase()\u003c/code\u003e to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate \u003ccode\u003eString\u003c/code\u003e objects.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nboolean result1 \u003d foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 \u003d foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 \u003d foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nboolean result \u003d foo.equalsIgnoreCase(bar);                  // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eNo issue will be raised when a locale is specified because the result could be different from \"equalsIgnoreCase\". (e.g.: using the Turkish\nlocale)\u003c/p\u003e\n\u003cpre\u003e\nboolean result1 \u003d foo.toUpperCase(locale).equals(bar);             // Compliant\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1157"]}},{"key":"java:S1158","repo":"java","name":"Primitive wrappers should not be instantiated only for \"toString\" or \"compareTo\" calls","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eCreating temporary primitive wrapper objects only for \u003ccode\u003eString\u003c/code\u003e conversion or the use of the \u003ccode\u003ecompareTo\u003c/code\u003e method is\ninefficient.\u003c/p\u003e\n\u003cp\u003eInstead, the static \u003ccode\u003etoString()\u003c/code\u003e or \u003ccode\u003ecompare\u003c/code\u003e method of the primitive wrapper class should be used.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nnew Integer(myInteger).toString();  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nInteger.toString(myInteger);        // Compliant\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eCreating temporary primitive wrapper objects only for \u003ccode\u003eString\u003c/code\u003e conversion or the use of the \u003ccode\u003ecompareTo\u003c/code\u003e method is\ninefficient.\u003c/p\u003e\n\u003cp\u003eInstead, the static \u003ccode\u003etoString()\u003c/code\u003e or \u003ccode\u003ecompare\u003c/code\u003e method of the primitive wrapper class should be used.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nnew Integer(myInteger).toString();  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nInteger.toString(myInteger);        // Compliant\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1158"]}},{"key":"java:S1166","repo":"java","name":"Exception handlers should preserve the original exceptions","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen handling a caught exception, the original exception’s message and stack trace should be logged or passed forward.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info(\"context\");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException(\"context\");\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eInterruptedException\u003c/code\u003e, \u003ccode\u003eNumberFormatException\u003c/code\u003e, \u003ccode\u003eDateTimeParseException\u003c/code\u003e, \u003ccode\u003eParseException\u003c/code\u003e and\n\u003ccode\u003eMalformedURLException\u003c/code\u003e exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n\u003ccode\u003eNoSuchMethodException\u003c/code\u003e is often required when dealing with the Java reflection API.\u003c/p\u003e\n\u003cp\u003eBecause they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.\u003c/p\u003e\n\u003cpre\u003e\nint myInteger;\ntry {\n  myInteger \u003d Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger \u003d 0;\n}\n\u003c/pre\u003e\n\u003cp\u003eFurthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some\ncontext to the error message.\u003c/p\u003e\n\u003cpre\u003e\ntry {\n  /* ... */\n} catch (Exception e) {\n  String message \u003d \"Exception raised while authenticating user: \" + e.getMessage();\n  LOGGER.warn(message); // Compliant - exception message logged with some contextual information\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\u003eOWASP Top 10 2021 Category A9\u003c/a\u003e - Security Logging and\n  Monitoring Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\"\u003eOWASP Top 10 2017 Category A10\u003c/a\u003e -\n  Insufficient Logging \u0026amp; Monitoring \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/xDdGBQ\"\u003eCERT, ERR00-J.\u003c/a\u003e - Do not suppress or ignore checked exceptions \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/778.html\"\u003eMITRE, CWE-778\u003c/a\u003e - Insufficient Logging \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eWhen handling a caught exception, the original exception’s message and stack trace should be logged or passed forward.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info(\"context\");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException(\"context\");\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eInterruptedException\u003c/code\u003e, \u003ccode\u003eNumberFormatException\u003c/code\u003e, \u003ccode\u003eDateTimeParseException\u003c/code\u003e, \u003ccode\u003eParseException\u003c/code\u003e and\n\u003ccode\u003eMalformedURLException\u003c/code\u003e exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n\u003ccode\u003eNoSuchMethodException\u003c/code\u003e is often required when dealing with the Java reflection API.\u003c/p\u003e\n\u003cp\u003eBecause they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.\u003c/p\u003e\n\u003cpre\u003e\nint myInteger;\ntry {\n  myInteger \u003d Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger \u003d 0;\n}\n\u003c/pre\u003e\n\u003cp\u003eFurthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some\ncontext to the error message.\u003c/p\u003e\n\u003cpre\u003e\ntry {\n  /* ... */\n} catch (Exception e) {\n  String message \u003d \"Exception raised while authenticating user: \" + e.getMessage();\n  LOGGER.warn(message); // Compliant - exception message logged with some contextual information\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\u003eOWASP Top 10 2021 Category A9\u003c/a\u003e - Security Logging and\n  Monitoring Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\"\u003eOWASP Top 10 2017 Category A10\u003c/a\u003e -\n  Insufficient Logging \u0026amp; Monitoring \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/xDdGBQ\"\u003eCERT, ERR00-J.\u003c/a\u003e - Do not suppress or ignore checked exceptions \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/778.html\"\u003eMITRE, CWE-778\u003c/a\u003e - Insufficient Logging \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe","error-handling","owasp-a10","suspicious"],"lang":"java","langName":"Java","params":[{"key":"exceptions","htmlDesc":"List of exceptions which should not be checked. Use a simple dash (\u0027-\u0027) character to check all exceptions.","defaultValue":"java.lang.InterruptedException, java.lang.NumberFormatException, java.lang.NoSuchMethodException, java.text.ParseException, java.net.MalformedURLException, java.time.format.DateTimeParseException","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1166"]}},{"key":"java:S1168","repo":"java","name":"Empty arrays and collections should be returned instead of null","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eReturning \u003ccode\u003enull\u003c/code\u003e instead of an actual array, collection or map forces callers of the method to explicitly test for nullity, making them\nmore complex and less readable.\u003c/p\u003e\n\u003cp\u003eMoreover, in many cases, \u003ccode\u003enull\u003c/code\u003e is used as a synonym for empty.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic static List\u0026lt;Result\u0026gt; getAllResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Map\u0026lt;String, Object\u0026gt; getValues() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results \u003d getResults();\n  if (results !\u003d null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n\n  List\u0026lt;Result\u0026gt; allResults \u003d getAllResults();\n  if (allResults !\u003d null) {                // Nullity test required to prevent NPE\n    for (Result result: allResults) {\n      /* ... */\n    }\n  }\n\n  Map\u0026lt;String, Object\u0026gt; values \u003d getValues();\n  if (values !\u003d null) {                   // Nullity test required to prevent NPE\n    values.forEach((k, v) -\u0026gt; doSomething(k, v));\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic static List\u0026lt;Result\u0026gt; getAllResults() {\n  return Collections.emptyList();          // Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];                    // Compliant\n}\n\npublic static Map\u0026lt;String, Object\u0026gt; getValues() {\n  return Collections.emptyMap();           // Compliant\n}\n\npublic static void main(String[] args) {\n  for (Result result: getAllResults()) {\n    /* ... */\n  }\n\n  for (Result result: getResults()) {\n    /* ... */\n  }\n\n  getValues().forEach((k, v) -\u0026gt; doSomething(k, v));\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/aNYxBQ\"\u003eCERT, MSC19-C.\u003c/a\u003e - For functions that return an array, prefer returning an empty array\n  over a null value \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/JzZGBQ\"\u003eCERT, MET55-J.\u003c/a\u003e - Return an empty array or collection instead of a null value for\n  methods that return an array or collection \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eReturning \u003ccode\u003enull\u003c/code\u003e instead of an actual array, collection or map forces callers of the method to explicitly test for nullity, making them\nmore complex and less readable.\u003c/p\u003e\n\u003cp\u003eMoreover, in many cases, \u003ccode\u003enull\u003c/code\u003e is used as a synonym for empty.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic static List\u0026lt;Result\u0026gt; getAllResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Map\u0026lt;String, Object\u0026gt; getValues() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results \u003d getResults();\n  if (results !\u003d null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n\n  List\u0026lt;Result\u0026gt; allResults \u003d getAllResults();\n  if (allResults !\u003d null) {                // Nullity test required to prevent NPE\n    for (Result result: allResults) {\n      /* ... */\n    }\n  }\n\n  Map\u0026lt;String, Object\u0026gt; values \u003d getValues();\n  if (values !\u003d null) {                   // Nullity test required to prevent NPE\n    values.forEach((k, v) -\u0026gt; doSomething(k, v));\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic static List\u0026lt;Result\u0026gt; getAllResults() {\n  return Collections.emptyList();          // Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];                    // Compliant\n}\n\npublic static Map\u0026lt;String, Object\u0026gt; getValues() {\n  return Collections.emptyMap();           // Compliant\n}\n\npublic static void main(String[] args) {\n  for (Result result: getAllResults()) {\n    /* ... */\n  }\n\n  for (Result result: getResults()) {\n    /* ... */\n  }\n\n  getValues().forEach((k, v) -\u0026gt; doSomething(k, v));\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/aNYxBQ\"\u003eCERT, MSC19-C.\u003c/a\u003e - For functions that return an array, prefer returning an empty array\n  over a null value \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/JzZGBQ\"\u003eCERT, MET55-J.\u003c/a\u003e - Return an empty array or collection instead of a null value for\n  methods that return an array or collection \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1168"]}},{"key":"java:S1181","repo":"java","name":"Throwable and Error should not be caught","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003eThrowable\u003c/code\u003e is the superclass of all errors and exceptions in Java. \u003ccode\u003eError\u003c/code\u003e is the superclass of all errors, which are not\nmeant to be caught by applications.\u003c/p\u003e\n\u003cp\u003eCatching either \u003ccode\u003eThrowable\u003c/code\u003e or \u003ccode\u003eError\u003c/code\u003e will also catch \u003ccode\u003eOutOfMemoryError\u003c/code\u003e and \u003ccode\u003eInternalError\u003c/code\u003e, from\nwhich an application should not attempt to recover.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/396.html\"\u003eMITRE, CWE-396\u003c/a\u003e - Declaration of Catch for Generic Exception \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#Re-exception-types\"\u003eC++ Core Guidelines E.14\u003c/a\u003e - Use\n  purpose-designed user-defined types as exceptions (not built-in types) \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003eThrowable\u003c/code\u003e is the superclass of all errors and exceptions in Java. \u003ccode\u003eError\u003c/code\u003e is the superclass of all errors, which are not\nmeant to be caught by applications.\u003c/p\u003e\n\u003cp\u003eCatching either \u003ccode\u003eThrowable\u003c/code\u003e or \u003ccode\u003eError\u003c/code\u003e will also catch \u003ccode\u003eOutOfMemoryError\u003c/code\u003e and \u003ccode\u003eInternalError\u003c/code\u003e, from\nwhich an application should not attempt to recover.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/396.html\"\u003eMITRE, CWE-396\u003c/a\u003e - Declaration of Catch for Generic Exception \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#Re-exception-types\"\u003eC++ Core Guidelines E.14\u003c/a\u003e - Use\n  purpose-designed user-defined types as exceptions (not built-in types) \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice","cert","cwe","error-handling"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1181"]}},{"key":"java:S1182","repo":"java","name":"Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003eCloneable\u003c/code\u003e is the marker \u003ccode\u003eInterface\u003c/code\u003e that indicates that \u003ccode\u003eclone()\u003c/code\u003e may be called on an object. Overriding\n\u003ccode\u003eclone()\u003c/code\u003e without implementing \u003ccode\u003eCloneable\u003c/code\u003e can be useful if you want to control how subclasses clone themselves, but otherwise,\nit’s probably a mistake.\u003c/p\u003e\n\u003cp\u003eThe usual convention for \u003ccode\u003eObject.clone()\u003c/code\u003e according to Oracle’s Javadoc is:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e \u003ccode\u003ex.clone() !\u003d x\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ex.clone().getClass() \u003d\u003d x.getClass()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ex.clone().equals(x)\u003c/code\u003e \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eObtaining the object that will be returned by calling \u003ccode\u003esuper.clone()\u003c/code\u003e helps to satisfy those invariants:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e \u003ccode\u003esuper.clone()\u003c/code\u003e returns a new object instance \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esuper.clone()\u003c/code\u003e returns an object of the same type as the one \u003ccode\u003eclone()\u003c/code\u003e was called on \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eObject.clone()\u003c/code\u003e performs a shallow copy of the object’s state \u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass BaseClass {  // Noncompliant; should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance \u003d new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance \u003d new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays \"Hello, world!\" as expected. Invariant #2 is satisfied\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/580.html\"\u003eMITRE, CWE-580\u003c/a\u003e - clone() Method Without super.clone() \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/FjZGBQ\"\u003eCERT, MET53-J.\u003c/a\u003e - Ensure that the clone() method calls super.clone() \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003eCloneable\u003c/code\u003e is the marker \u003ccode\u003eInterface\u003c/code\u003e that indicates that \u003ccode\u003eclone()\u003c/code\u003e may be called on an object. Overriding\n\u003ccode\u003eclone()\u003c/code\u003e without implementing \u003ccode\u003eCloneable\u003c/code\u003e can be useful if you want to control how subclasses clone themselves, but otherwise,\nit’s probably a mistake.\u003c/p\u003e\n\u003cp\u003eThe usual convention for \u003ccode\u003eObject.clone()\u003c/code\u003e according to Oracle’s Javadoc is:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e \u003ccode\u003ex.clone() !\u003d x\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ex.clone().getClass() \u003d\u003d x.getClass()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ex.clone().equals(x)\u003c/code\u003e \u003c/li\u003e\n\u003c/ol\u003e\n\u003cp\u003eObtaining the object that will be returned by calling \u003ccode\u003esuper.clone()\u003c/code\u003e helps to satisfy those invariants:\u003c/p\u003e\n\u003col\u003e\n  \u003cli\u003e \u003ccode\u003esuper.clone()\u003c/code\u003e returns a new object instance \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esuper.clone()\u003c/code\u003e returns an object of the same type as the one \u003ccode\u003eclone()\u003c/code\u003e was called on \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eObject.clone()\u003c/code\u003e performs a shallow copy of the object’s state \u003c/li\u003e\n\u003c/ol\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass BaseClass {  // Noncompliant; should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance \u003d new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance \u003d new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays \"Hello, world!\" as expected. Invariant #2 is satisfied\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/580.html\"\u003eMITRE, CWE-580\u003c/a\u003e - clone() Method Without super.clone() \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/FjZGBQ\"\u003eCERT, MET53-J.\u003c/a\u003e - Ensure that the clone() method calls super.clone() \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","convention","cwe"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1182"]}},{"key":"java:S2129","repo":"java","name":"Constructors should not be used to instantiate \"String\", \"BigInteger\", \"BigDecimal\" and primitive-wrapper classes","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eConstructors for \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eBigInteger\u003c/code\u003e, \u003ccode\u003eBigDecimal\u003c/code\u003e and the objects used to wrap primitives should never be\nused. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using \u003ccode\u003evalueOf\u003c/code\u003e for\neverything else.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString empty \u003d new String(); // Noncompliant; yields essentially \"\", so just use that.\nString nonempty \u003d new String(\"Hello world\"); // Noncompliant\nDouble myDouble \u003d new Double(1.1); // Noncompliant; use valueOf\nInteger integer \u003d new Integer(1); // Noncompliant\nBoolean bool \u003d new Boolean(true); // Noncompliant\nBigInteger bigInteger1 \u003d new BigInteger(\"3\"); // Noncompliant\nBigInteger bigInteger2 \u003d new BigInteger(\"9223372036854775807\"); // Noncompliant\nBigInteger bigInteger3 \u003d new BigInteger(\"111222333444555666777888999\"); // Compliant, greater than Long.MAX_VALUE\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString empty \u003d \"\";\nString nonempty \u003d \"Hello world\";\nDouble myDouble \u003d Double.valueOf(1.1);\nInteger integer \u003d Integer.valueOf(1);\nBoolean bool \u003d Boolean.valueOf(true);\nBigInteger bigInteger1 \u003d BigInteger.valueOf(3);\nBigInteger bigInteger2 \u003d BigInteger.valueOf(9223372036854775807L);\nBigInteger bigInteger3 \u003d new BigInteger(\"111222333444555666777888999\");\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eBigDecimal\u003c/code\u003e constructor with \u003ccode\u003edouble\u003c/code\u003e argument is ignored as using \u003ccode\u003evalueOf\u003c/code\u003e instead might change resulting\nvalue. See \u003ca href\u003d\u0027/coding_rules#rule_key\u003djava%3AS2111\u0027\u003eS2111\u003c/a\u003e .\u003c/p\u003e","mdDesc":"\u003cp\u003eConstructors for \u003ccode\u003eString\u003c/code\u003e, \u003ccode\u003eBigInteger\u003c/code\u003e, \u003ccode\u003eBigDecimal\u003c/code\u003e and the objects used to wrap primitives should never be\nused. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using \u003ccode\u003evalueOf\u003c/code\u003e for\neverything else.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString empty \u003d new String(); // Noncompliant; yields essentially \"\", so just use that.\nString nonempty \u003d new String(\"Hello world\"); // Noncompliant\nDouble myDouble \u003d new Double(1.1); // Noncompliant; use valueOf\nInteger integer \u003d new Integer(1); // Noncompliant\nBoolean bool \u003d new Boolean(true); // Noncompliant\nBigInteger bigInteger1 \u003d new BigInteger(\"3\"); // Noncompliant\nBigInteger bigInteger2 \u003d new BigInteger(\"9223372036854775807\"); // Noncompliant\nBigInteger bigInteger3 \u003d new BigInteger(\"111222333444555666777888999\"); // Compliant, greater than Long.MAX_VALUE\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString empty \u003d \"\";\nString nonempty \u003d \"Hello world\";\nDouble myDouble \u003d Double.valueOf(1.1);\nInteger integer \u003d Integer.valueOf(1);\nBoolean bool \u003d Boolean.valueOf(true);\nBigInteger bigInteger1 \u003d BigInteger.valueOf(3);\nBigInteger bigInteger2 \u003d BigInteger.valueOf(9223372036854775807L);\nBigInteger bigInteger3 \u003d new BigInteger(\"111222333444555666777888999\");\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eBigDecimal\u003c/code\u003e constructor with \u003ccode\u003edouble\u003c/code\u003e argument is ignored as using \u003ccode\u003evalueOf\u003c/code\u003e instead might change resulting\nvalue. See {rule:java:S2111} .\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2129"]}},{"key":"java:S2133","repo":"java","name":"Objects should not be created only to \"getClass\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eCreating an object for the sole purpose of calling \u003ccode\u003egetClass\u003c/code\u003e on it is a waste of memory and cycles. Instead, simply use the class\u0027\n\u003ccode\u003e.class\u003c/code\u003e property.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nMyObject myOb \u003d new MyObject();  // Noncompliant\nClass c \u003d myOb.getClass();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nClass c \u003d MyObject.class;\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eCreating an object for the sole purpose of calling \u003ccode\u003egetClass\u003c/code\u003e on it is a waste of memory and cycles. Instead, simply use the class\u0027\n\u003ccode\u003e.class\u003c/code\u003e property.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nMyObject myOb \u003d new MyObject();  // Noncompliant\nClass c \u003d myOb.getClass();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nClass c \u003d MyObject.class;\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2133"]}},{"key":"java:S2390","repo":"java","name":"Classes should not access their own subclasses during initialization","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child\nclass might not have been initialized yet. This could create what is known as an \"initialisation cycle\", or even a deadlock in some extreme cases.\u003c/p\u003e\n\u003cp\u003eTo make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Parent {\n  static int field1 \u003d Child.method(); // Noncompliant\n  static int field2 \u003d 42;\n\n  public static void main(String[] args) {\n    System.out.println(Parent.field1); // will display \"0\" instead of \"42\"\n  }\n}\n\nclass Child extends Parent {\n  static int method() {\n    return Parent.field2;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\"\u003eCERT, DCL00-J.\u003c/a\u003e - Prevent\n  class initialization cycles \u003c/li\u003e\n  \u003cli\u003e Java Language Specifications - \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\"\u003eSection 12.4: Initialization of\n  Classes and Interfaces\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eWhen a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child\nclass might not have been initialized yet. This could create what is known as an \"initialisation cycle\", or even a deadlock in some extreme cases.\u003c/p\u003e\n\u003cp\u003eTo make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Parent {\n  static int field1 \u003d Child.method(); // Noncompliant\n  static int field2 \u003d 42;\n\n  public static void main(String[] args) {\n    System.out.println(Parent.field1); // will display \"0\" instead of \"42\"\n  }\n}\n\nclass Child extends Parent {\n  static int method() {\n    return Parent.field2;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\"\u003eCERT, DCL00-J.\u003c/a\u003e - Prevent\n  class initialization cycles \u003c/li\u003e\n  \u003cli\u003e Java Language Specifications - \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\"\u003eSection 12.4: Initialization of\n  Classes and Interfaces\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2390"]}},{"key":"java:S3457","repo":"java","name":"Printf-style format strings should be used correctly","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eBecause \u003ccode\u003eprintf\u003c/code\u003e-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created. This rule statically validates the correlation of \u003ccode\u003eprintf\u003c/code\u003e-style format strings to their\narguments when calling the \u003ccode\u003eformat(...)\u003c/code\u003e methods of \u003ccode\u003ejava.util.Formatter\u003c/code\u003e, \u003ccode\u003ejava.lang.String\u003c/code\u003e,\n\u003ccode\u003ejava.io.PrintStream\u003c/code\u003e, \u003ccode\u003eMessageFormat\u003c/code\u003e, and \u003ccode\u003ejava.io.PrintWriter\u003c/code\u003e classes and the \u003ccode\u003eprintf(...)\u003c/code\u003e methods of\n\u003ccode\u003ejava.io.PrintStream\u003c/code\u003e or \u003ccode\u003ejava.io.PrintWriter\u003c/code\u003e classes.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString.format(\"First {0} and then {1}\", \"foo\", \"bar\");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters \"foo\" and \"bar\" will be simply ignored here\nString.format(\"Display %3$d and then %d\", 1, 2, 3);   //Noncompliant; the second argument \u00272\u0027 is unused\nString.format(\"Too many arguments %d and %d\", 1, 2, 3);  //Noncompliant; the third argument \u00273\u0027 is unused\nString.format(\"First Line\\n\");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(\"Is myObject null ? %b\", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It\u0027s better to directly inject the boolean value (myObject \u003d\u003d null in this case)\nString.format(\"value is \" + value); // Noncompliant\nString s \u003d String.format(\"string without arguments\"); // Noncompliant\n\nMessageFormat.format(\"Result \u0027{0}\u0027.\", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)\nMessageFormat.format(\"Result {0}.\", value, value);  // Noncompliant; 2nd argument is not used\nMessageFormat.format(\"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\nlogger.log(java.util.logging.Level.SEVERE, \"Result.\", new Exception()); // compliant, parameter is an exception\nlogger.log(java.util.logging.Level.SEVERE, \"Result \u0027{0}\u0027\", 14); // Noncompliant - String contains no format specifiers.\nlogger.log(java.util.logging.Level.SEVERE, \"Result \" + param, exception); // Noncompliant; Lambda should be used to differ string concatenation.\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message\", 1); // Noncompliant - String contains no format specifiers.\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message\", 1); // Noncompliant - String contains no format specifiers.\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString.format(\"First %s and then %s\", \"foo\", \"bar\");\nString.format(\"Display %2$d and then %d\", 1, 3);\nString.format(\"Too many arguments %d %d\", 1, 2);\nString.format(\"First Line%n\");\nString.format(\"Is myObject null ? %b\", myObject \u003d\u003d null);\nString.format(\"value is %d\", value);\nString s \u003d \"string without arguments\";\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result \u0027{0}\u0027  \u003d  {0}\", value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject);\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}\u0027\", 14);\nlogger.log(java.util.logging.Level.SEVERE, exception, () -\u0026gt; \"Result \" + param);\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message {}\", 1);\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message {}\", 1);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/J9YxBQ\"\u003eCERT, FIO47-C.\u003c/a\u003e - Use valid format strings \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eBecause \u003ccode\u003eprintf\u003c/code\u003e-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created. This rule statically validates the correlation of \u003ccode\u003eprintf\u003c/code\u003e-style format strings to their\narguments when calling the \u003ccode\u003eformat(...)\u003c/code\u003e methods of \u003ccode\u003ejava.util.Formatter\u003c/code\u003e, \u003ccode\u003ejava.lang.String\u003c/code\u003e,\n\u003ccode\u003ejava.io.PrintStream\u003c/code\u003e, \u003ccode\u003eMessageFormat\u003c/code\u003e, and \u003ccode\u003ejava.io.PrintWriter\u003c/code\u003e classes and the \u003ccode\u003eprintf(...)\u003c/code\u003e methods of\n\u003ccode\u003ejava.io.PrintStream\u003c/code\u003e or \u003ccode\u003ejava.io.PrintWriter\u003c/code\u003e classes.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString.format(\"First {0} and then {1}\", \"foo\", \"bar\");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters \"foo\" and \"bar\" will be simply ignored here\nString.format(\"Display %3$d and then %d\", 1, 2, 3);   //Noncompliant; the second argument \u00272\u0027 is unused\nString.format(\"Too many arguments %d and %d\", 1, 2, 3);  //Noncompliant; the third argument \u00273\u0027 is unused\nString.format(\"First Line\\n\");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(\"Is myObject null ? %b\", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It\u0027s better to directly inject the boolean value (myObject \u003d\u003d null in this case)\nString.format(\"value is \" + value); // Noncompliant\nString s \u003d String.format(\"string without arguments\"); // Noncompliant\n\nMessageFormat.format(\"Result \u0027{0}\u0027.\", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)\nMessageFormat.format(\"Result {0}.\", value, value);  // Noncompliant; 2nd argument is not used\nMessageFormat.format(\"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\nlogger.log(java.util.logging.Level.SEVERE, \"Result.\", new Exception()); // compliant, parameter is an exception\nlogger.log(java.util.logging.Level.SEVERE, \"Result \u0027{0}\u0027\", 14); // Noncompliant - String contains no format specifiers.\nlogger.log(java.util.logging.Level.SEVERE, \"Result \" + param, exception); // Noncompliant; Lambda should be used to differ string concatenation.\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message\", 1); // Noncompliant - String contains no format specifiers.\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message\", 1); // Noncompliant - String contains no format specifiers.\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString.format(\"First %s and then %s\", \"foo\", \"bar\");\nString.format(\"Display %2$d and then %d\", 1, 3);\nString.format(\"Too many arguments %d %d\", 1, 2);\nString.format(\"First Line%n\");\nString.format(\"Is myObject null ? %b\", myObject \u003d\u003d null);\nString.format(\"value is %d\", value);\nString s \u003d \"string without arguments\";\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result \u0027{0}\u0027  \u003d  {0}\", value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject);\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}\u0027\", 14);\nlogger.log(java.util.logging.Level.SEVERE, exception, () -\u0026gt; \"Result \" + param);\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message {}\", 1);\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message {}\", 1);\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/J9YxBQ\"\u003eCERT, FIO47-C.\u003c/a\u003e - Use valid format strings \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3457"]}},{"key":"java:S3577","repo":"java","name":"Test classes should comply with a naming convention","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided\nregular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default value: \u003ccode\u003e^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\nclass Foo {  // Noncompliant\n  @Test\n  void check() {  }\n}\n\nclass Bar {  // Noncompliant\n  @Nested\n  class PositiveCase {\n    @Test\n    void check() {  }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass FooTest {\n  @Test\n  void check() {  }\n}\n\nclass BarIT {\n  @Nested\n  class PositiveCase {\n    @Test\n    void check() {  }\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided\nregular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default value: \u003ccode\u003e^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\nclass Foo {  // Noncompliant\n  @Test\n  void check() {  }\n}\n\nclass Bar {  // Noncompliant\n  @Nested\n  class PositiveCase {\n    @Test\n    void check() {  }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass FooTest {\n  @Test\n  void check() {  }\n}\n\nclass BarIT {\n  @Nested\n  class PositiveCase {\n    @Test\n    void check() {  }\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention","tests"],"lang":"java","langName":"Java","params":[{"key":"format","htmlDesc":"Regular expression against which test class names are checked.","defaultValue":"^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3577"]}},{"key":"java:S3578","repo":"java","name":"Test methods should comply with a naming convention","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided\nregular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default value: \u003ccode\u003e^test[A-Z][a-zA-Z0-9]*$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\n@Test\npublic void foo() {  // Noncompliant\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testFoo() {\n  // ...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided\nregular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default value: \u003ccode\u003e^test[A-Z][a-zA-Z0-9]*$\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\n@Test\npublic void foo() {  // Noncompliant\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testFoo() {\n  // ...\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention","tests"],"lang":"java","langName":"Java","params":[{"key":"format","htmlDesc":"Regular expression the test method names are checked against.","defaultValue":"^test[A-Z][a-zA-Z0-9]*$","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3578"]}},{"key":"java:S4425","repo":"java","name":"\"Integer.toHexString\" should not be used to build hexadecimal strings","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUsing \u003ccode\u003eInteger.toHexString\u003c/code\u003e is a common mistake when converting sequences of bytes into hexadecimal string representations. The problem\nis that the method trims leading zeroes, which can lead to wrong conversions. For instance a two bytes value of \u003ccode\u003e0x4508\u003c/code\u003e would be converted\ninto \u003ccode\u003e45\u003c/code\u003e and \u003ccode\u003e8\u003c/code\u003e which once concatenated would give \u003ccode\u003e0x458\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis is particularly damaging when converting hash-codes and could lead to a security vulnerability.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eInteger.toHexString\u003c/code\u003e is used in any kind of string concatenations.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nMessageDigest md \u003d MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes \u003d md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb \u003d new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(Integer.toHexString( b \u0026amp; 0xFF )); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nMessageDigest md \u003d MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes \u003d md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb \u003d new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(String.format(\"%02X\", b));\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/704.html\"\u003eMITRE, CWE-704\u003c/a\u003e - Incorrect Type Conversion or Cast \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rule \u003ca href\u003d\"https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION\"\u003eBAD_HEXA_CONVERSION\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eUsing \u003ccode\u003eInteger.toHexString\u003c/code\u003e is a common mistake when converting sequences of bytes into hexadecimal string representations. The problem\nis that the method trims leading zeroes, which can lead to wrong conversions. For instance a two bytes value of \u003ccode\u003e0x4508\u003c/code\u003e would be converted\ninto \u003ccode\u003e45\u003c/code\u003e and \u003ccode\u003e8\u003c/code\u003e which once concatenated would give \u003ccode\u003e0x458\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis is particularly damaging when converting hash-codes and could lead to a security vulnerability.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eInteger.toHexString\u003c/code\u003e is used in any kind of string concatenations.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nMessageDigest md \u003d MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes \u003d md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb \u003d new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(Integer.toHexString( b \u0026amp; 0xFF )); // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nMessageDigest md \u003d MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes \u003d md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb \u003d new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(String.format(\"%02X\", b));\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/704.html\"\u003eMITRE, CWE-704\u003c/a\u003e - Incorrect Type Conversion or Cast \u003c/li\u003e\n  \u003cli\u003e Derived from FindSecBugs rule \u003ca href\u003d\"https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION\"\u003eBAD_HEXA_CONVERSION\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cwe"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4425"]}},{"key":"java:S5993","repo":"java","name":"Constructors of an \"abstract\" class should not be declared \"public\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAbstract classes should not have public constructors. Constructors of abstract classes can only be called in constructors of their subclasses. So\nthere is no point in making them public. The \u003ccode\u003eprotected\u003c/code\u003e modifier should be enough.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic abstract class AbstractClass1 {\n    public AbstractClass1 () { // Noncompliant, has public modifier\n        // do something here\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic abstract class AbstractClass2 {\n    protected AbstractClass2 () {\n        // do something here\n    }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAbstract classes should not have public constructors. Constructors of abstract classes can only be called in constructors of their subclasses. So\nthere is no point in making them public. The \u003ccode\u003eprotected\u003c/code\u003e modifier should be enough.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic abstract class AbstractClass1 {\n    public AbstractClass1 () { // Noncompliant, has public modifier\n        // do something here\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic abstract class AbstractClass2 {\n    protected AbstractClass2 () {\n        // do something here\n    }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["design"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5993"]}},{"key":"java:S923","repo":"java","name":"Functions should not be defined with a variable number of arguments","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAs stated per effective java :\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eVarargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can\n  produce confusing results if used inappropriately.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid fun ( String... strings )\t// Noncompliant\n{\n  // ...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAs stated per effective java :\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eVarargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can\n  produce confusing results if used inappropriately.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid fun ( String... strings )\t// Noncompliant\n{\n  // ...\n}\n\u003c/pre\u003e","severity":"INFO","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S923"]}},{"key":"java:S1160","repo":"java","name":"Public methods should throw at most one checked exception","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUsing checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them\nfully part of the API of the method.\u003c/p\u003e\n\u003cp\u003eBut to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eOverriding methods are not checked by this rule and are allowed to throw several checked exceptions.\u003c/p\u003e","mdDesc":"\u003cp\u003eUsing checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them\nfully part of the API of the method.\u003c/p\u003e\n\u003cp\u003eBut to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eOverriding methods are not checked by this rule and are allowed to throw several checked exceptions.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["error-handling"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1160"]}},{"key":"java:S1161","repo":"java","name":"\"@Override\" should be used on overriding and implementing methods","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUsing the \u003ccode\u003e@Override\u003c/code\u003e annotation is useful for two reasons :\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It elicits a warning from the compiler if the annotated method doesn’t actually override anything, as in the case of a misspelling. \u003c/li\u003e\n  \u003cli\u003e It improves the readability of the source code by making it obvious that methods are overridden. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  // Compliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule is relaxed when overriding a method from the \u003ccode\u003eObject\u003c/code\u003e class like \u003ccode\u003etoString()\u003c/code\u003e, \u003ccode\u003ehashCode()\u003c/code\u003e, …​\u003c/p\u003e","mdDesc":"\u003cp\u003eUsing the \u003ccode\u003e@Override\u003c/code\u003e annotation is useful for two reasons :\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It elicits a warning from the compiler if the annotated method doesn’t actually override anything, as in the case of a misspelling. \u003c/li\u003e\n  \u003cli\u003e It improves the readability of the source code by making it obvious that methods are overridden. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  // Compliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule is relaxed when overriding a method from the \u003ccode\u003eObject\u003c/code\u003e class like \u003ccode\u003etoString()\u003c/code\u003e, \u003ccode\u003ehashCode()\u003c/code\u003e, …​\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1161"]}},{"key":"java:S1162","repo":"java","name":"Checked exceptions should not be thrown","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe\nthat checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.\u003c/p\u003e\n\u003cp\u003eThis rule verifies that no method throws a new checked exception.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void myMethod1() throws CheckedException {\n  ...\n  throw new CheckedException(message);   // Noncompliant\n  ...\n  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked\n}\n\npublic void myMethod2() throws CheckedException {  // Compliant; propagation allowed\n  myMethod1();\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe\nthat checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.\u003c/p\u003e\n\u003cp\u003eThis rule verifies that no method throws a new checked exception.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void myMethod1() throws CheckedException {\n  ...\n  throw new CheckedException(message);   // Noncompliant\n  ...\n  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked\n}\n\npublic void myMethod2() throws CheckedException {  // Compliant; propagation allowed\n  myMethod1();\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["error-handling"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1h","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1h","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1162"]}},{"key":"java:S1163","repo":"java","name":"Exceptions should not be thrown in finally blocks","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThrowing an exception from within a finally block will mask any exception which was previously thrown in the \u003ccode\u003etry\u003c/code\u003e or \u003ccode\u003ecatch\u003c/code\u003e\nblock, and the masked’s exception message and stack trace will be lost.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/FTZGBQ\"\u003eCERT, ERR05-J.\u003c/a\u003e - Do not let checked exceptions escape from a finally block \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThrowing an exception from within a finally block will mask any exception which was previously thrown in the \u003ccode\u003etry\u003c/code\u003e or \u003ccode\u003ecatch\u003c/code\u003e\nblock, and the masked’s exception message and stack trace will be lost.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/FTZGBQ\"\u003eCERT, ERR05-J.\u003c/a\u003e - Do not let checked exceptions escape from a finally block \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","error-handling","suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1163"]}},{"key":"java:S1165","repo":"java","name":"Exception classes should be immutable","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eExceptions are meant to represent the application’s state at the point at which an error occurred.\u003c/p\u003e\n\u003cp\u003eMaking all fields in an \u003ccode\u003eException\u003c/code\u003e class \u003ccode\u003efinal\u003c/code\u003e ensures that this state:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Will be fully defined at the same time the \u003ccode\u003eException\u003c/code\u003e is instantiated. \u003c/li\u003e\n  \u003cli\u003e Won’t be updated or corrupted by a questionable error handler. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis will enable developers to quickly understand what went wrong.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyException extends Exception {\n\n  private int status;                               // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status \u003d status;\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyException extends Exception {\n\n  private final int status;\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status \u003d status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eExceptions are meant to represent the application’s state at the point at which an error occurred.\u003c/p\u003e\n\u003cp\u003eMaking all fields in an \u003ccode\u003eException\u003c/code\u003e class \u003ccode\u003efinal\u003c/code\u003e ensures that this state:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Will be fully defined at the same time the \u003ccode\u003eException\u003c/code\u003e is instantiated. \u003c/li\u003e\n  \u003cli\u003e Won’t be updated or corrupted by a questionable error handler. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThis will enable developers to quickly understand what went wrong.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyException extends Exception {\n\n  private int status;                               // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status \u003d status;\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyException extends Exception {\n\n  private final int status;\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status \u003d status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["error-handling"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1165"]}},{"key":"java:S1774","repo":"java","name":"The ternary operator should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhile the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e structure.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nSystem.out.println(i\u0026gt;10?\"yes\":\"no\");\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (i \u0026gt; 10) {\n  System.out.println((\"yes\");\n} else {\n  System.out.println(\"no\");\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhile the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e structure.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nSystem.out.println(i\u0026gt;10?\"yes\":\"no\");\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (i \u0026gt; 10) {\n  System.out.println((\"yes\");\n} else {\n  System.out.println(\"no\");\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1774"]}},{"key":"java:S2130","repo":"java","name":"Parsing should be used to convert \"Strings\" to primitives","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eRather than creating a boxed primitive from a \u003ccode\u003eString\u003c/code\u003e to extract the primitive value, use the relevant \u003ccode\u003eparse\u003c/code\u003e method\ninstead. It will be clearer and more efficient.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString myNum \u003d \"12.2\";\n\nfloat f \u003d (new Float(myNum)).floatValue();  // Noncompliant; creates \u0026amp; discards a Float\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString myNum \u003d \"12.2\";\n\nfloat f \u003d Float.parseFloat(myNum);\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eRather than creating a boxed primitive from a \u003ccode\u003eString\u003c/code\u003e to extract the primitive value, use the relevant \u003ccode\u003eparse\u003c/code\u003e method\ninstead. It will be clearer and more efficient.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString myNum \u003d \"12.2\";\n\nfloat f \u003d (new Float(myNum)).floatValue();  // Noncompliant; creates \u0026amp; discards a Float\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString myNum \u003d \"12.2\";\n\nfloat f \u003d Float.parseFloat(myNum);\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2130"]}},{"key":"java:S2131","repo":"java","name":"Primitives should not be boxed just for \"String\" conversion","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When that’s done purely to use the wrapper class\u0027\n\u003ccode\u003etoString\u003c/code\u003e method, it’s a waste of memory and cycles because those methods are \u003ccode\u003estatic\u003c/code\u003e, and can therefore be used without a\nclass instance. Similarly, using the \u003ccode\u003estatic\u003c/code\u003e method \u003ccode\u003evalueOf\u003c/code\u003e in the primitive-wrapper classes with a non-\u003ccode\u003eString\u003c/code\u003e\nargument should be avoided.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint myInt \u003d 4;\nString myIntString \u003d (new Integer(myInt)).toString(); // Noncompliant; creates \u0026amp; discards an Integer object\nmyIntString \u003d Integer.valueOf(myInt).toString(); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint myInt \u003d 4;\nString myIntString \u003d Integer.toString(myInt);\n\u003c/pre\u003e","mdDesc":"\u003cp\u003e\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When that’s done purely to use the wrapper class\u0027\n\u003ccode\u003etoString\u003c/code\u003e method, it’s a waste of memory and cycles because those methods are \u003ccode\u003estatic\u003c/code\u003e, and can therefore be used without a\nclass instance. Similarly, using the \u003ccode\u003estatic\u003c/code\u003e method \u003ccode\u003evalueOf\u003c/code\u003e in the primitive-wrapper classes with a non-\u003ccode\u003eString\u003c/code\u003e\nargument should be avoided.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint myInt \u003d 4;\nString myIntString \u003d (new Integer(myInt)).toString(); // Noncompliant; creates \u0026amp; discards an Integer object\nmyIntString \u003d Integer.valueOf(myInt).toString(); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint myInt \u003d 4;\nString myIntString \u003d Integer.toString(myInt);\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2131"]}},{"key":"java:S2139","repo":"java","name":"Exceptions should be either logged or rethrown but not both","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn applications where the accepted practice is to log an \u003ccode\u003eException\u003c/code\u003e and then rethrow it, you end up with miles-long logs that contain\nmultiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from\nother threads will be interwoven with the repetitions of the logged-and-thrown \u003ccode\u003eException\u003c/code\u003e. Instead, exceptions should be either logged or\nrethrown, not both.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  throw new MySQLException(contextInfo, e);\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ncatch (SQLException e) {\n  ...\n  throw new MySQLException(contextInfo, e);\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  // handle exception...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIn applications where the accepted practice is to log an \u003ccode\u003eException\u003c/code\u003e and then rethrow it, you end up with miles-long logs that contain\nmultiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from\nother threads will be interwoven with the repetitions of the logged-and-thrown \u003ccode\u003eException\u003c/code\u003e. Instead, exceptions should be either logged or\nrethrown, not both.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  throw new MySQLException(contextInfo, e);\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ncatch (SQLException e) {\n  ...\n  throw new MySQLException(contextInfo, e);\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  // handle exception...\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy","error-handling"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2139"]}},{"key":"java:S2250","repo":"java","name":"Collection methods with O(n) performance should be used carefully","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe time complexity of method calls on collections is not always obvious. For instance, for most collections the \u003ccode\u003esize()\u003c/code\u003e method takes\nconstant time, but the time required to execute \u003ccode\u003eConcurrentLinkedQueue.size()\u003c/code\u003e is O(n), i.e. directly proportional to the number of\nelements in the collection. When the collection is large, this could therefore be an expensive operation.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the following O(n) methods are called outside of constructors on class fields:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eArrayList\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003econtains\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eremove\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eLinkedList\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eget\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003econtains\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eConcurrentLinkedQueue\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003esize\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003econtains\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eConcurrentLinkedDeque\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003esize\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003econtains\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eCopyOnWriteArrayList\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eadd\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003econtains\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eremove\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eCopyOnWriteArraySet\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eadd\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003econtains\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eremove\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nConcurrentLinkedQueue queue \u003d new ConcurrentLinkedQueue();\n//...\nlog.info(\"Queue contains \" + queue.size() + \" elements\");  // Noncompliant\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe time complexity of method calls on collections is not always obvious. For instance, for most collections the \u003ccode\u003esize()\u003c/code\u003e method takes\nconstant time, but the time required to execute \u003ccode\u003eConcurrentLinkedQueue.size()\u003c/code\u003e is O(n), i.e. directly proportional to the number of\nelements in the collection. When the collection is large, this could therefore be an expensive operation.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the following O(n) methods are called outside of constructors on class fields:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eArrayList\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003econtains\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eremove\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eLinkedList\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eget\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003econtains\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eConcurrentLinkedQueue\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003esize\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003econtains\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eConcurrentLinkedDeque\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003esize\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003econtains\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eCopyOnWriteArrayList\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eadd\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003econtains\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eremove\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eCopyOnWriteArraySet\u003c/code\u003e\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eadd\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003econtains\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eremove\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nConcurrentLinkedQueue queue \u003d new ConcurrentLinkedQueue();\n//...\nlog.info(\"Queue contains \" + queue.size() + \" elements\");  // Noncompliant\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2250"]}},{"key":"java:S2253","repo":"java","name":"Track uses of disallowed methods","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThis rule allows banning certain methods.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eGiven parameters:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e className:java.lang.String \u003c/li\u003e\n  \u003cli\u003e methodName: replace \u003c/li\u003e\n  \u003cli\u003e argumentTypes: java.lang.CharSequence, java.lang.CharSequence \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nString name;\nname.replace(\"A\",\"a\");  // Noncompliant\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThis rule allows banning certain methods.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eGiven parameters:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e className:java.lang.String \u003c/li\u003e\n  \u003cli\u003e methodName: replace \u003c/li\u003e\n  \u003cli\u003e argumentTypes: java.lang.CharSequence, java.lang.CharSequence \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nString name;\nname.replace(\"A\",\"a\");  // Noncompliant\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":true,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[{"key":"methodName","htmlDesc":"Name of the forbidden method","type":"STRING"},{"key":"className","htmlDesc":"Name of the class whose method is forbidden","type":"STRING"},{"key":"argumentTypes","htmlDesc":"Comma-delimited list of argument types, E.G. java.lang.String, int[], int","type":"STRING"},{"key":"allOverloads","htmlDesc":"Set to true to flag all overloads regardless of parameter type","defaultValue":"false","type":"BOOLEAN"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"0min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"0min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"0min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"0min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2253"]}},{"key":"java:S2629","repo":"java","name":"\"Preconditions\" and logging arguments should not require evaluation","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003ePassing message arguments that require further evaluation into a Guava \u003ccode\u003ecom.google.common.base.Preconditions\u003c/code\u003e check can result in a\nperformance penalty. That’s because whether or not they’re needed, each argument must be resolved before the method is actually called.\u003c/p\u003e\n\u003cp\u003eSimilarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed\nevery time the method is called, whether or not the log level is low enough to show the message.\u003c/p\u003e\n\u003cp\u003eInstead, you should structure your code to pass static or pre-computed values into \u003ccode\u003ePreconditions\u003c/code\u003e conditions check and logging\ncalls.\u003c/p\u003e\n\u003cp\u003eSpecifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,\nthen \u003ccode\u003ePreconditions\u003c/code\u003e should be skipped altogether, and the relevant exception should be conditionally thrown instead.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nlogger.log(Level.DEBUG, \"Something went wrong: \" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine(\"An exception occurred with message: \" + message); // Noncompliant\n\nLOG.error(\"Unable to open file \" + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a \u0026gt; 0, \"Arg must be positive, but got \" + a);  // Noncompliant. String concatenation performed even when a \u0026gt; 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, \"message: %s\", formatMessage());  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nlogger.log(Level.SEVERE, \"Something went wrong: {0} \", message);  // String formatting only applied if needed\n\nlogger.fine(\"An exception occurred with message: {}\", message);  // SLF4J, Log4j\n\nlogger.log(Level.SEVERE, () -\u0026gt; \"Something went wrong: \" + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nLOG.error(\"Unable to open file {0}\", csvPath, e);\n\nif (LOG.isDebugEnabled() {\n  LOG.debug(\"Unable to open file \" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg \u0026gt; 0, \"Arg must be positive, but got %d\", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(\"message: \" + formatMessage());\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003ecatch\u003c/code\u003e blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of\nstandard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for\nexplicit test-level testing with SLF4J methods \u003ccode\u003eisXXXEnabled\u003c/code\u003e and ignores the bodies of such \u003ccode\u003eif\u003c/code\u003e statements.\u003c/p\u003e","mdDesc":"\u003cp\u003ePassing message arguments that require further evaluation into a Guava \u003ccode\u003ecom.google.common.base.Preconditions\u003c/code\u003e check can result in a\nperformance penalty. That’s because whether or not they’re needed, each argument must be resolved before the method is actually called.\u003c/p\u003e\n\u003cp\u003eSimilarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed\nevery time the method is called, whether or not the log level is low enough to show the message.\u003c/p\u003e\n\u003cp\u003eInstead, you should structure your code to pass static or pre-computed values into \u003ccode\u003ePreconditions\u003c/code\u003e conditions check and logging\ncalls.\u003c/p\u003e\n\u003cp\u003eSpecifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,\nthen \u003ccode\u003ePreconditions\u003c/code\u003e should be skipped altogether, and the relevant exception should be conditionally thrown instead.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nlogger.log(Level.DEBUG, \"Something went wrong: \" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine(\"An exception occurred with message: \" + message); // Noncompliant\n\nLOG.error(\"Unable to open file \" + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a \u0026gt; 0, \"Arg must be positive, but got \" + a);  // Noncompliant. String concatenation performed even when a \u0026gt; 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, \"message: %s\", formatMessage());  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nlogger.log(Level.SEVERE, \"Something went wrong: {0} \", message);  // String formatting only applied if needed\n\nlogger.fine(\"An exception occurred with message: {}\", message);  // SLF4J, Log4j\n\nlogger.log(Level.SEVERE, () -\u0026gt; \"Something went wrong: \" + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nLOG.error(\"Unable to open file {0}\", csvPath, e);\n\nif (LOG.isDebugEnabled() {\n  LOG.debug(\"Unable to open file \" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg \u0026gt; 0, \"Arg must be positive, but got %d\", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(\"message: \" + formatMessage());\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003ecatch\u003c/code\u003e blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of\nstandard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for\nexplicit test-level testing with SLF4J methods \u003ccode\u003eisXXXEnabled\u003c/code\u003e and ignores the bodies of such \u003ccode\u003eif\u003c/code\u003e statements.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2629"]}},{"key":"java:S2864","repo":"java","name":"\"entrySet()\" should be iterated when both the key and value are needed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen only the keys from a map are needed in a loop, iterating the \u003ccode\u003ekeySet\u003c/code\u003e makes sense. But when both the key and the value are needed,\nit’s more efficient to iterate the \u003ccode\u003eentrySet\u003c/code\u003e, which will give access to both the key and value, instead.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomethingWithMap(Map\u0026lt;String,Object\u0026gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value \u003d map.get(key);\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomethingWithMap(Map\u0026lt;String,Object\u0026gt; map) {\n  for (Map.Entry\u0026lt;String,Object\u0026gt; entry : map.entrySet()) {\n    String key \u003d entry.getKey();\n    Object value \u003d entry.getValue();\n    // ...\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen only the keys from a map are needed in a loop, iterating the \u003ccode\u003ekeySet\u003c/code\u003e makes sense. But when both the key and the value are needed,\nit’s more efficient to iterate the \u003ccode\u003eentrySet\u003c/code\u003e, which will give access to both the key and value, instead.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomethingWithMap(Map\u0026lt;String,Object\u0026gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value \u003d map.get(key);\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomethingWithMap(Map\u0026lt;String,Object\u0026gt; map) {\n  for (Map.Entry\u0026lt;String,Object\u0026gt; entry : map.entrySet()) {\n    String key \u003d entry.getKey();\n    Object value \u003d entry.getValue();\n    // ...\n  }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2864"]}},{"key":"java:S4551","repo":"java","name":"Enum values should be compared with \"\u003d\u003d\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eTesting equality of an enum value with \u003ccode\u003eequals\u003c/code\u003e is perfectly valid because an enum is an Object and every Java developer knows \"\u003d\u003d\"\nshould not be used to compare the content of an Object. At the same time, using \"\u003d\u003d\" on enums:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e provides the same expected comparison (content) as \u003ccode\u003eequals\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e is more null-safe than equals() \u003c/li\u003e\n  \u003cli\u003e provides compile-time (static) checking rather than runtime checking \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor these reasons, use of \"\u003d\u003d\" should be preferred to \u003ccode\u003eequals\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\n\npublic enum Cake {\n  LEMON_TART, CHEESE_CAKE\n}\n\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; this will raise an NPE if candidateFruit is NULL\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; always returns false\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit \u003d\u003d Fruit.GRAPE; // Compliant; there is only one instance of Fruit.GRAPE - if candidateFruit is a GRAPE it will have the same reference as Fruit.GRAPE\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit \u003d\u003d Fruit.GRAPE; // Compliant; compilation time failure\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.javaworld.com/article/2074292/core-java/use-----or-----to-compare-java-enums.html\"\u003eUse \u003d\u003d (or !\u003d) to Compare Java\n  Enums\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eTesting equality of an enum value with \u003ccode\u003eequals\u003c/code\u003e is perfectly valid because an enum is an Object and every Java developer knows \"\u003d\u003d\"\nshould not be used to compare the content of an Object. At the same time, using \"\u003d\u003d\" on enums:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e provides the same expected comparison (content) as \u003ccode\u003eequals\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e is more null-safe than equals() \u003c/li\u003e\n  \u003cli\u003e provides compile-time (static) checking rather than runtime checking \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eFor these reasons, use of \"\u003d\u003d\" should be preferred to \u003ccode\u003eequals\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\n\npublic enum Cake {\n  LEMON_TART, CHEESE_CAKE\n}\n\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; this will raise an NPE if candidateFruit is NULL\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; always returns false\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit \u003d\u003d Fruit.GRAPE; // Compliant; there is only one instance of Fruit.GRAPE - if candidateFruit is a GRAPE it will have the same reference as Fruit.GRAPE\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit \u003d\u003d Fruit.GRAPE; // Compliant; compilation time failure\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.javaworld.com/article/2074292/core-java/use-----or-----to-compare-java-enums.html\"\u003eUse \u003d\u003d (or !\u003d) to Compare Java\n  Enums\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4551"]}},{"key":"java:S4926","repo":"java","name":"\"serialVersionUID\" should not be declared blindly","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eProviding a \u003ccode\u003eserialVersionUID\u003c/code\u003e field on \u003ccode\u003eSerializable\u003c/code\u003e classes is strongly recommended by the \u003ccode\u003eSerializable\u003c/code\u003e\ndocumentation but blindly following that recommendation can be harmful.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eserialVersionUID\u003c/code\u003e value is stored with the serialized data and this field is verified when deserializing the data to ensure that the\ncode reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this\nfine because you know what’s wrong.\u003c/p\u003e\n\u003cp\u003eWhen the \u003ccode\u003eserialVersionUID\u003c/code\u003e is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the\n\u003ccode\u003eserialVersionUID\u003c/code\u003e value when the \u003ccode\u003eSerializable\u003c/code\u003e class is later enriched with additional fields. As a consequence, old\nserialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.\u003c/p\u003e\n\u003cp\u003eTherefore, defining \u003ccode\u003eserialVersionUID\u003c/code\u003e should be done with care. This rule raises an issue on each \u003ccode\u003eserialVersionUID\u003c/code\u003e field\ndeclared on classes implementing \u003ccode\u003eSerializable\u003c/code\u003e to be sure the presence and the value of the \u003ccode\u003eserialVersionUID\u003c/code\u003e field is\nchallenged and validated by the team.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo implements Serializable {\n  private static final long serialVersionUID \u003d 1;\n}\n\npublic class BarException extends RuntimeException {\n  private static final long serialVersionUID \u003d 8582433437601788991L;\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Vojtech Ruzicka’s Programming Blog: \u003ca href\u003d\"https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/\"\u003eShould I explicitly declare\n  serialVersionUID?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eProviding a \u003ccode\u003eserialVersionUID\u003c/code\u003e field on \u003ccode\u003eSerializable\u003c/code\u003e classes is strongly recommended by the \u003ccode\u003eSerializable\u003c/code\u003e\ndocumentation but blindly following that recommendation can be harmful.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eserialVersionUID\u003c/code\u003e value is stored with the serialized data and this field is verified when deserializing the data to ensure that the\ncode reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this\nfine because you know what’s wrong.\u003c/p\u003e\n\u003cp\u003eWhen the \u003ccode\u003eserialVersionUID\u003c/code\u003e is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the\n\u003ccode\u003eserialVersionUID\u003c/code\u003e value when the \u003ccode\u003eSerializable\u003c/code\u003e class is later enriched with additional fields. As a consequence, old\nserialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.\u003c/p\u003e\n\u003cp\u003eTherefore, defining \u003ccode\u003eserialVersionUID\u003c/code\u003e should be done with care. This rule raises an issue on each \u003ccode\u003eserialVersionUID\u003c/code\u003e field\ndeclared on classes implementing \u003ccode\u003eSerializable\u003c/code\u003e to be sure the presence and the value of the \u003ccode\u003eserialVersionUID\u003c/code\u003e field is\nchallenged and validated by the team.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo implements Serializable {\n  private static final long serialVersionUID \u003d 1;\n}\n\npublic class BarException extends RuntimeException {\n  private static final long serialVersionUID \u003d 8582433437601788991L;\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e Vojtech Ruzicka’s Programming Blog: \u003ca href\u003d\"https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/\"\u003eShould I explicitly declare\n  serialVersionUID?\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall","serialization"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4926"]}},{"key":"java:S4929","repo":"java","name":"\"read(byte[],int,int)\" should be overridden","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen directly subclassing \u003ccode\u003ejava.io.InputStream\u003c/code\u003e or \u003ccode\u003ejava.io.FilterInputStream\u003c/code\u003e, the only requirement is that you implement\nthe method \u003ccode\u003eread()\u003c/code\u003e. However most uses for such streams don’t read a single byte at a time and the default implementation for\n\u003ccode\u003eread(byte[],int,int)\u003c/code\u003e will call \u003ccode\u003eread(int)\u003c/code\u003e for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n\u003ccode\u003eread(byte[],int,int)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a direct subclass of \u003ccode\u003ejava.io.InputStream\u003c/code\u003e or \u003ccode\u003ejava.io.FilterInputStream\u003c/code\u003e doesn’t provide an\noverride of \u003ccode\u003eread(byte[],int,int)\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin \u003d new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin \u003d new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    return fin.read(b, off, len);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule doesn’t raise an issue when the class is declared \u003ccode\u003eabstract\u003c/code\u003e.\u003c/p\u003e","mdDesc":"\u003cp\u003eWhen directly subclassing \u003ccode\u003ejava.io.InputStream\u003c/code\u003e or \u003ccode\u003ejava.io.FilterInputStream\u003c/code\u003e, the only requirement is that you implement\nthe method \u003ccode\u003eread()\u003c/code\u003e. However most uses for such streams don’t read a single byte at a time and the default implementation for\n\u003ccode\u003eread(byte[],int,int)\u003c/code\u003e will call \u003ccode\u003eread(int)\u003c/code\u003e for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n\u003ccode\u003eread(byte[],int,int)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a direct subclass of \u003ccode\u003ejava.io.InputStream\u003c/code\u003e or \u003ccode\u003ejava.io.FilterInputStream\u003c/code\u003e doesn’t provide an\noverride of \u003ccode\u003eread(byte[],int,int)\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin \u003d new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin \u003d new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    return fin.read(b, off, len);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule doesn’t raise an issue when the class is declared \u003ccode\u003eabstract\u003c/code\u003e.\u003c/p\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4929"]}},{"key":"java:S818","repo":"java","name":"Literal suffixes should be upper case","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUsing upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nlong long1 \u003d 1l; // Noncompliant\nfloat float1 \u003d 1.0f; // Noncompliant\ndouble double1 \u003d 1.0d; // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nlong long1 \u003d 1L;\nfloat float1 \u003d 1.0F;\ndouble double1 \u003d 1.0D;\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/cdYxBQ\"\u003eCERT DCL16-C.\u003c/a\u003e - Use \"L,\" not \"l,\" to indicate a long value \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/7DZGBQ\"\u003eCERT, DCL50-J.\u003c/a\u003e - Use visually distinct identifiers \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eUsing upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nlong long1 \u003d 1l; // Noncompliant\nfloat float1 \u003d 1.0f; // Noncompliant\ndouble double1 \u003d 1.0d; // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nlong long1 \u003d 1L;\nfloat float1 \u003d 1.0F;\ndouble double1 \u003d 1.0D;\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/cdYxBQ\"\u003eCERT DCL16-C.\u003c/a\u003e - Use \"L,\" not \"l,\" to indicate a long value \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/7DZGBQ\"\u003eCERT, DCL50-J.\u003c/a\u003e - Use visually distinct identifiers \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","convention","pitfall"],"lang":"java","langName":"Java","params":[{"key":"checkOnlyLong","htmlDesc":"Set to \u0026quot;true\u0026quot; to ignore \u0026quot;float\u0026quot; and \u0026quot;double\u0026quot; declarations.","defaultValue":"false","type":"BOOLEAN"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S818"]}},{"key":"java:S1213","repo":"java","name":"The members of an interface or class declaration should appear in a pre-defined order","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAccording to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order\nin the source files:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Class variables \u003c/li\u003e\n  \u003cli\u003e Instance variables \u003c/li\u003e\n  \u003cli\u003e Constructors \u003c/li\u003e\n  \u003cli\u003e Methods \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo{\n   private int field \u003d 0;\n   public boolean isTrue() {...}\n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN \u003d 4;  //Noncompliant, variable defined after constructors and methods\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo{\n   public static final int OPEN \u003d 4;\n   private int field \u003d 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAccording to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order\nin the source files:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Class variables \u003c/li\u003e\n  \u003cli\u003e Instance variables \u003c/li\u003e\n  \u003cli\u003e Constructors \u003c/li\u003e\n  \u003cli\u003e Methods \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo{\n   private int field \u003d 0;\n   public boolean isTrue() {...}\n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN \u003d 4;  //Noncompliant, variable defined after constructors and methods\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo{\n   public static final int OPEN \u003d 4;\n   private int field \u003d 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1213"]}},{"key":"java:S1214","repo":"java","name":"Constants should not be defined in interfaces","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAccording to Joshua Bloch, author of \"Effective Java\":\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eThe constant interface pattern is a poor use of interfaces.\u003c/p\u003e\n  \u003cp\u003eThat a class uses some constants internally is an implementation detail.\u003c/p\u003e\n  \u003cp\u003eImplementing a constant interface causes this implementation detail to leak into the class’s exported API. It is of no consequence to the users\n  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future\n  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.\n  If a nonfinal class implements a constant interface,\u003c/p\u003e\n  \u003cp\u003eall of its subclasses will have their namespaces polluted by the constants in the interface.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThis rule raises an issue when an interface consists solely of fields, without any other members.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ninterface Status {                      // Noncompliant\n   int OPEN \u003d 1;\n   int CLOSED \u003d 2;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic enum Status {                    // Compliant\n  OPEN,\n  CLOSED;\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic final class Status {             // Compliant\n   public static final int OPEN \u003d 1;\n   public static final int CLOSED \u003d 2;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAccording to Joshua Bloch, author of \"Effective Java\":\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eThe constant interface pattern is a poor use of interfaces.\u003c/p\u003e\n  \u003cp\u003eThat a class uses some constants internally is an implementation detail.\u003c/p\u003e\n  \u003cp\u003eImplementing a constant interface causes this implementation detail to leak into the class’s exported API. It is of no consequence to the users\n  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future\n  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.\n  If a nonfinal class implements a constant interface,\u003c/p\u003e\n  \u003cp\u003eall of its subclasses will have their namespaces polluted by the constants in the interface.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThis rule raises an issue when an interface consists solely of fields, without any other members.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ninterface Status {                      // Noncompliant\n   int OPEN \u003d 1;\n   int CLOSED \u003d 2;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic enum Status {                    // Compliant\n  OPEN,\n  CLOSED;\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic final class Status {             // Compliant\n   public static final int OPEN \u003d 1;\n   public static final int CLOSED \u003d 2;\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1214"]}},{"key":"java:S1301","repo":"java","name":"\"switch\" statements should have at least 3 \"case\" clauses","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003eswitch\u003c/code\u003e statements are useful when there are many different cases depending on the value of the same expression.\u003c/p\u003e\n\u003cp\u003eFor just one or two cases however, the code will be more readable with \u003ccode\u003eif\u003c/code\u003e statements.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (variable \u003d\u003d 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003eswitch\u003c/code\u003e statements are useful when there are many different cases depending on the value of the same expression.\u003c/p\u003e\n\u003cp\u003eFor just one or two cases however, the code will be more readable with \u003ccode\u003eif\u003c/code\u003e statements.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (variable \u003d\u003d 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1301"]}},{"key":"java:S1309","repo":"java","name":"Track uses of \"@SuppressWarnings\" annotations","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThis rule allows you to track the usage of the \u003ccode\u003e@SuppressWarnings\u003c/code\u003e mechanism.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith a parameter value of \"unused\" :\u003c/p\u003e\n\u003cpre\u003e\n@SuppressWarnings(\"unused\")\n@SuppressWarnings(\"unchecked\")  // Noncompliant\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThis rule allows you to track the usage of the \u003ccode\u003e@SuppressWarnings\u003c/code\u003e mechanism.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith a parameter value of \"unused\" :\u003c/p\u003e\n\u003cpre\u003e\n@SuppressWarnings(\"unused\")\n@SuppressWarnings(\"unchecked\")  // Noncompliant\n\u003c/pre\u003e","severity":"INFO","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[{"key":"listOfWarnings","htmlDesc":"Comma separated list of warnings that can be suppressed (example: unchecked, cast, boxing). An empty list means that no warning can be suppressed.","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1309"]}},{"key":"java:S1541","repo":"java","name":"Methods should not be too complex","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe cyclomatic complexity of methods should not exceed a defined threshold.\u003c/p\u003e\n\u003cp\u003eComplex code can perform poorly and will in any case be difficult to understand and therefore to maintain.\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhile having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n\u003ccode\u003eequals\u003c/code\u003e and \u003ccode\u003ehashCode\u003c/code\u003e methods.\u003c/p\u003e","mdDesc":"\u003cp\u003eThe cyclomatic complexity of methods should not exceed a defined threshold.\u003c/p\u003e\n\u003cp\u003eComplex code can perform poorly and will in any case be difficult to understand and therefore to maintain.\u003c/p\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhile having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n\u003ccode\u003eequals\u003c/code\u003e and \u003ccode\u003ehashCode\u003c/code\u003e methods.\u003c/p\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"Threshold","htmlDesc":"The maximum authorized complexity.","defaultValue":"10","type":"INTEGER"}],"defaultDebtRemFnType":"LINEAR_OFFSET","defaultDebtRemFnCoeff":"1min","defaultDebtRemFnOffset":"10min","effortToFixDescription":"per complexity point above the threshold","debtOverloaded":false,"debtRemFnType":"LINEAR_OFFSET","debtRemFnCoeff":"1min","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"LINEAR_OFFSET","defaultRemFnGapMultiplier":"1min","defaultRemFnBaseEffort":"10min","remFnType":"LINEAR_OFFSET","remFnGapMultiplier":"1min","remFnBaseEffort":"10min","remFnOverloaded":false,"gapDescription":"per complexity point above the threshold","scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:MethodCyclomaticComplexity"]}},{"key":"java:S1640","repo":"java","name":"Maps with keys that are enum values should be replaced with EnumMap","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen all the keys of a Map are values from the same enum, the \u003ccode\u003eMap\u003c/code\u003e can be replaced with an \u003ccode\u003eEnumMap\u003c/code\u003e, which can be much more\nefficient than other sets because the underlying data structure is a simple array.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map\u0026lt;COLOR, String\u0026gt; moodMap \u003d new HashMap\u0026lt;COLOR, String\u0026gt; ();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap\u0026lt;COLOR, String\u0026gt; moodMap \u003d new EnumMap\u0026lt;\u0026gt; (COLOR.class);\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen all the keys of a Map are values from the same enum, the \u003ccode\u003eMap\u003c/code\u003e can be replaced with an \u003ccode\u003eEnumMap\u003c/code\u003e, which can be much more\nefficient than other sets because the underlying data structure is a simple array.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map\u0026lt;COLOR, String\u0026gt; moodMap \u003d new HashMap\u0026lt;COLOR, String\u0026gt; ();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap\u0026lt;COLOR, String\u0026gt; moodMap \u003d new EnumMap\u0026lt;\u0026gt; (COLOR.class);\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1640"]}},{"key":"java:S1641","repo":"java","name":"Sets with elements that are enum values should be replaced with EnumSet","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other\nsets because the underlying data structure is a simple bitmap.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set\u0026lt;COLOR\u0026gt; warm \u003d new HashSet\u0026lt;COLOR\u0026gt;();\n    warm.add(COLOR.RED);\n    warm.add(COLOR.ORANGE);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set\u0026lt;COLOR\u0026gt; warm \u003d EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other\nsets because the underlying data structure is a simple bitmap.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set\u0026lt;COLOR\u0026gt; warm \u003d new HashSet\u0026lt;COLOR\u0026gt;();\n    warm.add(COLOR.RED);\n    warm.add(COLOR.ORANGE);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set\u0026lt;COLOR\u0026gt; warm \u003d EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1641"]}},{"key":"java:S1643","repo":"java","name":"Strings should not be concatenated using \u0027+\u0027 in a loop","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eStrings are immutable objects, so concatenation doesn’t simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString str \u003d \"\";\nfor (int i \u003d 0; i \u0026lt; arrayOfStrings.length ; ++i) {\n  str \u003d str + arrayOfStrings[i];\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nStringBuilder bld \u003d new StringBuilder();\n  for (int i \u003d 0; i \u0026lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str \u003d bld.toString();\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eStrings are immutable objects, so concatenation doesn’t simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString str \u003d \"\";\nfor (int i \u003d 0; i \u0026lt; arrayOfStrings.length ; ++i) {\n  str \u003d str + arrayOfStrings[i];\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nStringBuilder bld \u003d new StringBuilder();\n  for (int i \u003d 0; i \u0026lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str \u003d bld.toString();\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1643"]}},{"key":"java:S1659","repo":"java","name":"Multiple variables should not be declared on the same line","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eDeclaring multiple variables on one line is difficult to read.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/YTZGBQ\"\u003eCERT, DCL52-J.\u003c/a\u003e - Do not declare more than one variable per declaration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/EtcxBQ\"\u003eCERT, DCL04-C.\u003c/a\u003e - Do not declare more than one variable per declaration \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eDeclaring multiple variables on one line is difficult to read.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/YTZGBQ\"\u003eCERT, DCL52-J.\u003c/a\u003e - Do not declare more than one variable per declaration \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/EtcxBQ\"\u003eCERT, DCL04-C.\u003c/a\u003e - Do not declare more than one variable per declaration \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1659"]}},{"key":"java:S1696","repo":"java","name":"\"NullPointerException\" should not be caught","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e should be avoided, not caught. Any situation in which \u003ccode\u003eNullPointerException\u003c/code\u003e is explicitly caught can\neasily be converted to a \u003ccode\u003enull\u003c/code\u003e test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch of\nthe conditional.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic int lengthPlus(String str) {\n  int len \u003d 2;\n  try {\n    len +\u003d str.length();\n  }\n  catch (NullPointerException e) {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic int lengthPlus(String str) {\n  int len \u003d 2;\n\n  if (str !\u003d null) {\n    len +\u003d str.length();\n  }\n  else {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/395.html\"\u003eMITRE, CWE-395\u003c/a\u003e - Use of NullPointerException Catch to Detect NULL Pointer\n  Dereference \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://tinyurl.com/y6r4amg3\"\u003eCERT, ERR08-J.\u003c/a\u003e - Do not catch NullPointerException or any of its ancestors \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003eNullPointerException\u003c/code\u003e should be avoided, not caught. Any situation in which \u003ccode\u003eNullPointerException\u003c/code\u003e is explicitly caught can\neasily be converted to a \u003ccode\u003enull\u003c/code\u003e test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch of\nthe conditional.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic int lengthPlus(String str) {\n  int len \u003d 2;\n  try {\n    len +\u003d str.length();\n  }\n  catch (NullPointerException e) {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic int lengthPlus(String str) {\n  int len \u003d 2;\n\n  if (str !\u003d null) {\n    len +\u003d str.length();\n  }\n  else {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/395.html\"\u003eMITRE, CWE-395\u003c/a\u003e - Use of NullPointerException Catch to Detect NULL Pointer\n  Dereference \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://tinyurl.com/y6r4amg3\"\u003eCERT, ERR08-J.\u003c/a\u003e - Do not catch NullPointerException or any of its ancestors \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe","error-handling"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1696"]}},{"key":"java:S1698","repo":"java","name":"\"\u003d\u003d\" and \"!\u003d\" should not be used when \"equals\" is overridden","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIt is equivalent to use the equality \u003ccode\u003e\u003d\u003d\u003c/code\u003e operator and the \u003ccode\u003eequals\u003c/code\u003e method to compare two objects if the \u003ccode\u003eequals\u003c/code\u003e\nmethod inherited from \u003ccode\u003eObject\u003c/code\u003e has not been overridden. In this case both checks compare the object references.\u003c/p\u003e\n\u003cp\u003eBut as soon as \u003ccode\u003eequals\u003c/code\u003e is overridden, two objects not having the same reference but having the same value can be equal. This rule spots\nsuspicious uses of \u003ccode\u003e\u003d\u003d\u003c/code\u003e and \u003ccode\u003e!\u003d\u003c/code\u003e operators on objects whose \u003ccode\u003eequals\u003c/code\u003e methods are overridden.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString firstName \u003d getFirstName(); // String overrides equals\nString lastName \u003d getLastName();\n\nif (firstName \u003d\u003d lastName) { ... }; // Non-compliant; false even if the strings have the same value\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString firstName \u003d getFirstName();\nString lastName \u003d getLastName();\n\nif (firstName !\u003d null \u0026amp;\u0026amp; firstName.equals(lastName)) { ... };\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eComparing two instances of the \u003ccode\u003eClass\u003c/code\u003e object will not raise an issue:\u003c/p\u003e\n\u003cpre\u003e\nClass c;\nif(c \u003d\u003d Integer.class) { // No issue raised\n}\n\u003c/pre\u003e\n\u003cp\u003eComparing \u003ccode\u003eEnum\u003c/code\u003e will not raise an issue:\u003c/p\u003e\n\u003cpre\u003e\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit \u003d\u003d Fruit.GRAPE; // it\u0027s recommended to activate S4551 to enforce comparison of Enums using \u003d\u003d\n}\n\u003c/pre\u003e\n\u003cp\u003eComparing with \u003ccode\u003efinal\u003c/code\u003e reference will not raise an issue:\u003c/p\u003e\n\u003cpre\u003e\nprivate static final Type DEFAULT \u003d new Type();\n\nvoid foo(Type other) {\n  if (other \u003d\u003d DEFAULT) { // Compliant\n  //...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eComparing with \u003ccode\u003ethis\u003c/code\u003e will not raise an issue:\u003c/p\u003e\n\u003cpre\u003e\n  public boolean equals(Object other) {\n    if (this \u003d\u003d other) {  // Compliant\n      return false;\n    }\n }\n\u003c/pre\u003e\n\u003cp\u003eComparing with \u003ccode\u003ejava.lang.String\u003c/code\u003e and boxed types \u003ccode\u003ejava.lang.Integer\u003c/code\u003e, …​ will not raise an issue.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/coding_rules#rule_key\u003djava%3AS4973\u0027\u003eS4973\u003c/a\u003e - Strings and Boxed types should be compared using \"equals()\" \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/595.html\"\u003eMITRE, CWE-595\u003c/a\u003e - Comparison of Object References Instead of Object Contents \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/597.html\"\u003eMITRE, CWE-597\u003c/a\u003e - Use of Wrong Operator in String Comparison \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/UjdGBQ\"\u003eCERT, EXP03-J.\u003c/a\u003e - Do not use the equality operators when comparing values of boxed\n  primitives \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/yDdGBQ\"\u003eCERT, EXP50-J.\u003c/a\u003e - Do not confuse abstract object equality with reference equality\n  \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eIt is equivalent to use the equality \u003ccode\u003e\u003d\u003d\u003c/code\u003e operator and the \u003ccode\u003eequals\u003c/code\u003e method to compare two objects if the \u003ccode\u003eequals\u003c/code\u003e\nmethod inherited from \u003ccode\u003eObject\u003c/code\u003e has not been overridden. In this case both checks compare the object references.\u003c/p\u003e\n\u003cp\u003eBut as soon as \u003ccode\u003eequals\u003c/code\u003e is overridden, two objects not having the same reference but having the same value can be equal. This rule spots\nsuspicious uses of \u003ccode\u003e\u003d\u003d\u003c/code\u003e and \u003ccode\u003e!\u003d\u003c/code\u003e operators on objects whose \u003ccode\u003eequals\u003c/code\u003e methods are overridden.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString firstName \u003d getFirstName(); // String overrides equals\nString lastName \u003d getLastName();\n\nif (firstName \u003d\u003d lastName) { ... }; // Non-compliant; false even if the strings have the same value\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString firstName \u003d getFirstName();\nString lastName \u003d getLastName();\n\nif (firstName !\u003d null \u0026amp;\u0026amp; firstName.equals(lastName)) { ... };\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eComparing two instances of the \u003ccode\u003eClass\u003c/code\u003e object will not raise an issue:\u003c/p\u003e\n\u003cpre\u003e\nClass c;\nif(c \u003d\u003d Integer.class) { // No issue raised\n}\n\u003c/pre\u003e\n\u003cp\u003eComparing \u003ccode\u003eEnum\u003c/code\u003e will not raise an issue:\u003c/p\u003e\n\u003cpre\u003e\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit \u003d\u003d Fruit.GRAPE; // it\u0027s recommended to activate S4551 to enforce comparison of Enums using \u003d\u003d\n}\n\u003c/pre\u003e\n\u003cp\u003eComparing with \u003ccode\u003efinal\u003c/code\u003e reference will not raise an issue:\u003c/p\u003e\n\u003cpre\u003e\nprivate static final Type DEFAULT \u003d new Type();\n\nvoid foo(Type other) {\n  if (other \u003d\u003d DEFAULT) { // Compliant\n  //...\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eComparing with \u003ccode\u003ethis\u003c/code\u003e will not raise an issue:\u003c/p\u003e\n\u003cpre\u003e\n  public boolean equals(Object other) {\n    if (this \u003d\u003d other) {  // Compliant\n      return false;\n    }\n }\n\u003c/pre\u003e\n\u003cp\u003eComparing with \u003ccode\u003ejava.lang.String\u003c/code\u003e and boxed types \u003ccode\u003ejava.lang.Integer\u003c/code\u003e, …​ will not raise an issue.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:java:S4973} - Strings and Boxed types should be compared using \"equals()\" \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/595.html\"\u003eMITRE, CWE-595\u003c/a\u003e - Comparison of Object References Instead of Object Contents \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/597.html\"\u003eMITRE, CWE-597\u003c/a\u003e - Use of Wrong Operator in String Comparison \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/UjdGBQ\"\u003eCERT, EXP03-J.\u003c/a\u003e - Do not use the equality operators when comparing values of boxed\n  primitives \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/yDdGBQ\"\u003eCERT, EXP50-J.\u003c/a\u003e - Do not confuse abstract object equality with reference equality\n  \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe","suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1698"]}},{"key":"java:S1871","repo":"java","name":"Two branches in a conditional structure should not have exactly the same implementation","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eHaving two \u003ccode\u003ecases\u003c/code\u003e in a \u003ccode\u003eswitch\u003c/code\u003e statement or two branches in an \u003ccode\u003eif\u003c/code\u003e chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an \u003ccode\u003eif\u003c/code\u003e chain they should\nbe combined, or for a \u003ccode\u003eswitch\u003c/code\u003e, one should fall through to the other.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1\u0027s implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a \u0026gt;\u003d 0 \u0026amp;\u0026amp; a \u0026lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a \u0026gt;\u003d 10 \u0026amp;\u0026amp; a \u0026lt; 20) {\n  doTheOtherThing();\n}\nelse if (a \u0026gt;\u003d 20 \u0026amp;\u0026amp; a \u0026lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eBlocks in an \u003ccode\u003eif\u003c/code\u003e chain that contain a single line of code are ignored, as are blocks in a \u003ccode\u003eswitch\u003c/code\u003e statement that contain a\nsingle line of code with or without a following \u003ccode\u003ebreak\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif (a \u003d\u003d 1) {\n  doSomething();  //no issue, usually this is done on purpose to increase the readability\n} else if (a \u003d\u003d 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n\u003c/pre\u003e\n\u003cp\u003eBut this exception does not apply to \u003ccode\u003eif\u003c/code\u003e chains without \u003ccode\u003eelse\u003c/code\u003e-s, or to \u003ccode\u003eswitch\u003c/code\u003e-es without default clauses when\nall branches have the same single line of code. In case of \u003ccode\u003eif\u003c/code\u003e chains with \u003ccode\u003eelse\u003c/code\u003e-s, or of \u003ccode\u003eswitch\u003c/code\u003e-es with default\nclauses, rule \u003ca href\u003d\u0027/coding_rules#rule_key\u003djava%3AS3923\u0027\u003eS3923\u003c/a\u003e raises a bug.\u003c/p\u003e\n\u003cpre\u003e\nif (a \u003d\u003d 1) {\n  doSomething();  //Noncompliant, this might have been done on purpose but probably not\n} else if (a \u003d\u003d 2) {\n  doSomething();\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eHaving two \u003ccode\u003ecases\u003c/code\u003e in a \u003ccode\u003eswitch\u003c/code\u003e statement or two branches in an \u003ccode\u003eif\u003c/code\u003e chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an \u003ccode\u003eif\u003c/code\u003e chain they should\nbe combined, or for a \u003ccode\u003eswitch\u003c/code\u003e, one should fall through to the other.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1\u0027s implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a \u0026gt;\u003d 0 \u0026amp;\u0026amp; a \u0026lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a \u0026gt;\u003d 10 \u0026amp;\u0026amp; a \u0026lt; 20) {\n  doTheOtherThing();\n}\nelse if (a \u0026gt;\u003d 20 \u0026amp;\u0026amp; a \u0026lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eBlocks in an \u003ccode\u003eif\u003c/code\u003e chain that contain a single line of code are ignored, as are blocks in a \u003ccode\u003eswitch\u003c/code\u003e statement that contain a\nsingle line of code with or without a following \u003ccode\u003ebreak\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nif (a \u003d\u003d 1) {\n  doSomething();  //no issue, usually this is done on purpose to increase the readability\n} else if (a \u003d\u003d 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n\u003c/pre\u003e\n\u003cp\u003eBut this exception does not apply to \u003ccode\u003eif\u003c/code\u003e chains without \u003ccode\u003eelse\u003c/code\u003e-s, or to \u003ccode\u003eswitch\u003c/code\u003e-es without default clauses when\nall branches have the same single line of code. In case of \u003ccode\u003eif\u003c/code\u003e chains with \u003ccode\u003eelse\u003c/code\u003e-s, or of \u003ccode\u003eswitch\u003c/code\u003e-es with default\nclauses, rule {rule:java:S3923} raises a bug.\u003c/p\u003e\n\u003cpre\u003e\nif (a \u003d\u003d 1) {\n  doSomething();  //Noncompliant, this might have been done on purpose but probably not\n} else if (a \u003d\u003d 2) {\n  doSomething();\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["design","suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1871"]}},{"key":"java:S1874","repo":"java","name":"\"@Deprecated\" code should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eOnce deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */\n@Deprecated\npublic class Fum { ... }\n\npublic class Foo {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n}\n\npublic class Bar extends Foo {\n  public void doTheThing() { ... } // Noncompliant; don\u0027t override a deprecated method or explicitly mark it as @Deprecated\n}\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo \u003d new Foo();  // okay; the class isn\u0027t deprecated\n    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/477.html\"\u003eMITRE, CWE-477\u003c/a\u003e - Use of Obsolete Functions \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/6TdGBQ\"\u003eCERT, MET02-J.\u003c/a\u003e - Do not use deprecated or obsolete classes or methods \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eOnce deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */\n@Deprecated\npublic class Fum { ... }\n\npublic class Foo {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n}\n\npublic class Bar extends Foo {\n  public void doTheThing() { ... } // Noncompliant; don\u0027t override a deprecated method or explicitly mark it as @Deprecated\n}\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo \u003d new Foo();  // okay; the class isn\u0027t deprecated\n    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/477.html\"\u003eMITRE, CWE-477\u003c/a\u003e - Use of Obsolete Functions \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/6TdGBQ\"\u003eCERT, MET02-J.\u003c/a\u003e - Do not use deprecated or obsolete classes or methods \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe","obsolete"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:CallToDeprecatedMethod"]}},{"key":"java:S1994","repo":"java","name":"\"for\" loop increment clauses should modify the loops\u0027 counters","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIt can be extremely confusing when a \u003ccode\u003efor\u003c/code\u003e loop’s counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop’s increment clause if at all possible.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; j++) { // Noncompliant\n  // ...\n  i++;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; i++, j++) {\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eOr\u003c/p\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; i++) {\n  // ...\n  j++;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIt can be extremely confusing when a \u003ccode\u003efor\u003c/code\u003e loop’s counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop’s increment clause if at all possible.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; j++) { // Noncompliant\n  // ...\n  i++;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; i++, j++) {\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eOr\u003c/p\u003e\n\u003cpre\u003e\nfor (i \u003d 0; i \u0026lt; 10; i++) {\n  // ...\n  j++;\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1994"]}},{"key":"java:S1996","repo":"java","name":"Files should contain only one top-level class or interface each","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.\u003c/p\u003e","mdDesc":"\u003cp\u003eA file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"10min","effortToFixDescription":"per extra type","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"10min","type":"CODE_SMELL","defaultRemFnType":"LINEAR","defaultRemFnGapMultiplier":"10min","remFnType":"LINEAR","remFnGapMultiplier":"10min","remFnOverloaded":false,"gapDescription":"per extra type","scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1996"]}},{"key":"java:S2638","repo":"java","name":"Method overrides should not change contracts","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eBecause a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: \u003ccode\u003e@Nullable\u003c/code\u003e, \u003ccode\u003e@CheckForNull\u003c/code\u003e, \u003ccode\u003e@NotNull\u003c/code\u003e, \u003ccode\u003e@NonNull\u003c/code\u003e, and\n\u003ccode\u003e@Nonnull\u003c/code\u003e, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe \u003d ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe \u003d ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\"\u003eWikipedia - Liskov substitution principle\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eBecause a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: \u003ccode\u003e@Nullable\u003c/code\u003e, \u003ccode\u003e@CheckForNull\u003c/code\u003e, \u003ccode\u003e@NotNull\u003c/code\u003e, \u003ccode\u003e@NonNull\u003c/code\u003e, and\n\u003ccode\u003e@Nonnull\u003c/code\u003e, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe \u003d ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe \u003d ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\"\u003eWikipedia - Liskov substitution principle\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2638"]}},{"key":"java:S2737","repo":"java","name":"\"catch\" clauses should do more than rethrow","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA \u003ccode\u003ecatch\u003c/code\u003e clause that only rethrows the caught exception has the same effect as omitting the \u003ccode\u003ecatch\u003c/code\u003e altogether and letting\nit bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads.\u003c/p\u003e\n\u003cp\u003eSuch clauses should either be eliminated or populated with the appropriate logic.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic String readFile(File f) {\n  StringBuilder sb \u003d new StringBuilder();\n  try {\n    FileReader fileReader \u003d new FileReader(fileName);\n    BufferedReader bufferedReader \u003d new BufferedReader(fileReader);\n\n    while((line \u003d bufferedReader.readLine()) !\u003d null) {\n      //...\n  }\n  catch (IOException e) {  // Noncompliant\n    throw e;\n  }\n  return sb.toString();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic String readFile(File f) {\n  StringBuilder sb \u003d new StringBuilder();\n  try {\n    FileReader fileReader \u003d new FileReader(fileName);\n    BufferedReader bufferedReader \u003d new BufferedReader(fileReader);\n\n    while((line \u003d bufferedReader.readLine()) !\u003d null) {\n      //...\n  }\n  catch (IOException e) {\n    logger.LogError(e);\n    throw e;\n  }\n  return sb.toString();\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic String readFile(File f) throws IOException {\n  StringBuilder sb \u003d new StringBuilder();\n  FileReader fileReader \u003d new FileReader(fileName);\n  BufferedReader bufferedReader \u003d new BufferedReader(fileReader);\n\n  while((line \u003d bufferedReader.readLine()) !\u003d null) {\n    //...\n\n  return sb.toString();\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eA \u003ccode\u003ecatch\u003c/code\u003e clause that only rethrows the caught exception has the same effect as omitting the \u003ccode\u003ecatch\u003c/code\u003e altogether and letting\nit bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads.\u003c/p\u003e\n\u003cp\u003eSuch clauses should either be eliminated or populated with the appropriate logic.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic String readFile(File f) {\n  StringBuilder sb \u003d new StringBuilder();\n  try {\n    FileReader fileReader \u003d new FileReader(fileName);\n    BufferedReader bufferedReader \u003d new BufferedReader(fileReader);\n\n    while((line \u003d bufferedReader.readLine()) !\u003d null) {\n      //...\n  }\n  catch (IOException e) {  // Noncompliant\n    throw e;\n  }\n  return sb.toString();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic String readFile(File f) {\n  StringBuilder sb \u003d new StringBuilder();\n  try {\n    FileReader fileReader \u003d new FileReader(fileName);\n    BufferedReader bufferedReader \u003d new BufferedReader(fileReader);\n\n    while((line \u003d bufferedReader.readLine()) !\u003d null) {\n      //...\n  }\n  catch (IOException e) {\n    logger.LogError(e);\n    throw e;\n  }\n  return sb.toString();\n}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\npublic String readFile(File f) throws IOException {\n  StringBuilder sb \u003d new StringBuilder();\n  FileReader fileReader \u003d new FileReader(fileName);\n  BufferedReader bufferedReader \u003d new BufferedReader(fileReader);\n\n  while((line \u003d bufferedReader.readLine()) !\u003d null) {\n    //...\n\n  return sb.toString();\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy","error-handling","finding","unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2737"]}},{"key":"java:S2786","repo":"java","name":"Nested \"enum\"s should not be declared static","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAccording to \u003ca href\u003d\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\"\u003ethe Java Language Specification-8.9\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eNested enum types are implicitly \u003ccode\u003estatic\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eSo there’s no need to declare them \u003ccode\u003estatic\u003c/code\u003e explicitly.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAccording to \u003ca href\u003d\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\"\u003ethe Java Language Specification-8.9\u003c/a\u003e:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eNested enum types are implicitly \u003ccode\u003estatic\u003c/code\u003e.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eSo there’s no need to declare them \u003ccode\u003estatic\u003c/code\u003e explicitly.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2786"]}},{"key":"java:S2970","repo":"java","name":"Assertions should be complete","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIt is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Fest: \u003ccode\u003eassertThat\u003c/code\u003e is not followed by an assertion invocation \u003c/li\u003e\n  \u003cli\u003e AssertJ: \u003ccode\u003eassertThat\u003c/code\u003e is not followed by an assertion invocation \u003c/li\u003e\n  \u003cli\u003e Mockito: \u003ccode\u003everify\u003c/code\u003e is not followed by a method invocation \u003c/li\u003e\n  \u003cli\u003e Truth: \u003ccode\u003eassertXXX\u003c/code\u003e is not followed by an assertion invocation \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn such cases, what is intended to be a test doesn’t actually verify anything\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n// Fest\nboolean result \u003d performAction();\n// let\u0027s now check that result value is true\nassertThat(result); // Noncompliant; nothing is actually checked, the test passes whether \"result\" is true or false\n\n// Mockito\nList mockedList \u003d Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let\u0027s check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n// Fest\nboolean result \u003d performAction();\n// let\u0027s now check that result value is true\nassertThat(result).isTrue();\n\n// Mockito\nList mockedList \u003d Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let\u0027s check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList).add(\"one\");\nMockito.verify(mockedList).clear();\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eVariable assignments and return statements are skipped to allow helper methods.\u003c/p\u003e\n\u003cpre\u003e\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent \u003d readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); // No issue is raised here\n}\n\n@Test\npublic void test() {\n  check(\"foo.txt\", \"key1\").isTrue();\n  check(\"bar.txt\", \"key2\").isTrue();\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIt is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Fest: \u003ccode\u003eassertThat\u003c/code\u003e is not followed by an assertion invocation \u003c/li\u003e\n  \u003cli\u003e AssertJ: \u003ccode\u003eassertThat\u003c/code\u003e is not followed by an assertion invocation \u003c/li\u003e\n  \u003cli\u003e Mockito: \u003ccode\u003everify\u003c/code\u003e is not followed by a method invocation \u003c/li\u003e\n  \u003cli\u003e Truth: \u003ccode\u003eassertXXX\u003c/code\u003e is not followed by an assertion invocation \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn such cases, what is intended to be a test doesn’t actually verify anything\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n// Fest\nboolean result \u003d performAction();\n// let\u0027s now check that result value is true\nassertThat(result); // Noncompliant; nothing is actually checked, the test passes whether \"result\" is true or false\n\n// Mockito\nList mockedList \u003d Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let\u0027s check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n// Fest\nboolean result \u003d performAction();\n// let\u0027s now check that result value is true\nassertThat(result).isTrue();\n\n// Mockito\nList mockedList \u003d Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let\u0027s check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList).add(\"one\");\nMockito.verify(mockedList).clear();\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eVariable assignments and return statements are skipped to allow helper methods.\u003c/p\u003e\n\u003cpre\u003e\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent \u003d readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); // No issue is raised here\n}\n\n@Test\npublic void test() {\n  check(\"foo.txt\", \"key1\").isTrue();\n  check(\"bar.txt\", \"key2\").isTrue();\n}\n\u003c/pre\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["assertj","mockito","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2970"]}},{"key":"java:S2972","repo":"java","name":"Inner classes should not have too many lines of code","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eInner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold\nshould probably be externalized to its own file.\u003c/p\u003e","mdDesc":"\u003cp\u003eInner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold\nshould probably be externalized to its own file.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"Max","htmlDesc":"The maximum number of lines allowed","defaultValue":"25","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2972"]}},{"key":"java:S2973","repo":"java","name":"Escaped Unicode characters should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.\u003c/p\u003e\n\u003cp\u003eThis rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a\nprintable character.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString prefix \u003d \"n\\u00E9e\"; // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString prefix \u003d \"née\";\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.\u003c/p\u003e\n\u003cp\u003eThis rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a\nprintable character.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString prefix \u003d \"n\\u00E9e\"; // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString prefix \u003d \"née\";\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2973"]}},{"key":"java:S2974","repo":"java","name":"Classes without \"public\" constructors should be \"final\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eClasses with only \u003ccode\u003eprivate\u003c/code\u003e constructors should be marked \u003ccode\u003efinal\u003c/code\u003e to prevent any mistaken extension attempts.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class PrivateConstructorClass {  // Noncompliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic final class PrivateConstructorClass {  // Compliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eClasses with only \u003ccode\u003eprivate\u003c/code\u003e constructors should be marked \u003ccode\u003efinal\u003c/code\u003e to prevent any mistaken extension attempts.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class PrivateConstructorClass {  // Noncompliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic final class PrivateConstructorClass {  // Compliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["design"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2974"]}},{"key":"java:S2975","repo":"java","name":"\"clone\" should not be overridden","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eMany consider \u003ccode\u003eclone\u003c/code\u003e and \u003ccode\u003eCloneable\u003c/code\u003e broken in Java, largely because the rules for overriding \u003ccode\u003eclone\u003c/code\u003e are tricky\nand difficult to get right, according to Joshua Bloch:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eObject’s clone method is very tricky. It’s based on field copies, and it’s \"extra-linguistic.\" It creates an object without calling a\n  constructor. There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years,\n  both in and outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have\n  a shallow copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don’t have two\n  independent objects. If you modify one, the other changes as well. And all of a sudden, you get random behavior.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eA copy constructor or copy factory should be used instead.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eclone\u003c/code\u003e is overridden, whether or not \u003ccode\u003eCloneable\u003c/code\u003e is implemented.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  // ...\n\n  public Object clone() { // Noncompliant\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  // ...\n\n  MyClass (MyClass source) {\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.artima.com/intv/bloch13.html\"\u003eCopy Constructor versus Cloning\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eSee Also\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/coding_rules#rule_key\u003djava%3AS2157\u0027\u003eS2157\u003c/a\u003e - \"Cloneables\" should implement \"clone\" \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/coding_rules#rule_key\u003djava%3AS1182\u0027\u003eS1182\u003c/a\u003e - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\" \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eMany consider \u003ccode\u003eclone\u003c/code\u003e and \u003ccode\u003eCloneable\u003c/code\u003e broken in Java, largely because the rules for overriding \u003ccode\u003eclone\u003c/code\u003e are tricky\nand difficult to get right, according to Joshua Bloch:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eObject’s clone method is very tricky. It’s based on field copies, and it’s \"extra-linguistic.\" It creates an object without calling a\n  constructor. There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years,\n  both in and outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have\n  a shallow copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don’t have two\n  independent objects. If you modify one, the other changes as well. And all of a sudden, you get random behavior.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eA copy constructor or copy factory should be used instead.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eclone\u003c/code\u003e is overridden, whether or not \u003ccode\u003eCloneable\u003c/code\u003e is implemented.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  // ...\n\n  public Object clone() { // Noncompliant\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  // ...\n\n  MyClass (MyClass source) {\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.artima.com/intv/bloch13.html\"\u003eCopy Constructor versus Cloning\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch3\u003eSee Also\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:java:S2157} - \"Cloneables\" should implement \"clone\" \u003c/li\u003e\n  \u003cli\u003e {rule:java:S1182} - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\" \u003c/li\u003e\n\u003c/ul\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2975"]}},{"key":"java:S3725","repo":"java","name":"Java 8\u0027s \"Files.exists\" should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe \u003ccode\u003eFiles.exists\u003c/code\u003e method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files\nthat don’t actually exist.\u003c/p\u003e\n\u003cp\u003eThe same goes for \u003ccode\u003eFiles.notExists\u003c/code\u003e, \u003ccode\u003eFiles.isDirectory\u003c/code\u003e and \u003ccode\u003eFiles.isRegularFile\u003c/code\u003e from \u003ccode\u003ejava.nio.file\u003c/code\u003e\npackage.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is not 8.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nPath myPath;\nif(java.nio.file.Files.exists(myPath)) {  // Noncompliant\n // do something\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nPath myPath;\nif(myPath.toFile().exists())) {\n // do something\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://bugs.openjdk.java.net/browse/JDK-8153414\"\u003ehttps://bugs.openjdk.java.net/browse/JDK-8153414\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://bugs.openjdk.java.net/browse/JDK-8154077\"\u003ehttps://bugs.openjdk.java.net/browse/JDK-8154077\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThe \u003ccode\u003eFiles.exists\u003c/code\u003e method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files\nthat don’t actually exist.\u003c/p\u003e\n\u003cp\u003eThe same goes for \u003ccode\u003eFiles.notExists\u003c/code\u003e, \u003ccode\u003eFiles.isDirectory\u003c/code\u003e and \u003ccode\u003eFiles.isRegularFile\u003c/code\u003e from \u003ccode\u003ejava.nio.file\u003c/code\u003e\npackage.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is not 8.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nPath myPath;\nif(java.nio.file.Files.exists(myPath)) {  // Noncompliant\n // do something\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nPath myPath;\nif(myPath.toFile().exists())) {\n // do something\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://bugs.openjdk.java.net/browse/JDK-8153414\"\u003ehttps://bugs.openjdk.java.net/browse/JDK-8153414\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://bugs.openjdk.java.net/browse/JDK-8154077\"\u003ehttps://bugs.openjdk.java.net/browse/JDK-8154077\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8","performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3725"]}},{"key":"java:S3824","repo":"java","name":"\"Map.get\" and value test should be replaced with single method call","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIt’s a common pattern to test the result of a \u003ccode\u003ejava.util.Map.get()\u003c/code\u003e against \u003ccode\u003enull\u003c/code\u003e or calling\n\u003ccode\u003ejava.util.Map.containsKey()\u003c/code\u003e before proceeding with adding or changing the value in the map. However the \u003ccode\u003ejava.util.Map\u003c/code\u003e API\noffers a significantly better alternative in the form of the \u003ccode\u003ecomputeIfPresent()\u003c/code\u003e and \u003ccode\u003ecomputeIfAbsent()\u003c/code\u003e methods. Using these\ninstead leads to cleaner and more readable code.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is not 8.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nV value \u003d map.get(key);\nif (value \u003d\u003d null) {  // Noncompliant\n  value \u003d V.createFor(key);\n  if (value !\u003d null) {\n    map.put(key, value);\n  }\n}\nif (!map.containsKey(key)) {  // Noncompliant\n  value \u003d V.createFor(key);\n  if (value !\u003d null) {\n    map.put(key, value);\n  }\n}\nreturn value;\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nreturn map.computeIfAbsent(key, k -\u0026gt; V.createFor(k));\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule will not raise an issue when trying to add \u003ccode\u003enull\u003c/code\u003e to a map, because \u003ccode\u003ecomputeIfAbsent\u003c/code\u003e will not add the entry if the\nvalue returned by the function is \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eSee Also\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/coding_rules#rule_key\u003djava%3AS6104\u0027\u003eS6104\u003c/a\u003e - Map \"computeIfAbsent()\" and \"computeIfPresent()\" should not be used to add \"null\" values. \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eIt’s a common pattern to test the result of a \u003ccode\u003ejava.util.Map.get()\u003c/code\u003e against \u003ccode\u003enull\u003c/code\u003e or calling\n\u003ccode\u003ejava.util.Map.containsKey()\u003c/code\u003e before proceeding with adding or changing the value in the map. However the \u003ccode\u003ejava.util.Map\u003c/code\u003e API\noffers a significantly better alternative in the form of the \u003ccode\u003ecomputeIfPresent()\u003c/code\u003e and \u003ccode\u003ecomputeIfAbsent()\u003c/code\u003e methods. Using these\ninstead leads to cleaner and more readable code.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is not 8.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nV value \u003d map.get(key);\nif (value \u003d\u003d null) {  // Noncompliant\n  value \u003d V.createFor(key);\n  if (value !\u003d null) {\n    map.put(key, value);\n  }\n}\nif (!map.containsKey(key)) {  // Noncompliant\n  value \u003d V.createFor(key);\n  if (value !\u003d null) {\n    map.put(key, value);\n  }\n}\nreturn value;\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nreturn map.computeIfAbsent(key, k -\u0026gt; V.createFor(k));\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule will not raise an issue when trying to add \u003ccode\u003enull\u003c/code\u003e to a map, because \u003ccode\u003ecomputeIfAbsent\u003c/code\u003e will not add the entry if the\nvalue returned by the function is \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eSee Also\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:java:S6104} - Map \"computeIfAbsent()\" and \"computeIfPresent()\" should not be used to add \"null\" values. \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3824"]}},{"key":"java:S3937","repo":"java","name":"Number patterns should be regular","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when underscores (\u003ccode\u003e_\u003c/code\u003e) are used to break a number into irregular subgroups.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint duos \u003d 1_00_00;\nint million \u003d 1_000_00_000;  // Noncompliant\nint thousand \u003d 1000;\nint tenThousand \u003d 100_00;  // Noncompliant\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when underscores (\u003ccode\u003e_\u003c/code\u003e) are used to break a number into irregular subgroups.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint duos \u003d 1_00_00;\nint million \u003d 1_000_00_000;  // Noncompliant\nint thousand \u003d 1000;\nint tenThousand \u003d 100_00;  // Noncompliant\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3937"]}},{"key":"java:S4925","repo":"java","name":"\"Class.forName()\" should not load JDBC 4.0+ drivers","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn the past, it was required to load a JDBC driver before creating a \u003ccode\u003ejava.sql.Connection\u003c/code\u003e. Nowadays, when using JDBC 4.0 drivers, this\nis no longer required and \u003ccode\u003eClass.forName()\u003c/code\u003e can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are\nautomatically loaded.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eClass.forName()\u003c/code\u003e is used with one of the following values:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003ecom.mysql.jdbc.Driver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eoracle.jdbc.driver.OracleDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.ibm.db2.jdbc.app.DB2Driver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.ibm.db2.jdbc.net.DB2Driver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.sybase.jdbc.SybDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.sybase.jdbc2.jdbc.SybDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.teradata.jdbc.TeraDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.microsoft.sqlserver.jdbc.SQLServerDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eorg.postgresql.Driver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esun.jdbc.odbc.JdbcOdbcDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eorg.hsqldb.jdbc.JDBCDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eorg.h2.Driver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eorg.firebirdsql.jdbc.FBDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003enet.sourceforge.jtds.jdbc.Driver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.ibm.db2.jcc.DB2Driver\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n  private static final String DRIVER_CLASS_NAME \u003d \"org.postgresql.Driver\";\n  private final Connection connection;\n\n  public Demo(String serverURI) throws SQLException, ClassNotFoundException {\n    Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using Class.forName()\n    connection \u003d DriverManager.getConnection(serverURI);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n    private final Connection connection;\n\n    public Demo(String serverURI) throws SQLException {\n        connection \u003d DriverManager.getConnection(serverURI);\n    }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIn the past, it was required to load a JDBC driver before creating a \u003ccode\u003ejava.sql.Connection\u003c/code\u003e. Nowadays, when using JDBC 4.0 drivers, this\nis no longer required and \u003ccode\u003eClass.forName()\u003c/code\u003e can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are\nautomatically loaded.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eClass.forName()\u003c/code\u003e is used with one of the following values:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003ecom.mysql.jdbc.Driver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eoracle.jdbc.driver.OracleDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.ibm.db2.jdbc.app.DB2Driver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.ibm.db2.jdbc.net.DB2Driver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.sybase.jdbc.SybDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.sybase.jdbc2.jdbc.SybDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.teradata.jdbc.TeraDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.microsoft.sqlserver.jdbc.SQLServerDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eorg.postgresql.Driver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003esun.jdbc.odbc.JdbcOdbcDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eorg.hsqldb.jdbc.JDBCDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eorg.h2.Driver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eorg.firebirdsql.jdbc.FBDriver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003enet.sourceforge.jtds.jdbc.Driver\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.ibm.db2.jcc.DB2Driver\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n  private static final String DRIVER_CLASS_NAME \u003d \"org.postgresql.Driver\";\n  private final Connection connection;\n\n  public Demo(String serverURI) throws SQLException, ClassNotFoundException {\n    Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using Class.forName()\n    connection \u003d DriverManager.getConnection(serverURI);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n    private final Connection connection;\n\n    public Demo(String serverURI) throws SQLException {\n        connection \u003d DriverManager.getConnection(serverURI);\n    }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["obsolete"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4925"]}},{"key":"java:S1104","repo":"java","name":"Class variable fields should not have public accessibility","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003ePublic class variable fields do not respect the encapsulation principle and has three main disadvantages:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Additional behavior such as validation cannot be added. \u003c/li\u003e\n  \u003cli\u003e The internal representation is exposed, and cannot be changed afterwards. \u003c/li\u003e\n  \u003cli\u003e Member values are subject to change from anywhere in the code and may not meet the programmer’s assumptions. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy using private attributes and accessor methods (set and get), unauthorized modifications are prevented.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  public static final int SOME_CONSTANT \u003d 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  public static final int SOME_CONSTANT \u003d 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName \u003d firstName;\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eBecause they are not modifiable, this rule ignores \u003ccode\u003epublic final\u003c/code\u003e fields. Also, annotated fields, whatever the annotation(s) will be\nignored, as annotations are often used by injection frameworks, which in exchange require having public fields.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/493.html\"\u003eMITRE, CWE-493\u003c/a\u003e - Critical Public Variable Without Final Modifier \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003ePublic class variable fields do not respect the encapsulation principle and has three main disadvantages:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Additional behavior such as validation cannot be added. \u003c/li\u003e\n  \u003cli\u003e The internal representation is exposed, and cannot be changed afterwards. \u003c/li\u003e\n  \u003cli\u003e Member values are subject to change from anywhere in the code and may not meet the programmer’s assumptions. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eBy using private attributes and accessor methods (set and get), unauthorized modifications are prevented.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  public static final int SOME_CONSTANT \u003d 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  public static final int SOME_CONSTANT \u003d 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName \u003d firstName;\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eBecause they are not modifiable, this rule ignores \u003ccode\u003epublic final\u003c/code\u003e fields. Also, annotated fields, whatever the annotation(s) will be\nignored, as annotations are often used by injection frameworks, which in exchange require having public fields.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/493.html\"\u003eMITRE, CWE-493\u003c/a\u003e - Critical Public Variable Without Final Modifier \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cwe"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:ClassVariableVisibilityCheck"]}},{"key":"java:S1210","repo":"java","name":"\"equals(Object obj)\" should be overridden along with the \"compareTo(T obj)\" method","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAccording to the Java \u003ccode\u003eComparable.compareTo(T o)\u003c/code\u003e documentation:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eIt is strongly recommended, but not strictly required that \u003ccode\u003e(x.compareTo(y)\u003d\u003d0) \u003d\u003d (x.equals(y))\u003c/code\u003e.\u003c/p\u003e\n  \u003cp\u003eGenerally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.\u003c/p\u003e\n  \u003cp\u003eThe recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\"\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIf this rule is violated, weird and unpredictable failures can occur.\u003c/p\u003e\n\u003cp\u003eFor example, in Java 5 the \u003ccode\u003ePriorityQueue.remove()\u003c/code\u003e method relied on \u003ccode\u003ecompareTo()\u003c/code\u003e, but since Java 6 it has relied on\n\u003ccode\u003eequals()\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo implements Comparable\u0026lt;Foo\u0026gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo implements Comparable\u0026lt;Foo\u0026gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAccording to the Java \u003ccode\u003eComparable.compareTo(T o)\u003c/code\u003e documentation:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eIt is strongly recommended, but not strictly required that \u003ccode\u003e(x.compareTo(y)\u003d\u003d0) \u003d\u003d (x.equals(y))\u003c/code\u003e.\u003c/p\u003e\n  \u003cp\u003eGenerally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.\u003c/p\u003e\n  \u003cp\u003eThe recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\"\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eIf this rule is violated, weird and unpredictable failures can occur.\u003c/p\u003e\n\u003cp\u003eFor example, in Java 5 the \u003ccode\u003ePriorityQueue.remove()\u003c/code\u003e method relied on \u003ccode\u003ecompareTo()\u003c/code\u003e, but since Java 6 it has relied on\n\u003ccode\u003eequals()\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo implements Comparable\u0026lt;Foo\u0026gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo implements Comparable\u0026lt;Foo\u0026gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1210"]}},{"key":"java:S1215","repo":"java","name":"Execution of the Garbage Collector should be triggered only by the JVM","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eCalling \u003ccode\u003eSystem.gc()\u003c/code\u003e or \u003ccode\u003eRuntime.getRuntime().gc()\u003c/code\u003e is a bad idea for a simple reason: there is no way to know exactly what\nwill be done under the hood by the JVM because the behavior will depend on its vendor, version and options:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Will the whole application be frozen during the call? \u003c/li\u003e\n  \u003cli\u003e Is the \u003ccode\u003e-XX:DisableExplicitGC\u003c/code\u003e option activated? \u003c/li\u003e\n  \u003cli\u003e Will the JVM simply ignore the call? \u003c/li\u003e\n  \u003cli\u003e …​ \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLike for \u003ccode\u003eSystem.gc()\u003c/code\u003e, there is no reason to manually call \u003ccode\u003erunFinalization()\u003c/code\u003e to force the call of finalization methods of\nany objects pending finalization.\u003c/p\u003e\n\u003cp\u003eAn application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector and\ncalling \u003ccode\u003efinalize()\u003c/code\u003e methods should be left exclusively to the JVM.\u003c/p\u003e","mdDesc":"\u003cp\u003eCalling \u003ccode\u003eSystem.gc()\u003c/code\u003e or \u003ccode\u003eRuntime.getRuntime().gc()\u003c/code\u003e is a bad idea for a simple reason: there is no way to know exactly what\nwill be done under the hood by the JVM because the behavior will depend on its vendor, version and options:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Will the whole application be frozen during the call? \u003c/li\u003e\n  \u003cli\u003e Is the \u003ccode\u003e-XX:DisableExplicitGC\u003c/code\u003e option activated? \u003c/li\u003e\n  \u003cli\u003e Will the JVM simply ignore the call? \u003c/li\u003e\n  \u003cli\u003e …​ \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eLike for \u003ccode\u003eSystem.gc()\u003c/code\u003e, there is no reason to manually call \u003ccode\u003erunFinalization()\u003c/code\u003e to force the call of finalization methods of\nany objects pending finalization.\u003c/p\u003e\n\u003cp\u003eAn application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector and\ncalling \u003ccode\u003efinalize()\u003c/code\u003e methods should be left exclusively to the JVM.\u003c/p\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice","unpredictable"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1215"]}},{"key":"java:S1219","repo":"java","name":"\"switch\" statements should not contain non-case labels","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eEven if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what\u0027s expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i \u003d 0 ; i \u0026lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn\u0027t relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eEven if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what\u0027s expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i \u003d 0 ; i \u0026lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn\u0027t relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n\u003c/pre\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1219"]}},{"key":"java:S1220","repo":"java","name":"The default unnamed package should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAccording to the Java Language Specification:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eUnnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just\n  beginning development.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eTo enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass { /* ... */ }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npackage org.example;\n\npublic class MyClass{ /* ... */ }\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAccording to the Java Language Specification:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eUnnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just\n  beginning development.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eTo enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass { /* ... */ }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npackage org.example;\n\npublic class MyClass{ /* ... */ }\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1220"]}},{"key":"java:S1223","repo":"java","name":"Non-constructor methods should not have the same name as the enclosing class","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eHaving a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eHaving a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1223"]}},{"key":"java:S1450","repo":"java","name":"Private fields only used as local variables in methods should become local variables","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen the value of a private field is always assigned to in a class\u0027 methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n  private int a;\n  private int b;\n\n  public void doSomething(int y) {\n    a \u003d y + 5;\n    ...\n    if(a \u003d\u003d 0) {\n      ...\n    }\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    b \u003d y + 3;\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n\n  public void doSomething(int y) {\n    int a \u003d y + 5;\n    ...\n    if(a \u003d\u003d 0) {\n      ...\n    }\n  }\n\n  public void doSomethingElse(int y) {\n    int b \u003d y + 3;\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule doesn’t raise any issue on annotated field.\u003c/p\u003e","mdDesc":"\u003cp\u003eWhen the value of a private field is always assigned to in a class\u0027 methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n  private int a;\n  private int b;\n\n  public void doSomething(int y) {\n    a \u003d y + 5;\n    ...\n    if(a \u003d\u003d 0) {\n      ...\n    }\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    b \u003d y + 3;\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n\n  public void doSomething(int y) {\n    int a \u003d y + 5;\n    ...\n    if(a \u003d\u003d 0) {\n      ...\n    }\n  }\n\n  public void doSomethingElse(int y) {\n    int b \u003d y + 3;\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule doesn’t raise any issue on annotated field.\u003c/p\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1450"]}},{"key":"java:S1451","repo":"java","name":"Track lack of copyright and license headers","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eEach source file should start with a header stating file ownership and the license which must be used to distribute the application.\u003c/p\u003e\n\u003cp\u003eThis rule must be fed with the header text that is expected at the beginning of every file.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eEach source file should start with a header stating file ownership and the license which must be used to distribute the application.\u003c/p\u003e\n\u003cp\u003eThis rule must be fed with the header text that is expected at the beginning of every file.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n\u003c/pre\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[{"key":"headerFormat","htmlDesc":"Expected copyright and license header","type":"TEXT"},{"key":"isRegularExpression","htmlDesc":"Whether the headerFormat is a regular expression","defaultValue":"false","type":"BOOLEAN"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1451"]}},{"key":"java:S1452","repo":"java","name":"Generic wildcard types should not be used in return types","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIt is highly recommended \u003cstrong\u003enot\u003c/strong\u003e to use wildcard types as return types. Because the type inference rules are fairly complex it is\nunlikely the user of that API will know how to use it correctly.\u003c/p\u003e\n\u003cp\u003eLet’s take the example of method returning a \"List\u0026lt;? extends Animal\u0026gt;\". Is it possible on this list to add a Dog, a Cat, …​ we simply don’t\nknow. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard types should be limited to method\nparameters.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method returns a wildcard type.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;? extends Animal\u0026gt; getAnimals(){...}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;Animal\u0026gt; getAnimals(){...}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nList\u0026lt;Dog\u0026gt; getAnimals(){...}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIt is highly recommended \u003cstrong\u003enot\u003c/strong\u003e to use wildcard types as return types. Because the type inference rules are fairly complex it is\nunlikely the user of that API will know how to use it correctly.\u003c/p\u003e\n\u003cp\u003eLet’s take the example of method returning a \"List\u0026lt;? extends Animal\u0026gt;\". Is it possible on this list to add a Dog, a Cat, …​ we simply don’t\nknow. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard types should be limited to method\nparameters.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method returns a wildcard type.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;? extends Animal\u0026gt; getAnimals(){...}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;Animal\u0026gt; getAnimals(){...}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\nList\u0026lt;Dog\u0026gt; getAnimals(){...}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1452"]}},{"key":"java:S1694","repo":"java","name":"An abstract class should have both abstract and concrete methods","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.\u003c/p\u003e\n\u003cp\u003eA class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the\n\u003ccode\u003eabstract\u003c/code\u003e keyword) with a private constructor.\u003c/p\u003e\n\u003cp\u003eA class with only abstract methods and no inheritable behavior should be converted to an interface.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic abstract class Animal {  // Noncompliant; should be an interface\n  abstract void move();\n  abstract void feed();\n}\n\npublic abstract class Color {  // Noncompliant; should be concrete with a private constructor\n  private int red \u003d 0;\n  private int green \u003d 0;\n  private int blue \u003d 0;\n\n  public int getRed() {\n    return red;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic interface Animal {\n  void move();\n  void feed();\n}\n\npublic class Color {\n  private int red \u003d 0;\n  private int green \u003d 0;\n  private int blue \u003d 0;\n\n  private Color () {}\n\n  public int getRed() {\n    return red;\n  }\n}\n\npublic abstract class Lamp {\n\n  private boolean switchLamp\u003dfalse;\n\n  public abstract void glow();\n\n  public void flipSwitch() {\n    switchLamp \u003d !switchLamp;\n    if (switchLamp) {\n      glow();\n    }\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.\u003c/p\u003e\n\u003cp\u003eA class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the\n\u003ccode\u003eabstract\u003c/code\u003e keyword) with a private constructor.\u003c/p\u003e\n\u003cp\u003eA class with only abstract methods and no inheritable behavior should be converted to an interface.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic abstract class Animal {  // Noncompliant; should be an interface\n  abstract void move();\n  abstract void feed();\n}\n\npublic abstract class Color {  // Noncompliant; should be concrete with a private constructor\n  private int red \u003d 0;\n  private int green \u003d 0;\n  private int blue \u003d 0;\n\n  public int getRed() {\n    return red;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic interface Animal {\n  void move();\n  void feed();\n}\n\npublic class Color {\n  private int red \u003d 0;\n  private int green \u003d 0;\n  private int blue \u003d 0;\n\n  private Color () {}\n\n  public int getRed() {\n    return red;\n  }\n}\n\npublic abstract class Lamp {\n\n  private boolean switchLamp\u003dfalse;\n\n  public abstract void glow();\n\n  public void flipSwitch() {\n    switchLamp \u003d !switchLamp;\n    if (switchLamp) {\n      glow();\n    }\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1694"]}},{"key":"java:S1695","repo":"java","name":"\"NullPointerException\" should not be explicitly thrown","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA \u003ccode\u003eNullPointerException\u003c/code\u003e should indicate that a \u003ccode\u003enull\u003c/code\u003e value was unexpectedly encountered. Good programming practice dictates\nthat code is structured to avoid NPE’s.\u003c/p\u003e\n\u003cp\u003eExplicitly throwing \u003ccode\u003eNullPointerException\u003c/code\u003e forces a method’s callers to explicitly catch it, rather than coding to avoid it. Further, it\nmakes it difficult to distinguish between the unexpectedly-encountered \u003ccode\u003enull\u003c/code\u003e value and the condition which causes the method to purposely\nthrow an NPE.\u003c/p\u003e\n\u003cp\u003eIf an NPE is being thrown to indicate that a parameter to the method should not have been null, use the \u003ccode\u003e@NotNull\u003c/code\u003e annotation\ninstead.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething (@NotNull String aString) {\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eA \u003ccode\u003eNullPointerException\u003c/code\u003e should indicate that a \u003ccode\u003enull\u003c/code\u003e value was unexpectedly encountered. Good programming practice dictates\nthat code is structured to avoid NPE’s.\u003c/p\u003e\n\u003cp\u003eExplicitly throwing \u003ccode\u003eNullPointerException\u003c/code\u003e forces a method’s callers to explicitly catch it, rather than coding to avoid it. Further, it\nmakes it difficult to distinguish between the unexpectedly-encountered \u003ccode\u003enull\u003c/code\u003e value and the condition which causes the method to purposely\nthrow an NPE.\u003c/p\u003e\n\u003cp\u003eIf an NPE is being thrown to indicate that a parameter to the method should not have been null, use the \u003ccode\u003e@NotNull\u003c/code\u003e annotation\ninstead.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething (@NotNull String aString) {\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["error-handling","pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1695"]}},{"key":"java:S1699","repo":"java","name":"Constructors should only call non-overridable methods","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eCalling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The subclass class constructor starts by contract by calling the parent class constructor. \u003c/li\u003e\n  \u003cli\u003e The parent class constructor calls the method, which has been overridden in the child class. \u003c/li\u003e\n  \u003cli\u003e If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  \u003ccode\u003eNullPointerException\u003c/code\u003e) can result, because the fields aren’t initialized yet. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Parent {\n\n  public Parent () {\n    doSomething();  // Noncompliant\n  }\n\n  public void doSomething () {  // not final; can be overridden\n    ...\n  }\n}\n\npublic class Child extends Parent {\n\n  private String foo;\n\n  public Child(String foo) {\n    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized\n    this.foo \u003d foo;\n  }\n\n  public void doSomething () {\n    System.out.println(this.foo.length());\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/8zZGBQ\"\u003eCERT, MET05-J.\u003c/a\u003e - Ensure that constructors do not call overridable methods \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/6ns-BQ\"\u003eCERT, OOP50-CPP.\u003c/a\u003e - Do not invoke virtual functions from constructors or destructors\n  \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eCalling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.\u003c/p\u003e\n\u003cp\u003eFor example:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The subclass class constructor starts by contract by calling the parent class constructor. \u003c/li\u003e\n  \u003cli\u003e The parent class constructor calls the method, which has been overridden in the child class. \u003c/li\u003e\n  \u003cli\u003e If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  \u003ccode\u003eNullPointerException\u003c/code\u003e) can result, because the fields aren’t initialized yet. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Parent {\n\n  public Parent () {\n    doSomething();  // Noncompliant\n  }\n\n  public void doSomething () {  // not final; can be overridden\n    ...\n  }\n}\n\npublic class Child extends Parent {\n\n  private String foo;\n\n  public Child(String foo) {\n    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized\n    this.foo \u003d foo;\n  }\n\n  public void doSomething () {\n    System.out.println(this.foo.length());\n  }\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/8zZGBQ\"\u003eCERT, MET05-J.\u003c/a\u003e - Ensure that constructors do not call overridable methods \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/6ns-BQ\"\u003eCERT, OOP50-CPP.\u003c/a\u003e - Do not invoke virtual functions from constructors or destructors\n  \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1699"]}},{"key":"java:S2301","repo":"java","name":"Public methods should not contain selector arguments","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA selector argument is a \u003ccode\u003eboolean\u003c/code\u003e argument that’s used to determine which of two paths to take through a method. Specifying such a\nparameter may seem innocuous, particularly if it’s well named.\u003c/p\u003e\n\u003cp\u003eUnfortunately, the maintainers of the code calling the method won’t see the parameter name, only its value. They’ll be forced either to guess at\nthe meaning or to take extra time to look the method up.\u003c/p\u003e\n\u003cp\u003eInstead, separate methods should be written.\u003c/p\u003e\n\u003cp\u003eThis rule finds methods with a \u003ccode\u003eboolean\u003c/code\u003e that’s used to determine which path to take through the method.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt(\"Joe\", false); // does this mean not to temp Joe?\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age \u0026lt; legalAge ? temptChild(\"Joe\") : temptAdult(\"Joe\");\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eA selector argument is a \u003ccode\u003eboolean\u003c/code\u003e argument that’s used to determine which of two paths to take through a method. Specifying such a\nparameter may seem innocuous, particularly if it’s well named.\u003c/p\u003e\n\u003cp\u003eUnfortunately, the maintainers of the code calling the method won’t see the parameter name, only its value. They’ll be forced either to guess at\nthe meaning or to take extra time to look the method up.\u003c/p\u003e\n\u003cp\u003eInstead, separate methods should be written.\u003c/p\u003e\n\u003cp\u003eThis rule finds methods with a \u003ccode\u003eboolean\u003c/code\u003e that’s used to determine which path to take through the method.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt(\"Joe\", false); // does this mean not to temp Joe?\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age \u0026lt; legalAge ? temptChild(\"Joe\") : temptAdult(\"Joe\");\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["design"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2301"]}},{"key":"java:S2308","repo":"java","name":"\"deleteOnExit\" should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUse of \u003ccode\u003eFile.deleteOnExit()\u003c/code\u003e is not recommended for the following reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. \u003c/li\u003e\n  \u003cli\u003e For each file handler, the memory associated with the handler is released only at the end of the process. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nFile file \u003d new File(\"file.txt\");\nfile.deleteOnExit();  // Noncompliant\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eUse of \u003ccode\u003eFile.deleteOnExit()\u003c/code\u003e is not recommended for the following reasons:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. \u003c/li\u003e\n  \u003cli\u003e For each file handler, the memory associated with the handler is released only at the end of the process. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nFile file \u003d new File(\"file.txt\");\nfile.deleteOnExit();  // Noncompliant\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:CallToFileDeleteOnExitMethod"]}},{"key":"java:S2309","repo":"java","name":"Files should not be empty","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eFiles with no lines of code clutter a project and should be removed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n//package org.foo;\n//\n//public class Bar {}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eFiles with no lines of code clutter a project and should be removed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n//package org.foo;\n//\n//public class Bar {}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:EmptyFile"]}},{"key":"java:S2675","repo":"java","name":"\"readObject\" should not be \"synchronized\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA \u003ccode\u003ereadObject\u003c/code\u003e method is written when a \u003ccode\u003eSerializable\u003c/code\u003e object needs special handling to be rehydrated from file. It should be\nthe case that the object being created by \u003ccode\u003ereadObject\u003c/code\u003e is only visible to the thread that invoked the method, and the\n\u003ccode\u003esynchronized\u003c/code\u003e keyword is not needed, and using \u003ccode\u003esynchronized\u003c/code\u003e anyway is just confusing. If this is not the case, the method\nshould be refactored to make it the case.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Noncompliant\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Compliant\n  //...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eA \u003ccode\u003ereadObject\u003c/code\u003e method is written when a \u003ccode\u003eSerializable\u003c/code\u003e object needs special handling to be rehydrated from file. It should be\nthe case that the object being created by \u003ccode\u003ereadObject\u003c/code\u003e is only visible to the thread that invoked the method, and the\n\u003ccode\u003esynchronized\u003c/code\u003e keyword is not needed, and using \u003ccode\u003esynchronized\u003c/code\u003e anyway is just confusing. If this is not the case, the method\nshould be refactored to make it the case.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Noncompliant\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Compliant\n  //...\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2675"]}},{"key":"java:S3400","repo":"java","name":"Methods should not return constants","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere’s no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue if on methods that contain only one statement: the \u003ccode\u003ereturn\u003c/code\u003e of a constant value.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint getBestNumber() {\n  return 12;  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nstatic final int BEST_NUMBER \u003d 12;\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eMethods with annotations, such as \u003ccode\u003e@Override\u003c/code\u003e and Spring’s \u003ccode\u003e@RequestMapping\u003c/code\u003e, are ignored.\u003c/p\u003e","mdDesc":"\u003cp\u003eThere’s no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue if on methods that contain only one statement: the \u003ccode\u003ereturn\u003c/code\u003e of a constant value.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint getBestNumber() {\n  return 12;  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nstatic final int BEST_NUMBER \u003d 12;\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eMethods with annotations, such as \u003ccode\u003e@Override\u003c/code\u003e and Spring’s \u003ccode\u003e@RequestMapping\u003c/code\u003e, are ignored.\u003c/p\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3400"]}},{"key":"java:S3516","repo":"java","name":"Methods returns should not be invariant","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen a method is designed to return an invariant value, it may be poor design, but it shouldn’t adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method contains several \u003ccode\u003ereturn\u003c/code\u003e statements that all return the same value.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint foo(int a) {\n  int b \u003d 12;\n  if (a \u003d\u003d 1) {\n    return b;\n  }\n  return b;  // Noncompliant\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen a method is designed to return an invariant value, it may be poor design, but it shouldn’t adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a method contains several \u003ccode\u003ereturn\u003c/code\u003e statements that all return the same value.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint foo(int a) {\n  int b \u003d 12;\n  if (a \u003d\u003d 1) {\n    return b;\n  }\n  return b;  // Noncompliant\n}\n\u003c/pre\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"2min","effortToFixDescription":"Per number of return statements","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"2min","type":"CODE_SMELL","defaultRemFnType":"LINEAR","defaultRemFnGapMultiplier":"2min","remFnType":"LINEAR","remFnGapMultiplier":"2min","remFnOverloaded":false,"gapDescription":"Per number of return statements","scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3516"]}},{"key":"java:S3631","repo":"java","name":"\"Arrays.stream\" should be used for primitive arrays","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eFor arrays of objects, \u003ccode\u003eArrays.asList(T ... a).stream()\u003c/code\u003e and \u003ccode\u003eArrays.stream(array)\u003c/code\u003e are basically equivalent in terms of\nperformance. However, for arrays of primitives, using \u003ccode\u003eArrays.asList\u003c/code\u003e will force the construction of a list of boxed types, and then use\n\u003cem\u003ethat\u003c/em\u003e list as a stream. On the other hand, \u003ccode\u003eArrays.stream\u003c/code\u003e uses the appropriate primitive stream type (\u003ccode\u003eIntStream\u003c/code\u003e,\n\u003ccode\u003eLongStream\u003c/code\u003e, \u003ccode\u003eDoubleStream\u003c/code\u003e) when applicable, with much better performance.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray \u003d new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eFor arrays of objects, \u003ccode\u003eArrays.asList(T ... a).stream()\u003c/code\u003e and \u003ccode\u003eArrays.stream(array)\u003c/code\u003e are basically equivalent in terms of\nperformance. However, for arrays of primitives, using \u003ccode\u003eArrays.asList\u003c/code\u003e will force the construction of a list of boxed types, and then use\n\u003cem\u003ethat\u003c/em\u003e list as a stream. On the other hand, \u003ccode\u003eArrays.stream\u003c/code\u003e uses the appropriate primitive stream type (\u003ccode\u003eIntStream\u003c/code\u003e,\n\u003ccode\u003eLongStream\u003c/code\u003e, \u003ccode\u003eDoubleStream\u003c/code\u003e) when applicable, with much better performance.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray \u003d new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3631"]}},{"key":"java:S3751","repo":"java","name":"\"@RequestMapping\" methods should not be \"private\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA method with a \u003ccode\u003e@RequestMapping\u003c/code\u003e annotation part of a class annotated with \u003ccode\u003e@Controller\u003c/code\u003e (directly or indirectly through a\nmeta annotation - \u003ccode\u003e@RestController\u003c/code\u003e from Spring Boot is a good example) will be called to handle matching web requests. That will happen\neven if the method is \u003ccode\u003eprivate\u003c/code\u003e, because Spring invokes such methods via reflection, without checking visibility.\u003c/p\u003e\n\u003cp\u003eSo marking a sensitive method \u003ccode\u003eprivate\u003c/code\u003e may seem like a good way to control how such code is called. Unfortunately, not all Spring\nframeworks ignore visibility in this way. For instance, if you’ve tried to control web access to your sensitive, \u003ccode\u003eprivate\u003c/code\u003e,\n\u003ccode\u003e@RequestMapping\u003c/code\u003e method by marking it \u003ccode\u003e@Secured\u003c/code\u003e …​ it will still be called, whether or not the user is authorized to access\nit. That’s because AOP proxies are not applied to private methods.\u003c/p\u003e\n\u003cp\u003eIn addition to \u003ccode\u003e@RequestMapping\u003c/code\u003e, this rule also considers the annotations introduced in Spring Framework 4.3: \u003ccode\u003e@GetMapping\u003c/code\u003e,\n\u003ccode\u003e@PostMapping\u003c/code\u003e, \u003ccode\u003e@PutMapping\u003c/code\u003e, \u003ccode\u003e@DeleteMapping\u003c/code\u003e, \u003ccode\u003e@PatchMapping\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@RequestMapping(\"/greet\", method \u003d GET)\nprivate String greet(String greetee) {  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@RequestMapping(\"/greet\", method \u003d GET)\npublic String greet(String greetee) {\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eA method with a \u003ccode\u003e@RequestMapping\u003c/code\u003e annotation part of a class annotated with \u003ccode\u003e@Controller\u003c/code\u003e (directly or indirectly through a\nmeta annotation - \u003ccode\u003e@RestController\u003c/code\u003e from Spring Boot is a good example) will be called to handle matching web requests. That will happen\neven if the method is \u003ccode\u003eprivate\u003c/code\u003e, because Spring invokes such methods via reflection, without checking visibility.\u003c/p\u003e\n\u003cp\u003eSo marking a sensitive method \u003ccode\u003eprivate\u003c/code\u003e may seem like a good way to control how such code is called. Unfortunately, not all Spring\nframeworks ignore visibility in this way. For instance, if you’ve tried to control web access to your sensitive, \u003ccode\u003eprivate\u003c/code\u003e,\n\u003ccode\u003e@RequestMapping\u003c/code\u003e method by marking it \u003ccode\u003e@Secured\u003c/code\u003e …​ it will still be called, whether or not the user is authorized to access\nit. That’s because AOP proxies are not applied to private methods.\u003c/p\u003e\n\u003cp\u003eIn addition to \u003ccode\u003e@RequestMapping\u003c/code\u003e, this rule also considers the annotations introduced in Spring Framework 4.3: \u003ccode\u003e@GetMapping\u003c/code\u003e,\n\u003ccode\u003e@PostMapping\u003c/code\u003e, \u003ccode\u003e@PutMapping\u003c/code\u003e, \u003ccode\u003e@DeleteMapping\u003c/code\u003e, \u003ccode\u003e@PatchMapping\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@RequestMapping(\"/greet\", method \u003d GET)\nprivate String greet(String greetee) {  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@RequestMapping(\"/greet\", method \u003d GET)\npublic String greet(String greetee) {\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\"\u003eOWASP Top 10 2017 Category A6\u003c/a\u003e - Security\n  Misconfiguration \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["owasp-a6","spring"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3751"]}},{"key":"java:S3878","repo":"java","name":"Arrays should not be created for varargs parameters","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere’s no point in creating an array solely for the purpose of passing it as a varargs (\u003ccode\u003e...\u003c/code\u003e) argument; varargs \u003cem\u003eis\u003c/em\u003e an array.\nSimply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where \u003ccode\u003eObject ...\u003c/code\u003e\nis expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void callTheThing() {\n  //...\n  doTheThing(new String[] { \"s1\", \"s2\"});  // Noncompliant: unnecessary\n  doTheThing(new String[12]);  // Compliant\n  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous\n  // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void callTheThing() {\n  //...\n  doTheThing(\"s1\", \"s2\");\n  doTheThing(new String[12]);\n  doTheOtherThing((Object[]) new String[8]);\n   // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThere’s no point in creating an array solely for the purpose of passing it as a varargs (\u003ccode\u003e...\u003c/code\u003e) argument; varargs \u003cem\u003eis\u003c/em\u003e an array.\nSimply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where \u003ccode\u003eObject ...\u003c/code\u003e\nis expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void callTheThing() {\n  //...\n  doTheThing(new String[] { \"s1\", \"s2\"});  // Noncompliant: unnecessary\n  doTheThing(new String[12]);  // Compliant\n  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous\n  // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void callTheThing() {\n  //...\n  doTheThing(\"s1\", \"s2\");\n  doTheThing(new String[12]);\n  doTheOtherThing((Object[]) new String[8]);\n   // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3878"]}},{"key":"java:S4604","repo":"java","name":"\"@EnableAutoConfiguration\" should be fine-tuned","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\"@EnableAutoConfiguration\" is a convenient feature to configure the Spring Application Context by attempting to guess the beans that you are likely\nto need. The drawback is that it may load and configure beans the application will never use and therefore consume more CPU and RAM than really\nrequired. \u003ccode\u003e@EnableAutoConfiguration\u003c/code\u003e should be configured to exclude all the beans not required by the application. Alternatively, use the\n\u003ccode\u003e@Import\u003c/code\u003e annotation instead of \u003ccode\u003e@EnableAutoConfiguration\u003c/code\u003e, to explicitly import the useful AutoConfiguration classes.\u003c/p\u003e\n\u003cp\u003eThis rule applies for \u003ccode\u003e@SpringBootApplication\u003c/code\u003e as well.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@SpringBootApplication\npublic class MyApplication {\n...\n}\n\u003c/pre\u003e\n\u003cpre\u003e\n@Configuration\n@EnableAutoConfiguration\npublic class MyApplication {\n...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@SpringBootApplication(exclude \u003d {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n\u003c/pre\u003e\n\u003cpre\u003e\n@Configuration\n@EnableAutoConfiguration(exclude \u003d {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n\u003c/pre\u003e\n\u003cpre\u003e\n@Configuration\n@Import({\n        DispatcherServletAutoConfiguration.class,\n        EmbeddedServletContainerAutoConfiguration.class,\n        ErrorMvcAutoConfiguration.class,\n        HttpEncodingAutoConfiguration.class,\n        HttpMessageConvertersAutoConfiguration.class,\n        JacksonAutoConfiguration.class,\n        ServerPropertiesAutoConfiguration.class,\n        PropertyPlaceholderAutoConfiguration.class,\n        ThymeleafAutoConfiguration.class,\n        WebMvcAutoConfiguration.class\n})\npublic class MyApplication {\n...\n}\n\u003c/pre\u003e\n\u003ch2\u003eDeprecated\u003c/h2\u003e\n\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e","mdDesc":"\u003cp\u003e\"@EnableAutoConfiguration\" is a convenient feature to configure the Spring Application Context by attempting to guess the beans that you are likely\nto need. The drawback is that it may load and configure beans the application will never use and therefore consume more CPU and RAM than really\nrequired. \u003ccode\u003e@EnableAutoConfiguration\u003c/code\u003e should be configured to exclude all the beans not required by the application. Alternatively, use the\n\u003ccode\u003e@Import\u003c/code\u003e annotation instead of \u003ccode\u003e@EnableAutoConfiguration\u003c/code\u003e, to explicitly import the useful AutoConfiguration classes.\u003c/p\u003e\n\u003cp\u003eThis rule applies for \u003ccode\u003e@SpringBootApplication\u003c/code\u003e as well.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@SpringBootApplication\npublic class MyApplication {\n...\n}\n\u003c/pre\u003e\n\u003cpre\u003e\n@Configuration\n@EnableAutoConfiguration\npublic class MyApplication {\n...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@SpringBootApplication(exclude \u003d {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n\u003c/pre\u003e\n\u003cpre\u003e\n@Configuration\n@EnableAutoConfiguration(exclude \u003d {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n\u003c/pre\u003e\n\u003cpre\u003e\n@Configuration\n@Import({\n        DispatcherServletAutoConfiguration.class,\n        EmbeddedServletContainerAutoConfiguration.class,\n        ErrorMvcAutoConfiguration.class,\n        HttpEncodingAutoConfiguration.class,\n        HttpMessageConvertersAutoConfiguration.class,\n        JacksonAutoConfiguration.class,\n        ServerPropertiesAutoConfiguration.class,\n        PropertyPlaceholderAutoConfiguration.class,\n        ThymeleafAutoConfiguration.class,\n        WebMvcAutoConfiguration.class\n})\npublic class MyApplication {\n...\n}\n\u003c/pre\u003e\n\u003ch2\u003eDeprecated\u003c/h2\u003e\n\u003cp\u003eThis rule is deprecated, and will eventually be removed.\u003c/p\u003e","severity":"MAJOR","status":"DEPRECATED","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4604"]}},{"key":"java:S4605","repo":"java","name":"Spring beans should be considered by \"@ComponentScan\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eSpring beans belonging to packages that are not included in a \u003ccode\u003e@ComponentScan\u003c/code\u003e configuration will not be accessible in the Spring\nApplication Context. Therefore, it’s likely to be a configuration mistake that will be detected by this rule.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e the \u003ccode\u003e@ComponentScan\u003c/code\u003e is implicit in the \u003ccode\u003e@SpringBootApplication\u003c/code\u003e annotation, case in which Spring Boot\nwill auto scan for components in the package containing the Spring Boot main class and its sub-packages.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npackage com.mycompany.app;\n\n@Configuration\n@ComponentScan(\"com.mycompany.app.beans\")\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // Noncompliant; MyController belong to \"com.mycompany.app.web\" while the ComponentScan is looking for beans in \"com.mycompany.app.beans\" package\n...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npackage com.mycompany.app;\n\n@Configuration\n@ComponentScan({\"com.mycompany.app.beans\",\"com.mycompany.app.web\"})\nor\n@ComponentScan(\"com.mycompany.app\")\nor\n@ComponentScan\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // \"com.mycompany.app.web\" is referenced by a @ComponentScan annotated class\n...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eSpring beans belonging to packages that are not included in a \u003ccode\u003e@ComponentScan\u003c/code\u003e configuration will not be accessible in the Spring\nApplication Context. Therefore, it’s likely to be a configuration mistake that will be detected by this rule.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e the \u003ccode\u003e@ComponentScan\u003c/code\u003e is implicit in the \u003ccode\u003e@SpringBootApplication\u003c/code\u003e annotation, case in which Spring Boot\nwill auto scan for components in the package containing the Spring Boot main class and its sub-packages.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npackage com.mycompany.app;\n\n@Configuration\n@ComponentScan(\"com.mycompany.app.beans\")\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // Noncompliant; MyController belong to \"com.mycompany.app.web\" while the ComponentScan is looking for beans in \"com.mycompany.app.beans\" package\n...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npackage com.mycompany.app;\n\n@Configuration\n@ComponentScan({\"com.mycompany.app.beans\",\"com.mycompany.app.web\"})\nor\n@ComponentScan(\"com.mycompany.app\")\nor\n@ComponentScan\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // \"com.mycompany.app.web\" is referenced by a @ComponentScan annotated class\n...\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall","spring"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4605"]}},{"key":"java:S4970","repo":"java","name":"Derived exceptions should not hide their parents\u0027 catch blocks","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe \u003ccode\u003ecatch\u003c/code\u003e block of a checked exception \"E\" may be hidden because the corresponding \u003ccode\u003etry\u003c/code\u003e block only throws exceptions\nderived from E.\u003c/p\u003e\n\u003cp\u003eThese derived exceptions are handled in dedicated \u003ccode\u003ecatch\u003c/code\u003e blocks prior to the \u003ccode\u003ecatch\u003c/code\u003e block of the base exception E.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ecatch\u003c/code\u003e block of E is unreachable and should be considered dead code. It should be removed, or the entire try-catch structure should\nbe refactored.\u003c/p\u003e\n\u003cp\u003eIt is also possible that a single exception type in a multi-catch block may be hidden while the catch block itself is still reachable. In that case\nit is enough to only remove the hidden exception type or to replace it with another type.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class HiddenCatchBlock {\n\n  public static class CustomException extends Exception {\n  }\n\n  public static class CustomDerivedException extends CustomException {\n  }\n\n  public static void main(String[] args) {\n    try {\n      throwCustomDerivedException();\n    } catch(CustomDerivedException e) {\n      // ...\n    } catch(CustomException e) { // Noncompliant; this code is unreachable\n      // ...\n    }\n  }\n\n  private static void throwCustomDerivedException() throws CustomDerivedException {\n    throw new CustomDerivedException();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class HiddenCatchBlock {\n\n  public static class CustomException extends Exception {\n  }\n\n  public static class CustomDerivedException extends CustomException {\n  }\n\n  public static void main(String[] args) {\n    try {\n      throwCustomDerivedException();\n    } catch(CustomDerivedException e) { // Compliant; try-catch block is \"catching\" only the Exception that can be thrown in the \"try\"\n      //...\n    }\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe \u003ccode\u003ecatch\u003c/code\u003e block of a checked exception \"E\" may be hidden because the corresponding \u003ccode\u003etry\u003c/code\u003e block only throws exceptions\nderived from E.\u003c/p\u003e\n\u003cp\u003eThese derived exceptions are handled in dedicated \u003ccode\u003ecatch\u003c/code\u003e blocks prior to the \u003ccode\u003ecatch\u003c/code\u003e block of the base exception E.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003ecatch\u003c/code\u003e block of E is unreachable and should be considered dead code. It should be removed, or the entire try-catch structure should\nbe refactored.\u003c/p\u003e\n\u003cp\u003eIt is also possible that a single exception type in a multi-catch block may be hidden while the catch block itself is still reachable. In that case\nit is enough to only remove the hidden exception type or to replace it with another type.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class HiddenCatchBlock {\n\n  public static class CustomException extends Exception {\n  }\n\n  public static class CustomDerivedException extends CustomException {\n  }\n\n  public static void main(String[] args) {\n    try {\n      throwCustomDerivedException();\n    } catch(CustomDerivedException e) {\n      // ...\n    } catch(CustomException e) { // Noncompliant; this code is unreachable\n      // ...\n    }\n  }\n\n  private static void throwCustomDerivedException() throws CustomDerivedException {\n    throw new CustomDerivedException();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class HiddenCatchBlock {\n\n  public static class CustomException extends Exception {\n  }\n\n  public static class CustomDerivedException extends CustomException {\n  }\n\n  public static void main(String[] args) {\n    try {\n      throwCustomDerivedException();\n    } catch(CustomDerivedException e) { // Compliant; try-catch block is \"catching\" only the Exception that can be thrown in the \"try\"\n      //...\n    }\n  }\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4970"]}},{"key":"java:S1105","repo":"java","name":"An open curly brace should be located at the end of a line","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif(condition)\n{\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif(condition) {\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen blocks are inlined (left and right curly braces on the same line), no issue is triggered.\u003c/p\u003e\n\u003cpre\u003e\nif(condition) {doSomething();}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif(condition)\n{\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif(condition) {\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen blocks are inlined (left and right curly braces on the same line), no issue is triggered.\u003c/p\u003e\n\u003cpre\u003e\nif(condition) {doSomething();}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:LeftCurlyBraceEndLineCheck"]}},{"key":"java:S1106","repo":"java","name":"An open curly brace should be located at the beginning of a line","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void myMethod {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  // Noncompliant\n    doSomethingElse();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void myMethod\n{\n  if(something)\n  {\n    executeTask();\n  } else\n  {\n    doSomethingElse();\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void myMethod {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  // Noncompliant\n    doSomethingElse();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void myMethod\n{\n  if(something)\n  {\n    executeTask();\n  } else\n  {\n    doSomethingElse();\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:LeftCurlyBraceStartLineCheck"]}},{"key":"java:S1107","repo":"java","name":"Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be located on the same line","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared coding conventions make it possible for a team to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule makes it mandatory to place closing curly braces on the same line as the next \u003ccode\u003eelse\u003c/code\u003e, \u003ccode\u003ecatch\u003c/code\u003e or\n\u003ccode\u003efinally\u003c/code\u003e keywords.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {                               // Noncompliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {                            // Noncompliant\n    closeConnection();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  } else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  } finally {\n    closeConnection();\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared coding conventions make it possible for a team to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule makes it mandatory to place closing curly braces on the same line as the next \u003ccode\u003eelse\u003c/code\u003e, \u003ccode\u003ecatch\u003c/code\u003e or\n\u003ccode\u003efinally\u003c/code\u003e keywords.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {                               // Noncompliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {                            // Noncompliant\n    closeConnection();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  } else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  } finally {\n    closeConnection();\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:RightCurlyBraceSameLineAsNextBlockCheck"]}},{"key":"java:S1108","repo":"java","name":"Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be on two different lines","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared coding conventions make it possible for a team to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule makes it mandatory to place a closing curly brace and the next \u003ccode\u003eelse\u003c/code\u003e, \u003ccode\u003ecatch\u003c/code\u003e or \u003ccode\u003efinally\u003c/code\u003e keyword on\ntwo different lines.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Noncompliant\n    doSomethingElse();\n  }\n  else {                               // Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  }\n  else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  }\n  catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared coding conventions make it possible for a team to collaborate efficiently.\u003c/p\u003e\n\u003cp\u003eThis rule makes it mandatory to place a closing curly brace and the next \u003ccode\u003eelse\u003c/code\u003e, \u003ccode\u003ecatch\u003c/code\u003e or \u003ccode\u003efinally\u003c/code\u003e keyword on\ntwo different lines.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Noncompliant\n    doSomethingElse();\n  }\n  else {                               // Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  }\n  else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  }\n  catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:RightCurlyBraceDifferentLineAsNextBlockCheck"]}},{"key":"java:S1109","repo":"java","name":"A close curly brace should be located at the beginning of a line","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif(condition) {\n  doSomething();}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif(condition) {\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen blocks are inlined (open and close curly braces on the same line), no issue is triggered.\u003c/p\u003e\n\u003cpre\u003e\nif(condition) {doSomething();}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif(condition) {\n  doSomething();}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif(condition) {\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen blocks are inlined (open and close curly braces on the same line), no issue is triggered.\u003c/p\u003e\n\u003cpre\u003e\nif(condition) {doSomething();}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:RightCurlyBraceStartLineCheck"]}},{"key":"java:S1228","repo":"java","name":"Packages should have a javadoc file \u0027package-info.java\u0027","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eEach package in a Java project should include a \u003ccode\u003epackage-info.java\u003c/code\u003e file. The purpose of this file is to document the Java package using\njavadoc and declare package annotations.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n/**\n* This package has non null parameters and is documented.\n**/\n@ParametersAreNonnullByDefault\npackage org.foo.bar;\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eEach package in a Java project should include a \u003ccode\u003epackage-info.java\u003c/code\u003e file. The purpose of this file is to document the Java package using\njavadoc and declare package annotations.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n/**\n* This package has non null parameters and is documented.\n**/\n@ParametersAreNonnullByDefault\npackage org.foo.bar;\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1228"]}},{"key":"java:S1312","repo":"java","name":"Loggers should be \"private static final\" and should share a naming convention","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eRegardless of the logging framework in use (logback, log4j, commons-logging, java.util.logging, …​), loggers should be:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eprivate\u003c/code\u003e: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own\n  logger. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003estatic\u003c/code\u003e: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be\n  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003efinal\u003c/code\u003e: be created once and only once per class. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith a default regular expression of \u003ccode\u003eLOG(?:GER)?\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic Logger logger \u003d LoggerFactory.getLogger(Foo.class);  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nprivate static final Logger LOGGER \u003d LoggerFactory.getLogger(Foo.class);\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eVariables of type \u003ccode\u003eorg.apache.maven.plugin.logging.Log\u003c/code\u003e are ignored.\u003c/p\u003e","mdDesc":"\u003cp\u003eRegardless of the logging framework in use (logback, log4j, commons-logging, java.util.logging, …​), loggers should be:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eprivate\u003c/code\u003e: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own\n  logger. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003estatic\u003c/code\u003e: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be\n  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003efinal\u003c/code\u003e: be created once and only once per class. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith a default regular expression of \u003ccode\u003eLOG(?:GER)?\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic Logger logger \u003d LoggerFactory.getLogger(Foo.class);  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nprivate static final Logger LOGGER \u003d LoggerFactory.getLogger(Foo.class);\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eVariables of type \u003ccode\u003eorg.apache.maven.plugin.logging.Log\u003c/code\u003e are ignored.\u003c/p\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"format","htmlDesc":"Regular expression used to check the logger names against.","defaultValue":"LOG(?:GER)?","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1312"]}},{"key":"java:S2437","repo":"java","name":"Silly bit operations should not be performed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eCertain bit operations are just silly and should not be performed because their results are predictable.\u003c/p\u003e\n\u003cp\u003eSpecifically, using \u003ccode\u003e\u0026amp; -1\u003c/code\u003e with any value will always result in the original value, as will \u003ccode\u003eanyValue ^ 0\u003c/code\u003e and\n\u003ccode\u003eanyValue | 0\u003c/code\u003e.\u003c/p\u003e","mdDesc":"\u003cp\u003eCertain bit operations are just silly and should not be performed because their results are predictable.\u003c/p\u003e\n\u003cp\u003eSpecifically, using \u003ccode\u003e\u0026amp; -1\u003c/code\u003e with any value will always result in the original value, as will \u003ccode\u003eanyValue ^ 0\u003c/code\u003e and\n\u003ccode\u003eanyValue | 0\u003c/code\u003e.\u003c/p\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2437"]}},{"key":"java:S2438","repo":"java","name":"\"Threads\" should not be used where \"Runnables\" are expected","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhile it is technically correct to use a \u003ccode\u003eThread\u003c/code\u003e where a \u003ccode\u003eRunnable\u003c/code\u003e is called for, the semantics of the two objects are\ndifferent, and mixing them is a bad practice that will likely lead to headaches in the future.\u003c/p\u003e\n\u003cp\u003eThe crux of the issue is that \u003ccode\u003eThread\u003c/code\u003e is a larger concept than \u003ccode\u003eRunnable\u003c/code\u003e. A \u003ccode\u003eRunnable\u003c/code\u003e is an object whose\nrunning should be managed. A \u003ccode\u003eThread\u003c/code\u003e expects to manage the running of itself or other \u003ccode\u003eRunnables\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n\tpublic static void main(String[] args) {\n\t\tThread r \u003dnew Thread() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n\tpublic static void main(String[] args) {\n\t\tRunnable r \u003dnew Runnable() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhile it is technically correct to use a \u003ccode\u003eThread\u003c/code\u003e where a \u003ccode\u003eRunnable\u003c/code\u003e is called for, the semantics of the two objects are\ndifferent, and mixing them is a bad practice that will likely lead to headaches in the future.\u003c/p\u003e\n\u003cp\u003eThe crux of the issue is that \u003ccode\u003eThread\u003c/code\u003e is a larger concept than \u003ccode\u003eRunnable\u003c/code\u003e. A \u003ccode\u003eRunnable\u003c/code\u003e is an object whose\nrunning should be managed. A \u003ccode\u003eThread\u003c/code\u003e expects to manage the running of itself or other \u003ccode\u003eRunnables\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n\tpublic static void main(String[] args) {\n\t\tThread r \u003dnew Thread() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n\tpublic static void main(String[] args) {\n\t\tRunnable r \u003dnew Runnable() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["multi-threading","pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2438"]}},{"key":"java:S4738","repo":"java","name":"Java features should be preferred to Guava","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eSome Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed some of these\nlimitations. When migrating an application to Java 8 or even when starting a new one, it’s recommended to prefer Java 8 APIs over Guava ones to ease\nits maintenance: developers don’t need to learn how to use two APIs and can stick to the standard one.\u003c/p\u003e\n\u003cp\u003eJava 9 brought even more useful methods to the standard Java library and if Java version is equal to or higher than 9, these standard methods\nshould be used.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the following Guava APIs are used:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eGuava API\u003c/th\u003e\n      \u003cth\u003eJava 8 API\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.io.BaseEncoding#base64()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Base64\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.io.BaseEncoding#base64Url()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Base64\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Joiner.on()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.lang.String#join() or java.util.stream.Collectors#joining()\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Optional#of()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Optional#of()\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Optional#absent()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Optional#empty()\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Optional#fromNullable()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Optional#ofNullable()\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Optional\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Optional\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Predicate\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.function.Predicate\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Function\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.function.Function\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Supplier\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.function.Supplier\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.io.Files.createTempDir\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.nio.file.Files.createTempDirectory\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eGuava API\u003c/th\u003e\n      \u003cth\u003eJava 9 API\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.collect.ImmutableSet#of()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Set#of()\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.collect.ImmutableList#of()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.List#of()\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.collect.ImmutableMap#of()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Map#of() or java.util.Map#ofEntries()\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","mdDesc":"\u003cp\u003eSome Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed some of these\nlimitations. When migrating an application to Java 8 or even when starting a new one, it’s recommended to prefer Java 8 APIs over Guava ones to ease\nits maintenance: developers don’t need to learn how to use two APIs and can stick to the standard one.\u003c/p\u003e\n\u003cp\u003eJava 9 brought even more useful methods to the standard Java library and if Java version is equal to or higher than 9, these standard methods\nshould be used.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the following Guava APIs are used:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eGuava API\u003c/th\u003e\n      \u003cth\u003eJava 8 API\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.io.BaseEncoding#base64()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Base64\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.io.BaseEncoding#base64Url()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Base64\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Joiner.on()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.lang.String#join() or java.util.stream.Collectors#joining()\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Optional#of()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Optional#of()\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Optional#absent()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Optional#empty()\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Optional#fromNullable()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Optional#ofNullable()\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Optional\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Optional\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Predicate\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.function.Predicate\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Function\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.function.Function\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.base.Supplier\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.function.Supplier\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.io.Files.createTempDir\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.nio.file.Files.createTempDirectory\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eGuava API\u003c/th\u003e\n      \u003cth\u003eJava 9 API\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.collect.ImmutableSet#of()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Set#of()\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.collect.ImmutableList#of()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.List#of()\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecom.google.common.collect.ImmutableMap#of()\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003ejava.util.Map#of() or java.util.Map#ofEntries()\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8","java9"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4738"]}},{"key":"java:S4977","repo":"java","name":"Type parameters should not shadow other type parameters","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShadowing makes it impossible to use the type parameter from the outer scope. Also, it can be confusing to distinguish which type parameter is\nbeing used.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a type parameter from an inner scope uses the same name as one in an outer scope.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n public class TypeParameterHidesAnotherType\u0026lt;T\u0026gt; {\n\n    public class Inner\u0026lt;T\u0026gt; { // Noncompliant\n      //...\n    }\n\n    private \u0026lt;T\u0026gt; T method() { // Noncompliant\n      return null;\n    }\n\n  }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class NoTypeParameterHiding\u0026lt;T\u0026gt; {\n\n    public class Inner\u0026lt;S\u0026gt; { // Compliant\n      List\u0026lt;S\u0026gt; listOfS;\n    }\n\n    private \u0026lt;V\u0026gt; V method() { // Compliant\n      return null;\n    }\n\n  }\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShadowing makes it impossible to use the type parameter from the outer scope. Also, it can be confusing to distinguish which type parameter is\nbeing used.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a type parameter from an inner scope uses the same name as one in an outer scope.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n public class TypeParameterHidesAnotherType\u0026lt;T\u0026gt; {\n\n    public class Inner\u0026lt;T\u0026gt; { // Noncompliant\n      //...\n    }\n\n    private \u0026lt;T\u0026gt; T method() { // Noncompliant\n      return null;\n    }\n\n  }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class NoTypeParameterHiding\u0026lt;T\u0026gt; {\n\n    public class Inner\u0026lt;S\u0026gt; { // Compliant\n      List\u0026lt;S\u0026gt; listOfS;\n    }\n\n    private \u0026lt;V\u0026gt; V method() { // Compliant\n      return null;\n    }\n\n  }\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4977"]}},{"key":"java:S5826","repo":"java","name":"Methods setUp() and tearDown() should be correctly annotated starting with JUnit4","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe \u003ccode\u003esetUp()\u003c/code\u003e and \u003ccode\u003etearDown()\u003c/code\u003e methods (initially introduced with JUnit3 to execute a block of code before and after each\ntest) need to be correctly annotated with the equivalent annotation in order to preserve the same behavior when migrating from JUnit3 to JUnit4 or\nJUnit5.\u003c/p\u003e\n\u003cp\u003eThis rule consequently raise issues on \u003ccode\u003esetUp()\u003c/code\u003e and \u003ccode\u003etearDown()\u003c/code\u003e methods which are not annotated in test classes.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit4: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\npublic void setUp() { ... } // Noncompliant; should be annotated with @Before\npublic void tearDown() { ... }  // Noncompliant; should be annotated with @After\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit5: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\npublic void setUp() { ... } // Noncompliant; should be annotated with @BeforeEach\npublic void tearDown() { ... }  // Noncompliant; should be annotated with @AfterEach\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit4: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n@Before\npublic void setUp() { ... }\n\n@After\npublic void tearDown() { ... }\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit5: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n@BeforeEach\nvoid setUp() { ... }\n\n@AfterEach\nvoid tearDown() { ... }\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe \u003ccode\u003esetUp()\u003c/code\u003e and \u003ccode\u003etearDown()\u003c/code\u003e methods (initially introduced with JUnit3 to execute a block of code before and after each\ntest) need to be correctly annotated with the equivalent annotation in order to preserve the same behavior when migrating from JUnit3 to JUnit4 or\nJUnit5.\u003c/p\u003e\n\u003cp\u003eThis rule consequently raise issues on \u003ccode\u003esetUp()\u003c/code\u003e and \u003ccode\u003etearDown()\u003c/code\u003e methods which are not annotated in test classes.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit4: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\npublic void setUp() { ... } // Noncompliant; should be annotated with @Before\npublic void tearDown() { ... }  // Noncompliant; should be annotated with @After\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit5: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\npublic void setUp() { ... } // Noncompliant; should be annotated with @BeforeEach\npublic void tearDown() { ... }  // Noncompliant; should be annotated with @AfterEach\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit4: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n@Before\npublic void setUp() { ... }\n\n@After\npublic void tearDown() { ... }\n\u003c/pre\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit5: \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\n@BeforeEach\nvoid setUp() { ... }\n\n@AfterEach\nvoid tearDown() { ... }\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["junit","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5826"]}},{"key":"java:S1200","repo":"java","name":"Classes should not be coupled to too many other classes (Single Responsibility Principle)","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAccording to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eIf a class has more than one responsibility, then the responsibilities become coupled.\u003c/p\u003e\n  \u003cp\u003eChanges to one responsibility may impair or inhibit the class\u0027 ability to meet the others.\u003c/p\u003e\n  \u003cp\u003eThis kind of coupling leads to fragile designs that break in unexpected ways when changed.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eClasses which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.\u003c/p\u003e\n\u003cp\u003eNested classes dependencies are not counted as dependencies of the outer class.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith a threshold of 5:\u003c/p\u003e\n\u003cpre\u003e\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result \u003d a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAccording to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eIf a class has more than one responsibility, then the responsibilities become coupled.\u003c/p\u003e\n  \u003cp\u003eChanges to one responsibility may impair or inhibit the class\u0027 ability to meet the others.\u003c/p\u003e\n  \u003cp\u003eThis kind of coupling leads to fragile designs that break in unexpected ways when changed.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eClasses which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.\u003c/p\u003e\n\u003cp\u003eNested classes dependencies are not counted as dependencies of the outer class.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith a threshold of 5:\u003c/p\u003e\n\u003cpre\u003e\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result \u003d a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"max","htmlDesc":"Maximum number of classes a single class is allowed to depend upon","defaultValue":"20","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2h","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2h","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2h","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1200"]}},{"key":"java:S1310","repo":"java","name":"Track uses of \"NOPMD\" suppression comments","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThis rule allows you to track the use of the PMD suppression comment mechanism.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n// NOPMD\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThis rule allows you to track the use of the PMD suppression comment mechanism.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n// NOPMD\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1310"]}},{"key":"java:S1314","repo":"java","name":"Octal values should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eInteger literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint myNumber \u003d 010; // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint myNumber \u003d 8;\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/atYxBQ\"\u003eCERT, DCL18-C.\u003c/a\u003e - Do not begin integer constants with 0 when specifying a decimal\n  value \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/7DZGBQ\"\u003eCERT, DCL50-J.\u003c/a\u003e - Use visually distinct identifiers \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eInteger literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint myNumber \u003d 010; // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint myNumber \u003d 8;\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/atYxBQ\"\u003eCERT, DCL18-C.\u003c/a\u003e - Do not begin integer constants with 0 when specifying a decimal\n  value \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/7DZGBQ\"\u003eCERT, DCL50-J.\u003c/a\u003e - Use visually distinct identifiers \u003c/li\u003e\n\u003c/ul\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1314"]}},{"key":"java:S1315","repo":"java","name":"Track uses of \"CHECKSTYLE:OFF\" suppression comments","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThis rule allows you to track the use of the Checkstyle suppression comment mechanism.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n// CHECKSTYLE:OFF\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThis rule allows you to track the use of the Checkstyle suppression comment mechanism.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n// CHECKSTYLE:OFF\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1315"]}},{"key":"java:S1319","repo":"java","name":"Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.\u003c/p\u003e\n\u003cp\u003eImplementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an implementation class:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e is returned from a \u003ccode\u003epublic\u003c/code\u003e method. \u003c/li\u003e\n  \u003cli\u003e is accepted as an argument to a \u003ccode\u003epublic\u003c/code\u003e method. \u003c/li\u003e\n  \u003cli\u003e is exposed as a \u003ccode\u003epublic\u003c/code\u003e member. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Employees {\n  private HashSet\u0026lt;Employee\u0026gt; employees \u003d new HashSet\u0026lt;Employee\u0026gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet\u0026lt;Employee\u0026gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Employees {\n  private Set\u0026lt;Employee\u0026gt; employees \u003d new HashSet\u0026lt;Employee\u0026gt;();      // Compliant\n\n  public Set\u0026lt;Employee\u0026gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.\u003c/p\u003e\n\u003cp\u003eImplementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an implementation class:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e is returned from a \u003ccode\u003epublic\u003c/code\u003e method. \u003c/li\u003e\n  \u003cli\u003e is accepted as an argument to a \u003ccode\u003epublic\u003c/code\u003e method. \u003c/li\u003e\n  \u003cli\u003e is exposed as a \u003ccode\u003epublic\u003c/code\u003e member. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Employees {\n  private HashSet\u0026lt;Employee\u0026gt; employees \u003d new HashSet\u0026lt;Employee\u0026gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet\u0026lt;Employee\u0026gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Employees {\n  private Set\u0026lt;Employee\u0026gt; employees \u003d new HashSet\u0026lt;Employee\u0026gt;();      // Compliant\n\n  public Set\u0026lt;Employee\u0026gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1319"]}},{"key":"java:S1444","repo":"java","name":"\"public static\" fields should be constant","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n\u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Greeter {\n  public static Foo foo \u003d new Foo();\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Greeter {\n  public static final Foo FOO \u003d new Foo();\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/500.html\"\u003eMITRE, CWE-500\u003c/a\u003e - Public Static Field Not Marked Final \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/WjdGBQ\"\u003eCERT OBJ10-J.\u003c/a\u003e - Do not use public static nonfinal fields \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThere is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n\u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Greeter {\n  public static Foo foo \u003d new Foo();\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Greeter {\n  public static final Foo FOO \u003d new Foo();\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/500.html\"\u003eMITRE, CWE-500\u003c/a\u003e - Public Static Field Not Marked Final \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/WjdGBQ\"\u003eCERT OBJ10-J.\u003c/a\u003e - Do not use public static nonfinal fields \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1444"]}},{"key":"java:S3740","repo":"java","name":"Raw types should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eGeneric types shouldn’t be used raw (without type parameters) in variable declarations or return values. Doing so bypasses generic type checking,\nand defers the catch of unsafe code to runtime.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nList myList; // Noncompliant\nSet mySet; // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; myList;\nSet\u0026lt;? extends Number\u0026gt; mySet;\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eGeneric types shouldn’t be used raw (without type parameters) in variable declarations or return values. Doing so bypasses generic type checking,\nand defers the catch of unsafe code to runtime.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nList myList; // Noncompliant\nSet mySet; // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; myList;\nSet\u0026lt;? extends Number\u0026gt; mySet;\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3740"]}},{"key":"java:S3864","repo":"java","name":"\"Stream.peek\" should be used with caution","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAccording to its JavaDocs, the intermediate Stream operation \u003ccode\u003ejava.util.Stream.peek()\u003c/code\u003e “exists mainly to support debugging”\npurposes.\u003c/p\u003e\n\u003cp\u003eA key difference with other intermediate Stream operations is that the Stream implementation is free to skip calls to \u003ccode\u003epeek()\u003c/code\u003e for\noptimization purpose. This can lead to \u003ccode\u003epeek()\u003c/code\u003e being unexpectedly called only for some or none of the elements in the Stream.\u003c/p\u003e\n\u003cp\u003eAs a consequence, relying on \u003ccode\u003epeek()\u003c/code\u003e without careful consideration can lead to error-prone code.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for each use of peek() to be sure that it is challenged and validated by the team to be meant for production\ndebugging/logging purposes.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nStream.of(\"one\", \"two\", \"three\", \"four\")\n         .filter(e -\u0026gt; e.length() \u0026gt; 3)\n         .peek(e -\u0026gt; System.out.println(\"Filtered value: \" + e)); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nStream.of(\"one\", \"two\", \"three\", \"four\")\n         .filter(e -\u0026gt; e.length() \u0026gt; 3)\n         .foreach(e -\u0026gt; System.out.println(\"Filtered value: \" + e));\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-\"\u003eJava 8 API Documentation\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e 4comprehension: \u003ca href\u003d\"https://4comprehension.com/idiomatic-peeking/\"\u003eIdiomatic Peeking with Java Stream API\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Data Geekery: \u003ca href\u003d\"https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/\"\u003e10 Subtle Mistakes When\n  Using the Streams API\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eAccording to its JavaDocs, the intermediate Stream operation \u003ccode\u003ejava.util.Stream.peek()\u003c/code\u003e “exists mainly to support debugging”\npurposes.\u003c/p\u003e\n\u003cp\u003eA key difference with other intermediate Stream operations is that the Stream implementation is free to skip calls to \u003ccode\u003epeek()\u003c/code\u003e for\noptimization purpose. This can lead to \u003ccode\u003epeek()\u003c/code\u003e being unexpectedly called only for some or none of the elements in the Stream.\u003c/p\u003e\n\u003cp\u003eAs a consequence, relying on \u003ccode\u003epeek()\u003c/code\u003e without careful consideration can lead to error-prone code.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for each use of peek() to be sure that it is challenged and validated by the team to be meant for production\ndebugging/logging purposes.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nStream.of(\"one\", \"two\", \"three\", \"four\")\n         .filter(e -\u0026gt; e.length() \u0026gt; 3)\n         .peek(e -\u0026gt; System.out.println(\"Filtered value: \" + e)); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nStream.of(\"one\", \"two\", \"three\", \"four\")\n         .filter(e -\u0026gt; e.length() \u0026gt; 3)\n         .foreach(e -\u0026gt; System.out.println(\"Filtered value: \" + e));\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-\"\u003eJava 8 API Documentation\u003c/a\u003e\n  \u003c/li\u003e\n  \u003cli\u003e 4comprehension: \u003ca href\u003d\"https://4comprehension.com/idiomatic-peeking/\"\u003eIdiomatic Peeking with Java Stream API\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e Data Geekery: \u003ca href\u003d\"https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/\"\u003e10 Subtle Mistakes When\n  Using the Streams API\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8","pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3864"]}},{"key":"java:S3972","repo":"java","name":"Conditionals should start on new lines","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eCode is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an \u003ccode\u003eif\u003c/code\u003e and its\nresulting \u003cem\u003ethen\u003c/em\u003e statement. However, when an \u003ccode\u003eif\u003c/code\u003e is placed on the same line as the closing \u003ccode\u003e}\u003c/code\u003e from a preceding\n\u003cem\u003ethen\u003c/em\u003e, \u003cem\u003eelse\u003c/em\u003e or \u003cem\u003eelse if\u003c/em\u003e part, it is either an error - \u003ccode\u003eelse\u003c/code\u003e is missing - or the invitation to a future error as\nmaintainers fail to understand that the two statements are unconnected.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eOr\u003c/p\u003e\n\u003cpre\u003e\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eCode is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an \u003ccode\u003eif\u003c/code\u003e and its\nresulting \u003cem\u003ethen\u003c/em\u003e statement. However, when an \u003ccode\u003eif\u003c/code\u003e is placed on the same line as the closing \u003ccode\u003e}\u003c/code\u003e from a preceding\n\u003cem\u003ethen\u003c/em\u003e, \u003cem\u003eelse\u003c/em\u003e or \u003cem\u003eelse if\u003c/em\u003e part, it is either an error - \u003ccode\u003eelse\u003c/code\u003e is missing - or the invitation to a future error as\nmaintainers fail to understand that the two statements are unconnected.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n\u003c/pre\u003e\n\u003cp\u003eOr\u003c/p\u003e\n\u003cpre\u003e\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3972"]}},{"key":"java:S3973","repo":"java","name":"A conditionally executed single line should be denoted by indentation","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (condition)  // Noncompliant\ndoTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (condition)\n  doTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIn the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (condition)  // Noncompliant\ndoTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (condition)\n  doTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing","suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3973"]}},{"key":"java:S3985","repo":"java","name":"Unused \"private\" classes should be removed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003eprivate\u003c/code\u003e classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  ...\n  private class MyUnusedPrivateClass {...} // Noncompliant\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003eprivate\u003c/code\u003e classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo\n{\n  ...\n  private class MyUnusedPrivateClass {...} // Noncompliant\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3985"]}},{"key":"java:S4719","repo":"java","name":"\"StandardCharsets\" constants should be preferred","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eJDK7 introduced the class \u003ccode\u003ejava.nio.charset.StandardCharsets\u003c/code\u003e. It provides constants for all charsets that are guaranteed to be\navailable on every implementation of the Java platform.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e ISO_8859_1 \u003c/li\u003e\n  \u003cli\u003e US_ASCII \u003c/li\u003e\n  \u003cli\u003e UTF_16 \u003c/li\u003e\n  \u003cli\u003e UTF_16BE \u003c/li\u003e\n  \u003cli\u003e UTF_16LE \u003c/li\u003e\n  \u003cli\u003e UTF_8 \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese constants should be preferred to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the use of a String such as \"UTF-8\" which has the drawback of requiring the \u003ccode\u003ecatch\u003c/code\u003e/\u003ccode\u003ethrow\u003c/code\u003e of an\n  \u003ccode\u003eUnsupportedEncodingException\u003c/code\u003e that will never actually happen \u003c/li\u003e\n  \u003cli\u003e the use of Guava’s \u003ccode\u003eCharsets\u003c/code\u003e class, which has been obsolete since JDK7 \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  byte[] bytes \u003d string.getBytes(\"UTF-8\"); // Noncompliant; use a String instead of StandardCharsets.UTF_8\n} catch (UnsupportedEncodingException e) {\n  throw new AssertionError(e);\n}\n// ...\nbyte[] bytes \u003d string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nbyte[] bytes \u003d string.getBytes(StandardCharsets.UTF_8)\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eJDK7 introduced the class \u003ccode\u003ejava.nio.charset.StandardCharsets\u003c/code\u003e. It provides constants for all charsets that are guaranteed to be\navailable on every implementation of the Java platform.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e ISO_8859_1 \u003c/li\u003e\n  \u003cli\u003e US_ASCII \u003c/li\u003e\n  \u003cli\u003e UTF_16 \u003c/li\u003e\n  \u003cli\u003e UTF_16BE \u003c/li\u003e\n  \u003cli\u003e UTF_16LE \u003c/li\u003e\n  \u003cli\u003e UTF_8 \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eThese constants should be preferred to:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e the use of a String such as \"UTF-8\" which has the drawback of requiring the \u003ccode\u003ecatch\u003c/code\u003e/\u003ccode\u003ethrow\u003c/code\u003e of an\n  \u003ccode\u003eUnsupportedEncodingException\u003c/code\u003e that will never actually happen \u003c/li\u003e\n  \u003cli\u003e the use of Guava’s \u003ccode\u003eCharsets\u003c/code\u003e class, which has been obsolete since JDK7 \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  byte[] bytes \u003d string.getBytes(\"UTF-8\"); // Noncompliant; use a String instead of StandardCharsets.UTF_8\n} catch (UnsupportedEncodingException e) {\n  throw new AssertionError(e);\n}\n// ...\nbyte[] bytes \u003d string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nbyte[] bytes \u003d string.getBytes(StandardCharsets.UTF_8)\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy","java7"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4719"]}},{"key":"java:S4838","repo":"java","name":"An iteration on a Collection should be performed on the type handled by the Collection","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThis rule raises an issue when an iteration over the items of a \u003ccode\u003eCollection\u003c/code\u003e is performed on a super-type of the type handled by the\n\u003ccode\u003eCollection\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eRelying on \u003ccode\u003eObject\u003c/code\u003e or any classes between \u003ccode\u003eObject\u003c/code\u003e and the real class handled by the \u003ccode\u003eCollection\u003c/code\u003e is not\nrecommended. While it’s accepted by the language, this practice reduces readability of the code and forces to down-cast the item of the\n\u003ccode\u003eCollection\u003c/code\u003e to be able to call a method on it while simply using the correct type in the iteration makes things more clear and simple.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic Collection\u0026lt;Person\u0026gt; getPersons() { ... }\n\nfor (Object item : getPersons()) { // Noncompliant\n  Person person \u003d (Person) item; // Noncompliant; it\u0027s required to down-cast to the to correct type to use \"item\"\n  person.getAdress();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nfor (Person person : getPersons()) { // Compliant\n  person.getAddress() ;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThis rule raises an issue when an iteration over the items of a \u003ccode\u003eCollection\u003c/code\u003e is performed on a super-type of the type handled by the\n\u003ccode\u003eCollection\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eRelying on \u003ccode\u003eObject\u003c/code\u003e or any classes between \u003ccode\u003eObject\u003c/code\u003e and the real class handled by the \u003ccode\u003eCollection\u003c/code\u003e is not\nrecommended. While it’s accepted by the language, this practice reduces readability of the code and forces to down-cast the item of the\n\u003ccode\u003eCollection\u003c/code\u003e to be able to call a method on it while simply using the correct type in the iteration makes things more clear and simple.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic Collection\u0026lt;Person\u0026gt; getPersons() { ... }\n\nfor (Object item : getPersons()) { // Noncompliant\n  Person person \u003d (Person) item; // Noncompliant; it\u0027s required to down-cast to the to correct type to use \"item\"\n  person.getAdress();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nfor (Person person : getPersons()) { // Compliant\n  person.getAddress() ;\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice","clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4838"]}},{"key":"java:S5803","repo":"java","name":"Class members annotated with \"@VisibleForTesting\" should not be accessed from production code","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions have been relaxed more than necessary for the API\nto allow for easier unit testing.\u003c/p\u003e\n\u003cp\u003eAccess to such methods, fields and classes only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in\nproduction code. In production code these methods should be treated as if they are private.\u003c/p\u003e\n\u003cp\u003eSupported framework:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Guava: \u003ccode\u003ecom.google.common.annotations.VisibleForTesting\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e AssertJ: \u003ccode\u003eorg.assertj.core.util.VisibleForTesting\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Android: \u003ccode\u003eandroidx.annotation.VisibleForTesting\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Apache Flink: \u003ccode\u003eorg.apache.flink.annotation.VisibleForTesting\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eor any other annotation named \u003ccode\u003eVisibleForTesting\u003c/code\u003e\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n/** src/main/java/MyObject.java */\n\n@VisibleForTesting String foo;\n\n/** src/main/java/Service.java */\n\nnew MyObject().foo; // Noncompliant, foo is accessed from production code\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n/** src/main/java/MyObject.java */\n\n@VisibleForTesting String foo;\n\n/** src/test/java/MyObjectTest.java */\n\nnew MyObject().foo; // Compliant, foo is accessed from test code\n\u003c/pre\u003e","mdDesc":"\u003cp\u003e@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions have been relaxed more than necessary for the API\nto allow for easier unit testing.\u003c/p\u003e\n\u003cp\u003eAccess to such methods, fields and classes only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in\nproduction code. In production code these methods should be treated as if they are private.\u003c/p\u003e\n\u003cp\u003eSupported framework:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Guava: \u003ccode\u003ecom.google.common.annotations.VisibleForTesting\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e AssertJ: \u003ccode\u003eorg.assertj.core.util.VisibleForTesting\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Android: \u003ccode\u003eandroidx.annotation.VisibleForTesting\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Apache Flink: \u003ccode\u003eorg.apache.flink.annotation.VisibleForTesting\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eor any other annotation named \u003ccode\u003eVisibleForTesting\u003c/code\u003e\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n/** src/main/java/MyObject.java */\n\n@VisibleForTesting String foo;\n\n/** src/main/java/Service.java */\n\nnew MyObject().foo; // Noncompliant, foo is accessed from production code\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n/** src/main/java/MyObject.java */\n\n@VisibleForTesting String foo;\n\n/** src/test/java/MyObjectTest.java */\n\nnew MyObject().foo; // Compliant, foo is accessed from test code\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5803"]}},{"key":"java:S1448","repo":"java","name":"Classes should not have too many methods","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.\u003c/p\u003e","mdDesc":"\u003cp\u003eA class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"countNonpublicMethods","htmlDesc":"Whether or not to include non-public methods in the count.","defaultValue":"true","type":"BOOLEAN"},{"key":"maximumMethodThreshold","htmlDesc":"The maximum number of methods authorized in a class.","defaultValue":"35","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1h","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1h","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1448"]}},{"key":"java:S1449","repo":"java","name":"String operations should not rely on the default system locale","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eFailure to specify a locale when calling the methods \u003ccode\u003etoLowerCase()\u003c/code\u003e, \u003ccode\u003etoUpperCase()\u003c/code\u003e or \u003ccode\u003eformat()\u003c/code\u003e on\n\u003ccode\u003eString\u003c/code\u003e objects means the system default encoding will be used, possibly creating problems with international characters or number\nrepresentations. For instance with the Turkish language, when converting the small letter \u0027i\u0027 to upper case, the result is capital letter \u0027I\u0027 with a\ndot over it.\u003c/p\u003e\n\u003cp\u003eCase conversion without a locale may work fine in its \"home\" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it’s time to fix them. For locale-sensitive\nstrings, the correct locale should always be used, but \u003ccode\u003eLocale.ROOT\u003c/code\u003e can be used for case-insensitive ones.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nmyString.toLowerCase()\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nmyString.toLowerCase(Locale.TR)\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/4zdGBQ\"\u003eCERT, STR02-J.\u003c/a\u003e - Specify an appropriate locale when comparing locale-dependent data\n  \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eFailure to specify a locale when calling the methods \u003ccode\u003etoLowerCase()\u003c/code\u003e, \u003ccode\u003etoUpperCase()\u003c/code\u003e or \u003ccode\u003eformat()\u003c/code\u003e on\n\u003ccode\u003eString\u003c/code\u003e objects means the system default encoding will be used, possibly creating problems with international characters or number\nrepresentations. For instance with the Turkish language, when converting the small letter \u0027i\u0027 to upper case, the result is capital letter \u0027I\u0027 with a\ndot over it.\u003c/p\u003e\n\u003cp\u003eCase conversion without a locale may work fine in its \"home\" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it’s time to fix them. For locale-sensitive\nstrings, the correct locale should always be used, but \u003ccode\u003eLocale.ROOT\u003c/code\u003e can be used for case-insensitive ones.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nmyString.toLowerCase()\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nmyString.toLowerCase(Locale.TR)\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/4zdGBQ\"\u003eCERT, STR02-J.\u003c/a\u003e - Specify an appropriate locale when comparing locale-dependent data\n  \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","unpredictable"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1449"]}},{"key":"java:S1610","repo":"java","name":"Abstract classes without fields should be converted to interfaces","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWith Java 8’s \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e8\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWith Java 8’s \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e8\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1610"]}},{"key":"java:S1612","repo":"java","name":"Lambdas should be replaced with method references","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eMethod/constructor references are commonly agreed to be, most of the time, more compact and readable than using lambdas, and are therefore\npreferred.\u003c/p\u003e\n\u003cp\u003eIn some rare cases, when it is not clear from the context what kind of function is being described and reference would not increase the clarity, it\nmight be fine to keep the lambda.\u003c/p\u003e\n\u003cp\u003eSimilarly, \u003ccode\u003enull\u003c/code\u003e checks can be replaced with references to the \u003ccode\u003eObjects::isNull\u003c/code\u003e and \u003ccode\u003eObjects::nonNull\u003c/code\u003e methods,\n\u003ccode\u003ecasts\u003c/code\u003e can be replaced with \u003ccode\u003eSomeClass.class::cast\u003c/code\u003e and \u003ccode\u003einstanceof\u003c/code\u003e can be replaced with\n\u003ccode\u003eSomeClass.class::isInstance\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e8\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass A {\n  void process(List\u0026lt;A\u0026gt; list) {\n    list.stream()\n      .filter(a -\u0026gt; a instanceof B)\n      .map(a -\u0026gt; (B) a)\n      .map(b -\u0026gt; b.\u0026lt;String\u0026gt;getObject())\n      .forEach(b -\u0026gt; { System.out.println(b); });\n  }\n}\n\nclass B extends A {\n  \u0026lt;T\u0026gt; T getObject() {\n    return null;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass A {\n  void process(List\u0026lt;A\u0026gt; list) {\n    list.stream()\n      .filter(B.class::isInstance)\n      .map(B.class::cast)\n      .map(B::\u0026lt;String\u0026gt;getObject)\n      .forEach(System.out::println);\n  }\n}\n\nclass B extends A {\n  \u0026lt;T\u0026gt; T getObject() {\n    return null;\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eMethod/constructor references are commonly agreed to be, most of the time, more compact and readable than using lambdas, and are therefore\npreferred.\u003c/p\u003e\n\u003cp\u003eIn some rare cases, when it is not clear from the context what kind of function is being described and reference would not increase the clarity, it\nmight be fine to keep the lambda.\u003c/p\u003e\n\u003cp\u003eSimilarly, \u003ccode\u003enull\u003c/code\u003e checks can be replaced with references to the \u003ccode\u003eObjects::isNull\u003c/code\u003e and \u003ccode\u003eObjects::nonNull\u003c/code\u003e methods,\n\u003ccode\u003ecasts\u003c/code\u003e can be replaced with \u003ccode\u003eSomeClass.class::cast\u003c/code\u003e and \u003ccode\u003einstanceof\u003c/code\u003e can be replaced with\n\u003ccode\u003eSomeClass.class::isInstance\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e8\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass A {\n  void process(List\u0026lt;A\u0026gt; list) {\n    list.stream()\n      .filter(a -\u0026gt; a instanceof B)\n      .map(a -\u0026gt; (B) a)\n      .map(b -\u0026gt; b.\u0026lt;String\u0026gt;getObject())\n      .forEach(b -\u0026gt; { System.out.println(b); });\n  }\n}\n\nclass B extends A {\n  \u0026lt;T\u0026gt; T getObject() {\n    return null;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass A {\n  void process(List\u0026lt;A\u0026gt; list) {\n    list.stream()\n      .filter(B.class::isInstance)\n      .map(B.class::cast)\n      .map(B::\u0026lt;String\u0026gt;getObject)\n      .forEach(System.out::println);\n  }\n}\n\nclass B extends A {\n  \u0026lt;T\u0026gt; T getObject() {\n    return null;\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1612"]}},{"key":"java:S1700","repo":"java","name":"A field should not duplicate the name of its containing class","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIt’s confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.\u003c/p\u003e\n\u003cp\u003eBest practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo \u003d new Foo();\nfoo.getFoo() // what does this return?\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo \u003d new Foo();\nfoo.getName()\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type.\u003c/p\u003e\n\u003cpre\u003e\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo\u003d\u003dnull) {\n      foo \u003d new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIt’s confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.\u003c/p\u003e\n\u003cp\u003eBest practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo \u003d new Foo();\nfoo.getFoo() // what does this return?\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo \u003d new Foo();\nfoo.getName()\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type.\u003c/p\u003e\n\u003cpre\u003e\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo\u003d\u003dnull) {\n      foo \u003d new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1700"]}},{"key":"java:S1820","repo":"java","name":"Classes should not have too many fields","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.\u003c/p\u003e","mdDesc":"\u003cp\u003eA class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"countNonpublicFields","htmlDesc":"Whether or not to include non-public fields in the count","defaultValue":"true","type":"BOOLEAN"},{"key":"maximumFieldThreshold","htmlDesc":"The maximum number of fields","defaultValue":"20","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1h","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1h","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1820"]}},{"key":"java:S1821","repo":"java","name":"\"switch\" statements and expressions should not be nested","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eNested \u003ccode\u003eswitch\u003c/code\u003e structures are difficult to understand because you can easily confuse the cases of an inner \u003ccode\u003eswitch\u003c/code\u003e as\nbelonging to an outer statement or expression. Therefore nested \u003ccode\u003eswitch\u003c/code\u003e statements and expressions should be avoided.\u003c/p\u003e\n\u003cp\u003eSpecifically, you should structure your code to avoid the need for nested \u003ccode\u003eswitch\u003c/code\u003e statements or expressions, but if you cannot, then\nconsider moving the inner \u003ccode\u003eswitch\u003c/code\u003e to another method.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      switch (m) {  // Noncompliant; nested switch\n        // ...\n      }\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      bar(m);\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n\nvoid bar(int m){\n  switch(m) {\n    // ...\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eNested \u003ccode\u003eswitch\u003c/code\u003e structures are difficult to understand because you can easily confuse the cases of an inner \u003ccode\u003eswitch\u003c/code\u003e as\nbelonging to an outer statement or expression. Therefore nested \u003ccode\u003eswitch\u003c/code\u003e statements and expressions should be avoided.\u003c/p\u003e\n\u003cp\u003eSpecifically, you should structure your code to avoid the need for nested \u003ccode\u003eswitch\u003c/code\u003e statements or expressions, but if you cannot, then\nconsider moving the inner \u003ccode\u003eswitch\u003c/code\u003e to another method.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      switch (m) {  // Noncompliant; nested switch\n        // ...\n      }\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      bar(m);\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n\nvoid bar(int m){\n  switch(m) {\n    // ...\n  }\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1821"]}},{"key":"java:S1858","repo":"java","name":"\"toString()\" should never be called on a String object","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eInvoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString message \u003d \"hello world\";\nSystem.out.println(message.toString()); // Noncompliant;\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString message \u003d \"hello world\";\nSystem.out.println(message);\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eInvoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString message \u003d \"hello world\";\nSystem.out.println(message.toString()); // Noncompliant;\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString message \u003d \"hello world\";\nSystem.out.println(message);\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy","finding"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1858"]}},{"key":"java:S1905","repo":"java","name":"Redundant casts should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUnnecessary casting expressions make the code harder to read and understand.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void example() {\n  for (Foo obj : (List\u0026lt;Foo\u0026gt;) getFoos()) {  // Noncompliant; cast unnecessary because List\u0026lt;Foo\u0026gt; is what\u0027s returned\n    //...\n  }\n}\n\npublic List\u0026lt;Foo\u0026gt; getFoos() {\n  return this.foos;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List\u0026lt;Foo\u0026gt; getFoos() {\n  return this.foos;\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eCasting may be required to distinguish the method to call in the case of overloading:\u003c/p\u003e\n\u003cpre\u003e\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b \u003d new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eUnnecessary casting expressions make the code harder to read and understand.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void example() {\n  for (Foo obj : (List\u0026lt;Foo\u0026gt;) getFoos()) {  // Noncompliant; cast unnecessary because List\u0026lt;Foo\u0026gt; is what\u0027s returned\n    //...\n  }\n}\n\npublic List\u0026lt;Foo\u0026gt; getFoos() {\n  return this.foos;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List\u0026lt;Foo\u0026gt; getFoos() {\n  return this.foos;\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eCasting may be required to distinguish the method to call in the case of overloading:\u003c/p\u003e\n\u003cpre\u003e\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b \u003d new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy","redundant"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1905"]}},{"key":"java:S1939","repo":"java","name":"Extensions and implementations should not be redundant","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAll classes extend \u003ccode\u003eObject\u003c/code\u003e implicitly. Doing so explicitly is redundant.\u003c/p\u003e\n\u003cp\u003eFurther, declaring the implementation of an interface \u003cem\u003eand\u003c/em\u003e one if its parents is also redundant. If you implement the interface, you also\nimplicitly implement its parents and there’s no need to do so explicitly.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo\n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAll classes extend \u003ccode\u003eObject\u003c/code\u003e implicitly. Doing so explicitly is redundant.\u003c/p\u003e\n\u003cp\u003eFurther, declaring the implementation of an interface \u003cem\u003eand\u003c/em\u003e one if its parents is also redundant. If you implement the interface, you also\nimplicitly implement its parents and there’s no need to do so explicitly.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo\n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1939"]}},{"key":"java:S1940","repo":"java","name":"Boolean checks should not be inverted","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif ( !(a \u003d\u003d 2)) { ...}  // Noncompliant\nboolean b \u003d !(i \u0026lt; 10);  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (a !\u003d 2) { ...}\nboolean b \u003d (i \u0026gt;\u003d 10);\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIt is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif ( !(a \u003d\u003d 2)) { ...}  // Noncompliant\nboolean b \u003d !(i \u0026lt; 10);  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (a !\u003d 2) { ...}\nboolean b \u003d (i \u0026gt;\u003d 10);\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1940"]}},{"key":"java:S1941","repo":"java","name":"Variables should not be declared before they are relevant","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eFor the sake of clarity, variables should be declared as close to where they’re used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean isConditionMet(int a, int b) {\n  int difference \u003d a - b;\n  MyClass foo \u003d new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference \u0026lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean isConditionMet(int a, int b) {\n  int difference \u003d a - b;\n\n  if (difference \u0026lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo \u003d new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eFor the sake of clarity, variables should be declared as close to where they’re used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean isConditionMet(int a, int b) {\n  int difference \u003d a - b;\n  MyClass foo \u003d new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference \u0026lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean isConditionMet(int a, int b) {\n  int difference \u003d a - b;\n\n  if (difference \u0026lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo \u003d new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1941"]}},{"key":"java:S1942","repo":"java","name":"Simple class names should be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eJava’s \u003ccode\u003eimport\u003c/code\u003e mechanism allows the use of simple class names. Therefore, using a class\u0027 fully qualified name in a file that\n\u003ccode\u003eimport\u003c/code\u003es the class is redundant and confusing.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List\u0026lt;String\u0026gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList\u0026lt;String\u0026gt; myList;\nTimestamp tStamp;\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eJava’s \u003ccode\u003eimport\u003c/code\u003e mechanism allows the use of simple class names. Therefore, using a class\u0027 fully qualified name in a file that\n\u003ccode\u003eimport\u003c/code\u003es the class is redundant and confusing.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List\u0026lt;String\u0026gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList\u0026lt;String\u0026gt; myList;\nTimestamp tStamp;\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing","redundant"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1942"]}},{"key":"java:S1943","repo":"java","name":"Classes and methods that rely on the default system encoding should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUsing classes and methods that rely on the default system encoding can result in code that works fine in its \"home\" environment. But that code may\nbreak for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to\nreproduce when it’s time to fix them.\u003c/p\u003e\n\u003cp\u003eThis rule detects uses of the following classes and methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eFileReader\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eFileWriter\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e String constructors with a \u003ccode\u003ebyte[]\u003c/code\u003e argument but no \u003ccode\u003eCharset\u003c/code\u003e argument\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eString(byte[] bytes)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eString(byte[] bytes, int offset, int length)\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eString.getBytes()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eString.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eInputStreamReader(InputStream in)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eOutputStreamWriter(OutputStream out)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eByteArrayOutputStream.toString()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Some \u003ccode\u003eFormatter\u003c/code\u003e constructors\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eFormatter(String fileName)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eFormatter(File file)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eFormatter(OutputStream os)\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Some \u003ccode\u003eScanner\u003c/code\u003e constructors\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eScanner(File source)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eScanner(Path source)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eScanner(InputStream source)\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Some \u003ccode\u003ePrintStream\u003c/code\u003e constructors\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003ePrintStream(File file)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003ePrintStream(OutputStream out)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003ePrintStream(OutputStream out, boolean autoFlush)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003ePrintStream(String fileName)\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Some \u003ccode\u003ePrintWriter\u003c/code\u003e constructors\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003ePrintWriter(File file)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003ePrintWriter(OutputStream out)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003ePrintWriter(OutputStream out, boolean autoFlush)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003ePrintWriter(String fileName)\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit\n  the encoding argument\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.copy(InputStream, Writer)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.copy(Reader, OutputStream)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.readLines(InputStream)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.toByteArray(Reader)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.toByteArray(String)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.toCharArray(InputStream)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.toString(byte[])\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.toString(URI)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.toString(URL)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.write(char[], OutputStream)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.write(CharSequence, OutputStream)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.writeLines(Collection, String, OutputStream)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eFileUtils.readFileToString(File)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eFileUtils.readLines(File)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eFileUtils.write(File, CharSequence)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eFileUtils.write(File, CharSequence, boolean)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eFileUtils.writeStringToFile(File, String)\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/pzdGBQ\"\u003eCERT, STR04-J.\u003c/a\u003e - Use compatible character encodings when communicating string data\n  between JVMs \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/ujZGBQ\"\u003eCERT, STR50-J.\u003c/a\u003e - Use the appropriate method for counting characters in a string\n  \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eUsing classes and methods that rely on the default system encoding can result in code that works fine in its \"home\" environment. But that code may\nbreak for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to\nreproduce when it’s time to fix them.\u003c/p\u003e\n\u003cp\u003eThis rule detects uses of the following classes and methods:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eFileReader\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eFileWriter\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e String constructors with a \u003ccode\u003ebyte[]\u003c/code\u003e argument but no \u003ccode\u003eCharset\u003c/code\u003e argument\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eString(byte[] bytes)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eString(byte[] bytes, int offset, int length)\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eString.getBytes()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eString.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eInputStreamReader(InputStream in)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eOutputStreamWriter(OutputStream out)\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eByteArrayOutputStream.toString()\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e Some \u003ccode\u003eFormatter\u003c/code\u003e constructors\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eFormatter(String fileName)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eFormatter(File file)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eFormatter(OutputStream os)\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Some \u003ccode\u003eScanner\u003c/code\u003e constructors\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eScanner(File source)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eScanner(Path source)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eScanner(InputStream source)\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Some \u003ccode\u003ePrintStream\u003c/code\u003e constructors\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003ePrintStream(File file)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003ePrintStream(OutputStream out)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003ePrintStream(OutputStream out, boolean autoFlush)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003ePrintStream(String fileName)\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e Some \u003ccode\u003ePrintWriter\u003c/code\u003e constructors\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003ePrintWriter(File file)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003ePrintWriter(OutputStream out)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003ePrintWriter(OutputStream out, boolean autoFlush)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003ePrintWriter(String fileName)\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n  \u003cli\u003e methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit\n  the encoding argument\n    \u003cul\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.copy(InputStream, Writer)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.copy(Reader, OutputStream)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.readLines(InputStream)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.toByteArray(Reader)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.toByteArray(String)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.toCharArray(InputStream)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.toString(byte[])\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.toString(URI)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.toString(URL)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.write(char[], OutputStream)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.write(CharSequence, OutputStream)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eIOUtils.writeLines(Collection, String, OutputStream)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eFileUtils.readFileToString(File)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eFileUtils.readLines(File)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eFileUtils.write(File, CharSequence)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eFileUtils.write(File, CharSequence, boolean)\u003c/code\u003e \u003c/li\u003e\n      \u003cli\u003e \u003ccode\u003eFileUtils.writeStringToFile(File, String)\u003c/code\u003e \u003c/li\u003e\n    \u003c/ul\u003e  \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/pzdGBQ\"\u003eCERT, STR04-J.\u003c/a\u003e - Use compatible character encodings when communicating string data\n  between JVMs \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/ujZGBQ\"\u003eCERT, STR50-J.\u003c/a\u003e - Use the appropriate method for counting characters in a string\n  \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","i18n","unpredictable"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1943"]}},{"key":"java:S1948","repo":"java","name":"Fields in a \"Serializable\" class should either be transient or serializable","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eFields in a \u003ccode\u003eSerializable\u003c/code\u003e class must themselves be either \u003ccode\u003eSerializable\u003c/code\u003e or \u003ccode\u003etransient\u003c/code\u003e even if the class is\nnever explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly\n\u003ccode\u003eSerializable\u003c/code\u003e object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In\ngeneral a \u003ccode\u003eSerializable\u003c/code\u003e class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue on non-\u003ccode\u003eSerializable\u003c/code\u003e fields, and on collection fields when they are not \u003ccode\u003eprivate\u003c/code\u003e (because they\ncould be assigned non-\u003ccode\u003eSerializable\u003c/code\u003e values externally), and when they are assigned non-\u003ccode\u003eSerializable\u003c/code\u003e types within the\nclass.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID \u003d 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn\u0027t serializable\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Address implements Serializable {\n  private static final long serialVersionUID \u003d 2405172041950251807L;\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID \u003d 1905122041950251207L;\n\n  private String name;\n  private Address address;\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThe alternative to making all members \u003ccode\u003eserializable\u003c/code\u003e or \u003ccode\u003etransient\u003c/code\u003e is to implement special methods which take on the\nresponsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:\u003c/p\u003e\n\u003cpre\u003e\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/594.html\"\u003eMITRE, CWE-594\u003c/a\u003e - Saving Unserializable Objects to Disk \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\"\u003eOracle Java 6, Serializable\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\"\u003eOracle Java 7, Serializable\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eFields in a \u003ccode\u003eSerializable\u003c/code\u003e class must themselves be either \u003ccode\u003eSerializable\u003c/code\u003e or \u003ccode\u003etransient\u003c/code\u003e even if the class is\nnever explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly\n\u003ccode\u003eSerializable\u003c/code\u003e object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In\ngeneral a \u003ccode\u003eSerializable\u003c/code\u003e class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue on non-\u003ccode\u003eSerializable\u003c/code\u003e fields, and on collection fields when they are not \u003ccode\u003eprivate\u003c/code\u003e (because they\ncould be assigned non-\u003ccode\u003eSerializable\u003c/code\u003e values externally), and when they are assigned non-\u003ccode\u003eSerializable\u003c/code\u003e types within the\nclass.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID \u003d 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn\u0027t serializable\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Address implements Serializable {\n  private static final long serialVersionUID \u003d 2405172041950251807L;\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID \u003d 1905122041950251207L;\n\n  private String name;\n  private Address address;\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThe alternative to making all members \u003ccode\u003eserializable\u003c/code\u003e or \u003ccode\u003etransient\u003c/code\u003e is to implement special methods which take on the\nresponsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:\u003c/p\u003e\n\u003cpre\u003e\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/594.html\"\u003eMITRE, CWE-594\u003c/a\u003e - Saving Unserializable Objects to Disk \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\"\u003eOracle Java 6, Serializable\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\"\u003eOracle Java 7, Serializable\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["cwe","serialization"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1948"]}},{"key":"java:S3626","repo":"java","name":"Jump statements should not be redundant","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eJump statements such as \u003ccode\u003ereturn\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e let you change the default flow of program execution, but jump statements\nthat direct the control flow to the original direction are just a waste of keystrokes.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void foo() {\n  while (condition1) {\n    if (condition2) {\n      continue; // Noncompliant\n    } else {\n      doTheThing();\n    }\n  }\n  return; // Noncompliant; this is a void method\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void foo() {\n  while (condition1) {\n    if (!condition2) {\n      doTheThing();\n    }\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eJump statements such as \u003ccode\u003ereturn\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e let you change the default flow of program execution, but jump statements\nthat direct the control flow to the original direction are just a waste of keystrokes.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void foo() {\n  while (condition1) {\n    if (condition2) {\n      continue; // Noncompliant\n    } else {\n      doTheThing();\n    }\n  }\n  return; // Noncompliant; this is a void method\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void foo() {\n  while (condition1) {\n    if (!condition2) {\n      doTheThing();\n    }\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy","redundant"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3626"]}},{"key":"java:S4065","repo":"java","name":"\"ThreadLocal.withInitial\" should be preferred","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eJava 8 introduced \u003ccode\u003eThreadLocal.withInitial\u003c/code\u003e which is a simpler alternative to creating an anonymous inner class to initialise a\n\u003ccode\u003eThreadLocal\u003c/code\u003e instance.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003eThreadLocal\u003c/code\u003e anonymous inner class can be replaced by a call to\n\u003ccode\u003eThreadLocal.withInitial\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nThreadLocal\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; myThreadLocal \u003d\n    new ThreadLocal\u0026lt;List\u0026lt;String\u0026gt;\u0026gt;() { // Noncompliant\n        @Override\n        protected List\u0026lt;String\u0026gt; initialValue() {\n            return new ArrayList\u0026lt;String\u0026gt;();\n        }\n    };\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nThreadLocal\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; myThreadLocal \u003d ThreadLocal.withInitial(ArrayList::new);\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eJava 8 introduced \u003ccode\u003eThreadLocal.withInitial\u003c/code\u003e which is a simpler alternative to creating an anonymous inner class to initialise a\n\u003ccode\u003eThreadLocal\u003c/code\u003e instance.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003eThreadLocal\u003c/code\u003e anonymous inner class can be replaced by a call to\n\u003ccode\u003eThreadLocal.withInitial\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nThreadLocal\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; myThreadLocal \u003d\n    new ThreadLocal\u0026lt;List\u0026lt;String\u0026gt;\u0026gt;() { // Noncompliant\n        @Override\n        protected List\u0026lt;String\u0026gt; initialValue() {\n            return new ArrayList\u0026lt;String\u0026gt;();\n        }\n    };\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nThreadLocal\u0026lt;List\u0026lt;String\u0026gt;\u0026gt; myThreadLocal \u003d ThreadLocal.withInitial(ArrayList::new);\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4065"]}},{"key":"java:S4087","repo":"java","name":"\"close()\" calls should not be redundant","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eJava 7’s try-with-resources structure automatically handles closing the resources that the \u003ccode\u003etry\u003c/code\u003e itself opens. Thus, adding an explicit\n\u003ccode\u003eclose()\u003c/code\u003e call is redundant and potentially confusing.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry (PrintWriter writer \u003d new PrintWriter(process.getOutputStream())) {\n  String contents \u003d file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n  writer.close();  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry (PrintWriter writer \u003d new PrintWriter(process.getOutputStream())) {\n  String contents \u003d file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eJava 7’s try-with-resources structure automatically handles closing the resources that the \u003ccode\u003etry\u003c/code\u003e itself opens. Thus, adding an explicit\n\u003ccode\u003eclose()\u003c/code\u003e call is redundant and potentially confusing.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry (PrintWriter writer \u003d new PrintWriter(process.getOutputStream())) {\n  String contents \u003d file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n  writer.close();  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry (PrintWriter writer \u003d new PrintWriter(process.getOutputStream())) {\n  String contents \u003d file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["redundant"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4087"]}},{"key":"java:S6019","repo":"java","name":"Reluctant quantifiers in regular expressions should be followed by an expression that can\u0027t match the empty string","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen a reluctant quantifier (such as \u003ccode\u003e*?\u003c/code\u003e or \u003ccode\u003e+?\u003c/code\u003e) is followed by a pattern that can match the empty string or directly by\nthe end of the regex, it will always match the empty string when used with methods that find partial matches (such as \u003ccode\u003efind\u003c/code\u003e,\n\u003ccode\u003ereplaceAll\u003c/code\u003e, \u003ccode\u003esplit\u003c/code\u003e etc.).\u003c/p\u003e\n\u003cp\u003eSimilarly, when used with methods that find full matches, a reluctant quantifier that’s followed directly by the end of the regex (or a pattern\nthat always matches the empty string, such as \u003ccode\u003e()\u003c/code\u003e) behaves indistinguishably from a greedy quantifier while being less efficient.\u003c/p\u003e\n\u003cp\u003eThis is likely a sign that the regex does not work as intended.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n\"start123endstart456\".replaceAll(\"start\\\\w*?(end)?\", \"x\"); // Noncompliant. In contrast to what one would expect, the result is not \"xx\".\nstr.matches(\"\\\\d*?\"); // Noncompliant. Matches the same as \"\\d*\", but will backtrack in every position.\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n\"start123endstart456\".replaceAll(\"start\\\\w*?(end|$)\", \"x\"); // Result is \"xx\".\nstr.matches(\"\\\\d*\");\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen a reluctant quantifier (such as \u003ccode\u003e*?\u003c/code\u003e or \u003ccode\u003e+?\u003c/code\u003e) is followed by a pattern that can match the empty string or directly by\nthe end of the regex, it will always match the empty string when used with methods that find partial matches (such as \u003ccode\u003efind\u003c/code\u003e,\n\u003ccode\u003ereplaceAll\u003c/code\u003e, \u003ccode\u003esplit\u003c/code\u003e etc.).\u003c/p\u003e\n\u003cp\u003eSimilarly, when used with methods that find full matches, a reluctant quantifier that’s followed directly by the end of the regex (or a pattern\nthat always matches the empty string, such as \u003ccode\u003e()\u003c/code\u003e) behaves indistinguishably from a greedy quantifier while being less efficient.\u003c/p\u003e\n\u003cp\u003eThis is likely a sign that the regex does not work as intended.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n\"start123endstart456\".replaceAll(\"start\\\\w*?(end)?\", \"x\"); // Noncompliant. In contrast to what one would expect, the result is not \"xx\".\nstr.matches(\"\\\\d*?\"); // Noncompliant. Matches the same as \"\\d*\", but will backtrack in every position.\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n\"start123endstart456\".replaceAll(\"start\\\\w*?(end|$)\", \"x\"); // Result is \"xx\".\nstr.matches(\"\\\\d*\");\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["regex"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6019"]}},{"key":"java:S6035","repo":"java","name":"Single-character alternations in regular expressions should be replaced with character classes","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be\npreferred because it is more efficient and can even help prevent stack overflows when used inside a repetition (see rule \u003ca href\u003d\u0027/coding_rules#rule_key\u003djava%3AS5998\u0027\u003eS5998\u003c/a\u003e).\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nPattern.compile(\"a|b|c\"); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nPattern.compile(\"[abc]\");\n// or\nPattern.compile(\"[a-c]\");\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be\npreferred because it is more efficient and can even help prevent stack overflows when used inside a repetition (see rule {rule:java:S5998}).\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nPattern.compile(\"a|b|c\"); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nPattern.compile(\"[abc]\");\n// or\nPattern.compile(\"[a-c]\");\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["regex"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6035"]}},{"key":"java:S6126","repo":"java","name":"String multiline concatenation should be replaced with Text Blocks","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn Java 15 Text Blocks are now official and can be used. The most common pattern for multiline strings in Java \u0026lt; 15 was to write String\nconcatenation. Now it’s possible to do it in a more natural way using Text Blocks.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString textBlock \u003d\n               \"\u0026lt;html\u0026gt;\\n\" +\n               \"    \u0026lt;body\u0026gt;\\n\" +\n               \"        \u0026lt;tag\u0026gt;\\n\" +\n               \"        \u0026lt;/tag\u0026gt;\\n\" +\n               \"    \u0026lt;/body\u0026gt;\\n\" +\n               \"\u0026lt;/html\u0026gt;\";\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString textBlock \u003d \"\"\"\n        \u0026lt;html\u0026gt;\n            \u0026lt;body\u0026gt;\n                \u0026lt;tag\u0026gt;\n                \u0026lt;/tag\u0026gt;\n            \u0026lt;/body\u0026gt;\n        \u0026lt;/html\u0026gt;\"\"\";\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/378\"\u003eJEP 378: Text Blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\"\u003eProgrammer’s Guide To Text Blocks\u003c/a\u003e, by Jim Laskey and Stuart\n  Marks \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eIn Java 15 Text Blocks are now official and can be used. The most common pattern for multiline strings in Java \u0026lt; 15 was to write String\nconcatenation. Now it’s possible to do it in a more natural way using Text Blocks.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString textBlock \u003d\n               \"\u0026lt;html\u0026gt;\\n\" +\n               \"    \u0026lt;body\u0026gt;\\n\" +\n               \"        \u0026lt;tag\u0026gt;\\n\" +\n               \"        \u0026lt;/tag\u0026gt;\\n\" +\n               \"    \u0026lt;/body\u0026gt;\\n\" +\n               \"\u0026lt;/html\u0026gt;\";\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString textBlock \u003d \"\"\"\n        \u0026lt;html\u0026gt;\n            \u0026lt;body\u0026gt;\n                \u0026lt;tag\u0026gt;\n                \u0026lt;/tag\u0026gt;\n            \u0026lt;/body\u0026gt;\n        \u0026lt;/html\u0026gt;\"\"\";\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/378\"\u003eJEP 378: Text Blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\"\u003eProgrammer’s Guide To Text Blocks\u003c/a\u003e, by Jim Laskey and Stuart\n  Marks \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java15"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6126"]}},{"key":"java:S124","repo":"java","name":"Track comments matching a regular expression","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThis rule template can be used to create rules which will be triggered when the full content of a comment matches a given regular expression. Note\nthat the regular expression should be expressed using the dotall format (where the \u003ccode\u003e.\u003c/code\u003e character matches any character).\u003c/p\u003e\n\u003cp\u003eFor example, one can create a rule with the regular expression \u003ccode\u003e.*REVIEW.*\u003c/code\u003e to match all comment containing \"REVIEW\".\u003c/p\u003e\n\u003cp\u003eNote that, in order to match REVIEW regardless of the case, the \u003ccode\u003e(?i)\u003c/code\u003e modifier should be prepended to the expression, as in\n\u003ccode\u003e(?i).*REVIEW.*\u003c/code\u003e.\u003c/p\u003e","mdDesc":"\u003cp\u003eThis rule template can be used to create rules which will be triggered when the full content of a comment matches a given regular expression. Note\nthat the regular expression should be expressed using the dotall format (where the \u003ccode\u003e.\u003c/code\u003e character matches any character).\u003c/p\u003e\n\u003cp\u003eFor example, one can create a rule with the regular expression \u003ccode\u003e.*REVIEW.*\u003c/code\u003e to match all comment containing \"REVIEW\".\u003c/p\u003e\n\u003cp\u003eNote that, in order to match REVIEW regardless of the case, the \u003ccode\u003e(?i)\u003c/code\u003e modifier should be prepended to the expression, as in\n\u003ccode\u003e(?i).*REVIEW.*\u003c/code\u003e.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":true,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[{"key":"regularExpression","htmlDesc":"The regular expression","type":"STRING"},{"key":"message","htmlDesc":"The issue message","defaultValue":"The regular expression matches this comment.","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"0min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"0min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"0min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"0min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S124"]}},{"key":"java:S125","repo":"java","name":"Sections of code should not be commented out","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eProgrammers should not comment out code as it bloats programs and reduces readability.\u003c/p\u003e\n\u003cp\u003eUnused code should be deleted and can be retrieved from source control history if required.\u003c/p\u003e","mdDesc":"\u003cp\u003eProgrammers should not comment out code as it bloats programs and reduces readability.\u003c/p\u003e\n\u003cp\u003eUnused code should be deleted and can be retrieved from source control history if required.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:CommentedOutCodeLine"]}},{"key":"java:S126","repo":"java","name":"\"if ... else if\" constructs should end with \"else\" clauses","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThis rule applies whenever an \u003ccode\u003eif\u003c/code\u003e statement is followed by one or more \u003ccode\u003eelse if\u003c/code\u003e statements; the final \u003ccode\u003eelse if\u003c/code\u003e\nshould be followed by an \u003ccode\u003eelse\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003eelse\u003c/code\u003e statement is defensive programming.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eelse\u003c/code\u003e statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final \u003ccode\u003edefault\u003c/code\u003e clause in a \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0) {\n  doSomething();\n} else if (x \u003d\u003d 1) {\n  doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0) {\n  doSomething();\n} else if (x \u003d\u003d 1) {\n  doSomethingElse();\n} else {\n  throw new IllegalStateException();\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/RtYxBQ\"\u003eCERT, MSC01-C.\u003c/a\u003e - Strive for logical completeness \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/jzZGBQ\"\u003eCERT, MSC57-J.\u003c/a\u003e - Strive for logical completeness \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThis rule applies whenever an \u003ccode\u003eif\u003c/code\u003e statement is followed by one or more \u003ccode\u003eelse if\u003c/code\u003e statements; the final \u003ccode\u003eelse if\u003c/code\u003e\nshould be followed by an \u003ccode\u003eelse\u003c/code\u003e statement.\u003c/p\u003e\n\u003cp\u003eThe requirement for a final \u003ccode\u003eelse\u003c/code\u003e statement is defensive programming.\u003c/p\u003e\n\u003cp\u003eThe \u003ccode\u003eelse\u003c/code\u003e statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final \u003ccode\u003edefault\u003c/code\u003e clause in a \u003ccode\u003eswitch\u003c/code\u003e statement.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0) {\n  doSomething();\n} else if (x \u003d\u003d 1) {\n  doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (x \u003d\u003d 0) {\n  doSomething();\n} else if (x \u003d\u003d 1) {\n  doSomethingElse();\n} else {\n  throw new IllegalStateException();\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/RtYxBQ\"\u003eCERT, MSC01-C.\u003c/a\u003e - Strive for logical completeness \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/jzZGBQ\"\u003eCERT, MSC57-J.\u003c/a\u003e - Strive for logical completeness \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S126"]}},{"key":"java:S127","repo":"java","name":"\"for\" loop stop conditions should be invariant","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA \u003ccode\u003efor\u003c/code\u003e loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins.\u003c/p\u003e\n\u003cp\u003eStop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.\u003c/p\u003e\n\u003cp\u003eThis rule tracks three types of non-invariant stop conditions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When the loop counters are updated in the body of the \u003ccode\u003efor\u003c/code\u003e loop \u003c/li\u003e\n  \u003cli\u003e When the stop condition depend upon a method call \u003c/li\u003e\n  \u003cli\u003e When the stop condition depends on an object property, since such properties could change during the execution of the loop. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfor (int i \u003d 0; i \u0026lt; 10; i++) {\n  ...\n  i \u003d i - 1; // Noncompliant; counter updated in the body of the loop\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nfor (int i \u003d 0; i \u0026lt; 10; i++) {...}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eA \u003ccode\u003efor\u003c/code\u003e loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins.\u003c/p\u003e\n\u003cp\u003eStop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.\u003c/p\u003e\n\u003cp\u003eThis rule tracks three types of non-invariant stop conditions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e When the loop counters are updated in the body of the \u003ccode\u003efor\u003c/code\u003e loop \u003c/li\u003e\n  \u003cli\u003e When the stop condition depend upon a method call \u003c/li\u003e\n  \u003cli\u003e When the stop condition depends on an object property, since such properties could change during the execution of the loop. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfor (int i \u003d 0; i \u0026lt; 10; i++) {\n  ...\n  i \u003d i - 1; // Noncompliant; counter updated in the body of the loop\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nfor (int i \u003d 0; i \u0026lt; 10; i++) {...}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:ForLoopCounterChangedCheck"]}},{"key":"java:S128","repo":"java","name":"Switch cases should end with an unconditional \"break\" statement","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both \u0027doSomething()\u0027 and \u0027doSomethingElse()\u0027 will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule is relaxed in the following cases:\u003c/p\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of a fallthrough comment\n    // fallthrough\n  case 3:                                // Use of return statement\n    return;\n  case 4:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/484.html\"\u003eMITRE, CWE-484\u003c/a\u003e - Omitted Break Statement in Switch \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/ldYxBQ\"\u003eCERT, MSC17-C.\u003c/a\u003e - Finish every set of statements associated with a case label with a\n  break statement \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/1DdGBQ\"\u003eCERT, MSC52-J.\u003c/a\u003e - Finish every set of statements associated with a case label with a\n  break statement \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eWhen the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both \u0027doSomething()\u0027 and \u0027doSomethingElse()\u0027 will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule is relaxed in the following cases:\u003c/p\u003e\n\u003cpre\u003e\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of a fallthrough comment\n    // fallthrough\n  case 3:                                // Use of return statement\n    return;\n  case 4:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 5:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/484.html\"\u003eMITRE, CWE-484\u003c/a\u003e - Omitted Break Statement in Switch \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/ldYxBQ\"\u003eCERT, MSC17-C.\u003c/a\u003e - Finish every set of statements associated with a case label with a\n  break statement \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/1DdGBQ\"\u003eCERT, MSC52-J.\u003c/a\u003e - Finish every set of statements associated with a case label with a\n  break statement \u003c/li\u003e\n\u003c/ul\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe","suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S128"]}},{"key":"java:S131","repo":"java","name":"\"switch\" statements should have \"default\" clauses","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe requirement for a final \u003ccode\u003edefault\u003c/code\u003e clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eIf the \u003ccode\u003eswitch\u003c/code\u003e parameter is an \u003ccode\u003eEnum\u003c/code\u003e and if all the constants of this enum are used in the \u003ccode\u003ecase\u003c/code\u003e statements,\nthen no \u003ccode\u003edefault\u003c/code\u003e clause is expected.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\npublic enum Day {\n    SUNDAY, MONDAY\n}\n...\nswitch(day) {\n  case SUNDAY:\n    doSomething();\n    break;\n  case MONDAY:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/478.html\"\u003eMITRE, CWE-478\u003c/a\u003e - Missing Default Case in Switch Statement \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/RtYxBQ\"\u003eCERT, MSC01-C.\u003c/a\u003e - Strive for logical completeness \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThe requirement for a final \u003ccode\u003edefault\u003c/code\u003e clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eIf the \u003ccode\u003eswitch\u003c/code\u003e parameter is an \u003ccode\u003eEnum\u003c/code\u003e and if all the constants of this enum are used in the \u003ccode\u003ecase\u003c/code\u003e statements,\nthen no \u003ccode\u003edefault\u003c/code\u003e clause is expected.\u003c/p\u003e\n\u003cp\u003eExample:\u003c/p\u003e\n\u003cpre\u003e\npublic enum Day {\n    SUNDAY, MONDAY\n}\n...\nswitch(day) {\n  case SUNDAY:\n    doSomething();\n    break;\n  case MONDAY:\n    doSomethingElse();\n    break;\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/478.html\"\u003eMITRE, CWE-478\u003c/a\u003e - Missing Default Case in Switch Statement \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/RtYxBQ\"\u003eCERT, MSC01-C.\u003c/a\u003e - Strive for logical completeness \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:SwitchLastCaseIsDefaultCheck"]}},{"key":"java:S134","repo":"java","name":"Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eNested \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003eswitch\u003c/code\u003e, and \u003ccode\u003etry\u003c/code\u003e statements are key ingredients for making\nwhat’s known as \"Spaghetti code\".\u003c/p\u003e\n\u003cp\u003eSuch code is hard to read, refactor and therefore maintain.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default threshold of 3:\u003c/p\u003e\n\u003cpre\u003e\nif (condition1) {                  // Compliant - depth \u003d 1\n  /* ... */\n  if (condition2) {                // Compliant - depth \u003d 2\n    /* ... */\n    for(int i \u003d 0; i \u0026lt; 10; i++) {  // Compliant - depth \u003d 3, not exceeding the limit\n      /* ... */\n      if (condition4) {            // Noncompliant - depth \u003d 4\n        if (condition5) {          // Depth \u003d 5, exceeding the limit, but issues are only reported on depth \u003d 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eNested \u003ccode\u003eif\u003c/code\u003e, \u003ccode\u003efor\u003c/code\u003e, \u003ccode\u003ewhile\u003c/code\u003e, \u003ccode\u003eswitch\u003c/code\u003e, and \u003ccode\u003etry\u003c/code\u003e statements are key ingredients for making\nwhat’s known as \"Spaghetti code\".\u003c/p\u003e\n\u003cp\u003eSuch code is hard to read, refactor and therefore maintain.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default threshold of 3:\u003c/p\u003e\n\u003cpre\u003e\nif (condition1) {                  // Compliant - depth \u003d 1\n  /* ... */\n  if (condition2) {                // Compliant - depth \u003d 2\n    /* ... */\n    for(int i \u003d 0; i \u0026lt; 10; i++) {  // Compliant - depth \u003d 3, not exceeding the limit\n      /* ... */\n      if (condition4) {            // Noncompliant - depth \u003d 4\n        if (condition5) {          // Depth \u003d 5, exceeding the limit, but issues are only reported on depth \u003d 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"max","htmlDesc":"Maximum allowed control flow statement nesting depth.","defaultValue":"3","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S134"]}},{"key":"java:S1602","repo":"java","name":"Lambdas containing only one statement should not nest this statement in a block","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e8\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nx -\u0026gt; {System.out.println(x+1);}\n(a, b) -\u0026gt; { return a+b; }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nx -\u0026gt; System.out.println(x+1)\n(a, b) -\u0026gt; a+b    //For return statement, the return keyword should also be dropped\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThere are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e8\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nx -\u0026gt; {System.out.println(x+1);}\n(a, b) -\u0026gt; { return a+b; }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nx -\u0026gt; System.out.println(x+1)\n(a, b) -\u0026gt; a+b    //For return statement, the return keyword should also be dropped\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1602"]}},{"key":"java:S1604","repo":"java","name":"Anonymous inner classes containing only one method should become lambdas","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eBefore Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.\u003c/p\u003e\n\u003cp\u003eWith Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e8\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nmyCollection.stream().map(new Mapper\u0026lt;String,String\u0026gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate\u0026lt;String\u0026gt; isEmpty \u003d new Predicate\u0026lt;String\u0026gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nmyCollection.stream().map(input -\u0026gt; new StringBuilder(input).reverse().toString());\n\nPredicate\u0026lt;String\u0026gt; isEmpty \u003d myString -\u0026gt; myString.isEmpty();\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eBefore Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.\u003c/p\u003e\n\u003cp\u003eWith Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e8\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nmyCollection.stream().map(new Mapper\u0026lt;String,String\u0026gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate\u0026lt;String\u0026gt; isEmpty \u003d new Predicate\u0026lt;String\u0026gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nmyCollection.stream().map(input -\u0026gt; new StringBuilder(input).reverse().toString());\n\nPredicate\u0026lt;String\u0026gt; isEmpty \u003d myString -\u0026gt; myString.isEmpty();\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1604"]}},{"key":"java:S1607","repo":"java","name":"JUnit4 @Ignored and JUnit5 @Disabled annotations should be used to disable tests and should provide a rationale","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for each ignored test that does not have any comment about why it is being skipped.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e For Junit4, this rule targets the @Ignore annotation. \u003c/li\u003e\n  \u003cli\u003e For Junit5, this rule targets the @Disabled annotation. \u003c/li\u003e\n  \u003cli\u003e Cases where assumeTrue(false) or assumeFalse(true) are used to skip tests are targeted as well. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Ignore  // Noncompliant\n@Test\npublic void testDoTheThing() {\n  // ...\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n@Test\npublic void testDoTheThing() {\n  Assume.assumeFalse(true); // Noncompliant\n  // ...\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Test\n@Ignore(\"See Ticket #1234\")\npublic void testDoTheThing() {\n  // ...\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for each ignored test that does not have any comment about why it is being skipped.\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e For Junit4, this rule targets the @Ignore annotation. \u003c/li\u003e\n  \u003cli\u003e For Junit5, this rule targets the @Disabled annotation. \u003c/li\u003e\n  \u003cli\u003e Cases where assumeTrue(false) or assumeFalse(true) are used to skip tests are targeted as well. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Ignore  // Noncompliant\n@Test\npublic void testDoTheThing() {\n  // ...\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\n@Test\npublic void testDoTheThing() {\n  Assume.assumeFalse(true); // Noncompliant\n  // ...\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Test\n@Ignore(\"See Ticket #1234\")\npublic void testDoTheThing() {\n  // ...\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice","confusing","junit","suspicious","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1607"]}},{"key":"java:S1611","repo":"java","name":"Parentheses should be removed from a single lambda input parameter when its type is inferred","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single\nparameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e8\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n(x) -\u0026gt; x * 2\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nx -\u0026gt; x * 2\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThere are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single\nparameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e8\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n(x) -\u0026gt; x * 2\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nx -\u0026gt; x * 2\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1611"]}},{"key":"java:S1710","repo":"java","name":"Annotation repetitions should not be wrapped","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eBefore Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that’s\nno longer necessary, allowing for cleaner, more readable code.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e8\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eBefore Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that’s\nno longer necessary, allowing for cleaner, more readable code.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e8\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1710"]}},{"key":"java:S1711","repo":"java","name":"Standard functional interfaces should not be redefined","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eJust as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard\nfunctional interfaces.\u003c/p\u003e\n\u003cp\u003eDoing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of\nconfusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@FunctionalInterface\npublic interface MyInterface { // Noncompliant\n\tdouble toDouble(int a);\n}\n\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier { // Noncompliant\n  boolean get();\n  default boolean isFalse() {\n    return !get();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(MyInterface instance){\n\treturn instance.toDouble(a);\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier\n  default boolean isFalse() {\n    return !getAsBoolean();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(IntToDoubleFunction instance){\n\treturn instance.applyAsDouble(a);\n    }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eJust as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard\nfunctional interfaces.\u003c/p\u003e\n\u003cp\u003eDoing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of\nconfusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@FunctionalInterface\npublic interface MyInterface { // Noncompliant\n\tdouble toDouble(int a);\n}\n\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier { // Noncompliant\n  boolean get();\n  default boolean isFalse() {\n    return !get();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(MyInterface instance){\n\treturn instance.toDouble(a);\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier\n  default boolean isFalse() {\n    return !getAsBoolean();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(IntToDoubleFunction instance){\n\treturn instance.applyAsDouble(a);\n    }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1711"]}},{"key":"java:S1844","repo":"java","name":"\"Object.wait(...)\" should never be called on objects that implement \"java.util.concurrent.locks.Condition\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eFrom the Java API documentation:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003e\u003ccode\u003eCondition\u003c/code\u003e factors out the \u003ccode\u003eObject\u003c/code\u003e monitor methods (\u003ccode\u003ewait\u003c/code\u003e, \u003ccode\u003enotify\u003c/code\u003e and \u003ccode\u003enotifyAll\u003c/code\u003e)\n  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.\n  Where a \u003ccode\u003eLock\u003c/code\u003e replaces the use of \u003ccode\u003esynchronized\u003c/code\u003e methods and statements, a \u003ccode\u003eCondition\u003c/code\u003e replaces the use of the\n  \u003ccode\u003eObject\u003c/code\u003e monitor methods.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe purpose of implementing the \u003ccode\u003eCondition\u003c/code\u003e interface is to gain access to its more nuanced \u003ccode\u003eawait\u003c/code\u003e methods. Therefore,\ncalling the method \u003ccode\u003eObject.wait(...)\u003c/code\u003e on a class implementing the \u003ccode\u003eCondition\u003c/code\u003e interface is silly and confusing.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfinal Lock lock \u003d new ReentrantLock();\nfinal Condition notFull  \u003d lock.newCondition();\n...\nnotFull.wait();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nfinal Lock lock \u003d new ReentrantLock();\nfinal Condition notFull  \u003d lock.newCondition();\n...\nnotFull.await();\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eFrom the Java API documentation:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003e\u003ccode\u003eCondition\u003c/code\u003e factors out the \u003ccode\u003eObject\u003c/code\u003e monitor methods (\u003ccode\u003ewait\u003c/code\u003e, \u003ccode\u003enotify\u003c/code\u003e and \u003ccode\u003enotifyAll\u003c/code\u003e)\n  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.\n  Where a \u003ccode\u003eLock\u003c/code\u003e replaces the use of \u003ccode\u003esynchronized\u003c/code\u003e methods and statements, a \u003ccode\u003eCondition\u003c/code\u003e replaces the use of the\n  \u003ccode\u003eObject\u003c/code\u003e monitor methods.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eThe purpose of implementing the \u003ccode\u003eCondition\u003c/code\u003e interface is to gain access to its more nuanced \u003ccode\u003eawait\u003c/code\u003e methods. Therefore,\ncalling the method \u003ccode\u003eObject.wait(...)\u003c/code\u003e on a class implementing the \u003ccode\u003eCondition\u003c/code\u003e interface is silly and confusing.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfinal Lock lock \u003d new ReentrantLock();\nfinal Condition notFull  \u003d lock.newCondition();\n...\nnotFull.wait();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nfinal Lock lock \u003d new ReentrantLock();\nfinal Condition notFull  \u003d lock.newCondition();\n...\nnotFull.await();\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1844"]}},{"key":"java:S1845","repo":"java","name":"Methods and field names should not be the same or differ only by capitalization","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eLooking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is\nconfusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field\nwith exactly the same name and visibility.\u003c/p\u003e\n\u003cp\u003eIn the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead\nadded a new method with nearly the same name.\u003c/p\u003e\n\u003cp\u003eOtherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the\ncase where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be\ndisruptive to callers. Therefore renaming the member is the recommended action.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  // Noncompliant; not an override. It it really what\u0027s intended?\n\n  public void drivefast(){...}\n\n  public void driveFast(){...} //Huh?\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...}\n\n  public void driveReallyFast(){...}\n\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eLooking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is\nconfusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field\nwith exactly the same name and visibility.\u003c/p\u003e\n\u003cp\u003eIn the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead\nadded a new method with nearly the same name.\u003c/p\u003e\n\u003cp\u003eOtherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the\ncase where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be\ndisruptive to callers. Therefore renaming the member is the recommended action.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  // Noncompliant; not an override. It it really what\u0027s intended?\n\n  public void drivefast(){...}\n\n  public void driveFast(){...} //Huh?\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...}\n\n  public void driveReallyFast(){...}\n\n}\n\u003c/pre\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1845"]}},{"key":"java:S1854","repo":"java","name":"Unused assignments should be removed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it’s not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ni \u003d a + b; // Noncompliant; calculation result not used before value is overwritten\ni \u003d compute();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ni \u003d a + b;\ni +\u003d compute();\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule ignores initializations to -1, 0, 1, \u003ccode\u003enull\u003c/code\u003e, \u003ccode\u003etrue\u003c/code\u003e, \u003ccode\u003efalse\u003c/code\u003e and \u003ccode\u003e\"\"\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/563.html\"\u003eMITRE, CWE-563\u003c/a\u003e - Assignment to Variable without Use (\u0027Unused Variable\u0027) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/39UxBQ\"\u003eCERT, MSC13-C.\u003c/a\u003e - Detect and remove unused values \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/9DZGBQ\"\u003eCERT, MSC56-J.\u003c/a\u003e - Detect and remove superfluous code and values \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eA dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it’s not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ni \u003d a + b; // Noncompliant; calculation result not used before value is overwritten\ni \u003d compute();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ni \u003d a + b;\ni +\u003d compute();\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule ignores initializations to -1, 0, 1, \u003ccode\u003enull\u003c/code\u003e, \u003ccode\u003etrue\u003c/code\u003e, \u003ccode\u003efalse\u003c/code\u003e and \u003ccode\u003e\"\"\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/563.html\"\u003eMITRE, CWE-563\u003c/a\u003e - Assignment to Variable without Use (\u0027Unused Variable\u0027) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/39UxBQ\"\u003eCERT, MSC13-C.\u003c/a\u003e - Detect and remove unused values \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/9DZGBQ\"\u003eCERT, MSC56-J.\u003c/a\u003e - Detect and remove superfluous code and values \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe","unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1854"]}},{"key":"java:S2701","repo":"java","name":"Literal boolean values and nulls should not be used in assertions","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere’s no reason to use literal boolean values or nulls in assertions. Instead of using them with \u003cem\u003eassertEquals\u003c/em\u003e, \u003cem\u003eassertNotEquals\u003c/em\u003e\nand similar methods, you should be using \u003cem\u003eassertTrue\u003c/em\u003e, \u003cem\u003eassertFalse\u003c/em\u003e, \u003cem\u003eassertNull\u003c/em\u003e or \u003cem\u003eassertNotNull\u003c/em\u003e instead (or\n\u003cem\u003eisNull\u003c/em\u003e etc. when using Fest). Using them with assertions unrelated to equality (such as \u003cem\u003eassertNull\u003c/em\u003e) is most likely a bug.\u003c/p\u003e\n\u003cp\u003eSupported frameworks:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit3 \u003c/li\u003e\n  \u003cli\u003e JUnit4 \u003c/li\u003e\n  \u003cli\u003e JUnit5 \u003c/li\u003e\n  \u003cli\u003e Fest assert \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nAssert.assertTrue(true);  // Noncompliant\nassertThat(null).isNull(); // Noncompliant\n\nassertEquals(true, something()); // Noncompliant\nassertNotEquals(null, something()); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nassertTrue(something());\nassertNotNull(something());\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThere’s no reason to use literal boolean values or nulls in assertions. Instead of using them with \u003cem\u003eassertEquals\u003c/em\u003e, \u003cem\u003eassertNotEquals\u003c/em\u003e\nand similar methods, you should be using \u003cem\u003eassertTrue\u003c/em\u003e, \u003cem\u003eassertFalse\u003c/em\u003e, \u003cem\u003eassertNull\u003c/em\u003e or \u003cem\u003eassertNotNull\u003c/em\u003e instead (or\n\u003cem\u003eisNull\u003c/em\u003e etc. when using Fest). Using them with assertions unrelated to equality (such as \u003cem\u003eassertNull\u003c/em\u003e) is most likely a bug.\u003c/p\u003e\n\u003cp\u003eSupported frameworks:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit3 \u003c/li\u003e\n  \u003cli\u003e JUnit4 \u003c/li\u003e\n  \u003cli\u003e JUnit5 \u003c/li\u003e\n  \u003cli\u003e Fest assert \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nAssert.assertTrue(true);  // Noncompliant\nassertThat(null).isNull(); // Noncompliant\n\nassertEquals(true, something()); // Noncompliant\nassertNotEquals(null, something()); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nassertTrue(something());\nassertNotNull(something());\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["junit","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2701"]}},{"key":"java:S2718","repo":"java","name":"\"DateUtils.truncate\" from Apache Commons Lang library should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe use of the \u003ccode\u003eZonedDateTime\u003c/code\u003e class introduced in Java 8 to truncate a date can be significantly faster than the \u003ccode\u003eDateUtils\u003c/code\u003e\nclass from Commons Lang.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e8\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic Date trunc(Date date) {\n  Instant instant \u003d date.toInstant();\n  ZonedDateTime zonedDateTime \u003d instant.atZone(ZoneId.systemDefault());\n  ZonedDateTime truncatedZonedDateTime \u003d zonedDateTime.truncatedTo(ChronoUnit.SECONDS);\n  Instant truncatedInstant \u003d truncatedZonedDateTime.toInstant();\n  return Date.from(truncatedInstant);\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe use of the \u003ccode\u003eZonedDateTime\u003c/code\u003e class introduced in Java 8 to truncate a date can be significantly faster than the \u003ccode\u003eDateUtils\u003c/code\u003e\nclass from Commons Lang.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e8\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic Date trunc(Date date) {\n  Instant instant \u003d date.toInstant();\n  ZonedDateTime zonedDateTime \u003d instant.atZone(ZoneId.systemDefault());\n  ZonedDateTime truncatedZonedDateTime \u003d zonedDateTime.truncatedTo(ChronoUnit.SECONDS);\n  Instant truncatedInstant \u003d truncatedZonedDateTime.toInstant();\n  return Date.from(truncatedInstant);\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java8","performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2718"]}},{"key":"java:S2924","repo":"java","name":"JUnit rules should be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhile some \u003ccode\u003eTestRule\u003c/code\u003e classes have the desired effect without ever being directly referenced by a test, several others do not, and\nthere’s no reason to leave them cluttering up the file if they’re not in use.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eTest\u003c/code\u003e class fields of the following types aren’t used by any of the test methods:\n\u003ccode\u003eTemporaryFolder\u003c/code\u003e, and \u003ccode\u003eTestName\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule also applies to the JUnit 5 equivalent classes: \u003ccode\u003eTempDir\u003c/code\u003e, and \u003ccode\u003eTestInfo\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp \u003d new TemporaryFolder();  // Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def \u003d ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def \u003d ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhile some \u003ccode\u003eTestRule\u003c/code\u003e classes have the desired effect without ever being directly referenced by a test, several others do not, and\nthere’s no reason to leave them cluttering up the file if they’re not in use.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eTest\u003c/code\u003e class fields of the following types aren’t used by any of the test methods:\n\u003ccode\u003eTemporaryFolder\u003c/code\u003e, and \u003ccode\u003eTestName\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule also applies to the JUnit 5 equivalent classes: \u003ccode\u003eTempDir\u003c/code\u003e, and \u003ccode\u003eTestInfo\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp \u003d new TemporaryFolder();  // Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def \u003d ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def \u003d ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["junit","tests","unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2924"]}},{"key":"java:S2925","repo":"java","name":"\"Thread.sleep\" should not be used in tests","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUsing \u003ccode\u003eThread.sleep\u003c/code\u003e in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on\nenvironment (\"Passes on my machine!\") or load. Don’t rely on timing (use mocks) or use libraries such as \u003ccode\u003eAwaitility\u003c/code\u003e for asynchroneous\ntesting.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass \u003d new MyClass();\n  myClass.doTheThing();\n\n  Thread.sleep(500);  // Noncompliant\n  // assertions...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass \u003d new MyClass();\n  myClass.doTheThing();\n\n  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant\n  // assertions...\n}\n\nprivate Callable\u0026lt;Boolean\u0026gt; didTheThing() {\n  return new Callable\u0026lt;Boolean\u0026gt;() {\n    public Boolean call() throws Exception {\n      // check the condition that must be fulfilled...\n    }\n  };\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eUsing \u003ccode\u003eThread.sleep\u003c/code\u003e in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on\nenvironment (\"Passes on my machine!\") or load. Don’t rely on timing (use mocks) or use libraries such as \u003ccode\u003eAwaitility\u003c/code\u003e for asynchroneous\ntesting.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass \u003d new MyClass();\n  myClass.doTheThing();\n\n  Thread.sleep(500);  // Noncompliant\n  // assertions...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass \u003d new MyClass();\n  myClass.doTheThing();\n\n  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant\n  // assertions...\n}\n\nprivate Callable\u0026lt;Boolean\u0026gt; didTheThing() {\n  return new Callable\u0026lt;Boolean\u0026gt;() {\n    public Boolean call() throws Exception {\n      // check the condition that must be fulfilled...\n    }\n  };\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2925"]}},{"key":"java:S2959","repo":"java","name":"Unnecessary semicolons should be omitted","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUnder the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry (ByteArrayInputStream b \u003d new ByteArrayInputStream(new byte[10]);  // ignored; this one\u0027s required\n      Reader r \u003d new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry (ByteArrayInputStream b \u003d new ByteArrayInputStream(new byte[10]);\n      Reader r \u003d new InputStreamReader(b))\n{\n   //do stuff\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eUnder the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry (ByteArrayInputStream b \u003d new ByteArrayInputStream(new byte[10]);  // ignored; this one\u0027s required\n      Reader r \u003d new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry (ByteArrayInputStream b \u003d new ByteArrayInputStream(new byte[10]);\n      Reader r \u003d new InputStreamReader(b))\n{\n   //do stuff\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2959"]}},{"key":"java:S5194","repo":"java","name":"Use Java 12 \"switch\" expression","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eMany existing switch statements are essentially simulations of switch expressions, where each arm either assigns to a common target variable or\nreturns a value. Expressing this as a statement is roundabout, repetitive, and error-prone.\u003c/p\u003e\n\u003cp\u003eJava 12 added support for switch expressions, which provide more succinct and less error-prone version of switch.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid day_of_week(DoW day) {\n    int numLetters;\n    switch (day) {  // Noncompliant\n      case MONDAY:\n      case FRIDAY:\n      case SUNDAY:\n        numLetters \u003d 6;\n        break;\n      case TUESDAY:\n        numLetters \u003d 7;\n        break;\n      case THURSDAY:\n      case SATURDAY:\n        numLetters \u003d 8;\n        break;\n      case WEDNESDAY:\n        numLetters \u003d 9;\n        break;\n      default:\n        throw new IllegalStateException(\"Wat: \" + day);\n    }\n}\n\nint return_switch(int x) {\n    switch (x) { // Noncompliant\n      case 1:\n        return 1;\n      case 2:\n        return 2;\n      default:\n        throw new IllegalStateException();\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint numLetters \u003d switch (day) {\n    case MONDAY, FRIDAY, SUNDAY -\u0026gt; 6;\n    case TUESDAY                -\u0026gt; 7;\n    case THURSDAY, SATURDAY     -\u0026gt; 8;\n    case WEDNESDAY              -\u0026gt; 9;\n};\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eMany existing switch statements are essentially simulations of switch expressions, where each arm either assigns to a common target variable or\nreturns a value. Expressing this as a statement is roundabout, repetitive, and error-prone.\u003c/p\u003e\n\u003cp\u003eJava 12 added support for switch expressions, which provide more succinct and less error-prone version of switch.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvoid day_of_week(DoW day) {\n    int numLetters;\n    switch (day) {  // Noncompliant\n      case MONDAY:\n      case FRIDAY:\n      case SUNDAY:\n        numLetters \u003d 6;\n        break;\n      case TUESDAY:\n        numLetters \u003d 7;\n        break;\n      case THURSDAY:\n      case SATURDAY:\n        numLetters \u003d 8;\n        break;\n      case WEDNESDAY:\n        numLetters \u003d 9;\n        break;\n      default:\n        throw new IllegalStateException(\"Wat: \" + day);\n    }\n}\n\nint return_switch(int x) {\n    switch (x) { // Noncompliant\n      case 1:\n        return 1;\n      case 2:\n        return 2;\n      default:\n        throw new IllegalStateException();\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint numLetters \u003d switch (day) {\n    case MONDAY, FRIDAY, SUNDAY -\u0026gt; 6;\n    case TUESDAY                -\u0026gt; 7;\n    case THURSDAY, SATURDAY     -\u0026gt; 8;\n    case WEDNESDAY              -\u0026gt; 9;\n};\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java12"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5194"]}},{"key":"java:S6068","repo":"java","name":"Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eMockito provides \u003cem\u003eargument matchers\u003c/em\u003e for flexibly stubbing or verifying method calls.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMockito.verify()\u003c/code\u003e, \u003ccode\u003eMockito.when()\u003c/code\u003e, \u003ccode\u003eStubber.when()\u003c/code\u003e and \u003ccode\u003eBDDMockito.given()\u003c/code\u003e each have overloads\nwith and without argument matchers.\u003c/p\u003e\n\u003cp\u003eHowever, the default matching behavior (i.e. without argument matchers) uses \u003ccode\u003eequals()\u003c/code\u003e. If only the matcher\n\u003ccode\u003eorg.mockito.ArgumentMatchers.eq()\u003c/code\u003e is used, the call is equivalent to the call without matchers, i.e. the \u003ccode\u003eeq()\u003c/code\u003e is not\nnecessary and can be omitted. The resulting code is shorter and easier to read.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void myTest() {\n  given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null);   // Noncompliant\n  when(foo.baz(eq(v4), eq(v5))).thenReturn(\"foo\");   // Noncompliant\n  doThrow(new RuntimeException()).when(foo).quux(eq(42));    // Noncompliant\n  verify(foo).bar(eq(v1), eq(v2), eq(v3));   // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void myTest() {\n  given(foo.bar(v1, v2, v3)).willReturn(null);\n  when(foo.baz(v4, v5)).thenReturn(\"foo\");\n  doThrow(new RuntimeException()).when(foo).quux(42);\n  verify(foo).bar(v1, v2, v3);\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers\"\u003eMockito documentation\u003c/a\u003e -\n  argument matchers \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/coding_rules#rule_key\u003djava%3AS6073\u0027\u003eS6073\u003c/a\u003e - Mockito argument matchers should be used on all parameters \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eMockito provides \u003cem\u003eargument matchers\u003c/em\u003e for flexibly stubbing or verifying method calls.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eMockito.verify()\u003c/code\u003e, \u003ccode\u003eMockito.when()\u003c/code\u003e, \u003ccode\u003eStubber.when()\u003c/code\u003e and \u003ccode\u003eBDDMockito.given()\u003c/code\u003e each have overloads\nwith and without argument matchers.\u003c/p\u003e\n\u003cp\u003eHowever, the default matching behavior (i.e. without argument matchers) uses \u003ccode\u003eequals()\u003c/code\u003e. If only the matcher\n\u003ccode\u003eorg.mockito.ArgumentMatchers.eq()\u003c/code\u003e is used, the call is equivalent to the call without matchers, i.e. the \u003ccode\u003eeq()\u003c/code\u003e is not\nnecessary and can be omitted. The resulting code is shorter and easier to read.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void myTest() {\n  given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null);   // Noncompliant\n  when(foo.baz(eq(v4), eq(v5))).thenReturn(\"foo\");   // Noncompliant\n  doThrow(new RuntimeException()).when(foo).quux(eq(42));    // Noncompliant\n  verify(foo).bar(eq(v1), eq(v2), eq(v3));   // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Test\npublic void myTest() {\n  given(foo.bar(v1, v2, v3)).willReturn(null);\n  when(foo.baz(v4, v5)).thenReturn(\"foo\");\n  doThrow(new RuntimeException()).when(foo).quux(42);\n  verify(foo).bar(v1, v2, v3);\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers\"\u003eMockito documentation\u003c/a\u003e -\n  argument matchers \u003c/li\u003e\n  \u003cli\u003e {rule:java:S6073} - Mockito argument matchers should be used on all parameters \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy","mockito","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6068"]}},{"key":"java:S103","repo":"java","name":"Lines should not be too long","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\u003c/p\u003e","mdDesc":"\u003cp\u003eHaving to scroll horizontally makes it harder to get a quick overview and understanding of any piece of code.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"maximumLineLength","htmlDesc":"The maximum authorized line length.","defaultValue":"120","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00103"]}},{"key":"java:S105","repo":"java","name":"Tabulation characters should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\u003c/p\u003e\n\u003cp\u003eSo the use of the tabulation character must be banned.\u003c/p\u003e","mdDesc":"\u003cp\u003eDevelopers should not need to configure the tab width of their text editors in order to be able to read source code.\u003c/p\u003e\n\u003cp\u003eSo the use of the tabulation character must be banned.\u003c/p\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00105"]}},{"key":"java:S110","repo":"java","name":"Inheritance tree of classes should not be too deep","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eInheritance is certainly one of the most valuable concepts in object-oriented programming. It’s a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time too deep of an inheritance tree is due to bad object\noriented design which leads to a systematic use of \u0027inheritance\u0027 when \u0027composition\u0027 would be better suited.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the inheritance tree, starting from \u003ccode\u003eObject\u003c/code\u003e has a greater depth than is allowed.\u003c/p\u003e\n\u003cp\u003eFor the parameter of the rule, the following rules are applied:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e?\u003c/code\u003e matches a single character \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e*\u003c/code\u003e matches zero or more characters \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e**\u003c/code\u003e matches zero or more packages \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003ejava.fwk.AbstractFwkClass\u003c/code\u003e will stop count when AbstractFwkClassclass is reached. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ejava.fwk.*\u003c/code\u003e will stop count when any member of java.fwkPackage package is reached. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ejava.fwk.**\u003c/code\u003e same as above, but including sub-packages. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExceptions:\u003c/p\u003e\n\u003cp\u003eThe rule stops counting when it encounters a class from one of the following packages (or sub-packages):\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eandroid.**\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.intellij.**\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.persistit.**\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ejavax.swing.**\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eorg.eclipse.**\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eorg.springframework.**\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eInheritance is certainly one of the most valuable concepts in object-oriented programming. It’s a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time too deep of an inheritance tree is due to bad object\noriented design which leads to a systematic use of \u0027inheritance\u0027 when \u0027composition\u0027 would be better suited.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when the inheritance tree, starting from \u003ccode\u003eObject\u003c/code\u003e has a greater depth than is allowed.\u003c/p\u003e\n\u003cp\u003eFor the parameter of the rule, the following rules are applied:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003e?\u003c/code\u003e matches a single character \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e*\u003c/code\u003e matches zero or more characters \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e**\u003c/code\u003e matches zero or more packages \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExamples:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003ejava.fwk.AbstractFwkClass\u003c/code\u003e will stop count when AbstractFwkClassclass is reached. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ejava.fwk.*\u003c/code\u003e will stop count when any member of java.fwkPackage package is reached. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ejava.fwk.**\u003c/code\u003e same as above, but including sub-packages. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eExceptions:\u003c/p\u003e\n\u003cp\u003eThe rule stops counting when it encounters a class from one of the following packages (or sub-packages):\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003eandroid.**\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.intellij.**\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ecom.persistit.**\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003ejavax.swing.**\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eorg.eclipse.**\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eorg.springframework.**\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["design"],"lang":"java","langName":"Java","params":[{"key":"max","htmlDesc":"Maximum depth of the inheritance tree. (Number)","defaultValue":"5","type":"INTEGER"},{"key":"filteredClasses","htmlDesc":"Classes to be filtered out of the count of inheritance. Ex : java.fwk.AbstractFwkClass, java.fwkPackage.*","type":"STRING"}],"defaultDebtRemFnType":"LINEAR_OFFSET","defaultDebtRemFnCoeff":"30min","defaultDebtRemFnOffset":"4h","effortToFixDescription":"Number of parents above the defined threshold","debtOverloaded":false,"debtRemFnType":"LINEAR_OFFSET","debtRemFnCoeff":"30min","debtRemFnOffset":"4h","type":"CODE_SMELL","defaultRemFnType":"LINEAR_OFFSET","defaultRemFnGapMultiplier":"30min","defaultRemFnBaseEffort":"4h","remFnType":"LINEAR_OFFSET","remFnGapMultiplier":"30min","remFnBaseEffort":"4h","remFnOverloaded":false,"gapDescription":"Number of parents above the defined threshold","scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:MaximumInheritanceDepth"]}},{"key":"java:S112","repo":"java","name":"Generic exceptions should never be thrown","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUsing such generic exceptions as \u003ccode\u003eError\u003c/code\u003e, \u003ccode\u003eRuntimeException\u003c/code\u003e, \u003ccode\u003eThrowable\u003c/code\u003e, and \u003ccode\u003eException\u003c/code\u003e prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eGeneric exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part of the\nanalysis).\u003c/p\u003e\n\u003cpre\u003e\n@Override\npublic void myMethod() throws Exception {...}\n\u003c/pre\u003e\n\u003cp\u003eGeneric exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.\u003c/p\u003e\n\u003cpre\u003e\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/397.html\"\u003eMITRE, CWE-397\u003c/a\u003e - Declaration of Throws for Generic Exception \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\"\u003eCERT, ERR07-J.\u003c/a\u003e - Do not throw RuntimeException, Exception, or Throwable \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eUsing such generic exceptions as \u003ccode\u003eError\u003c/code\u003e, \u003ccode\u003eRuntimeException\u003c/code\u003e, \u003ccode\u003eThrowable\u003c/code\u003e, and \u003ccode\u003eException\u003c/code\u003e prevents\ncalling methods from handling true, system-generated exceptions differently than application-generated errors.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void foo(String bar) throws Throwable {  // Noncompliant\n  throw new RuntimeException(\"My Message\");     // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void foo(String bar) {\n  throw new MyOwnRuntimeException(\"My Message\");\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eGeneric exceptions in the signatures of overriding methods are ignored, because overriding method has to follow signature of the throw declaration\nin the superclass. The issue will be raised on superclass declaration of the method (or won’t be raised at all if superclass is not part of the\nanalysis).\u003c/p\u003e\n\u003cpre\u003e\n@Override\npublic void myMethod() throws Exception {...}\n\u003c/pre\u003e\n\u003cp\u003eGeneric exceptions are also ignored in the signatures of methods that make calls to methods that throw generic exceptions.\u003c/p\u003e\n\u003cpre\u003e\npublic void myOtherMethod throws Exception {\n  doTheThing();  // this method throws Exception\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/397.html\"\u003eMITRE, CWE-397\u003c/a\u003e - Declaration of Throws for Generic Exception \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/_DdGBQ\"\u003eCERT, ERR07-J.\u003c/a\u003e - Do not throw RuntimeException, Exception, or Throwable \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe","error-handling"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00112"]}},{"key":"java:S135","repo":"java","name":"Loops should not contain more than a single \"break\" or \"continue\" statement","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eRestricting the number of \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e statements in a loop is done in the interest of good structured\nprogramming.\u003c/p\u003e\n\u003cp\u003eOnly one \u003ccode\u003ebreak\u003c/code\u003e or one \u003ccode\u003econtinue\u003c/code\u003e statement is acceptable in a loop, since it facilitates optimal coding. If there is more\nthan one, the code should be refactored to increase readability.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfor (int i \u003d 1; i \u0026lt;\u003d 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 \u003d\u003d 0) {\n    continue;\n  }\n\n  if (i % 3 \u003d\u003d 0) {\n    continue;\n  }\n\n  System.out.println(\"i \u003d \" + i);\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eRestricting the number of \u003ccode\u003ebreak\u003c/code\u003e and \u003ccode\u003econtinue\u003c/code\u003e statements in a loop is done in the interest of good structured\nprogramming.\u003c/p\u003e\n\u003cp\u003eOnly one \u003ccode\u003ebreak\u003c/code\u003e or one \u003ccode\u003econtinue\u003c/code\u003e statement is acceptable in a loop, since it facilitates optimal coding. If there is more\nthan one, the code should be refactored to increase readability.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfor (int i \u003d 1; i \u0026lt;\u003d 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 \u003d\u003d 0) {\n    continue;\n  }\n\n  if (i % 3 \u003d\u003d 0) {\n    continue;\n  }\n\n  System.out.println(\"i \u003d \" + i);\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"20min","effortToFixDescription":"per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"20min","type":"CODE_SMELL","defaultRemFnType":"LINEAR","defaultRemFnGapMultiplier":"20min","remFnType":"LINEAR","remFnGapMultiplier":"20min","remFnOverloaded":false,"gapDescription":"per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement","scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S135"]}},{"key":"java:S138","repo":"java","name":"Methods should not have too many lines","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder\nto maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will\nnot only be easier to understand, but also probably easier to test.\u003c/p\u003e","mdDesc":"\u003cp\u003eA method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder\nto maintain.\u003c/p\u003e\n\u003cp\u003eAbove a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will\nnot only be easier to understand, but also probably easier to test.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"max","htmlDesc":"Maximum authorized lines in a method","defaultValue":"75","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S138"]}},{"key":"java:S139","repo":"java","name":"Comments should not be located at the end of lines of code","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThis rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint a1 \u003d b + c; // This is a trailing comment that can be very very long\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n// This very long comment is better placed before the line of code\nint a2 \u003d b + c;\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThis rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint a1 \u003d b + c; // This is a trailing comment that can be very very long\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n// This very long comment is better placed before the line of code\nint a2 \u003d b + c;\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"legalTrailingCommentPattern","htmlDesc":"Description Pattern for text of trailing comments that are allowed. By default, comments containing only one word.","defaultValue":"^\\s*+[^\\s]++$","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:TrailingCommentCheck"]}},{"key":"java:S2063","repo":"java","name":"Comparators should be \"Serializable\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA non-serializable \u003ccode\u003eComparator\u003c/code\u003e can prevent an otherwise-\u003ccode\u003eSerializable\u003c/code\u003e ordered collection from being serializable. Since the\noverhead to make a \u003ccode\u003eComparator\u003c/code\u003e serializable is usually low, doing so can be considered good defensive programming.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class FruitComparator implements Comparator\u0026lt;Fruit\u0026gt; {  // Noncompliant\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class FruitComparator implements Comparator\u0026lt;Fruit\u0026gt;, Serializable {\n  private static final long serialVersionUID \u003d 1;\n\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eA non-serializable \u003ccode\u003eComparator\u003c/code\u003e can prevent an otherwise-\u003ccode\u003eSerializable\u003c/code\u003e ordered collection from being serializable. Since the\noverhead to make a \u003ccode\u003eComparator\u003c/code\u003e serializable is usually low, doing so can be considered good defensive programming.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class FruitComparator implements Comparator\u0026lt;Fruit\u0026gt; {  // Noncompliant\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class FruitComparator implements Comparator\u0026lt;Fruit\u0026gt;, Serializable {\n  private static final long serialVersionUID \u003d 1;\n\n  int compare(Fruit f1, Fruit f2) {...}\n  boolean equals(Object obj) {...}\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall","serialization"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2063"]}},{"key":"java:S2065","repo":"java","name":"Fields in non-serializable classes should not be \"transient\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003etransient\u003c/code\u003e is used to mark fields in a \u003ccode\u003eSerializable\u003c/code\u003e class which will not be written out to file (or stream). In a class\nthat does not implement \u003ccode\u003eSerializable\u003c/code\u003e, this modifier is simply wasted keystrokes, and should be removed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Vegetable {  // does not implement Serializable\n  private transient Season ripe;  // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass Vegetable {\n  private Season ripe;\n  // ...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003etransient\u003c/code\u003e is used to mark fields in a \u003ccode\u003eSerializable\u003c/code\u003e class which will not be written out to file (or stream). In a class\nthat does not implement \u003ccode\u003eSerializable\u003c/code\u003e, this modifier is simply wasted keystrokes, and should be removed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Vegetable {  // does not implement Serializable\n  private transient Season ripe;  // Noncompliant\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass Vegetable {\n  private Season ripe;\n  // ...\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["serialization","unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2065"]}},{"key":"java:S2185","repo":"java","name":"Silly math should not be performed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eCertain math operations are just silly and should not be performed because their results are predictable.\u003c/p\u003e\n\u003cp\u003eIn particular, \u003ccode\u003eanyValue % 1\u003c/code\u003e is silly because it will always return 0.\u003c/p\u003e\n\u003cp\u003eCasting a non-floating-point value to floating-point and then passing it to \u003ccode\u003eMath.round\u003c/code\u003e, \u003ccode\u003eMath.ceil\u003c/code\u003e, or\n\u003ccode\u003eMath.floor\u003c/code\u003e is silly because the result will always be the original value.\u003c/p\u003e\n\u003cp\u003eThese operations are silly with any constant value: \u003ccode\u003eMath.abs\u003c/code\u003e, \u003ccode\u003eMath.ceil\u003c/code\u003e, \u003ccode\u003eMath.floor\u003c/code\u003e, \u003ccode\u003eMath.rint\u003c/code\u003e,\n\u003ccode\u003eMath.round\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAnd these oprations are silly with certain constant values:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eOperation\u003c/th\u003e\n      \u003cth\u003eValue\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eacos\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003easin\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eatan\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eatan2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecbrt\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecos\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecosh\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eexp\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eexpm1\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003elog\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003elog10\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003esin\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003esinh\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003esqrt\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003etan\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003etanh\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003etoDegrees\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003etoRadians\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doMath(int a) {\n  double floor \u003d Math.floor((double)a); // Noncompliant\n  double ceiling \u003d Math.ceil(4.2);  // Noncompliant\n  double arcTan \u003d Math.atan(0.0);  // Noncompliant\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eCertain math operations are just silly and should not be performed because their results are predictable.\u003c/p\u003e\n\u003cp\u003eIn particular, \u003ccode\u003eanyValue % 1\u003c/code\u003e is silly because it will always return 0.\u003c/p\u003e\n\u003cp\u003eCasting a non-floating-point value to floating-point and then passing it to \u003ccode\u003eMath.round\u003c/code\u003e, \u003ccode\u003eMath.ceil\u003c/code\u003e, or\n\u003ccode\u003eMath.floor\u003c/code\u003e is silly because the result will always be the original value.\u003c/p\u003e\n\u003cp\u003eThese operations are silly with any constant value: \u003ccode\u003eMath.abs\u003c/code\u003e, \u003ccode\u003eMath.ceil\u003c/code\u003e, \u003ccode\u003eMath.floor\u003c/code\u003e, \u003ccode\u003eMath.rint\u003c/code\u003e,\n\u003ccode\u003eMath.round\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eAnd these oprations are silly with certain constant values:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eOperation\u003c/th\u003e\n      \u003cth\u003eValue\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eacos\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003easin\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eatan\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eatan2\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecbrt\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecos\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003ecosh\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eexp\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003eexpm1\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003elog\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003elog10\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003esin\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003esinh\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003esqrt\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003etan\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003etanh\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003etoDegrees\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0 or 1.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003etoRadians\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e0.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doMath(int a) {\n  double floor \u003d Math.floor((double)a); // Noncompliant\n  double ceiling \u003d Math.ceil(4.2);  // Noncompliant\n  double arcTan \u003d Math.atan(0.0);  // Noncompliant\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2185"]}},{"key":"java:S2186","repo":"java","name":"JUnit assertions should not be used in \"run\" methods","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eJUnit assertions should not be made from the \u003ccode\u003erun\u003c/code\u003e method of a \u003ccode\u003eRunnable\u003c/code\u003e, because failed assertions result in\n\u003ccode\u003eAssertionError\u003c/code\u003es being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the\ntest won’t fail.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void run() {\n  // ...\n  Assert.assertEquals(expected, actual);  // Noncompliant\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eJUnit assertions should not be made from the \u003ccode\u003erun\u003c/code\u003e method of a \u003ccode\u003eRunnable\u003c/code\u003e, because failed assertions result in\n\u003ccode\u003eAssertionError\u003c/code\u003es being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the\ntest won’t fail.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void run() {\n  // ...\n  Assert.assertEquals(expected, actual);  // Noncompliant\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["junit","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2186"]}},{"key":"java:S2187","repo":"java","name":"TestCases should contain tests","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere’s no point in having a JUnit \u003ccode\u003eTestCase\u003c/code\u003e without any test methods. Similarly, you shouldn’t have a file in the tests directory\nnamed \u003ccode\u003e*Test\u003c/code\u003e, \u003ccode\u003e*Tests\u003c/code\u003e, or \u003ccode\u003e*TestCase\u003c/code\u003e, but no tests in the file. Doing either of these things may lead someone to\nthink that uncovered classes have been tested.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when files in the test directory are named \u003ccode\u003e*Test\u003c/code\u003e, \u003ccode\u003e*Tests\u003c/code\u003e, or \u003ccode\u003e*TestCase\u003c/code\u003e or\nimplement \u003ccode\u003eTestCase\u003c/code\u003e but don’t contain any tests.\u003c/p\u003e\n\u003cp\u003eSupported frameworks:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit3 \u003c/li\u003e\n  \u003cli\u003e JUnit4 \u003c/li\u003e\n  \u003cli\u003e JUnit5 \u003c/li\u003e\n  \u003cli\u003e TestNG \u003c/li\u003e\n  \u003cli\u003e Zohhak \u003c/li\u003e\n  \u003cli\u003e ArchUnit \u003c/li\u003e\n  \u003cli\u003e Pact \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThere’s no point in having a JUnit \u003ccode\u003eTestCase\u003c/code\u003e without any test methods. Similarly, you shouldn’t have a file in the tests directory\nnamed \u003ccode\u003e*Test\u003c/code\u003e, \u003ccode\u003e*Tests\u003c/code\u003e, or \u003ccode\u003e*TestCase\u003c/code\u003e, but no tests in the file. Doing either of these things may lead someone to\nthink that uncovered classes have been tested.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when files in the test directory are named \u003ccode\u003e*Test\u003c/code\u003e, \u003ccode\u003e*Tests\u003c/code\u003e, or \u003ccode\u003e*TestCase\u003c/code\u003e or\nimplement \u003ccode\u003eTestCase\u003c/code\u003e but don’t contain any tests.\u003c/p\u003e\n\u003cp\u003eSupported frameworks:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e JUnit3 \u003c/li\u003e\n  \u003cli\u003e JUnit4 \u003c/li\u003e\n  \u003cli\u003e JUnit5 \u003c/li\u003e\n  \u003cli\u003e TestNG \u003c/li\u003e\n  \u003cli\u003e Zohhak \u003c/li\u003e\n  \u003cli\u003e ArchUnit \u003c/li\u003e\n  \u003cli\u003e Pact \u003c/li\u003e\n\u003c/ul\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing","junit","tests","unused"],"lang":"java","langName":"Java","params":[{"key":"TestClassNamePattern","htmlDesc":"Test class name pattern (regular expression)","defaultValue":".*(Test|Tests|TestCase)","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2187"]}},{"key":"java:S2188","repo":"java","name":"JUnit test cases should call super methods","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eOverriding a parent class method prevents that method from being called unless an explicit \u003ccode\u003esuper\u003c/code\u003e call is made in the overriding\nmethod. In some cases not calling the \u003ccode\u003esuper\u003c/code\u003e method is acceptable, but not with \u003ccode\u003esetUp\u003c/code\u003e and \u003ccode\u003etearDown\u003c/code\u003e in a JUnit 3\n\u003ccode\u003eTestCase\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {  // Noncompliant\n      myClass \u003d new MyClass();\n    }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      myClass \u003d new MyClass();\n    }\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eOverriding a parent class method prevents that method from being called unless an explicit \u003ccode\u003esuper\u003c/code\u003e call is made in the overriding\nmethod. In some cases not calling the \u003ccode\u003esuper\u003c/code\u003e method is acceptable, but not with \u003ccode\u003esetUp\u003c/code\u003e and \u003ccode\u003etearDown\u003c/code\u003e in a JUnit 3\n\u003ccode\u003eTestCase\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {  // Noncompliant\n      myClass \u003d new MyClass();\n    }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      myClass \u003d new MyClass();\n    }\n\u003c/pre\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["junit","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2188"]}},{"key":"java:S3038","repo":"java","name":"Abstract methods should not be redundant","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere’s no point in redundantly defining an \u003ccode\u003eabstract\u003c/code\u003e method with the same signature as a method in an \u003ccode\u003einterface\u003c/code\u003e that the\nclass \u003ccode\u003eimplements\u003c/code\u003e. Any concrete child classes will have to implement the method either way.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  // Noncompliant\n\n  // ...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThere’s no point in redundantly defining an \u003ccode\u003eabstract\u003c/code\u003e method with the same signature as a method in an \u003ccode\u003einterface\u003c/code\u003e that the\nclass \u003ccode\u003eimplements\u003c/code\u003e. Any concrete child classes will have to implement the method either way.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  // Noncompliant\n\n  // ...\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3038"]}},{"key":"java:S3398","repo":"java","name":"\"private\" methods called only by inner classes should be moved to those classes","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen a \u003ccode\u003eprivate\u003c/code\u003e method is only invoked by an inner class, there’s no reason not to move it into that class. It will still have the same\naccess to the outer class\u0027 members, but the outer class will be clearer and less cluttered.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Outie {\n  private int i\u003d0;\n\n  private void increment() {  // Noncompliant\n    i++;\n  }\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Outie {\n  private int i\u003d0;\n\n  public class Innie {\n    public void doTheThing() {\n      increment();\n    }\n\n    private void increment() {\n      Outie.this.i++;\n    }\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen a \u003ccode\u003eprivate\u003c/code\u003e method is only invoked by an inner class, there’s no reason not to move it into that class. It will still have the same\naccess to the outer class\u0027 members, but the outer class will be clearer and less cluttered.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Outie {\n  private int i\u003d0;\n\n  private void increment() {  // Noncompliant\n    i++;\n  }\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Outie {\n  private int i\u003d0;\n\n  public class Innie {\n    public void doTheThing() {\n      increment();\n    }\n\n    private void increment() {\n      Outie.this.i++;\n    }\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3398"]}},{"key":"java:S4248","repo":"java","name":"Regex patterns should not be created needlessly","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe \u003ccode\u003ejava.util.regex.Pattern.compile()\u003c/code\u003e methods have a significant performance cost, and therefore should be used sensibly.\u003c/p\u003e\n\u003cp\u003eMoreover they are the only mechanism available to create instances of the Pattern class, which are necessary to do any pattern matching using\nregular expressions. Unfortunately that can be hidden behind convenience methods like \u003ccode\u003eString.matches()\u003c/code\u003e or\n\u003ccode\u003eString.split()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIt is therefore somewhat easy to inadvertently repeatedly compile the same regular expression at great performance cost with no valid reason.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e A \u003ccode\u003ePattern\u003c/code\u003e is compiled from a \u003ccode\u003eString\u003c/code\u003e literal or constant and is not stored in a static final reference. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eString.matches\u003c/code\u003e, \u003ccode\u003eString.split\u003c/code\u003e, \u003ccode\u003eString.replaceAll\u003c/code\u003e or \u003ccode\u003eString.replaceFirst\u003c/code\u003e are invoked with a\n  \u003ccode\u003eString\u003c/code\u003e literal or constant. In which case the code should be refactored to use a \u003ccode\u003ejava.util.regex.Pattern\u003c/code\u003e while respecting\n  the previous rule. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doingSomething(String stringToMatch) {\n  Pattern regex \u003d Pattern.compile(\"myRegex\");  // Noncompliant\n  Matcher matcher \u003d regex.matcher(\"s\");\n  // ...\n  if (stringToMatch.matches(\"myRegex2\")) {  // Noncompliant\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nprivate static final Pattern myRegex \u003d Pattern.compile(\"myRegex\");\nprivate static final Pattern myRegex2 \u003d Pattern.compile(\"myRegex2\");\n\npublic void doingSomething(String stringToMatch) {\n  Matcher matcher \u003d myRegex.matcher(\"s\");\n  // ...\n  if (myRegex2.matcher(stringToMatch).matches()) {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eString.split\u003c/code\u003e doesn’t create a regex when the string passed as argument meets either of these 2 conditions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is a one-char String and this character is not one of the RegEx’s meta characters \".$|()[{^?*+\\\" \u003c/li\u003e\n  \u003cli\u003e It is a two-char String and the first char is the backslash and the second is not the ascii digit or ascii letter. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn which case no issue will be raised.\u003c/p\u003e","mdDesc":"\u003cp\u003eThe \u003ccode\u003ejava.util.regex.Pattern.compile()\u003c/code\u003e methods have a significant performance cost, and therefore should be used sensibly.\u003c/p\u003e\n\u003cp\u003eMoreover they are the only mechanism available to create instances of the Pattern class, which are necessary to do any pattern matching using\nregular expressions. Unfortunately that can be hidden behind convenience methods like \u003ccode\u003eString.matches()\u003c/code\u003e or\n\u003ccode\u003eString.split()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eIt is therefore somewhat easy to inadvertently repeatedly compile the same regular expression at great performance cost with no valid reason.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e A \u003ccode\u003ePattern\u003c/code\u003e is compiled from a \u003ccode\u003eString\u003c/code\u003e literal or constant and is not stored in a static final reference. \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eString.matches\u003c/code\u003e, \u003ccode\u003eString.split\u003c/code\u003e, \u003ccode\u003eString.replaceAll\u003c/code\u003e or \u003ccode\u003eString.replaceFirst\u003c/code\u003e are invoked with a\n  \u003ccode\u003eString\u003c/code\u003e literal or constant. In which case the code should be refactored to use a \u003ccode\u003ejava.util.regex.Pattern\u003c/code\u003e while respecting\n  the previous rule. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doingSomething(String stringToMatch) {\n  Pattern regex \u003d Pattern.compile(\"myRegex\");  // Noncompliant\n  Matcher matcher \u003d regex.matcher(\"s\");\n  // ...\n  if (stringToMatch.matches(\"myRegex2\")) {  // Noncompliant\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nprivate static final Pattern myRegex \u003d Pattern.compile(\"myRegex\");\nprivate static final Pattern myRegex2 \u003d Pattern.compile(\"myRegex2\");\n\npublic void doingSomething(String stringToMatch) {\n  Matcher matcher \u003d myRegex.matcher(\"s\");\n  // ...\n  if (myRegex2.matcher(stringToMatch).matches()) {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003eString.split\u003c/code\u003e doesn’t create a regex when the string passed as argument meets either of these 2 conditions:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e It is a one-char String and this character is not one of the RegEx’s meta characters \".$|()[{^?*+\\\" \u003c/li\u003e\n  \u003cli\u003e It is a two-char String and the first char is the backslash and the second is not the ascii digit or ascii letter. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn which case no issue will be raised.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance","regex"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4248"]}},{"key":"java:S4488","repo":"java","name":"Composed \"@RequestMapping\" variants should be preferred","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eSpring framework 4.3 introduced variants of the \u003ccode\u003e@RequestMapping\u003c/code\u003e annotation to better represent the semantics of the annotated methods.\nThe use of \u003ccode\u003e@GetMapping\u003c/code\u003e, \u003ccode\u003e@PostMapping\u003c/code\u003e, \u003ccode\u003e@PutMapping\u003c/code\u003e, \u003ccode\u003e@PatchMapping\u003c/code\u003e and \u003ccode\u003e@DeleteMapping\u003c/code\u003e\nshould be preferred to the use of the raw \u003ccode\u003e@RequestMapping(method \u003d RequestMethod.XYZ)\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@RequestMapping(path \u003d \"/greeting\", method \u003d RequestMethod.GET) // Noncompliant\npublic Greeting greeting(@RequestParam(value \u003d \"name\", defaultValue \u003d \"World\") String name) {\n...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@GetMapping(path \u003d \"/greeting\") // Compliant\npublic Greeting greeting(@RequestParam(value \u003d \"name\", defaultValue \u003d \"World\") String name) {\n...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eSpring framework 4.3 introduced variants of the \u003ccode\u003e@RequestMapping\u003c/code\u003e annotation to better represent the semantics of the annotated methods.\nThe use of \u003ccode\u003e@GetMapping\u003c/code\u003e, \u003ccode\u003e@PostMapping\u003c/code\u003e, \u003ccode\u003e@PutMapping\u003c/code\u003e, \u003ccode\u003e@PatchMapping\u003c/code\u003e and \u003ccode\u003e@DeleteMapping\u003c/code\u003e\nshould be preferred to the use of the raw \u003ccode\u003e@RequestMapping(method \u003d RequestMethod.XYZ)\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@RequestMapping(path \u003d \"/greeting\", method \u003d RequestMethod.GET) // Noncompliant\npublic Greeting greeting(@RequestParam(value \u003d \"name\", defaultValue \u003d \"World\") String name) {\n...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@GetMapping(path \u003d \"/greeting\") // Compliant\npublic Greeting greeting(@RequestParam(value \u003d \"name\", defaultValue \u003d \"World\") String name) {\n...\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["spring"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4488"]}},{"key":"java:S104","repo":"java","name":"Files should not have too many lines of code","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.\u003c/p\u003e","mdDesc":"\u003cp\u003eA source file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to\nmaintain. Above a specific threshold, it is strongly advised to refactor it into smaller pieces of code which focus on well defined tasks. Those\nsmaller files will not only be easier to understand but also probably easier to test.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"Max","htmlDesc":"Maximum authorized lines in a file.","defaultValue":"750","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1h","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1h","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1h","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1h","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00104"]}},{"key":"java:S106","repo":"java","name":"Standard outputs should not be used directly to log anything","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen logging a message there are several important requirements which must be fulfilled:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The user must be able to easily retrieve the logs \u003c/li\u003e\n  \u003cli\u003e The format of all logged message must be uniform to allow the user to easily read the log \u003c/li\u003e\n  \u003cli\u003e Logged data must actually be recorded \u003c/li\u003e\n  \u003cli\u003e Sensitive data must only be logged securely \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a\ndedicated logger is highly recommended.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nSystem.out.println(\"My Message\");  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nlogger.log(\"My Message\");\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\u003eOWASP Top 10 2021 Category A9\u003c/a\u003e - Security Logging and\n  Monitoring Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data Exposure\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/nzdGBQ\"\u003eCERT, ERR02-J.\u003c/a\u003e - Prevent exceptions while logging data \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eWhen logging a message there are several important requirements which must be fulfilled:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e The user must be able to easily retrieve the logs \u003c/li\u003e\n  \u003cli\u003e The format of all logged message must be uniform to allow the user to easily read the log \u003c/li\u003e\n  \u003cli\u003e Logged data must actually be recorded \u003c/li\u003e\n  \u003cli\u003e Sensitive data must only be logged securely \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIf a program directly writes to the standard outputs, there is absolutely no way to comply with those requirements. That’s why defining and using a\ndedicated logger is highly recommended.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nSystem.out.println(\"My Message\");  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nlogger.log(\"My Message\");\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://owasp.org/Top10/A09_2021-Security_Logging_and_Monitoring_Failures/\"\u003eOWASP Top 10 2021 Category A9\u003c/a\u003e - Security Logging and\n  Monitoring Failures \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\"\u003eOWASP Top 10 2017 Category A3\u003c/a\u003e - Sensitive Data Exposure\n  \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/nzdGBQ\"\u003eCERT, ERR02-J.\u003c/a\u003e - Prevent exceptions while logging data \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice","cert","owasp-a3"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S106"]}},{"key":"java:S107","repo":"java","name":"Methods should not have too many parameters","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith a maximum number of 4 parameters:\u003c/p\u003e\n\u003cpre\u003e\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eMethods annotated with :\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Spring’s \u003ccode\u003e@RequestMapping\u003c/code\u003e (and related shortcut annotations, like \u003ccode\u003e@GetRequest\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e JAX-RS API annotations (like \u003ccode\u003e@javax.ws.rs.GET\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e Bean constructor injection with \u003ccode\u003e@org.springframework.beans.factory.annotation.Autowired\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e CDI constructor injection with \u003ccode\u003e@javax.inject.Inject\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e@com.fasterxml.jackson.annotation.JsonCreator\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003emay have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.\u003c/p\u003e","mdDesc":"\u003cp\u003eA long parameter list can indicate that a new structure should be created to wrap the numerous parameters or that the function is doing too many\nthings.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith a maximum number of 4 parameters:\u003c/p\u003e\n\u003cpre\u003e\npublic void doSomething(int param1, int param2, int param3, String param4, long param5) {\n...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething(int param1, int param2, int param3, String param4) {\n...\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eMethods annotated with :\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e Spring’s \u003ccode\u003e@RequestMapping\u003c/code\u003e (and related shortcut annotations, like \u003ccode\u003e@GetRequest\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e JAX-RS API annotations (like \u003ccode\u003e@javax.ws.rs.GET\u003c/code\u003e) \u003c/li\u003e\n  \u003cli\u003e Bean constructor injection with \u003ccode\u003e@org.springframework.beans.factory.annotation.Autowired\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e CDI constructor injection with \u003ccode\u003e@javax.inject.Inject\u003c/code\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003e@com.fasterxml.jackson.annotation.JsonCreator\u003c/code\u003e \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003emay have a lot of parameters, encapsulation being possible. Such methods are therefore ignored.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"max","htmlDesc":"Maximum authorized number of parameters","defaultValue":"7","type":"INTEGER"},{"key":"constructorMax","htmlDesc":"Maximum authorized number of parameters for a constructor","defaultValue":"7","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00107"]}},{"key":"java:S108","repo":"java","name":"Nested blocks of code should not be left empty","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eMost of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfor (int i \u003d 0; i \u0026lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen a block contains a comment, this block is not considered to be empty unless it is a \u003ccode\u003esynchronized\u003c/code\u003e block. \u003ccode\u003esynchronized\u003c/code\u003e\nblocks are still considered empty even with comments because they can still affect program flow.\u003c/p\u003e","mdDesc":"\u003cp\u003eMost of the time a block of code is empty when a piece of code is really missing. So such empty block must be either filled or removed.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfor (int i \u003d 0; i \u0026lt; 42; i++){}  // Empty on purpose or missing piece of code ?\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen a block contains a comment, this block is not considered to be empty unless it is a \u003ccode\u003esynchronized\u003c/code\u003e block. \u003ccode\u003esynchronized\u003c/code\u003e\nblocks are still considered empty even with comments because they can still affect program flow.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00108"]}},{"key":"java:S109","repo":"java","name":"Magic numbers should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loop, to test the value of a property, etc.\u003c/p\u003e\n\u003cp\u003eUsing magic numbers may seem obvious and straightforward when you’re writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.\u003c/p\u003e\n\u003cp\u003eThat is why magic numbers must be demystified by first being assigned to clearly named variables before being used.\u003c/p\u003e\n\u003cp\u003e-1, 0 and 1 are not considered magic numbers.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic static void doSomething() {\n\tfor(int i \u003d 0; i \u0026lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic static final int NUMBER_OF_CYCLES \u003d 4;\npublic static void doSomething() {\n  for(int i \u003d 0; i \u0026lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule ignores \u003ccode\u003ehashCode\u003c/code\u003e methods.\u003c/p\u003e","mdDesc":"\u003cp\u003eA magic number is a number that comes out of nowhere, and is directly used in a statement. Magic numbers are often used, for instance to limit the\nnumber of iterations of a loop, to test the value of a property, etc.\u003c/p\u003e\n\u003cp\u003eUsing magic numbers may seem obvious and straightforward when you’re writing a piece of code, but they are much less obvious and straightforward at\ndebugging time.\u003c/p\u003e\n\u003cp\u003eThat is why magic numbers must be demystified by first being assigned to clearly named variables before being used.\u003c/p\u003e\n\u003cp\u003e-1, 0 and 1 are not considered magic numbers.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic static void doSomething() {\n\tfor(int i \u003d 0; i \u0026lt; 4; i++){                 // Noncompliant, 4 is a magic number\n\t\t...\n\t}\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic static final int NUMBER_OF_CYCLES \u003d 4;\npublic static void doSomething() {\n  for(int i \u003d 0; i \u0026lt; NUMBER_OF_CYCLES ; i++){\n    ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule ignores \u003ccode\u003ehashCode\u003c/code\u003e methods.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"Authorized numbers","htmlDesc":"Comma separated list of authorized numbers. Example: -1,0,1,2","defaultValue":"-1,0,1","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S109"]}},{"key":"java:S113","repo":"java","name":"Files should contain an empty newline at the end","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eSome tools work better when files end with an empty line.\u003c/p\u003e\n\u003cp\u003eThis rule simply generates an issue if it is missing.\u003c/p\u003e\n\u003cp\u003eFor example, a Git diff looks like this if the empty line is missing at the end of the file:\u003c/p\u003e\n\u003cpre\u003e\n+class Test {\n+}\n\\ No newline at end of file\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eSome tools work better when files end with an empty line.\u003c/p\u003e\n\u003cp\u003eThis rule simply generates an issue if it is missing.\u003c/p\u003e\n\u003cp\u003eFor example, a Git diff looks like this if the empty line is missing at the end of the file:\u003c/p\u003e\n\u003cpre\u003e\n+class Test {\n+}\n\\ No newline at end of file\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00113"]}},{"key":"java:S114","repo":"java","name":"Interface names should comply with a naming convention","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[A-Z][a-zA-Z0-9]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic interface myInterface {...} // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic interface MyInterface {...}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\ninterface names match a provided regular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[A-Z][a-zA-Z0-9]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic interface myInterface {...} // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic interface MyInterface {...}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"format","htmlDesc":"Regular expression used to check the interface names against.","defaultValue":"^[A-Z][a-zA-Z0-9]*$","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00114"]}},{"key":"java:S115","repo":"java","name":"Constant names should comply with a naming convention","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic class MyClass {\n  public static final int first \u003d 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  public static final int FIRST \u003d 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all constant names match a provided regular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic class MyClass {\n  public static final int first \u003d 1;\n}\n\npublic enum MyEnum {\n  first;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n  public static final int FIRST \u003d 1;\n}\n\npublic enum MyEnum {\n  FIRST;\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"format","htmlDesc":"Regular expression used to check the constant names against.","defaultValue":"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00115"]}},{"key":"java:S116","repo":"java","name":"Field names should comply with a naming convention","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {\n   private int my_field;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n   private int myField;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that field\nnames match a provided regular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nclass MyClass {\n   private int my_field;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {\n   private int myField;\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"format","htmlDesc":"Regular expression used to check the field names against.","defaultValue":"^[a-z][a-zA-Z0-9]*$","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00116"]}},{"key":"java:S117","repo":"java","name":"Local variable and method parameter names should comply with a naming convention","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic void doSomething(int my_param) {\n  int LOCAL;\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething(int myParam) {\n  int local;\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eLoop counters are ignored by this rule.\u003c/p\u003e\n\u003cpre\u003e\nfor (int i_1 \u003d 0; i_1 \u0026lt; limit; i_1++) {  // Compliant\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eas well as one-character \u003ccode\u003ecatch\u003c/code\u003e variables:\u003c/p\u003e\n\u003cpre\u003e\ntry {\n//...\n} catch (Exception e) { // Compliant\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared naming conventions allow teams to collaborate effectively. This rule raises an issue when a local variable or function parameter name does\nnot match the provided regular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic void doSomething(int my_param) {\n  int LOCAL;\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething(int myParam) {\n  int local;\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eLoop counters are ignored by this rule.\u003c/p\u003e\n\u003cpre\u003e\nfor (int i_1 \u003d 0; i_1 \u0026lt; limit; i_1++) {  // Compliant\n  // ...\n}\n\u003c/pre\u003e\n\u003cp\u003eas well as one-character \u003ccode\u003ecatch\u003c/code\u003e variables:\u003c/p\u003e\n\u003cpre\u003e\ntry {\n//...\n} catch (Exception e) { // Compliant\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"format","htmlDesc":"Regular expression used to check the names against.","defaultValue":"^[a-z][a-zA-Z0-9]*$","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00117"]}},{"key":"java:S118","repo":"java","name":"Abstract class names should comply with a naming convention","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\n\u003ccode\u003eabstract\u003c/code\u003e class names match a provided regular expression. If a non-abstract class match the regular expression, an issue is raised to\nsuggest to either make it abstract or to rename it.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression: \u003ccode\u003e^Abstract[A-Z][a-zA-Z0-9]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nabstract class MyClass { // Noncompliant\n}\n\nclass AbstractLikeClass { // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nabstract class AbstractClass {\n}\n\nclass LikeClass {\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eSharing some naming conventions is a key point to make it possible for a team to efficiently collaborate. This rule allows to check that all\n\u003ccode\u003eabstract\u003c/code\u003e class names match a provided regular expression. If a non-abstract class match the regular expression, an issue is raised to\nsuggest to either make it abstract or to rename it.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression: \u003ccode\u003e^Abstract[A-Z][a-zA-Z0-9]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nabstract class MyClass { // Noncompliant\n}\n\nclass AbstractLikeClass { // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nabstract class AbstractClass {\n}\n\nclass LikeClass {\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"format","htmlDesc":"Regular expression used to check the abstract class names against.","defaultValue":"^Abstract[A-Z][a-zA-Z0-9]*$","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00118"]}},{"key":"java:S119","repo":"java","name":"Type parameter names should comply with a naming convention","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type\nparameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.\u003c/p\u003e\n\u003cp\u003eThis rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular\nexpression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass\u0026lt;TYPE\u0026gt; { // Noncompliant\n  \u0026lt;TYPE\u0026gt; void method(TYPE t) { // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass\u0026lt;T\u0026gt; {\n  \u0026lt;T\u0026gt; void method(T t) {\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared naming conventions make it possible for a team to collaborate efficiently. Following the established convention of single-letter type\nparameter names helps users and maintainers of your code quickly see the difference between a type parameter and a poorly named class.\u003c/p\u003e\n\u003cp\u003eThis rule check that all type parameter names match a provided regular expression. The following code snippets use the default regular\nexpression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass\u0026lt;TYPE\u0026gt; { // Noncompliant\n  \u0026lt;TYPE\u0026gt; void method(TYPE t) { // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass\u0026lt;T\u0026gt; {\n  \u0026lt;T\u0026gt; void method(T t) {\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"format","htmlDesc":"Regular expression used to check the type parameter names against.","defaultValue":"^[A-Z][0-9]?$","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00119"]}},{"key":"java:S120","repo":"java","name":"Package names should comply with a naming convention","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[a-z_]+(\\.[a-z_][a-z0-9_]*)*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npackage org.exAmple; // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npackage org.example;\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all package names match a provided regular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[a-z_]+(\\.[a-z_][a-z0-9_]*)*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npackage org.exAmple; // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npackage org.example;\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"format","htmlDesc":"Regular expression used to check the package names against.","defaultValue":"^[a-z_]+(\\.[a-z_][a-z0-9_]*)*$","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00120"]}},{"key":"java:S121","repo":"java","name":"Control structures should use curly braces","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhile not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (condition)  // Noncompliant\n  executeSomething();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (condition) {\n  executeSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen the body of an \u003ccode\u003eif\u003c/code\u003e statement is a single \u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003econtinue\u003c/code\u003e and is on the same\nline.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/g9YxBQ\"\u003eCERT, EXP19-C.\u003c/a\u003e - Use braces for the body of an if, for, or while statement \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/MzZGBQ\"\u003eCERT, EXP52-J.\u003c/a\u003e - Use braces for the body of an if, for, or while statement \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eWhile not technically incorrect, the omission of curly braces can be misleading, and may lead to the introduction of errors during maintenance.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (condition)  // Noncompliant\n  executeSomething();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif (condition) {\n  executeSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eWhen the body of an \u003ccode\u003eif\u003c/code\u003e statement is a single \u003ccode\u003ereturn\u003c/code\u003e, \u003ccode\u003ebreak\u003c/code\u003e or \u003ccode\u003econtinue\u003c/code\u003e and is on the same\nline.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/g9YxBQ\"\u003eCERT, EXP19-C.\u003c/a\u003e - Use braces for the body of an if, for, or while statement \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/MzZGBQ\"\u003eCERT, EXP52-J.\u003c/a\u003e - Use braces for the body of an if, for, or while statement \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00121"]}},{"key":"java:S122","repo":"java","name":"Statements should be on separate lines","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eFor better readability, do not put more than one statement on a single line.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif(someCondition) doSomething();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif(someCondition) {\n  doSomething();\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eFor better readability, do not put more than one statement on a single line.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif(someCondition) doSomething();\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif(someCondition) {\n  doSomething();\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00122"]}},{"key":"java:S2062","repo":"java","name":"\"readResolve\" methods should be inheritable","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe \u003ccode\u003ereadResolve()\u003c/code\u003e method allows final tweaks to the state of an object during deserialization. Non-final classes which implement\n\u003ccode\u003ereadResolve()\u003c/code\u003e, should not set its visibility to \u003ccode\u003eprivate\u003c/code\u003e since it will then be unavailable to child classes.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID \u003d 1;\n\n  private Object readResolve() throws ObjectStreamException  // Noncompliant\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {  // No access to parent\u0027s readResolve() method\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID \u003d 1;\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {\n  //...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe \u003ccode\u003ereadResolve()\u003c/code\u003e method allows final tweaks to the state of an object during deserialization. Non-final classes which implement\n\u003ccode\u003ereadResolve()\u003c/code\u003e, should not set its visibility to \u003ccode\u003eprivate\u003c/code\u003e since it will then be unavailable to child classes.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID \u003d 1;\n\n  private Object readResolve() throws ObjectStreamException  // Noncompliant\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {  // No access to parent\u0027s readResolve() method\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit implements Serializable {\n  private static final long serialVersionUID \u003d 1;\n\n  protected Object readResolve() throws ObjectStreamException\n  {...}\n\n  //...\n}\n\npublic class Raspberry extends Fruit implements Serializable {\n  //...\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2062"]}},{"key":"java:S2196","repo":"java","name":"Switches should be used for sequences of simple \"String\" tests","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eSince Java 7, \u003ccode\u003eString\u003c/code\u003es can be used as \u003ccode\u003eswitch\u003c/code\u003e arguments. So when a single \u003ccode\u003eString\u003c/code\u003e is tested against three or\nmore values in an \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse if\u003c/code\u003e structure, it should be converted to a switch instead for greater readability.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e7\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (\"red\".equals(choice)) {  // Noncompliant\n  dispenseRed();\n} else if (\"blue\".equals(choice)) {\n  dispenseBlue();\n} else if (\"yellow\".equals(choice)) {\n  dispenseYellow();\n} else {\n  promptUser();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nswitch(choice) {\n  case \"Red\":\n    dispenseRed();\n    break;\n  case \"Blue\":\n    dispenseBlue():\n    break;\n  case \"Yellow\":\n    dispenseYellow();\n    break;\n  default:\n    promptUser();\n    break;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eSince Java 7, \u003ccode\u003eString\u003c/code\u003es can be used as \u003ccode\u003eswitch\u003c/code\u003e arguments. So when a single \u003ccode\u003eString\u003c/code\u003e is tested against three or\nmore values in an \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse if\u003c/code\u003e structure, it should be converted to a switch instead for greater readability.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e7\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif (\"red\".equals(choice)) {  // Noncompliant\n  dispenseRed();\n} else if (\"blue\".equals(choice)) {\n  dispenseBlue();\n} else if (\"yellow\".equals(choice)) {\n  dispenseYellow();\n} else {\n  promptUser();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nswitch(choice) {\n  case \"Red\":\n    dispenseRed();\n    break;\n  case \"Blue\":\n    dispenseBlue():\n    break;\n  case \"Yellow\":\n    dispenseYellow();\n    break;\n  default:\n    promptUser();\n    break;\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2196"]}},{"key":"java:S2197","repo":"java","name":"Modulus results should not be checked for direct equality","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for\nequality with a positive number (or a negative one) could result in unexpected results.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean isOdd(int x) {\n  return x % 2 \u003d\u003d 1;  // Noncompliant; if x is an odd negative, x % 2 \u003d\u003d -1\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean isOdd(int x) {\n  return x % 2 !\u003d 0;\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/pDdGBQ\"\u003eCERT, NUM51-J.\u003c/a\u003e - Do not assume that the remainder operator always returns a\n  nonnegative result for integral operands \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/_NUxBQ\"\u003eCERT, INT10-C\u003c/a\u003e - Do not assume a positive remainder when using the % operator \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eWhen the modulus of a negative number is calculated, the result will either be negative or zero. Thus, comparing the modulus of a variable for\nequality with a positive number (or a negative one) could result in unexpected results.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean isOdd(int x) {\n  return x % 2 \u003d\u003d 1;  // Noncompliant; if x is an odd negative, x % 2 \u003d\u003d -1\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean isOdd(int x) {\n  return x % 2 !\u003d 0;\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/pDdGBQ\"\u003eCERT, NUM51-J.\u003c/a\u003e - Do not assume that the remainder operator always returns a\n  nonnegative result for integral operands \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/_NUxBQ\"\u003eCERT, INT10-C\u003c/a\u003e - Do not assume a positive remainder when using the % operator \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2197"]}},{"key":"java:S3030","repo":"java","name":"Classes should not have too many \"static\" imports","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eImporting a class statically allows you to use its \u003ccode\u003epublic static\u003c/code\u003e members without qualifying them with the class name. That can be\nhandy, but if you import too many classes statically, your code can become confusing and difficult to maintain.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default threshold value: 4\u003c/p\u003e\n\u003cpre\u003e\nimport static java.lang.Math.*;\nimport static java.util.Collections.*;\nimport static com.myco.corporate.Constants.*;\nimport static com.myco.division.Constants.*;\nimport static com.myco.department.Constants.*;  // Noncompliant\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eImporting a class statically allows you to use its \u003ccode\u003epublic static\u003c/code\u003e members without qualifying them with the class name. That can be\nhandy, but if you import too many classes statically, your code can become confusing and difficult to maintain.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default threshold value: 4\u003c/p\u003e\n\u003cpre\u003e\nimport static java.lang.Math.*;\nimport static java.util.Collections.*;\nimport static com.myco.corporate.Constants.*;\nimport static com.myco.division.Constants.*;\nimport static com.myco.department.Constants.*;  // Noncompliant\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["brain-overload"],"lang":"java","langName":"Java","params":[{"key":"threshold","htmlDesc":"The maximum number of static imports allowed","defaultValue":"4","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3030"]}},{"key":"java:S3042","repo":"java","name":"\"writeObject\" should not be the only \"synchronized\" code in a class","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe purpose of synchronization is to ensure that only one thread executes a given block of code at a time. There’s no real problem with marking\n\u003ccode\u003ewriteObject\u003c/code\u003e \u003ccode\u003esynchronized\u003c/code\u003e, but it’s highly suspicious if this serialization-related method is the only\n\u003ccode\u003esynchronized\u003c/code\u003e code in a \u003ccode\u003eclass\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n  public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private synchronized void writeObject(ObjectOutputStream stream) throws IOException { // Noncompliant\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n   public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private void writeObject(ObjectOutputStream stream) throws IOException {\n    // ...\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe purpose of synchronization is to ensure that only one thread executes a given block of code at a time. There’s no real problem with marking\n\u003ccode\u003ewriteObject\u003c/code\u003e \u003ccode\u003esynchronized\u003c/code\u003e, but it’s highly suspicious if this serialization-related method is the only\n\u003ccode\u003esynchronized\u003c/code\u003e code in a \u003ccode\u003eclass\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n  public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private synchronized void writeObject(ObjectOutputStream stream) throws IOException { // Noncompliant\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class RubberBall {\n\n  private Color color;\n  private int diameter;\n\n   public RubberBall(Color color, int diameter) {\n    // ...\n  }\n\n  public void bounce(float angle, float velocity) {\n    // ...\n  }\n\n  private void writeObject(ObjectOutputStream stream) throws IOException {\n    // ...\n  }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3042"]}},{"key":"java:S3047","repo":"java","name":"Multiple loops over the same set should be combined","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen a method loops multiple over the same set of data, whether it’s a list or a set of numbers, it is highly likely that the method could be made\nmore efficient by combining the loops into a single set of iterations.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomethingToAList(List\u0026lt;String\u0026gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomethingToAList(List\u0026lt;String\u0026gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen a method loops multiple over the same set of data, whether it’s a list or a set of numbers, it is highly likely that the method could be made\nmore efficient by combining the loops into a single set of iterations.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomethingToAList(List\u0026lt;String\u0026gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n  }\n  for (String str : strings) {  // Noncompliant\n    doStep2(str);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomethingToAList(List\u0026lt;String\u0026gt; strings) {\n  for (String str : strings) {\n    doStep1(str);\n    doStep2(str);\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3047"]}},{"key":"java:S4011","repo":"java","name":"Track uses of disallowed constructors","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThis rule allows banning usage of certain constructors.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eGiven parameters:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e className: java.util.Date \u003c/li\u003e\n  \u003cli\u003e argumentTypes: java.lang.String \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nDate birthday;\nbirthday \u003d new Date(\"Sat Sep 27 05:42:21 EDT 1986\");  // Noncompliant\nbirthday \u003d new Date(528176541000L); // Compliant\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThis rule allows banning usage of certain constructors.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eGiven parameters:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e className: java.util.Date \u003c/li\u003e\n  \u003cli\u003e argumentTypes: java.lang.String \u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\nDate birthday;\nbirthday \u003d new Date(\"Sat Sep 27 05:42:21 EDT 1986\");  // Noncompliant\nbirthday \u003d new Date(528176541000L); // Compliant\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":true,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[{"key":"className","htmlDesc":"Name of the class whose constructor is forbidden. This parameter is mandatory, if absent the rule is disabled.","type":"STRING"},{"key":"argumentTypes","htmlDesc":"Comma-delimited list of argument types, E.G. java.lang.String, int[], int","type":"STRING"},{"key":"allOverloads","htmlDesc":"Set to true to flag all overloads regardless of parameter type","defaultValue":"false","type":"BOOLEAN"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"0min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"0min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"0min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"0min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4011"]}},{"key":"java:S1075","repo":"java","name":"URIs should not be hardcoded","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eHard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may\nnot exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems\nusually differ from the development environment, …​etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by\ncustomizable parameter.\u003c/p\u003e\n\u003cp\u003eFurther even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when URI’s or path delimiters are hard coded.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n  public Collection\u0026lt;User\u0026gt; listUsers() {\n    File userList \u003d new File(\"/home/mylogin/Dev/users.txt\"); // Noncompliant\n    Collection\u0026lt;User\u0026gt; users \u003d parse(userList);\n    return users;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.\n  private Configuration config;\n  public Foo(Configuration myConfig) {\n    this.config \u003d myConfig;\n  }\n  public Collection\u0026lt;User\u0026gt; listUsers() {\n    // Find here the way to get the correct folder, in this case using the Configuration object\n    String listingFolder \u003d config.getProperty(\"myApplication.listingFolder\");\n    // and use this parameter instead of the hard coded path\n    File userList \u003d new File(listingFolder, \"users.txt\"); // Compliant\n    Collection\u0026lt;User\u0026gt; users \u003d parse(userList);\n    return users;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/OjdGBQ\"\u003eCERT, MSC03-J.\u003c/a\u003e - Never hard code sensitive information \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eHard coding a URI makes it difficult to test a program: path literals are not always portable across operating systems, a given absolute path may\nnot exist on a specific test environment, a specified Internet URL may not be available when executing the tests, production environment filesystems\nusually differ from the development environment, …​etc. For all those reasons, a URI should never be hard coded. Instead, it should be replaced by\ncustomizable parameter.\u003c/p\u003e\n\u003cp\u003eFurther even if the elements of a URI are obtained dynamically, portability can still be limited if the path-delimiters are hard-coded.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when URI’s or path delimiters are hard coded.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n  public Collection\u0026lt;User\u0026gt; listUsers() {\n    File userList \u003d new File(\"/home/mylogin/Dev/users.txt\"); // Noncompliant\n    Collection\u0026lt;User\u0026gt; users \u003d parse(userList);\n    return users;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n  // Configuration is a class that returns customizable properties: it can be mocked to be injected during tests.\n  private Configuration config;\n  public Foo(Configuration myConfig) {\n    this.config \u003d myConfig;\n  }\n  public Collection\u0026lt;User\u0026gt; listUsers() {\n    // Find here the way to get the correct folder, in this case using the Configuration object\n    String listingFolder \u003d config.getProperty(\"myApplication.listingFolder\");\n    // and use this parameter instead of the hard coded path\n    File userList \u003d new File(listingFolder, \"users.txt\"); // Compliant\n    Collection\u0026lt;User\u0026gt; users \u003d parse(userList);\n    return users;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/OjdGBQ\"\u003eCERT, MSC03-J.\u003c/a\u003e - Never hard code sensitive information \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["android","cert"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1075"]}},{"key":"java:S1190","repo":"java","name":"Future keywords should not be used as names","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThrough Java’s evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions.\u003c/p\u003e\n\u003cp\u003eFollowing keywords are marked as invalid identifiers\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eKeyword\u003c/th\u003e\n      \u003cth\u003eAdded\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e_\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eenum\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003ccode\u003eassert\u003c/code\u003e and \u003ccode\u003estrictfp\u003c/code\u003e are another example of valid identifiers which became keywords in later versions, but are not\nsupported by this rule.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething() {\n  int enum \u003d 42;            // Noncompliant\n  String _ \u003d \"\";   // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething() {\n  int magic \u003d 42;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThrough Java’s evolution keywords have been added. While code that uses those words as identifiers may be compilable under older versions of Java,\nit will not be under modern versions.\u003c/p\u003e\n\u003cp\u003eFollowing keywords are marked as invalid identifiers\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eKeyword\u003c/th\u003e\n      \u003cth\u003eAdded\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e_\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e9\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eenum\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e5.0\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003e\u003ccode\u003eassert\u003c/code\u003e and \u003ccode\u003estrictfp\u003c/code\u003e are another example of valid identifiers which became keywords in later versions, but are not\nsupported by this rule.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething() {\n  int enum \u003d 42;            // Noncompliant\n  String _ \u003d \"\";   // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething() {\n  int magic \u003d 42;\n}\n\u003c/pre\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["obsolete","pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1190"]}},{"key":"java:S1191","repo":"java","name":"Classes from \"sun.*\" packages should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eClasses in the \u003ccode\u003esun.*\u003c/code\u003e or \u003ccode\u003ecom.sun.*\u003c/code\u003e packages are considered implementation details, and are not part of the Java API.\u003c/p\u003e\n\u003cp\u003eThey can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause\nproblems when moving to a different Java vendor, such as OpenJDK.\u003c/p\u003e\n\u003cp\u003eSuch classes are almost always wrapped by Java API classes that should be used instead.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nimport com.sun.jna.Native;     // Noncompliant\nimport sun.misc.BASE64Encoder; // Noncompliant\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eClasses in the \u003ccode\u003esun.*\u003c/code\u003e or \u003ccode\u003ecom.sun.*\u003c/code\u003e packages are considered implementation details, and are not part of the Java API.\u003c/p\u003e\n\u003cp\u003eThey can cause problems when moving to new versions of Java because there is no backwards compatibility guarantee. Similarly, they can cause\nproblems when moving to a different Java vendor, such as OpenJDK.\u003c/p\u003e\n\u003cp\u003eSuch classes are almost always wrapped by Java API classes that should be used instead.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nimport com.sun.jna.Native;     // Noncompliant\nimport sun.misc.BASE64Encoder; // Noncompliant\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["lock-in","pitfall"],"lang":"java","langName":"Java","params":[{"key":"Exclude","htmlDesc":"Comma separated list of Sun packages to be ignored by this rule. Example: com.sun.jna,sun.misc","defaultValue":"com.sun.jersey,com.sun.faces","type":"STRING"}],"defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"20min","effortToFixDescription":"per \"sun\" import","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"20min","type":"CODE_SMELL","defaultRemFnType":"LINEAR","defaultRemFnGapMultiplier":"20min","remFnType":"LINEAR","remFnGapMultiplier":"20min","remFnOverloaded":false,"gapDescription":"per \"sun\" import","scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1191"]}},{"key":"java:S1192","repo":"java","name":"String literals should not be duplicated","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eDuplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\u003c/p\u003e\n\u003cp\u003eOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default threshold of 3:\u003c/p\u003e\n\u003cpre\u003e\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println(\"\u0027\" + a + \"\u0027\");               // Compliant - literal \"\u0027\" has less than 5 characters and is excluded\n  return \"\";                                       // Compliant - literal \"\" has less than 5 characters and is excluded\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nprivate static final String ACTION_1 \u003d \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eTo prevent generating some false-positives, literals having less than 5 characters are excluded.\u003c/p\u003e","mdDesc":"\u003cp\u003eDuplicated string literals make the process of refactoring error-prone, since you must be sure to update all occurrences.\u003c/p\u003e\n\u003cp\u003eOn the other hand, constants can be referenced from many places, but only need to be updated in a single place.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default threshold of 3:\u003c/p\u003e\n\u003cpre\u003e\npublic void run() {\n  prepare(\"action1\");                              // Noncompliant - \"action1\" is duplicated 3 times\n  execute(\"action1\");\n  release(\"action1\");\n}\n\n@SuppressWarning(\"all\")                            // Compliant - annotations are excluded\nprivate void method1() { /* ... */ }\n@SuppressWarning(\"all\")\nprivate void method2() { /* ... */ }\n\npublic String method3(String a) {\n  System.out.println(\"\u0027\" + a + \"\u0027\");               // Compliant - literal \"\u0027\" has less than 5 characters and is excluded\n  return \"\";                                       // Compliant - literal \"\" has less than 5 characters and is excluded\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nprivate static final String ACTION_1 \u003d \"action1\";  // Compliant\n\npublic void run() {\n  prepare(ACTION_1);                               // Compliant\n  execute(ACTION_1);\n  release(ACTION_1);\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eTo prevent generating some false-positives, literals having less than 5 characters are excluded.\u003c/p\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["design"],"lang":"java","langName":"Java","params":[{"key":"threshold","htmlDesc":"Number of times a literal must be duplicated to trigger an issue","defaultValue":"3","type":"INTEGER"}],"defaultDebtRemFnType":"LINEAR_OFFSET","defaultDebtRemFnCoeff":"2min","defaultDebtRemFnOffset":"2min","effortToFixDescription":"per duplicate instance","debtOverloaded":false,"debtRemFnType":"LINEAR_OFFSET","debtRemFnCoeff":"2min","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"LINEAR_OFFSET","defaultRemFnGapMultiplier":"2min","defaultRemFnBaseEffort":"2min","remFnType":"LINEAR_OFFSET","remFnGapMultiplier":"2min","remFnBaseEffort":"2min","remFnOverloaded":false,"gapDescription":"per duplicate instance","scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1192"]}},{"key":"java:S1193","repo":"java","name":"Exception types should not be tested using \"instanceof\" in catch blocks","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eMultiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  /* ... */\n} catch (Exception e) {\n  if(e instanceof IOException) { /* ... */ }         // Noncompliant\n  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  /* ... */\n} catch (IOException e) { /* ... */ }                // Compliant\n} catch (NullPointerException e) { /* ... */ }       // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/display/java/ERR51-J.+Prefer+user-defined+exceptions+over+more+general+exception+types\"\u003eCERT,\n  ERR51-J.\u003c/a\u003e - Prefer user-defined exceptions over more general exception types \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eMultiple catch blocks of the appropriate type should be used instead of catching a general exception, and then testing on the type.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  /* ... */\n} catch (Exception e) {\n  if(e instanceof IOException) { /* ... */ }         // Noncompliant\n  if(e instanceof NullPointerException{ /* ... */ }  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry {\n  /* ... */\n} catch (IOException e) { /* ... */ }                // Compliant\n} catch (NullPointerException e) { /* ... */ }       // Compliant\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/display/java/ERR51-J.+Prefer+user-defined+exceptions+over+more+general+exception+types\"\u003eCERT,\n  ERR51-J.\u003c/a\u003e - Prefer user-defined exceptions over more general exception types \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","clumsy","error-handling"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1193"]}},{"key":"java:S1194","repo":"java","name":"\"java.lang.Error\" should not be extended","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003ejava.lang.Error\u003c/code\u003e and its subclasses represent abnormal conditions, such as \u003ccode\u003eOutOfMemoryError\u003c/code\u003e, which should only be\nencountered by the Java Virtual Machine.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyException extends Error { /* ... */ }       // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyException extends Exception { /* ... */ }   // Compliant\n\u003c/pre\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003ejava.lang.Error\u003c/code\u003e and its subclasses represent abnormal conditions, such as \u003ccode\u003eOutOfMemoryError\u003c/code\u003e, which should only be\nencountered by the Java Virtual Machine.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyException extends Error { /* ... */ }       // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyException extends Exception { /* ... */ }   // Compliant\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["error-handling"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1194"]}},{"key":"java:S1195","repo":"java","name":"Array designators \"[]\" should be located after the type in method signatures","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAccording to the Java Language Specification:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eFor compatibility with older versions of the Java SE platform,\u003c/p\u003e\n  \u003cp\u003ethe declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the\n  array type after the formal parameter list.\u003c/p\u003e\n  \u003cp\u003eThis obsolescent syntax should not be used in new code.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic int getVector()[] { /* ... */ }    // Noncompliant\n\npublic int[] getMatrix()[] { /* ... */ }  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic int[] getVector() { /* ... */ }\n\npublic int[][] getMatrix() { /* ... */ }\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAccording to the Java Language Specification:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eFor compatibility with older versions of the Java SE platform,\u003c/p\u003e\n  \u003cp\u003ethe declaration of a method that returns an array is allowed to place (some or all of) the empty bracket pairs that form the declaration of the\n  array type after the formal parameter list.\u003c/p\u003e\n  \u003cp\u003eThis obsolescent syntax should not be used in new code.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic int getVector()[] { /* ... */ }    // Noncompliant\n\npublic int[] getMatrix()[] { /* ... */ }  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic int[] getVector() { /* ... */ }\n\npublic int[][] getMatrix() { /* ... */ }\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1195"]}},{"key":"java:S1197","repo":"java","name":"Array designators \"[]\" should be on the type, not the variable","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eArray designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint matrix[][];   // Noncompliant\nint[] matrix[];   // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint[][] matrix;   // Compliant\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eArray designators should always be located on the type for better code readability. Otherwise, developers must look both at the type and the\nvariable name to know whether or not a variable is an array.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint matrix[][];   // Noncompliant\nint[] matrix[];   // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint[][] matrix;   // Compliant\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1197"]}},{"key":"java:S1199","repo":"java","name":"Nested code blocks should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eNested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void evaluate(int operator) {\n  // Do some computation...\n  {\n    int a \u003d stack.pop();\n    int b \u003d stack.pop();\n    int result \u003d a + b;\n    stack.push(result);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void evaluate(int operator) {\n  // Do some computation...\n  evaluateAdd();\n}\n\nprivate void evaluateAdd() {\n  int a \u003d stack.pop();\n  int b \u003d stack.pop();\n  int result \u003d a + b;\n  stack.push(result);\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eNested code blocks can be used to create a new scope and restrict the visibility of the variables defined inside it. Using this feature in a method\ntypically indicates that the method has too many responsibilities, and should be refactored into smaller methods.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void evaluate(int operator) {\n  // Do some computation...\n  {\n    int a \u003d stack.pop();\n    int b \u003d stack.pop();\n    int result \u003d a + b;\n    stack.push(result);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void evaluate(int operator) {\n  // Do some computation...\n  evaluateAdd();\n}\n\nprivate void evaluateAdd() {\n  int a \u003d stack.pop();\n  int b \u003d stack.pop();\n  int result \u003d a + b;\n  stack.push(result);\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S1199"]}},{"key":"java:S2047","repo":"java","name":"The names of methods with boolean return values should start with \"is\" or \"has\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWell-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the\ndocumentation. Toward that end, methods returning a boolean should have names that start with \"is\" or \"has\" rather than with \"get\".\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean getFoo() { // Noncompliant\n  // ...\n}\n\npublic boolean getBar(Bar c) { // Noncompliant\n  // ...\n}\n\npublic boolean testForBar(Bar c) { // Compliant - The method does not start by \u0027get\u0027.\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean isFoo() {\n  // ...\n}\n\npublic boolean hasBar(Bar c) {\n  // ...\n}\n\npublic boolean testForBar(Bar c) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eOverriding methods are excluded.\u003c/p\u003e\n\u003cpre\u003e\n@Override\npublic boolean getFoo(){\n  // ...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWell-named functions can allow the users of your code to understand at a glance what to expect from the function - even before reading the\ndocumentation. Toward that end, methods returning a boolean should have names that start with \"is\" or \"has\" rather than with \"get\".\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean getFoo() { // Noncompliant\n  // ...\n}\n\npublic boolean getBar(Bar c) { // Noncompliant\n  // ...\n}\n\npublic boolean testForBar(Bar c) { // Compliant - The method does not start by \u0027get\u0027.\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic boolean isFoo() {\n  // ...\n}\n\npublic boolean hasBar(Bar c) {\n  // ...\n}\n\npublic boolean testForBar(Bar c) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eOverriding methods are excluded.\u003c/p\u003e\n\u003cpre\u003e\n@Override\npublic boolean getFoo(){\n  // ...\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2047"]}},{"key":"java:S2160","repo":"java","name":"Subclasses that add fields should override \"equals\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eExtend a class that overrides \u003ccode\u003eequals\u003c/code\u003e and add fields without overriding \u003ccode\u003eequals\u003c/code\u003e in the subclass, and you run the risk of\nnon-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.\u003c/p\u003e\n\u003cp\u003eThis rule looks for classes that do all of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e extend classes that override \u003ccode\u003eequals\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e do not themselves override \u003ccode\u003eequals\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e add fields. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj \u003d\u003d this) {\n      return true;\n    }\n    if (this.class !\u003d obj.class) {\n      return false;\n    }\n    Fruit fobj \u003d (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit\u0027s equals method\n  private Color ripeColor;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj \u003d\u003d this) {\n      return true;\n    }\n    if (this.class !\u003d obj.class) {\n      return false;\n    }\n    Fruit fobj \u003d (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {\n  private Color ripeColor;\n\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    Raspberry fobj \u003d (Raspberry) obj;\n    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested\n      return true;\n    }\n    return false;\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eExtend a class that overrides \u003ccode\u003eequals\u003c/code\u003e and add fields without overriding \u003ccode\u003eequals\u003c/code\u003e in the subclass, and you run the risk of\nnon-equivalent instances of your subclass being seen as equal, because only the superclass fields will be considered in the equality test.\u003c/p\u003e\n\u003cp\u003eThis rule looks for classes that do all of the following:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e extend classes that override \u003ccode\u003eequals\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e do not themselves override \u003ccode\u003eequals\u003c/code\u003e. \u003c/li\u003e\n  \u003cli\u003e add fields. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj \u003d\u003d this) {\n      return true;\n    }\n    if (this.class !\u003d obj.class) {\n      return false;\n    }\n    Fruit fobj \u003d (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {  // Noncompliant; instances will use Fruit\u0027s equals method\n  private Color ripeColor;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Fruit {\n  private Season ripe;\n\n  public boolean equals(Object obj) {\n    if (obj \u003d\u003d this) {\n      return true;\n    }\n    if (this.class !\u003d obj.class) {\n      return false;\n    }\n    Fruit fobj \u003d (Fruit) obj;\n    if (ripe.equals(fobj.getRipe()) {\n      return true;\n    }\n    return false;\n  }\n}\n\npublic class Raspberry extends Fruit {\n  private Color ripeColor;\n\n  public boolean equals(Object obj) {\n    if (! super.equals(obj)) {\n      return false;\n    }\n    Raspberry fobj \u003d (Raspberry) obj;\n    if (ripeColor.equals(fobj.getRipeColor()) {  // added fields are tested\n      return true;\n    }\n    return false;\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2160"]}},{"key":"java:S2165","repo":"java","name":"\"finalize\" should not set fields to \"null\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere is no point in setting class fields to \u003ccode\u003enull\u003c/code\u003e in a finalizer. If this this is a hint to the garbage collector, it is unnecessary -\nthe object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n  private String name;\n\n  @Override\n  void finalize() {\n    name \u003d null;  // Noncompliant; completely unnecessary\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThere is no point in setting class fields to \u003ccode\u003enull\u003c/code\u003e in a finalizer. If this this is a hint to the garbage collector, it is unnecessary -\nthe object will be garbage collected anyway - and doing so may actually cause extra work for the garbage collector.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo {\n  private String name;\n\n  @Override\n  void finalize() {\n    name \u003d null;  // Noncompliant; completely unnecessary\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy","performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2165"]}},{"key":"java:S2166","repo":"java","name":"Classes named like \"Exception\" should extend \"Exception\" or a subclass","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eClear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend \u003ccode\u003eException\u003c/code\u003e or one of its subclasses is a clear violation of the expectation\nthat a class\u0027 name will indicate what it is and/or does.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class FruitException {  // Noncompliant; this has nothing to do with Exception\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException {  // Noncompliant; the extends clause was forgotten?\n  public CarException(String message, Throwable cause) {\n  // ...\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class FruitSport {\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException extends Exception {\n  public CarException(String message, Throwable cause) {\n  // ...\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eClear, communicative naming is important in code. It helps maintainers and API users understand the intentions for and uses of a unit of code.\nUsing \"exception\" in the name of a class that does not extend \u003ccode\u003eException\u003c/code\u003e or one of its subclasses is a clear violation of the expectation\nthat a class\u0027 name will indicate what it is and/or does.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class FruitException {  // Noncompliant; this has nothing to do with Exception\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException {  // Noncompliant; the extends clause was forgotten?\n  public CarException(String message, Throwable cause) {\n  // ...\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class FruitSport {\n  private Fruit expected;\n  private String unusualCharacteristics;\n  private boolean appropriateForCommercialExploitation;\n  // ...\n}\n\npublic class CarException extends Exception {\n  public CarException(String message, Throwable cause) {\n  // ...\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention","error-handling","pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2166"]}},{"key":"java:S3010","repo":"java","name":"Static fields should not be updated in constructors","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAssigning a value to a \u003ccode\u003estatic\u003c/code\u003e field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.\u003c/p\u003e\n\u003cp\u003eInstead remove the field’s \u003ccode\u003estatic\u003c/code\u003e modifier, or initialize it statically.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Person {\n  static Date dateOfBirth;\n  static int expectedFingers;\n\n  public Person(date birthday) {\n    dateOfBirth \u003d birthday;  // Noncompliant; now everyone has this birthday\n    expectedFingers \u003d 10;  // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Person {\n  Date dateOfBirth;\n  static int expectedFingers \u003d 10;\n\n  public Person(date birthday) {\n    dateOfBirth \u003d birthday;\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eAssigning a value to a \u003ccode\u003estatic\u003c/code\u003e field in a constructor could cause unreliable behavior at runtime since it will change the value for all\ninstances of the class.\u003c/p\u003e\n\u003cp\u003eInstead remove the field’s \u003ccode\u003estatic\u003c/code\u003e modifier, or initialize it statically.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Person {\n  static Date dateOfBirth;\n  static int expectedFingers;\n\n  public Person(date birthday) {\n    dateOfBirth \u003d birthday;  // Noncompliant; now everyone has this birthday\n    expectedFingers \u003d 10;  // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Person {\n  Date dateOfBirth;\n  static int expectedFingers \u003d 10;\n\n  public Person(date birthday) {\n    dateOfBirth \u003d birthday;\n  }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3010"]}},{"key":"java:S3011","repo":"java","name":"Reflection should not be used to increase accessibility of classes, methods, or fields","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThis rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a\nfield value. Altering or bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could lead to run-time\nerrors.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void makeItPublic(String methodName) throws NoSuchMethodException {\n\n  this.getClass().getMethod(methodName).setAccessible(true); // Noncompliant\n}\n\npublic void setItAnyway(String fieldName, int value) {\n  this.getClass().getDeclaredField(fieldName).setInt(this, value); // Noncompliant; bypasses controls in setter\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/_jZGBQ\"\u003eCERT, SEC05-J.\u003c/a\u003e - Do not use reflection to increase accessibility of classes,\n  methods, or fields \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThis rule raises an issue when reflection is used to change the visibility of a class, method or field, and when it is used to directly update a\nfield value. Altering or bypassing the accessibility of classes, methods, or fields violates the encapsulation principle and could lead to run-time\nerrors.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void makeItPublic(String methodName) throws NoSuchMethodException {\n\n  this.getClass().getMethod(methodName).setAccessible(true); // Noncompliant\n}\n\npublic void setItAnyway(String fieldName, int value) {\n  this.getClass().getDeclaredField(fieldName).setInt(this, value); // Noncompliant; bypasses controls in setter\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/_jZGBQ\"\u003eCERT, SEC05-J.\u003c/a\u003e - Do not use reflection to increase accessibility of classes,\n  methods, or fields \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3011"]}},{"key":"java:S3012","repo":"java","name":"Arrays should not be copied using loops","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eUsing a loop to copy an array or a subset of an array is simply wasted code when there are built-in functions to do it for you. Instead, use\n\u003ccode\u003eArrays.copyOf\u003c/code\u003e to copy an entire array into another array, use \u003ccode\u003eSystem.arraycopy\u003c/code\u003e to copy only a subset of an array into\nanother array, and use \u003ccode\u003eArrays.asList\u003c/code\u003e to feed the constructor of a new list with an array.\u003c/p\u003e\n\u003cp\u003eNote that \u003ccode\u003eArrays.asList\u003c/code\u003e simply puts a \u003ccode\u003eCollections\u003c/code\u003e wrapper around the original array, so further steps are required if a\nnon-fixed-size \u003ccode\u003eList\u003c/code\u003e is desired.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void makeCopies(String[] source) {\n\n  this.array \u003d new String[source.length];\n  this.list \u003d new ArrayList(source.length);\n\n  for (int i \u003d 0; i \u0026lt; source.length; i++) {\n    this.array[i] \u003d source[i]; // Noncompliant\n  }\n\n  for (String s : source) {\n    this.list.add(s); // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void makeCopies(String[] source) {\n  this.array \u003d Arrays.copyOf(source, source.length);\n  Collections.addAll(this.list, source);\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eRule detects only the most idiomatic patterns, it will not consider loops with non-trivial control flow. For example, array elements that are\ncopied conditionally are ignored.\u003c/p\u003e\n\u003cpre\u003e\npublic int[] getCopy(int[] source) {\n  int[] dest \u003d new int[source.length];\n  for (int i \u003d 0; i \u0026lt; source.length; i++) {\n    if (source[i] \u0026gt; 10) {\n      dest[i] \u003d source[i];  // Compliant\n    }\n  }\n  return dest;\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eUsing a loop to copy an array or a subset of an array is simply wasted code when there are built-in functions to do it for you. Instead, use\n\u003ccode\u003eArrays.copyOf\u003c/code\u003e to copy an entire array into another array, use \u003ccode\u003eSystem.arraycopy\u003c/code\u003e to copy only a subset of an array into\nanother array, and use \u003ccode\u003eArrays.asList\u003c/code\u003e to feed the constructor of a new list with an array.\u003c/p\u003e\n\u003cp\u003eNote that \u003ccode\u003eArrays.asList\u003c/code\u003e simply puts a \u003ccode\u003eCollections\u003c/code\u003e wrapper around the original array, so further steps are required if a\nnon-fixed-size \u003ccode\u003eList\u003c/code\u003e is desired.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void makeCopies(String[] source) {\n\n  this.array \u003d new String[source.length];\n  this.list \u003d new ArrayList(source.length);\n\n  for (int i \u003d 0; i \u0026lt; source.length; i++) {\n    this.array[i] \u003d source[i]; // Noncompliant\n  }\n\n  for (String s : source) {\n    this.list.add(s); // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void makeCopies(String[] source) {\n  this.array \u003d Arrays.copyOf(source, source.length);\n  Collections.addAll(this.list, source);\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eRule detects only the most idiomatic patterns, it will not consider loops with non-trivial control flow. For example, array elements that are\ncopied conditionally are ignored.\u003c/p\u003e\n\u003cpre\u003e\npublic int[] getCopy(int[] source) {\n  int[] dest \u003d new int[source.length];\n  for (int i \u003d 0; i \u0026lt; source.length; i++) {\n    if (source[i] \u0026gt; 10) {\n      dest[i] \u003d source[i];  // Compliant\n    }\n  }\n  return dest;\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3012"]}},{"key":"java:S3014","repo":"java","name":"\"ThreadGroup\" should not be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere is little valid reason to use the methods of the \u003ccode\u003eThreadGroup\u003c/code\u003e class. Some are deprecated (\u003ccode\u003eallowThreadSuspension()\u003c/code\u003e,\n\u003ccode\u003eresume()\u003c/code\u003e, \u003ccode\u003estop()\u003c/code\u003e, and \u003ccode\u003esuspend()\u003c/code\u003e), some are obsolete, others aren’t thread-safe, and still others are insecure\n(\u003ccode\u003eactiveCount()\u003c/code\u003e, \u003ccode\u003eenumerate()\u003c/code\u003e) . For these reasons, any use of \u003ccode\u003eThreadGroup\u003c/code\u003e is suspicious and should be\navoided.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nThreadFactory threadFactory \u003d Executors.defaultThreadFactory();\nThreadPoolExecutor executorPool \u003d new ThreadPoolExecutor(3, 10, 5, TimeUnit.SECONDS, new ArrayBlockingQueue\u0026lt;Runnable\u0026gt;(2), threadFactory);\n\nfor (int i \u003d 0; i \u0026lt; 10; i++) {\n  executorPool.execute(new JobThread(\"Job: \" + i));\n}\n\nSystem.out.println(executorPool.getActiveCount()); // Compliant\nexecutorPool.shutdown();\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/YzdGBQ\"\u003eCERT, THI01-J.\u003c/a\u003e - Do not invoke ThreadGroup methods \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThere is little valid reason to use the methods of the \u003ccode\u003eThreadGroup\u003c/code\u003e class. Some are deprecated (\u003ccode\u003eallowThreadSuspension()\u003c/code\u003e,\n\u003ccode\u003eresume()\u003c/code\u003e, \u003ccode\u003estop()\u003c/code\u003e, and \u003ccode\u003esuspend()\u003c/code\u003e), some are obsolete, others aren’t thread-safe, and still others are insecure\n(\u003ccode\u003eactiveCount()\u003c/code\u003e, \u003ccode\u003eenumerate()\u003c/code\u003e) . For these reasons, any use of \u003ccode\u003eThreadGroup\u003c/code\u003e is suspicious and should be\navoided.\u003c/p\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nThreadFactory threadFactory \u003d Executors.defaultThreadFactory();\nThreadPoolExecutor executorPool \u003d new ThreadPoolExecutor(3, 10, 5, TimeUnit.SECONDS, new ArrayBlockingQueue\u0026lt;Runnable\u0026gt;(2), threadFactory);\n\nfor (int i \u003d 0; i \u0026lt; 10; i++) {\n  executorPool.execute(new JobThread(\"Job: \" + i));\n}\n\nSystem.out.println(executorPool.getActiveCount()); // Compliant\nexecutorPool.shutdown();\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/YzdGBQ\"\u003eCERT, THI01-J.\u003c/a\u003e - Do not invoke ThreadGroup methods \u003c/li\u003e\n\u003c/ul\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","design","suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"45min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"45min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"45min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"45min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3014"]}},{"key":"java:S3252","repo":"java","name":"\"static\" base class members should not be accessed via derived types","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn the interest of code clarity, \u003ccode\u003estatic\u003c/code\u003e members of a \u003ccode\u003ebase\u003c/code\u003e class should never be accessed using a derived type’s name.\nDoing so is confusing and could create the illusion that two different static members exist.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Parent {\n  public static int counter;\n}\n\nclass Child extends Parent {\n  public Child() {\n    Child.counter++;  // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass Parent {\n  public static int counter;\n}\n\nclass Child extends Parent {\n  public Child() {\n    Parent.counter++;\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIn the interest of code clarity, \u003ccode\u003estatic\u003c/code\u003e members of a \u003ccode\u003ebase\u003c/code\u003e class should never be accessed using a derived type’s name.\nDoing so is confusing and could create the illusion that two different static members exist.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nclass Parent {\n  public static int counter;\n}\n\nclass Child extends Parent {\n  public Child() {\n    Child.counter++;  // Noncompliant\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass Parent {\n  public static int counter;\n}\n\nclass Child extends Parent {\n  public Child() {\n    Parent.counter++;\n  }\n}\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3252"]}},{"key":"java:S3254","repo":"java","name":"Default annotation parameter values should not be passed as arguments","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eSpecifying the default value for an annotation parameter is redundant. Such values should be omitted in the interests of readability.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@MyAnnotation(arg \u003d \"def\")  // Noncompliant\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default \"def\";\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@MyAnnotation\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default \"def\";\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eSpecifying the default value for an annotation parameter is redundant. Such values should be omitted in the interests of readability.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@MyAnnotation(arg \u003d \"def\")  // Noncompliant\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default \"def\";\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@MyAnnotation\npublic class MyClass {\n  // ...\n}\npublic @interface MyAnnotation {\n  String arg() default \"def\";\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy","finding"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3254"]}},{"key":"java:S4349","repo":"java","name":"\"write(byte[],int,int)\" should be overridden","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen directly subclassing \u003ccode\u003ejava.io.OutputStream\u003c/code\u003e or \u003ccode\u003ejava.io.FilterOutputStream\u003c/code\u003e, the only requirement is that you implement\nthe method \u003ccode\u003ewrite(int)\u003c/code\u003e. However most uses for such streams don’t write a single byte at a time and the default implementation for\n\u003ccode\u003ewrite(byte[],int,int)\u003c/code\u003e will call \u003ccode\u003ewrite(int)\u003c/code\u003e for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n\u003ccode\u003ewrite(byte[],int,int)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a direct subclass of \u003ccode\u003ejava.io.OutputStream\u003c/code\u003e or \u003ccode\u003ejava.io.FilterOutputStream\u003c/code\u003e doesn’t provide an\noverride of \u003ccode\u003ewrite(byte[],int,int)\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyStream extends OutputStream { // Noncompliant\n    private FileOutputStream fout;\n\n    public MyStream(File file) throws IOException {\n        fout \u003d new FileOutputStream(file);\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        fout.write(b);\n    }\n\n    @Override\n    public void close() throws IOException {\n        fout.write(\"\\n\\n\".getBytes());\n        fout.close();\n        super.close();\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyStream extends OutputStream {\n    private FileOutputStream fout;\n\n    public MyStream(File file) throws IOException {\n        fout \u003d new FileOutputStream(file);\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        fout.write(b);\n    }\n\n    @Override\n    public void write(byte[] b, int off, int len) throws IOException {\n        fout.write(b, off, len);\n    }\n\n    @Override\n    public void close() throws IOException {\n        fout.write(\"\\n\\n\".getBytes());\n        fout.close();\n        super.close();\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule doesn’t raise an issue when the class is declared \u003ccode\u003eabstract\u003c/code\u003e.\u003c/p\u003e","mdDesc":"\u003cp\u003eWhen directly subclassing \u003ccode\u003ejava.io.OutputStream\u003c/code\u003e or \u003ccode\u003ejava.io.FilterOutputStream\u003c/code\u003e, the only requirement is that you implement\nthe method \u003ccode\u003ewrite(int)\u003c/code\u003e. However most uses for such streams don’t write a single byte at a time and the default implementation for\n\u003ccode\u003ewrite(byte[],int,int)\u003c/code\u003e will call \u003ccode\u003ewrite(int)\u003c/code\u003e for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n\u003ccode\u003ewrite(byte[],int,int)\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a direct subclass of \u003ccode\u003ejava.io.OutputStream\u003c/code\u003e or \u003ccode\u003ejava.io.FilterOutputStream\u003c/code\u003e doesn’t provide an\noverride of \u003ccode\u003ewrite(byte[],int,int)\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyStream extends OutputStream { // Noncompliant\n    private FileOutputStream fout;\n\n    public MyStream(File file) throws IOException {\n        fout \u003d new FileOutputStream(file);\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        fout.write(b);\n    }\n\n    @Override\n    public void close() throws IOException {\n        fout.write(\"\\n\\n\".getBytes());\n        fout.close();\n        super.close();\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyStream extends OutputStream {\n    private FileOutputStream fout;\n\n    public MyStream(File file) throws IOException {\n        fout \u003d new FileOutputStream(file);\n    }\n\n    @Override\n    public void write(int b) throws IOException {\n        fout.write(b);\n    }\n\n    @Override\n    public void write(byte[] b, int off, int len) throws IOException {\n        fout.write(b, off, len);\n    }\n\n    @Override\n    public void close() throws IOException {\n        fout.write(\"\\n\\n\".getBytes());\n        fout.close();\n        super.close();\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThis rule doesn’t raise an issue when the class is declared \u003ccode\u003eabstract\u003c/code\u003e.\u003c/p\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"30min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"30min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"30min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"30min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4349"]}},{"key":"java:S5793","repo":"java","name":"Migrate your tests from JUnit4 to the new JUnit5 annotations","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAs mentioned in JUnit5 documentation, it is possible to integrate JUnit4 with JUnit5:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eJUnit provides a gentle migration path via a JUnit Vintage test engine which allows existing tests based on JUnit 3 and JUnit 4 to be executed\n  using the JUnit Platform infrastructure. Since all classes and annotations specific to JUnit Jupiter reside under a new org.junit.jupiter base\n  package, having both JUnit 4 and JUnit Jupiter in the classpath does not lead to any conflicts.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eHowever, maintaining both systems is a temporary solution. This rule flags all the annotations from JUnit4 which would need to be migrated to\nJUnit5, hence helping migration of a project.\u003c/p\u003e\n\u003cp\u003eHere is the list of JUnit4 annotations tracked by the rule, with their corresponding annotations in JUnit5:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eJUnit4\u003c/th\u003e\n      \u003cth\u003eJUnit5\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.Test\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.Test\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.Before\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.BeforeEach\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.After\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.AfterEach\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.BeforeClass\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.BeforeAll\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.AfterClass\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.AfterAll\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.Ignore\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.Disabled\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eNote that the following annotations might requires some rework of the tests to have JUnit5 equivalent behavior. A simple replacement of the\nannotation won’t work immediately:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eJUnit4\u003c/th\u003e\n      \u003cth\u003eJUnit5\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.experimental.categories.Category\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.Tag\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.Rule\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.extension.ExtendWith\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.ClassRule\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.extension.RegisterExtension\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.runner.RunWith\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.extension.ExtendWith\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npackage org.foo;\n\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport org.junit.experimental.categories.Category;\nimport org.junit.runner.RunWith;\n\n@RunWith(MyJUnit4Runner.class)\npublic class MyJUnit4Test {\n\n  @BeforeClass\n  public static void beforeAll() {\n    System.out.println(\"beforeAll\");\n  }\n\n  @AfterClass\n  public static void afterAll() {\n    System.out.println(\"AfterAll\");\n  }\n\n  @Before\n  public void beforeEach() {\n    System.out.println(\"beforeEach\");\n  }\n\n  @After\n  public void afterEach() {\n    System.out.println(\"afterEach\");\n  }\n\n  @Test\n  public void test1() throws Exception {\n    System.out.println(\"test1\");\n  }\n\n  public interface SomeTests { /* category marker */ }\n\n  @Test\n  @Category(SomeTests.class)\n  public void test2() throws Exception {\n    System.out.println(\"test2\");\n  }\n\n  @Test\n  @Ignore(\"Requires fix of #42\")\n  public void ignored() throws Exception {\n    System.out.println(\"ignored\");\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npackage org.foo;\n\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\n@ExtendWith(MyJUnit5Extension.class)\nclass MyJUnit5Test {\n\n  @BeforeAll\n  static void beforeAll() {\n    System.out.println(\"beforeAll\");\n  }\n\n  @AfterAll\n  static void afterAll() {\n    System.out.println(\"afterAll\");\n  }\n\n  @BeforeEach\n  void beforeEach() {\n    System.out.println(\"beforeEach\");\n  }\n\n  @AfterEach\n  void afterEach() {\n    System.out.println(\"afterEach\");\n  }\n\n  @Test\n  void test1() {\n    System.out.println(\"test1\");\n  }\n\n  @Test\n  @Tag(\"SomeTests\")\n  void test2() {\n    System.out.println(\"test2\");\n  }\n\n  @Test\n  @Disabled(\"Requires fix of #42\")\n  void disabled() {\n    System.out.println(\"ignored\");\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4\"\u003eJUnit 5: Migrating from JUnit4\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eAs mentioned in JUnit5 documentation, it is possible to integrate JUnit4 with JUnit5:\u003c/p\u003e\n\u003cblockquote\u003e\n  \u003cp\u003eJUnit provides a gentle migration path via a JUnit Vintage test engine which allows existing tests based on JUnit 3 and JUnit 4 to be executed\n  using the JUnit Platform infrastructure. Since all classes and annotations specific to JUnit Jupiter reside under a new org.junit.jupiter base\n  package, having both JUnit 4 and JUnit Jupiter in the classpath does not lead to any conflicts.\u003c/p\u003e\n\u003c/blockquote\u003e\n\u003cp\u003eHowever, maintaining both systems is a temporary solution. This rule flags all the annotations from JUnit4 which would need to be migrated to\nJUnit5, hence helping migration of a project.\u003c/p\u003e\n\u003cp\u003eHere is the list of JUnit4 annotations tracked by the rule, with their corresponding annotations in JUnit5:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eJUnit4\u003c/th\u003e\n      \u003cth\u003eJUnit5\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.Test\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.Test\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.Before\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.BeforeEach\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.After\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.AfterEach\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.BeforeClass\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.BeforeAll\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.AfterClass\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.AfterAll\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.Ignore\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.Disabled\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003cp\u003eNote that the following annotations might requires some rework of the tests to have JUnit5 equivalent behavior. A simple replacement of the\nannotation won’t work immediately:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eJUnit4\u003c/th\u003e\n      \u003cth\u003eJUnit5\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.experimental.categories.Category\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.Tag\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.Rule\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.extension.ExtendWith\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.ClassRule\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.extension.RegisterExtension\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.runner.RunWith\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eorg.junit.jupiter.api.extension.ExtendWith\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npackage org.foo;\n\nimport org.junit.After;\nimport org.junit.AfterClass;\nimport org.junit.Before;\nimport org.junit.BeforeClass;\nimport org.junit.Ignore;\nimport org.junit.Test;\nimport org.junit.experimental.categories.Category;\nimport org.junit.runner.RunWith;\n\n@RunWith(MyJUnit4Runner.class)\npublic class MyJUnit4Test {\n\n  @BeforeClass\n  public static void beforeAll() {\n    System.out.println(\"beforeAll\");\n  }\n\n  @AfterClass\n  public static void afterAll() {\n    System.out.println(\"AfterAll\");\n  }\n\n  @Before\n  public void beforeEach() {\n    System.out.println(\"beforeEach\");\n  }\n\n  @After\n  public void afterEach() {\n    System.out.println(\"afterEach\");\n  }\n\n  @Test\n  public void test1() throws Exception {\n    System.out.println(\"test1\");\n  }\n\n  public interface SomeTests { /* category marker */ }\n\n  @Test\n  @Category(SomeTests.class)\n  public void test2() throws Exception {\n    System.out.println(\"test2\");\n  }\n\n  @Test\n  @Ignore(\"Requires fix of #42\")\n  public void ignored() throws Exception {\n    System.out.println(\"ignored\");\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npackage org.foo;\n\nimport org.junit.jupiter.api.AfterAll;\nimport org.junit.jupiter.api.AfterEach;\nimport org.junit.jupiter.api.BeforeAll;\nimport org.junit.jupiter.api.BeforeEach;\nimport org.junit.jupiter.api.Disabled;\nimport org.junit.jupiter.api.Tag;\nimport org.junit.jupiter.api.Test;\nimport org.junit.jupiter.api.extension.ExtendWith;\n\n@ExtendWith(MyJUnit5Extension.class)\nclass MyJUnit5Test {\n\n  @BeforeAll\n  static void beforeAll() {\n    System.out.println(\"beforeAll\");\n  }\n\n  @AfterAll\n  static void afterAll() {\n    System.out.println(\"afterAll\");\n  }\n\n  @BeforeEach\n  void beforeEach() {\n    System.out.println(\"beforeEach\");\n  }\n\n  @AfterEach\n  void afterEach() {\n    System.out.println(\"afterEach\");\n  }\n\n  @Test\n  void test1() {\n    System.out.println(\"test1\");\n  }\n\n  @Test\n  @Tag(\"SomeTests\")\n  void test2() {\n    System.out.println(\"test2\");\n  }\n\n  @Test\n  @Disabled(\"Requires fix of #42\")\n  void disabled() {\n    System.out.println(\"ignored\");\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://junit.org/junit5/docs/current/user-guide/#migrating-from-junit4\"\u003eJUnit 5: Migrating from JUnit4\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"INFO","status":"READY","isTemplate":false,"tags":[],"sysTags":["junit","tests"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5793"]}},{"key":"java:S100","repo":"java","name":"Method names should comply with a naming convention","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith default provided regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic int DoSomething(){...}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic int doSomething(){...}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eOverriding methods are excluded.\u003c/p\u003e\n\u003cpre\u003e\n@Override\npublic int Do_Something(){...}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared naming conventions allow teams to collaborate efficiently. This rule checks that all method names match a provided regular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith default provided regular expression \u003ccode\u003e^[a-z][a-zA-Z0-9]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic int DoSomething(){...}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic int doSomething(){...}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eOverriding methods are excluded.\u003c/p\u003e\n\u003cpre\u003e\n@Override\npublic int Do_Something(){...}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"format","htmlDesc":"Regular expression used to check the method names against.","defaultValue":"^[a-z][a-zA-Z0-9]*$","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00100"]}},{"key":"java:S101","repo":"java","name":"Class names should comply with a naming convention","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith default provided regular expression \u003ccode\u003e^[A-Z][a-zA-Z0-9]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nclass my_class {...}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {...}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared coding conventions allow teams to collaborate effectively. This rule allows to check that all class names match a provided regular\nexpression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith default provided regular expression \u003ccode\u003e^[A-Z][a-zA-Z0-9]*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\nclass my_class {...}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nclass MyClass {...}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"format","htmlDesc":"Regular expression used to check the class names against.","defaultValue":"^[A-Z][a-zA-Z0-9]*$","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S00101"]}},{"key":"java:S2057","repo":"java","name":"\"Serializable\" classes should have a \"serialVersionUID\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eA \u003ccode\u003eserialVersionUID\u003c/code\u003e field is strongly recommended in all \u003ccode\u003eSerializable\u003c/code\u003e classes. If you do not provide one, one will be\ncalculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an\nentirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the\nclass.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eserialVersionUID\u003c/code\u003e\u0027s should be declared with all of these modifiers: \u003ccode\u003estatic final long\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.\n        implements Serializable {\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private final int serialVersionUID \u003d 1; // Noncompliant; not static \u0026amp; int rather than long\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID \u003d 1;\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eRecords, Swing and AWT classes, \u003ccode\u003eabstract\u003c/code\u003e classes, \u003ccode\u003eThrowable\u003c/code\u003e and its subclasses (\u003ccode\u003eException\u003c/code\u003es and\n\u003ccode\u003eError\u003c/code\u003es), and classes marked with \u003ccode\u003e@SuppressWarnings(\"serial\")\u003c/code\u003e are ignored.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/ajdGBQ\"\u003eCERT, SER00-J.\u003c/a\u003e - Enable serialization compatibility during class evolution \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/serialization/serial-arch.html#serialization-of-records\"\u003eRecord Serialization\u003c/a\u003e\n  - Serialization of Records \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eA \u003ccode\u003eserialVersionUID\u003c/code\u003e field is strongly recommended in all \u003ccode\u003eSerializable\u003c/code\u003e classes. If you do not provide one, one will be\ncalculated for you by the compiler. The danger in not explicitly choosing the value is that when the class changes, the compiler will generate an\nentirely new id, and you will be suddenly unable to deserialize (read from file) objects that were serialized with the previous version of the\nclass.\u003c/p\u003e\n\u003cp\u003e\u003ccode\u003eserialVersionUID\u003c/code\u003e\u0027s should be declared with all of these modifiers: \u003ccode\u003estatic final long\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Raspberry extends Fruit  // Noncompliant; no serialVersionUID.\n        implements Serializable {\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private final int serialVersionUID \u003d 1; // Noncompliant; not static \u0026amp; int rather than long\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Raspberry extends Fruit\n        implements Serializable {\n  private static final long serialVersionUID \u003d 1;\n  private String variety;\n\n  public Raspberry(Season ripe, String variety) { ...}\n  public void setVariety(String variety) {...}\n  public String getVarity() {...}\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eRecords, Swing and AWT classes, \u003ccode\u003eabstract\u003c/code\u003e classes, \u003ccode\u003eThrowable\u003c/code\u003e and its subclasses (\u003ccode\u003eException\u003c/code\u003es and\n\u003ccode\u003eError\u003c/code\u003es), and classes marked with \u003ccode\u003e@SuppressWarnings(\"serial\")\u003c/code\u003e are ignored.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/ajdGBQ\"\u003eCERT, SER00-J.\u003c/a\u003e - Enable serialization compatibility during class evolution \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/serialization/serial-arch.html#serialization-of-records\"\u003eRecord Serialization\u003c/a\u003e\n  - Serialization of Records \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","pitfall","serialization"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2057"]}},{"key":"java:S2059","repo":"java","name":"\"Serializable\" inner classes of \"Serializable\" classes should be static","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eSerializing a non-\u003ccode\u003estatic\u003c/code\u003e inner class will result in an attempt at serializing the outer class as well. If the outer class is actually\nserializable, then the serialization will succeed but possibly write out far more data than was intended.\u003c/p\u003e\n\u003cp\u003eMaking the inner class \u003ccode\u003estatic\u003c/code\u003e (i.e. \"nested\") avoids this problem, therefore inner classes should be \u003ccode\u003estatic\u003c/code\u003e if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e an inner class can only be instantiated within the context of an instance of the outer class. \u003c/li\u003e\n  \u003cli\u003e a nested (\u003ccode\u003estatic\u003c/code\u003e) class can be instantiated independently of the outer class. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Raspberry implements Serializable {\n  // ...\n\n  public class Drupelet implements Serializable {  // Noncompliant; output may be too large\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Raspberry implements Serializable {\n  // ...\n\n  public static class Drupelet implements Serializable {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/ZTdGBQ\"\u003eCERT, SER05-J.\u003c/a\u003e - Do not serialize instances of inner classes \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eSerializing a non-\u003ccode\u003estatic\u003c/code\u003e inner class will result in an attempt at serializing the outer class as well. If the outer class is actually\nserializable, then the serialization will succeed but possibly write out far more data than was intended.\u003c/p\u003e\n\u003cp\u003eMaking the inner class \u003ccode\u003estatic\u003c/code\u003e (i.e. \"nested\") avoids this problem, therefore inner classes should be \u003ccode\u003estatic\u003c/code\u003e if possible.\nHowever, you should be aware that there are semantic differences between an inner class and a nested one:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e an inner class can only be instantiated within the context of an instance of the outer class. \u003c/li\u003e\n  \u003cli\u003e a nested (\u003ccode\u003estatic\u003c/code\u003e) class can be instantiated independently of the outer class. \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Raspberry implements Serializable {\n  // ...\n\n  public class Drupelet implements Serializable {  // Noncompliant; output may be too large\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Raspberry implements Serializable {\n  // ...\n\n  public static class Drupelet implements Serializable {\n    // ...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/ZTdGBQ\"\u003eCERT, SER05-J.\u003c/a\u003e - Do not serialize instances of inner classes \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","pitfall","serialization"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2059"]}},{"key":"java:S2176","repo":"java","name":"Class names should not shadow interfaces or superclasses","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhile it’s perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it’s\nconfusing and could cause problems in the future.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhile it’s perfectly legal to give a class the same simple name as a class in another package that it extends or interface it implements, it’s\nconfusing and could cause problems in the future.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npackage my.mypackage;\n\npublic class Foo implements a.b.Foo { // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npackage my.mypackage;\n\npublic class FooJr implements a.b.Foo {\n\u003c/pre\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2176"]}},{"key":"java:S2178","repo":"java","name":"Short-circuit logic should be used in boolean contexts","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif(getTrue() || getFalse()) { ... } // true short-circuit logic\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/WNYxBQ\"\u003eCERT, EXP46-C.\u003c/a\u003e - Do not use a bitwise operator with a Boolean-like operand \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThe use of non-short-circuit logic in a boolean context is likely a mistake - one that could cause serious program errors as conditions are\nevaluated under the wrong circumstances.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nif(getTrue() | getFalse()) { ... } // Noncompliant; both sides evaluated\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nif(getTrue() || getFalse()) { ... } // true short-circuit logic\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/WNYxBQ\"\u003eCERT, EXP46-C.\u003c/a\u003e - Do not use a bitwise operator with a Boolean-like operand \u003c/li\u003e\n\u003c/ul\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2178"]}},{"key":"java:S2293","repo":"java","name":"The diamond operator (\"\u003c\u003e\") should be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eJava 7 introduced the diamond operator (\u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e) to reduce the verbosity of generics code. For instance, instead of having to declare\na \u003ccode\u003eList\u003c/code\u003e\u0027s type in both its declaration and its constructor, you can now simplify the constructor declaration with \u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e,\nand the compiler will infer the type.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e7\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; strings \u003d new ArrayList\u0026lt;String\u0026gt;();  // Noncompliant\nMap\u0026lt;String,List\u0026lt;Integer\u0026gt;\u0026gt; map \u003d new HashMap\u0026lt;String,List\u0026lt;Integer\u0026gt;\u0026gt;();  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; strings \u003d new ArrayList\u0026lt;\u0026gt;();\nMap\u0026lt;String,List\u0026lt;Integer\u0026gt;\u0026gt; map \u003d new HashMap\u0026lt;\u0026gt;();\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eJava 7 introduced the diamond operator (\u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e) to reduce the verbosity of generics code. For instance, instead of having to declare\na \u003ccode\u003eList\u003c/code\u003e\u0027s type in both its declaration and its constructor, you can now simplify the constructor declaration with \u003ccode\u003e\u0026lt;\u0026gt;\u003c/code\u003e,\nand the compiler will infer the type.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e7\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; strings \u003d new ArrayList\u0026lt;String\u0026gt;();  // Noncompliant\nMap\u0026lt;String,List\u0026lt;Integer\u0026gt;\u0026gt; map \u003d new HashMap\u0026lt;String,List\u0026lt;Integer\u0026gt;\u0026gt;();  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; strings \u003d new ArrayList\u0026lt;\u0026gt;();\nMap\u0026lt;String,List\u0026lt;Integer\u0026gt;\u0026gt; map \u003d new HashMap\u0026lt;\u0026gt;();\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2293"]}},{"key":"java:S4288","repo":"java","name":"Spring components should use constructor injection","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eSpring \u003ccode\u003e@Controller\u003c/code\u003e, \u003ccode\u003e@Service\u003c/code\u003e, and \u003ccode\u003e@Repository\u003c/code\u003e classes are singletons by default, meaning only one instance\nof the class is ever instantiated in the application. Typically such a class might have a few \u003ccode\u003estatic\u003c/code\u003e members, such as a logger, but all\nnon-static members should be managed by Spring and supplied via constructor injection rather than by field injection.\u003c/p\u003e\n\u003cp\u003eThis rule raise an issue when any non-\u003ccode\u003estatic\u003c/code\u003e member of a Spring component has an injection annotation.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Controller\npublic class HelloWorld {\n\n  @Autowired\n  private String name \u003d null; // Noncompliant\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eAs of Spring 4.3\u003c/p\u003e\n\u003cpre\u003e\n@Controller\npublic class HelloWorld {\n\n  private String name \u003d null;\n\n  HelloWorld(String name) {\n    this.name \u003d name;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eBefore Spring 4.3\u003c/p\u003e\n\u003cpre\u003e\n@Controller\npublic class HelloWorld {\n\n  private String name \u003d null;\n\n  @Autowired\n  HelloWorld(String name) {\n    this.name \u003d name;\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eSpring \u003ccode\u003e@Controller\u003c/code\u003e, \u003ccode\u003e@Service\u003c/code\u003e, and \u003ccode\u003e@Repository\u003c/code\u003e classes are singletons by default, meaning only one instance\nof the class is ever instantiated in the application. Typically such a class might have a few \u003ccode\u003estatic\u003c/code\u003e members, such as a logger, but all\nnon-static members should be managed by Spring and supplied via constructor injection rather than by field injection.\u003c/p\u003e\n\u003cp\u003eThis rule raise an issue when any non-\u003ccode\u003estatic\u003c/code\u003e member of a Spring component has an injection annotation.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Controller\npublic class HelloWorld {\n\n  @Autowired\n  private String name \u003d null; // Noncompliant\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cp\u003eAs of Spring 4.3\u003c/p\u003e\n\u003cpre\u003e\n@Controller\npublic class HelloWorld {\n\n  private String name \u003d null;\n\n  HelloWorld(String name) {\n    this.name \u003d name;\n  }\n}\n\u003c/pre\u003e\n\u003cp\u003eBefore Spring 4.3\u003c/p\u003e\n\u003cpre\u003e\n@Controller\npublic class HelloWorld {\n\n  private String name \u003d null;\n\n  @Autowired\n  HelloWorld(String name) {\n    this.name \u003d name;\n  }\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["design","spring"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"LINEAR","defaultDebtRemFnCoeff":"2min","effortToFixDescription":"2min by injected field","debtOverloaded":false,"debtRemFnType":"LINEAR","debtRemFnCoeff":"2min","type":"CODE_SMELL","defaultRemFnType":"LINEAR","defaultRemFnGapMultiplier":"2min","remFnType":"LINEAR","remFnGapMultiplier":"2min","remFnOverloaded":false,"gapDescription":"2min by injected field","scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4288"]}},{"key":"java:S5329","repo":"java","name":"Collection constructors should not be used as java.util.function.Function","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIt is very common to pass a collection constructor reference as an argument, for example \u003ccode\u003eCollectors.toCollection(ArrayList::new)\u003c/code\u003e takes\nthe \u003ccode\u003eArrayList::new\u003c/code\u003e constructor. When the method expects a \u003ccode\u003ejava.util.function.Supplier\u003c/code\u003e it is perfectly fine. However when the\nmethod argument type is \u003ccode\u003ejava.util.function.Function\u003c/code\u003e it means that an argument will be passed to the constructor.\u003c/p\u003e\n\u003cp\u003eThe first argument of Collections constructors is usually an integer representing its \"initial capacity\". This is generally not what the developer\nexpects, but the memory allocation is not visible at first glance.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a collection constructor is passed by reference as a \u003ccode\u003ejava.util.function.Function\u003c/code\u003e argument.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nArrays.asList(1, 2, 54000).stream().collect(Collectors.toMap(Function.identity(), ArrayList::new)); // Noncompliant, \"ArrayList::new\" unintentionally refers to \"ArrayList(int initialCapacity)\" instead of \"ArrayList()\"\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nArrays.asList(1, 2, 54000).stream().collect(Collectors.toMap(Function.identity(), id -\u0026gt; new ArrayList\u0026lt;\u0026gt;())); // Compliant, explicitly show the usage of \"id -\u0026gt; new ArrayList\u0026lt;\u0026gt;()\" or \"id -\u0026gt; new ArrayList\u0026lt;\u0026gt;(id)\"\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIt is very common to pass a collection constructor reference as an argument, for example \u003ccode\u003eCollectors.toCollection(ArrayList::new)\u003c/code\u003e takes\nthe \u003ccode\u003eArrayList::new\u003c/code\u003e constructor. When the method expects a \u003ccode\u003ejava.util.function.Supplier\u003c/code\u003e it is perfectly fine. However when the\nmethod argument type is \u003ccode\u003ejava.util.function.Function\u003c/code\u003e it means that an argument will be passed to the constructor.\u003c/p\u003e\n\u003cp\u003eThe first argument of Collections constructors is usually an integer representing its \"initial capacity\". This is generally not what the developer\nexpects, but the memory allocation is not visible at first glance.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a collection constructor is passed by reference as a \u003ccode\u003ejava.util.function.Function\u003c/code\u003e argument.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nArrays.asList(1, 2, 54000).stream().collect(Collectors.toMap(Function.identity(), ArrayList::new)); // Noncompliant, \"ArrayList::new\" unintentionally refers to \"ArrayList(int initialCapacity)\" instead of \"ArrayList()\"\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nArrays.asList(1, 2, 54000).stream().collect(Collectors.toMap(Function.identity(), id -\u0026gt; new ArrayList\u0026lt;\u0026gt;())); // Compliant, explicitly show the usage of \"id -\u0026gt; new ArrayList\u0026lt;\u0026gt;()\" or \"id -\u0026gt; new ArrayList\u0026lt;\u0026gt;(id)\"\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5329"]}},{"key":"java:S3052","repo":"java","name":"Fields should not be initialized to default values","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need\nto explicitly set a field to its default value. Further, under the logic that cleaner code is better code, it’s considered poor style to do so.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  int count \u003d 0;  // Noncompliant\n  // ...\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  int count;\n  // ...\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003efinal\u003c/code\u003e fields are ignored.\u003c/p\u003e","mdDesc":"\u003cp\u003eThe compiler automatically initializes class fields to their default values before setting them with any initialization values, so there is no need\nto explicitly set a field to its default value. Further, under the logic that cleaner code is better code, it’s considered poor style to do so.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  int count \u003d 0;  // Noncompliant\n  // ...\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class MyClass {\n\n  int count;\n  // ...\n\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003e\u003ccode\u003efinal\u003c/code\u003e fields are ignored.\u003c/p\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention","finding"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3052"]}},{"key":"java:S4042","repo":"java","name":"\"java.nio.Files#delete\" should be preferred","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen \u003ccode\u003ejava.io.File#delete\u003c/code\u003e fails, this \u003ccode\u003eboolean\u003c/code\u003e method simply returns \u003ccode\u003efalse\u003c/code\u003e with no indication of the cause. On\nthe other hand, when \u003ccode\u003ejava.nio.file.Files#delete\u003c/code\u003e fails, this \u003ccode\u003evoid\u003c/code\u003e method returns one of a series of exception types to better\nindicate the cause of the failure. And since more information is generally better in a debugging situation, \u003ccode\u003ejava.nio.file.Files#delete\u003c/code\u003e is\nthe preferred option.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void cleanUp(Path path) {\n  File file \u003d new File(path);\n  if (!file.delete()) {  // Noncompliant\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void cleanUp(Path path) throws NoSuchFileException, DirectoryNotEmptyException, IOException {\n  Files.delete(path);\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen \u003ccode\u003ejava.io.File#delete\u003c/code\u003e fails, this \u003ccode\u003eboolean\u003c/code\u003e method simply returns \u003ccode\u003efalse\u003c/code\u003e with no indication of the cause. On\nthe other hand, when \u003ccode\u003ejava.nio.file.Files#delete\u003c/code\u003e fails, this \u003ccode\u003evoid\u003c/code\u003e method returns one of a series of exception types to better\nindicate the cause of the failure. And since more information is generally better in a debugging situation, \u003ccode\u003ejava.nio.file.Files#delete\u003c/code\u003e is\nthe preferred option.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic void cleanUp(Path path) {\n  File file \u003d new File(path);\n  if (!file.delete()) {  // Noncompliant\n    //...\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void cleanUp(Path path) throws NoSuchFileException, DirectoryNotEmptyException, IOException {\n  Files.delete(path);\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["api-design","error-handling"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"10min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"10min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"10min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"10min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4042"]}},{"key":"java:S4144","repo":"java","name":"Methods should not have identical implementations","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other. Numerical and string literals are not taken into\naccount.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nprivate final static String CODE \u003d \"bounteous\";\n\npublic String calculateCode() {\n  doTheThing();\n  return CODE;\n}\n\npublic String getName() {  // Noncompliant\n  doTheThing();\n  return CODE;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nprivate final static String CODE \u003d \"bounteous\";\n\npublic String getCode() {\n  doTheThing();\n  return CODE;\n}\n\npublic String getName() {\n  return getCode();\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eMethods that are not accessors (getters and setters), with fewer than 2 statements are ignored.\u003c/p\u003e","mdDesc":"\u003cp\u003eWhen two methods have the same implementation, either it was a mistake - something else was intended - or the duplication was intentional, but may\nbe confusing to maintainers. In the latter case, one implementation should invoke the other. Numerical and string literals are not taken into\naccount.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nprivate final static String CODE \u003d \"bounteous\";\n\npublic String calculateCode() {\n  doTheThing();\n  return CODE;\n}\n\npublic String getName() {  // Noncompliant\n  doTheThing();\n  return CODE;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nprivate final static String CODE \u003d \"bounteous\";\n\npublic String getCode() {\n  doTheThing();\n  return CODE;\n}\n\npublic String getName() {\n  return getCode();\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eMethods that are not accessors (getters and setters), with fewer than 2 statements are ignored.\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing","duplicate","suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4144"]}},{"key":"java:S4165","repo":"java","name":"Assignments should not be redundant","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe transitive property says that if \u003ccode\u003ea \u003d\u003d b\u003c/code\u003e and \u003ccode\u003eb \u003d\u003d c\u003c/code\u003e, then \u003ccode\u003ea \u003d\u003d c\u003c/code\u003e. In such cases, there’s no point in\nassigning \u003ccode\u003ea\u003c/code\u003e to \u003ccode\u003ec\u003c/code\u003e or vice versa because they’re already equivalent.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\na \u003d b;\nc \u003d a;\nb \u003d c; // Noncompliant: c and b are already the same\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\na \u003d b;\nc \u003d a;\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe transitive property says that if \u003ccode\u003ea \u003d\u003d b\u003c/code\u003e and \u003ccode\u003eb \u003d\u003d c\u003c/code\u003e, then \u003ccode\u003ea \u003d\u003d c\u003c/code\u003e. In such cases, there’s no point in\nassigning \u003ccode\u003ea\u003c/code\u003e to \u003ccode\u003ec\u003c/code\u003e or vice versa because they’re already equivalent.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an assignment is useless because the assigned-to variable already holds the value on all execution paths.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\na \u003d b;\nc \u003d a;\nb \u003d c; // Noncompliant: c and b are already the same\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\na \u003d b;\nc \u003d a;\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["redundant"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4165"]}},{"key":"java:S4174","repo":"java","name":"Local constants should follow naming conventions for constants","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all local, \u003ccode\u003efinal\u003c/code\u003e, initialized, primitive\nvariables, have names that match a provided regular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic void doSomething() {\n  final int local \u003d 42;\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething() {\n  final int LOCAL \u003d 42;\n  ...\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eShared coding conventions allow teams to collaborate efficiently. This rule checks that all local, \u003ccode\u003efinal\u003c/code\u003e, initialized, primitive\nvariables, have names that match a provided regular expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cp\u003eWith the default regular expression \u003ccode\u003e^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$\u003c/code\u003e:\u003c/p\u003e\n\u003cpre\u003e\npublic void doSomething() {\n  final int local \u003d 42;\n  ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic void doSomething() {\n  final int LOCAL \u003d 42;\n  ...\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["convention"],"lang":"java","langName":"Java","params":[{"key":"format","htmlDesc":"Regular expression used to check the constant names against.","defaultValue":"^[A-Z][A-Z0-9]*(_[A-Z0-9]+)*$","type":"STRING"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4174"]}},{"key":"java:S4266","repo":"java","name":"\"Stream.collect()\" calls should not be redundant","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen using the \u003ccode\u003eStream\u003c/code\u003e API, call chains should be simplified as much as possible to improve readability and maintainability.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when one of the following substitution can be made:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eOriginal\u003c/th\u003e\n      \u003cth\u003ePreferred\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(counting())\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.count()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(maxBy(comparator))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.max(comparator)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(minBy(comparator))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.min(comparator)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(mapping(mapper))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.map(mapper).collect()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(reducing(...))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.reduce(...)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(summingInt(mapper))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.mapToInt(mapper).sum()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(summingLong(mapper))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.mapToLong(mapper).sum()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(summingDouble(mapper))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.mapToDouble(mapper).sum()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint count \u003d stream.collect(counting());  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint count \u003d stream.count();\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen using the \u003ccode\u003eStream\u003c/code\u003e API, call chains should be simplified as much as possible to improve readability and maintainability.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when one of the following substitution can be made:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eOriginal\u003c/th\u003e\n      \u003cth\u003ePreferred\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(counting())\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.count()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(maxBy(comparator))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.max(comparator)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(minBy(comparator))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.min(comparator)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(mapping(mapper))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.map(mapper).collect()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(reducing(...))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.reduce(...)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(summingInt(mapper))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.mapToInt(mapper).sum()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(summingLong(mapper))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.mapToLong(mapper).sum()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.collect(summingDouble(mapper))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.mapToDouble(mapper).sum()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint count \u003d stream.collect(counting());  // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint count \u003d stream.count();\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4266"]}},{"key":"java:S5128","repo":"java","name":"\"Bean Validation\" (JSR 380) should be properly configured","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003eBean Validation\u003c/code\u003e as per defined by JSR 380 can be triggered programmatically or also executed by the \u003ccode\u003eBean Validation\u003c/code\u003e\nproviders. However something should tell the \u003ccode\u003eBean Validation\u003c/code\u003e provider that a variable must be validated otherwise no validation will\nhappen. This can be achieved by annotating a variable with \u003ccode\u003ejavax.validation.Valid\u003c/code\u003e and unfortunally it’s easy to forget to add this\nannotation on complex Beans.\u003c/p\u003e\n\u003cp\u003eNot annotating a variable with \u003ccode\u003e@Valid\u003c/code\u003e means \u003ccode\u003eBean Validation\u003c/code\u003e will not be triggered for this variable, but readers may\noverlook this omission and assume the variable will be validated.\u003c/p\u003e\n\u003cp\u003eThis rule will run by default on all \u003ccode\u003eClass\u003c/code\u003e\u0027es and therefore can generate a lot of noise. This rule should be restricted to run only on\ncertain layers. For this reason, the \"Restrict Scope of Coding Rules\" feature should be used to check for missing \u003ccode\u003e@Valid\u003c/code\u003e annotations only\non some packages of the application.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\n\npublic class User {\n  @NotNull\n  private String name;\n}\n\npublic class Group {\n  @NotNull\n  private List\u0026lt;User\u0026gt; users; // Noncompliant; User instances are not validated\n}\n\npublic class MyService {\n  public void login(User user) { // Noncompliant; parameter \"user\" is not validated\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\n\npublic class User {\n  @NotNull\n  private String name;\n}\n\npublic class Group {\n  @Valid\n  @NotNull\n  private List\u0026lt;User\u0026gt; users; // Compliant; User instances are validated\n\n  @NotNull\n  // preferred style as of Bean Validation 2.0\n  private List\u0026lt;@Valid User\u0026gt; users2; // Compliant; User instances are validated\n}\n\npublic class MyService {\n  public void login(@Valid User user) { // Compliant\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://beanvalidation.org/2.0/spec/\"\u003eBean Validation 2.0 (JSR 380)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003eBean Validation\u003c/code\u003e as per defined by JSR 380 can be triggered programmatically or also executed by the \u003ccode\u003eBean Validation\u003c/code\u003e\nproviders. However something should tell the \u003ccode\u003eBean Validation\u003c/code\u003e provider that a variable must be validated otherwise no validation will\nhappen. This can be achieved by annotating a variable with \u003ccode\u003ejavax.validation.Valid\u003c/code\u003e and unfortunally it’s easy to forget to add this\nannotation on complex Beans.\u003c/p\u003e\n\u003cp\u003eNot annotating a variable with \u003ccode\u003e@Valid\u003c/code\u003e means \u003ccode\u003eBean Validation\u003c/code\u003e will not be triggered for this variable, but readers may\noverlook this omission and assume the variable will be validated.\u003c/p\u003e\n\u003cp\u003eThis rule will run by default on all \u003ccode\u003eClass\u003c/code\u003e\u0027es and therefore can generate a lot of noise. This rule should be restricted to run only on\ncertain layers. For this reason, the \"Restrict Scope of Coding Rules\" feature should be used to check for missing \u003ccode\u003e@Valid\u003c/code\u003e annotations only\non some packages of the application.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\n\npublic class User {\n  @NotNull\n  private String name;\n}\n\npublic class Group {\n  @NotNull\n  private List\u0026lt;User\u0026gt; users; // Noncompliant; User instances are not validated\n}\n\npublic class MyService {\n  public void login(User user) { // Noncompliant; parameter \"user\" is not validated\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nimport javax.validation.Valid;\nimport javax.validation.constraints.NotNull;\n\npublic class User {\n  @NotNull\n  private String name;\n}\n\npublic class Group {\n  @Valid\n  @NotNull\n  private List\u0026lt;User\u0026gt; users; // Compliant; User instances are validated\n\n  @NotNull\n  // preferred style as of Bean Validation 2.0\n  private List\u0026lt;@Valid User\u0026gt; users2; // Compliant; User instances are validated\n}\n\npublic class MyService {\n  public void login(@Valid User user) { // Compliant\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://beanvalidation.org/2.0/spec/\"\u003eBean Validation 2.0 (JSR 380)\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5128"]}},{"key":"java:S5261","repo":"java","name":"\"else\" statements should be clearly matched with an \"if\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe dangling \u003ccode\u003eelse\u003c/code\u003e problem appears when nested \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e\u0026nbsp;statements are written without curly braces. In\nthis case, \u003ccode\u003eelse\u003c/code\u003e is associated with the nearest\u0026nbsp;\u003ccode\u003eif\u003c/code\u003e but that is not always obvious and sometimes the indentation can also\nbe misleading.\u003c/p\u003e\n\u003cp\u003eThis rules reports \u003ccode\u003eelse\u003c/code\u003e statements that are difficult to understand, because they are inside nested \u003ccode\u003eif\u003c/code\u003e statements without\ncurly braces.\u003c/p\u003e\n\u003cp\u003eAdding curly braces can generally make the code clearer (see rule \u003ca href\u003d\u0027/coding_rules#rule_key\u003djava%3AS121\u0027\u003eS121\u003c/a\u003e ), and in this situation of dangling \u003ccode\u003eelse\u003c/code\u003e, it\nreally clarifies the intention of the code.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n if (a)\n   if (b)\n     d++;\n else     // Noncompliant, is the \"else\" associated with \"if(a)\" or \"if (b)\"? (the answer is \"if(b)\")\n   e++;\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n if (a) {\n   if (b) {\n     d++;\n   }\n } else { // Compliant, there is no doubt the \"else\" is associated with \"if(a)\"\n   e++;\n }\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Dangling_else\"\u003ehttps://en.wikipedia.org/wiki/Dangling_else\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThe dangling \u003ccode\u003eelse\u003c/code\u003e problem appears when nested \u003ccode\u003eif\u003c/code\u003e/\u003ccode\u003eelse\u003c/code\u003e\u0026nbsp;statements are written without curly braces. In\nthis case, \u003ccode\u003eelse\u003c/code\u003e is associated with the nearest\u0026nbsp;\u003ccode\u003eif\u003c/code\u003e but that is not always obvious and sometimes the indentation can also\nbe misleading.\u003c/p\u003e\n\u003cp\u003eThis rules reports \u003ccode\u003eelse\u003c/code\u003e statements that are difficult to understand, because they are inside nested \u003ccode\u003eif\u003c/code\u003e statements without\ncurly braces.\u003c/p\u003e\n\u003cp\u003eAdding curly braces can generally make the code clearer (see rule {rule:java:S121} ), and in this situation of dangling \u003ccode\u003eelse\u003c/code\u003e, it\nreally clarifies the intention of the code.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n if (a)\n   if (b)\n     d++;\n else     // Noncompliant, is the \"else\" associated with \"if(a)\" or \"if (b)\"? (the answer is \"if(b)\")\n   e++;\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n if (a) {\n   if (b) {\n     d++;\n   }\n } else { // Compliant, there is no doubt the \"else\" is associated with \"if(a)\"\n   e++;\n }\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://en.wikipedia.org/wiki/Dangling_else\"\u003ehttps://en.wikipedia.org/wiki/Dangling_else\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["confusing"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"1min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"1min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"1min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"1min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5261"]}},{"key":"java:S6201","repo":"java","name":"Pattern Matching for \"instanceof\" operator should be used instead of simple \"instanceof\" + cast","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn Java 16, the feature \"Pattern matching for instanceof\" is finalized and can\u0026nbsp;be used in production. Previously developers needed to do 3\noperations in order to do this: check the variable type, cast it and assign the casted value to the new variable. This approach is quite verbose and\ncan be replaced with pattern matching for\u0026nbsp;\u003ccode\u003einstanceof\u003c/code\u003e, doing these 3 actions (check, cast and assign) in one expression.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an \u003ccode\u003einstanceof\u003c/code\u003e check followed by a cast and an assignment could be replaced by pattern matching.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint f(Object o) {\n  if (o instanceof String) {\u0026nbsp; // Noncompliant\n    String string \u003d (String) o;\n    return string.length();\n  }\n  return 0;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint f(Object o) {\n\u0026nbsp; if (o instanceof String string) {\u0026nbsp; // Compliant\n\u0026nbsp; \u0026nbsp; return string.length();\n\u0026nbsp; }\n\u0026nbsp; return 0;\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/394\"\u003eJEP 394: Pattern Matching for instanceof\u003c/a\u003e \u0026nbsp; \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eIn Java 16, the feature \"Pattern matching for instanceof\" is finalized and can\u0026nbsp;be used in production. Previously developers needed to do 3\noperations in order to do this: check the variable type, cast it and assign the casted value to the new variable. This approach is quite verbose and\ncan be replaced with pattern matching for\u0026nbsp;\u003ccode\u003einstanceof\u003c/code\u003e, doing these 3 actions (check, cast and assign) in one expression.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when an \u003ccode\u003einstanceof\u003c/code\u003e check followed by a cast and an assignment could be replaced by pattern matching.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint f(Object o) {\n  if (o instanceof String) {\u0026nbsp; // Noncompliant\n    String string \u003d (String) o;\n    return string.length();\n  }\n  return 0;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint f(Object o) {\n\u0026nbsp; if (o instanceof String string) {\u0026nbsp; // Compliant\n\u0026nbsp; \u0026nbsp; return string.length();\n\u0026nbsp; }\n\u0026nbsp; return 0;\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/394\"\u003eJEP 394: Pattern Matching for instanceof\u003c/a\u003e \u0026nbsp; \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java16"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6201"]}},{"key":"java:S6202","repo":"java","name":"Operator \"instanceof\" should be used instead of \"A.class.isInstance()\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe \u003ccode\u003einstanceof\u003c/code\u003e construction is a preferred way to check whether a variable can be cast to some type statically because a compile-time\nerror will occur in case of incompatible types. The method \u003ca\nhref\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isInstance-java.lang.Object-\"\u003eisInstance()\u003c/a\u003e from \u003ccode\u003ejava.lang.Class\u003c/code\u003e\nworks differently and does type check at runtime only, incompatible types will therefore not be detected early in the developement, potentially\nresulting in dead code. The \u003ccode\u003eisInstance()\u003c/code\u003e method should only be used in dynamic cases when the \u003ccode\u003einstanceof\u003c/code\u003e operator can’t be\nused.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eisInstance()\u003c/code\u003e is used and could be replaced with an \u003ccode\u003einstanceof\u003c/code\u003e check.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint f(Object o) {\n\u0026nbsp; if (String.class.isInstance(o)) {\u0026nbsp; // Noncompliant\n\u0026nbsp; \u0026nbsp; return 42;\n\u0026nbsp; }\n\u0026nbsp; return 0;\n}\n\nint f(Number n) {\n\u0026nbsp; if (String.class.isInstance(n)) {\u0026nbsp; // Noncompliant\n\u0026nbsp; \u0026nbsp; return 42;\n\u0026nbsp; }\n\u0026nbsp; return 0;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint f(Object o) {\n\u0026nbsp; if (o instanceof String) {\u0026nbsp; // Compliant\n\u0026nbsp; \u0026nbsp; return 42;\n\u0026nbsp; }\n\u0026nbsp; return 0;\n}\n\nint f(Number n) {\n\u0026nbsp; if (n instanceof String) {\u0026nbsp; // Compile-time error\n\u0026nbsp; \u0026nbsp; return 42;\n\u0026nbsp; }\n\u0026nbsp; return 0;\n}\n\nboolean fun(Object o, String c) throws ClassNotFoundException\n{\n  return Class.forName(c).isInstance(o); // Compliant, can\u0027t use instanceof operator here\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe \u003ccode\u003einstanceof\u003c/code\u003e construction is a preferred way to check whether a variable can be cast to some type statically because a compile-time\nerror will occur in case of incompatible types. The method \u003ca\nhref\u003d\"https://docs.oracle.com/javase/8/docs/api/java/lang/Class.html#isInstance-java.lang.Object-\"\u003eisInstance()\u003c/a\u003e from \u003ccode\u003ejava.lang.Class\u003c/code\u003e\nworks differently and does type check at runtime only, incompatible types will therefore not be detected early in the developement, potentially\nresulting in dead code. The \u003ccode\u003eisInstance()\u003c/code\u003e method should only be used in dynamic cases when the \u003ccode\u003einstanceof\u003c/code\u003e operator can’t be\nused.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \u003ccode\u003eisInstance()\u003c/code\u003e is used and could be replaced with an \u003ccode\u003einstanceof\u003c/code\u003e check.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint f(Object o) {\n\u0026nbsp; if (String.class.isInstance(o)) {\u0026nbsp; // Noncompliant\n\u0026nbsp; \u0026nbsp; return 42;\n\u0026nbsp; }\n\u0026nbsp; return 0;\n}\n\nint f(Number n) {\n\u0026nbsp; if (String.class.isInstance(n)) {\u0026nbsp; // Noncompliant\n\u0026nbsp; \u0026nbsp; return 42;\n\u0026nbsp; }\n\u0026nbsp; return 0;\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint f(Object o) {\n\u0026nbsp; if (o instanceof String) {\u0026nbsp; // Compliant\n\u0026nbsp; \u0026nbsp; return 42;\n\u0026nbsp; }\n\u0026nbsp; return 0;\n}\n\nint f(Number n) {\n\u0026nbsp; if (n instanceof String) {\u0026nbsp; // Compile-time error\n\u0026nbsp; \u0026nbsp; return 42;\n\u0026nbsp; }\n\u0026nbsp; return 0;\n}\n\nboolean fun(Object o, String c) throws ClassNotFoundException\n{\n  return Class.forName(c).isInstance(o); // Compliant, can\u0027t use instanceof operator here\n}\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6202"]}},{"key":"java:S6203","repo":"java","name":"Text blocks should not be used in complex expressions","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn Java 15 Text Blocks are official and can be used just like an ordinary String. However, when they are used to represent a big chunk of text,\nthey should not be used directly in complex expressions, as it decreases the readability. In this case, it is better to extract the text block into a\nvariable or a field.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when a text block longer than a number of lines given as a parameter is directly used within a lambda expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nlistOfString.stream()\n  .map(str -\u0026gt; !\"\"\"\n    \u0026lt;project\u0026gt;\n      \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt;\n      \u0026lt;parent\u0026gt;\n        \u0026lt;groupId\u0026gt;com.mycompany.app\u0026lt;/groupId\u0026gt;\n        \u0026lt;artifactId\u0026gt;my-app\u0026lt;/artifactId\u0026gt;\n        \u0026lt;version\u0026gt;1\u0026lt;/version\u0026gt;\n      \u0026lt;/parent\u0026gt;\n\n      \u0026lt;groupId\u0026gt;com.mycompany.app\u0026lt;/groupId\u0026gt;\n      \u0026lt;artifactId\u0026gt;my-module\u0026lt;/artifactId\u0026gt;\n      \u0026lt;version\u0026gt;1\u0026lt;/version\u0026gt;\n    \u0026lt;/project\u0026gt;\n    \"\"\".equals(str));\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString myTextBlock \u003d \"\"\"\n    \u0026lt;project\u0026gt;\n      \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt;\n      \u0026lt;parent\u0026gt;\n        \u0026lt;groupId\u0026gt;com.mycompany.app\u0026lt;/groupId\u0026gt;\n        \u0026lt;artifactId\u0026gt;my-app\u0026lt;/artifactId\u0026gt;\n        \u0026lt;version\u0026gt;1\u0026lt;/version\u0026gt;\n      \u0026lt;/parent\u0026gt;\n\n      \u0026lt;groupId\u0026gt;com.mycompany.app\u0026lt;/groupId\u0026gt;\n      \u0026lt;artifactId\u0026gt;my-module\u0026lt;/artifactId\u0026gt;\n      \u0026lt;version\u0026gt;1\u0026lt;/version\u0026gt;\n    \u0026lt;/project\u0026gt;\n    \"\"\";\n\nlistOfString.stream()\n  .map(str -\u0026gt; !myTextBlock.equals(str));\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/378\"\u003eJEP 378: Text Blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\"\u003eProgrammer’s Guide To Text Blocks\u003c/a\u003e, by Jim Laskey and Stuart\n  Marks \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eIn Java 15 Text Blocks are official and can be used just like an ordinary String. However, when they are used to represent a big chunk of text,\nthey should not be used directly in complex expressions, as it decreases the readability. In this case, it is better to extract the text block into a\nvariable or a field.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when a text block longer than a number of lines given as a parameter is directly used within a lambda expression.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nlistOfString.stream()\n  .map(str -\u0026gt; !\"\"\"\n    \u0026lt;project\u0026gt;\n      \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt;\n      \u0026lt;parent\u0026gt;\n        \u0026lt;groupId\u0026gt;com.mycompany.app\u0026lt;/groupId\u0026gt;\n        \u0026lt;artifactId\u0026gt;my-app\u0026lt;/artifactId\u0026gt;\n        \u0026lt;version\u0026gt;1\u0026lt;/version\u0026gt;\n      \u0026lt;/parent\u0026gt;\n\n      \u0026lt;groupId\u0026gt;com.mycompany.app\u0026lt;/groupId\u0026gt;\n      \u0026lt;artifactId\u0026gt;my-module\u0026lt;/artifactId\u0026gt;\n      \u0026lt;version\u0026gt;1\u0026lt;/version\u0026gt;\n    \u0026lt;/project\u0026gt;\n    \"\"\".equals(str));\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString myTextBlock \u003d \"\"\"\n    \u0026lt;project\u0026gt;\n      \u0026lt;modelVersion\u0026gt;4.0.0\u0026lt;/modelVersion\u0026gt;\n      \u0026lt;parent\u0026gt;\n        \u0026lt;groupId\u0026gt;com.mycompany.app\u0026lt;/groupId\u0026gt;\n        \u0026lt;artifactId\u0026gt;my-app\u0026lt;/artifactId\u0026gt;\n        \u0026lt;version\u0026gt;1\u0026lt;/version\u0026gt;\n      \u0026lt;/parent\u0026gt;\n\n      \u0026lt;groupId\u0026gt;com.mycompany.app\u0026lt;/groupId\u0026gt;\n      \u0026lt;artifactId\u0026gt;my-module\u0026lt;/artifactId\u0026gt;\n      \u0026lt;version\u0026gt;1\u0026lt;/version\u0026gt;\n    \u0026lt;/project\u0026gt;\n    \"\"\";\n\nlistOfString.stream()\n  .map(str -\u0026gt; !myTextBlock.equals(str));\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/378\"\u003eJEP 378: Text Blocks\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\"\u003eProgrammer’s Guide To Text Blocks\u003c/a\u003e, by Jim Laskey and Stuart\n  Marks \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[{"key":"MaximumNumberOfLines","htmlDesc":"The maximum number of lines in a text block that can be nested into a complex expression.","defaultValue":"5","type":"INTEGER"}],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6203"]}},{"key":"java:S6204","repo":"java","name":"\"Stream.toList()\" method should be used instead of \"collectors\" when unmodifiable list needed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn Java 8 \u003ccode\u003eStreams\u003c/code\u003e were introduced to support chaining of operations over collections in a functional style. The most common way to\nsave a result of such chains is to save them to some collection (usually \u003ccode\u003eList\u003c/code\u003e). To do so there is a terminal method \u003ccode\u003ecollect\u003c/code\u003e\nthat can be used with a library of \u003ccode\u003eCollectors\u003c/code\u003e. The key problem is that \u003ccode\u003e.collect(Collectors.toList())\u003c/code\u003e actually returns a\nmutable kind of \u003ccode\u003eList\u003c/code\u003e while in the majority of cases unmodifiable lists are preferred. In Java 10 a new collector appeared to return an\nunmodifiable list: \u003ccode\u003etoUnmodifiableList()\u003c/code\u003e. This does the trick but results in verbose code. Since Java 16 there is now a better variant to\nproduce an unmodifiable list directly from a stream: \u003ccode\u003eStream.toList()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \"collect\" is used to create a list from a stream.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; list1 \u003d Stream.of(\"A\", \"B\", \"C\")\n                           .collect(Collectors.toList()); // Noncompliant\n\nList\u0026lt;String\u0026gt; list2 \u003d Stream.of(\"A\", \"B\", \"C\")\n                           .collect(Collectors.toUnmodifiableList()); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; list1 \u003d Stream.of(\"A\", \"B\", \"C\").toList(); // Compliant\n\nList\u0026lt;String\u0026gt; list2 \u003d Stream.of(\"A\", \"B\", \"C\")\n                           .collect(Collectors.toList()); // Compliant, the list2 needs to be mutable\n\nlist2.add(\"X\");\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eIn Java 8 \u003ccode\u003eStreams\u003c/code\u003e were introduced to support chaining of operations over collections in a functional style. The most common way to\nsave a result of such chains is to save them to some collection (usually \u003ccode\u003eList\u003c/code\u003e). To do so there is a terminal method \u003ccode\u003ecollect\u003c/code\u003e\nthat can be used with a library of \u003ccode\u003eCollectors\u003c/code\u003e. The key problem is that \u003ccode\u003e.collect(Collectors.toList())\u003c/code\u003e actually returns a\nmutable kind of \u003ccode\u003eList\u003c/code\u003e while in the majority of cases unmodifiable lists are preferred. In Java 10 a new collector appeared to return an\nunmodifiable list: \u003ccode\u003etoUnmodifiableList()\u003c/code\u003e. This does the trick but results in verbose code. Since Java 16 there is now a better variant to\nproduce an unmodifiable list directly from a stream: \u003ccode\u003eStream.toList()\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when \"collect\" is used to create a list from a stream.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; list1 \u003d Stream.of(\"A\", \"B\", \"C\")\n                           .collect(Collectors.toList()); // Noncompliant\n\nList\u0026lt;String\u0026gt; list2 \u003d Stream.of(\"A\", \"B\", \"C\")\n                           .collect(Collectors.toUnmodifiableList()); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nList\u0026lt;String\u0026gt; list1 \u003d Stream.of(\"A\", \"B\", \"C\").toList(); // Compliant\n\nList\u0026lt;String\u0026gt; list2 \u003d Stream.of(\"A\", \"B\", \"C\")\n                           .collect(Collectors.toList()); // Compliant, the list2 needs to be mutable\n\nlist2.add(\"X\");\n\u003c/pre\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java16"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6204"]}},{"key":"java:S6205","repo":"java","name":"Switch arrow labels should not use redundant keywords","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn Switch Expressions, an arrow label consisting of a block with a single \u003ccode\u003eyield\u003c/code\u003e can be simplified to directly return the value,\nresulting in cleaner code.\u003c/p\u003e\n\u003cp\u003eSimilarly, for Switch Statements and arrow labels, a \u003ccode\u003ebreak\u003c/code\u003e in a block is always redundant and should not be used. Furthermore, if the\nresulting block contains only one statement, the curly braces of that block can also be omitted.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when a case of a Switch Expression contains a block with a single \u003ccode\u003eyield\u003c/code\u003e or when a Switch Statement contains\na block with a \u003ccode\u003ebreak\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint i \u003d switch (mode) {\n  case \"a\" -\u0026gt; {        // Noncompliant: Remove the redundant block and yield.\n    yield 1;\n  }\n  default -\u0026gt; {         // Noncompliant: Remove the redundant block and yield.\n    yield 2;\n  }\n};\n\nswitch (mode) {\n  case \"a\" -\u0026gt; {        // Noncompliant: Remove the redundant block and break.\n    result \u003d 1;\n    break;\n  }\n  default -\u0026gt; {         // Noncompliant: Remove the redundant break.\n    doSomethingElse();\n    result \u003d 2;\n    break;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint i \u003d switch (mode) {\n  case \"a\" -\u0026gt; 1;\n  default -\u0026gt; 2;\n};\n\nswitch (mode) {\n  case \"a\" -\u0026gt; result \u003d 1;\n  default -\u0026gt; {\n   doSomethingElse();\n   result \u003d 2;\n }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/361\"\u003eJEP 361: Switch Expressions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eIn Switch Expressions, an arrow label consisting of a block with a single \u003ccode\u003eyield\u003c/code\u003e can be simplified to directly return the value,\nresulting in cleaner code.\u003c/p\u003e\n\u003cp\u003eSimilarly, for Switch Statements and arrow labels, a \u003ccode\u003ebreak\u003c/code\u003e in a block is always redundant and should not be used. Furthermore, if the\nresulting block contains only one statement, the curly braces of that block can also be omitted.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when a case of a Switch Expression contains a block with a single \u003ccode\u003eyield\u003c/code\u003e or when a Switch Statement contains\na block with a \u003ccode\u003ebreak\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nint i \u003d switch (mode) {\n  case \"a\" -\u0026gt; {        // Noncompliant: Remove the redundant block and yield.\n    yield 1;\n  }\n  default -\u0026gt; {         // Noncompliant: Remove the redundant block and yield.\n    yield 2;\n  }\n};\n\nswitch (mode) {\n  case \"a\" -\u0026gt; {        // Noncompliant: Remove the redundant block and break.\n    result \u003d 1;\n    break;\n  }\n  default -\u0026gt; {         // Noncompliant: Remove the redundant break.\n    doSomethingElse();\n    result \u003d 2;\n    break;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nint i \u003d switch (mode) {\n  case \"a\" -\u0026gt; 1;\n  default -\u0026gt; 2;\n};\n\nswitch (mode) {\n  case \"a\" -\u0026gt; result \u003d 1;\n  default -\u0026gt; {\n   doSomethingElse();\n   result \u003d 2;\n }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/361\"\u003eJEP 361: Switch Expressions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java14"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6205"]}},{"key":"java:S6206","repo":"java","name":"Records should be used instead of ordinary classes when representing immutable data structure","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn Java 16 \u003ccode\u003erecords\u003c/code\u003e are finalized and can be safely used in production code. \u003ccode\u003eRecords\u003c/code\u003e represent immutable read-only data\nstructure and should be used instead of creating immutable classes. Immutability of records is guaranteed by the Java language itself, while\nimplementing immutable classes on your own might lead to some bugs.\u003c/p\u003e\n\u003cp\u003eOne of the important aspects of \u003ccode\u003erecords\u003c/code\u003e is that final fields can’t be overwritten using reflection.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue on classes for which all these statements are true:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e all instance fields are private and final \u003c/li\u003e\n  \u003cli\u003e has only one constructor with a parameter for all fields \u003c/li\u003e\n  \u003cli\u003e has getters for all fields \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfinal class Person { // Noncompliant\n  private final String name;\n  private final int age;\n\n  public Person(String name, int age) {\n    this.name \u003d name;\n    this.age \u003d age;\n  }\n\n  public String getName() {...}\n\n  public int getAge() {...}\n\n  @Override\n  public boolean equals(Object o) {...}\n\n  @Override\n  public int hashCode() {...}\n\n  @Override\n  public String toString() {...}\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nrecord Person(String name, int age) { }\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\"\u003eRecords specification\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eIn Java 16 \u003ccode\u003erecords\u003c/code\u003e are finalized and can be safely used in production code. \u003ccode\u003eRecords\u003c/code\u003e represent immutable read-only data\nstructure and should be used instead of creating immutable classes. Immutability of records is guaranteed by the Java language itself, while\nimplementing immutable classes on your own might lead to some bugs.\u003c/p\u003e\n\u003cp\u003eOne of the important aspects of \u003ccode\u003erecords\u003c/code\u003e is that final fields can’t be overwritten using reflection.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue on classes for which all these statements are true:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e all instance fields are private and final \u003c/li\u003e\n  \u003cli\u003e has only one constructor with a parameter for all fields \u003c/li\u003e\n  \u003cli\u003e has getters for all fields \u003c/li\u003e\n\u003c/ul\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfinal class Person { // Noncompliant\n  private final String name;\n  private final int age;\n\n  public Person(String name, int age) {\n    this.name \u003d name;\n    this.age \u003d age;\n  }\n\n  public String getName() {...}\n\n  public int getAge() {...}\n\n  @Override\n  public boolean equals(Object o) {...}\n\n  @Override\n  public int hashCode() {...}\n\n  @Override\n  public String toString() {...}\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nrecord Person(String name, int age) { }\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\"\u003eRecords specification\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java16"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6206"]}},{"key":"java:S6207","repo":"java","name":"Redundant constructors/methods should be avoided in records","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn Java 16 records represent a brief notation for immutable data structures. Records have autogenerated implementations for constructors with all\nparameters, \u003ccode\u003egetters\u003c/code\u003e, \u003ccode\u003eequals\u003c/code\u003e, \u003ccode\u003ehashcode\u003c/code\u003e and \u003ccode\u003etoString\u003c/code\u003e. Although these methods can still be overridden\ninside records, there is no use to do so if no special logic is required.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue on empty compact constructors, trivial canonical constructors and simple getter methods with no additional logic.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nrecord Person(String name, int age) {\n  Person(String name, int age) { // Noncompliant, already autogenerated\n    this.name \u003d name;\n    this.age \u003d age;\n  }\n}\n\nrecord Person(String name, int age) {\n  Person { // Noncompliant, no need for empty compact constructor\n  }\n  public String name() { // Noncompliant, already autogenerated\n    return name;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nrecord Person(String name, int age) { } // Compliant\n\nrecord Person(String name, int age) {\n  Person(String name, int age) { // Compliant\n    this.name \u003d name.toLowerCase(Locale.ROOT);\n    this.age \u003d age;\n  }\n}\n\nrecord Person(String name, int age) {\n  Person { // Compliant\n    if (age \u0026lt; 0) {\n      throw new IllegalArgumentException(\"Negative age\");\n    }\n  }\n  public String name() { // Compliant\n    return name.toUpperCase(Locale.ROOT);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\"\u003eRecords specification\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eIn Java 16 records represent a brief notation for immutable data structures. Records have autogenerated implementations for constructors with all\nparameters, \u003ccode\u003egetters\u003c/code\u003e, \u003ccode\u003eequals\u003c/code\u003e, \u003ccode\u003ehashcode\u003c/code\u003e and \u003ccode\u003etoString\u003c/code\u003e. Although these methods can still be overridden\ninside records, there is no use to do so if no special logic is required.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue on empty compact constructors, trivial canonical constructors and simple getter methods with no additional logic.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nrecord Person(String name, int age) {\n  Person(String name, int age) { // Noncompliant, already autogenerated\n    this.name \u003d name;\n    this.age \u003d age;\n  }\n}\n\nrecord Person(String name, int age) {\n  Person { // Noncompliant, no need for empty compact constructor\n  }\n  public String name() { // Noncompliant, already autogenerated\n    return name;\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nrecord Person(String name, int age) { } // Compliant\n\nrecord Person(String name, int age) {\n  Person(String name, int age) { // Compliant\n    this.name \u003d name.toLowerCase(Locale.ROOT);\n    this.age \u003d age;\n  }\n}\n\nrecord Person(String name, int age) {\n  Person { // Compliant\n    if (age \u0026lt; 0) {\n      throw new IllegalArgumentException(\"Negative age\");\n    }\n  }\n  public String name() { // Compliant\n    return name.toUpperCase(Locale.ROOT);\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\"\u003eRecords specification\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java16"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6207"]}},{"key":"java:S6208","repo":"java","name":"Comma-separated labels should be used in Switch with colon case","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn Java 14 there is a new way to write cases in Switch Statement and Expression when the same action should be performed for different cases.\nInstead of declaring multiples branches with the same action, you can combine all of them in a single case group, separated with commas. It will\nresult in a more concise code and improved readability.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when multiple cases in a Switch can be grouped into a single comma-separated case.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n// Switch Expression\nint i \u003d switch (mode) {\n  case \"a\":\n  case \"b\":\n    yield 1;\n  default:\n    yield 3;\n};\n\n// Switch Statement\nswitch (mode) {\n  case \"a\":\n  case \"b\":\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n// Switch Expression\nint i \u003d switch (mode) {\n  case \"a\", \"b\":\n    yield 1;\n  default:\n    yield 3;\n};\n\n// Switch Statement\nswitch (mode) {\n  case \"a\", \"b\":\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n}\n\n// Or even better:\nswitch (mode) {\n  case \"a\", \"b\" -\u0026gt; doSomething();\n  default -\u0026gt; doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/361\"\u003eJEP 361: Switch Expressions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eIn Java 14 there is a new way to write cases in Switch Statement and Expression when the same action should be performed for different cases.\nInstead of declaring multiples branches with the same action, you can combine all of them in a single case group, separated with commas. It will\nresult in a more concise code and improved readability.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when multiple cases in a Switch can be grouped into a single comma-separated case.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n// Switch Expression\nint i \u003d switch (mode) {\n  case \"a\":\n  case \"b\":\n    yield 1;\n  default:\n    yield 3;\n};\n\n// Switch Statement\nswitch (mode) {\n  case \"a\":\n  case \"b\":\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n// Switch Expression\nint i \u003d switch (mode) {\n  case \"a\", \"b\":\n    yield 1;\n  default:\n    yield 3;\n};\n\n// Switch Statement\nswitch (mode) {\n  case \"a\", \"b\":\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n}\n\n// Or even better:\nswitch (mode) {\n  case \"a\", \"b\" -\u0026gt; doSomething();\n  default -\u0026gt; doSomethingElse();\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/361\"\u003eJEP 361: Switch Expressions\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"INFO","status":"READY","isTemplate":false,"tags":[],"sysTags":["java14"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6208"]}},{"key":"java:S6213","repo":"java","name":"Restricted Identifiers should not be used as Identifiers","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eEven if it is technically possible, \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8\"\u003eRestricted Identifiers\u003c/a\u003e\nshould not be used as identifiers. This is only possible for compatibility reasons, using it in Java code is confusing and should be avoided.\u003c/p\u003e\n\u003cp\u003eNote that this applies to any version of Java, including the one where these identifiers are not yet restricted, to avoid future confusion.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when restricted identifiers:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e var \u003c/li\u003e\n  \u003cli\u003e yield \u003c/li\u003e\n  \u003cli\u003e record \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eare used as identifiers.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvar var \u003d \"var\"; // Noncompliant: compiles but this code is confusing\nvar \u003d \"what is this?\";\n\nint yield(int i) { // Noncompliant\n  return switch (i) {\n    case 1: yield(0); // This is a yield from switch expression, not a recursive call.\n    default: yield(i-1);\n  };\n}\n\nString record \u003d \"record\"; // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvar myVariable \u003d \"var\";\n\nint minusOne(int i) {\n  return switch (i) {\n    case 1: yield(0);\n    default: yield(i-1);\n  };\n}\n\nString myRecord \u003d \"record\";\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8\"\u003eJLS16, 3.8: Identifiers\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eEven if it is technically possible, \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8\"\u003eRestricted Identifiers\u003c/a\u003e\nshould not be used as identifiers. This is only possible for compatibility reasons, using it in Java code is confusing and should be avoided.\u003c/p\u003e\n\u003cp\u003eNote that this applies to any version of Java, including the one where these identifiers are not yet restricted, to avoid future confusion.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when restricted identifiers:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e var \u003c/li\u003e\n  \u003cli\u003e yield \u003c/li\u003e\n  \u003cli\u003e record \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eare used as identifiers.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nvar var \u003d \"var\"; // Noncompliant: compiles but this code is confusing\nvar \u003d \"what is this?\";\n\nint yield(int i) { // Noncompliant\n  return switch (i) {\n    case 1: yield(0); // This is a yield from switch expression, not a recursive call.\n    default: yield(i-1);\n  };\n}\n\nString record \u003d \"record\"; // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvar myVariable \u003d \"var\";\n\nint minusOne(int i) {\n  return switch (i) {\n    case 1: yield(0);\n    default: yield(i-1);\n  };\n}\n\nString myRecord \u003d \"record\";\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-3.html#jls-3.8\"\u003eJLS16, 3.8: Identifiers\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":[],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6213"]}},{"key":"java:S6217","repo":"java","name":"Permitted types of a sealed class should be omitted if they are declared in the same file","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003esealed\u003c/code\u003e classes were introduced in Java 17. This feature is very useful if there is a need to define a strict hierarchy and restrict\nthe possibility of extending classes. In order to mention all the allowed subclasses, there is a keyword \u003ccode\u003epermits\u003c/code\u003e, which should be\nfollowed by subclasses\u0027 names.\u003c/p\u003e\n\u003cp\u003eThis notation is quite useful if subclasses of a given \u003ccode\u003esealed\u003c/code\u003e class can be found in different files, packages, or even modules. In\ncase when all subclasses are declared in the same file there is no need to mention the explicitly and \u003ccode\u003epermits\u003c/code\u003e part of a declaration can\nbe omitted.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue if all subclasses of a \u003ccode\u003esealed\u003c/code\u003e class are declared in the same file as their superclass.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nsealed class A permits B, C, D, E {} // Noncompliant\nfinal class B extends A {}\nfinal class C extends A {}\nfinal class D extends A {}\nfinal class E extends A {}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nsealed class A {} // Compliant\nfinal class B extends A {}\nfinal class C extends A {}\nfinal class D extends A {}\nfinal class E extends A {}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.1.1.2\"\u003eSealed Classes specification\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003esealed\u003c/code\u003e classes were introduced in Java 17. This feature is very useful if there is a need to define a strict hierarchy and restrict\nthe possibility of extending classes. In order to mention all the allowed subclasses, there is a keyword \u003ccode\u003epermits\u003c/code\u003e, which should be\nfollowed by subclasses\u0027 names.\u003c/p\u003e\n\u003cp\u003eThis notation is quite useful if subclasses of a given \u003ccode\u003esealed\u003c/code\u003e class can be found in different files, packages, or even modules. In\ncase when all subclasses are declared in the same file there is no need to mention the explicitly and \u003ccode\u003epermits\u003c/code\u003e part of a declaration can\nbe omitted.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue if all subclasses of a \u003ccode\u003esealed\u003c/code\u003e class are declared in the same file as their superclass.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nsealed class A permits B, C, D, E {} // Noncompliant\nfinal class B extends A {}\nfinal class C extends A {}\nfinal class D extends A {}\nfinal class E extends A {}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nsealed class A {} // Compliant\nfinal class B extends A {}\nfinal class C extends A {}\nfinal class D extends A {}\nfinal class E extends A {}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se17/html/jls-8.html#jls-8.1.1.2\"\u003eSealed Classes specification\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java17"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6217"]}},{"key":"java:S6219","repo":"java","name":"\u0027serialVersionUID\u0027 field should not be set to \u00270L\u0027 in records","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn Records serialization is not done the same way as for ordinary serializable or externalizable classes. Records serialization does not rely on\nthe \u003ccode\u003eserialVersionUID\u003c/code\u003e field, because the requirement to have this field equal is waived for record classes. By default, all records will\nhave this field equal to \u003ccode\u003e0L\u003c/code\u003e and there is no need to specify this field with \u003ccode\u003e0L\u003c/code\u003e value and it is possible to specify it with\nsome custom value to support serialization/deserialization involving ordinary classes.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when there is a \u003ccode\u003eprivate static final long serialVersionUID\u003c/code\u003e field which is set to \u003ccode\u003e0L\u003c/code\u003e in a Record\nclass.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nrecord Person(String name, int age) implements Serializable {\n@Serial\n  private static final long serialVersionUID \u003d 0L; // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nrecord Person(String name, int age) implements Serializable {} // Compliant\n\nrecord Person(String name, int age) implements Serializable {\n@Serial\n  private static final long serialVersionUID \u003d 42L; // Compliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\"\u003eRecords specification\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/serialization/serial-arch.html#serialization-of-records\"\u003eSerialization of\n  records\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eIn Records serialization is not done the same way as for ordinary serializable or externalizable classes. Records serialization does not rely on\nthe \u003ccode\u003eserialVersionUID\u003c/code\u003e field, because the requirement to have this field equal is waived for record classes. By default, all records will\nhave this field equal to \u003ccode\u003e0L\u003c/code\u003e and there is no need to specify this field with \u003ccode\u003e0L\u003c/code\u003e value and it is possible to specify it with\nsome custom value to support serialization/deserialization involving ordinary classes.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when there is a \u003ccode\u003eprivate static final long serialVersionUID\u003c/code\u003e field which is set to \u003ccode\u003e0L\u003c/code\u003e in a Record\nclass.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nrecord Person(String name, int age) implements Serializable {\n@Serial\n  private static final long serialVersionUID \u003d 0L; // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nrecord Person(String name, int age) implements Serializable {} // Compliant\n\nrecord Person(String name, int age) implements Serializable {\n@Serial\n  private static final long serialVersionUID \u003d 42L; // Compliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\"\u003eRecords specification\u003c/a\u003e \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/en/java/javase/16/docs/specs/serialization/serial-arch.html#serialization-of-records\"\u003eSerialization of\n  records\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java16"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6219"]}},{"key":"java:S6355","repo":"java","name":"Deprecated annotations should include explanations","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eSince Java 9, \u003ccode\u003e@Deprecated\u003c/code\u003e has two additional arguments to the annotation:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003esince\u003c/code\u003e allows you to describe when the deprecation took place \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eforRemoval\u003c/code\u003e, indicates whether the deprecated element will be removed at some future date \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn order to ease the maintainers work, it is recommended to always add one or both of these arguments.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when \u003ccode\u003e@Deprecated\u003c/code\u003e is used without any argument.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Deprecated\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Deprecated(since\u003d\"4.2\", forRemoval\u003dtrue)\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThe members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.\u003c/p\u003e\n\u003ch3\u003eSee Also\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/coding_rules#rule_key\u003djava%3AS1123\u0027\u003eS1123\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eSince Java 9, \u003ccode\u003e@Deprecated\u003c/code\u003e has two additional arguments to the annotation:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ccode\u003esince\u003c/code\u003e allows you to describe when the deprecation took place \u003c/li\u003e\n  \u003cli\u003e \u003ccode\u003eforRemoval\u003c/code\u003e, indicates whether the deprecated element will be removed at some future date \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eIn order to ease the maintainers work, it is recommended to always add one or both of these arguments.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when \u003ccode\u003e@Deprecated\u003c/code\u003e is used without any argument.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n@Deprecated\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n@Deprecated(since\u003d\"4.2\", forRemoval\u003dtrue)\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eThe members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.\u003c/p\u003e\n\u003ch3\u003eSee Also\u003c/h3\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:java:S1123} \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java9"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6355"]}},{"key":"java:S888","repo":"java","name":"Equality operators should not be used in \"for\" loop termination conditions","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eTesting \u003ccode\u003efor\u003c/code\u003e loop termination using an equality operator (\u003ccode\u003e\u003d\u003d\u003c/code\u003e and \u003ccode\u003e!\u003d\u003c/code\u003e) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfor (int i \u003d 1; i !\u003d 10; i +\u003d 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nfor (int i \u003d 1; i \u0026lt;\u003d 10; i +\u003d 2)  // Compliant\n{\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eEquality operators are ignored if the loop counter is not modified within the body of the loop and either:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e starts below the ending value and is incremented by 1 on each iteration. \u003c/li\u003e\n  \u003cli\u003e starts above the ending value and is decremented by 1 on each iteration. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEquality operators are also ignored when the test is against \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nfor (int i \u003d 0; arr[i] !\u003d null; i++) {\n  // ...\n}\n\nfor (int i \u003d 0; (item \u003d arr[i]) !\u003d null; i++) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/835.html\"\u003eMITRE, CWE-835\u003c/a\u003e - Loop with Unreachable Exit Condition (\u0027Infinite Loop\u0027) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/x9YxBQ\"\u003eCERT, MSC21-C.\u003c/a\u003e - Use robust loop termination conditions \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eTesting \u003ccode\u003efor\u003c/code\u003e loop termination using an equality operator (\u003ccode\u003e\u003d\u003d\u003c/code\u003e and \u003ccode\u003e!\u003d\u003c/code\u003e) is dangerous, because it could set up an\ninfinite loop. Using a broader relational operator instead casts a wider net, and makes it harder (but not impossible) to accidentally write an\ninfinite loop.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nfor (int i \u003d 1; i !\u003d 10; i +\u003d 2)  // Noncompliant. Infinite; i goes from 9 straight to 11.\n{\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nfor (int i \u003d 1; i \u0026lt;\u003d 10; i +\u003d 2)  // Compliant\n{\n  //...\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eEquality operators are ignored if the loop counter is not modified within the body of the loop and either:\u003c/p\u003e\n\u003cul\u003e\n  \u003cli\u003e starts below the ending value and is incremented by 1 on each iteration. \u003c/li\u003e\n  \u003cli\u003e starts above the ending value and is decremented by 1 on each iteration. \u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003eEquality operators are also ignored when the test is against \u003ccode\u003enull\u003c/code\u003e.\u003c/p\u003e\n\u003cpre\u003e\nfor (int i \u003d 0; arr[i] !\u003d null; i++) {\n  // ...\n}\n\nfor (int i \u003d 0; (item \u003d arr[i]) !\u003d null; i++) {\n  // ...\n}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://cwe.mitre.org/data/definitions/835.html\"\u003eMITRE, CWE-835\u003c/a\u003e - Loop with Unreachable Exit Condition (\u0027Infinite Loop\u0027) \u003c/li\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/x9YxBQ\"\u003eCERT, MSC21-C.\u003c/a\u003e - Use robust loop termination conditions \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","cwe","suspicious"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S888"]}},{"key":"java:S2094","repo":"java","name":"Classes should not be empty","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere is no good excuse for an empty class. If it’s being used simply as a common extension point, it should be replaced with an\n\u003ccode\u003einterface\u003c/code\u003e. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Nothing {  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic interface Nothing {\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eEmpty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.\u003c/p\u003e\n\u003cpre\u003e\n@Configuration\n@EnableWebMvc\npublic final class ApplicationConfiguration {\n\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThere is no good excuse for an empty class. If it’s being used simply as a common extension point, it should be replaced with an\n\u003ccode\u003einterface\u003c/code\u003e. If it was stubbed in as a placeholder for future development it should be fleshed-out. In any other case, it should be\neliminated.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Nothing {  // Noncompliant\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic interface Nothing {\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eEmpty classes can be used as marker types (for Spring for instance), therefore empty classes that are annotated will be ignored.\u003c/p\u003e\n\u003cpre\u003e\n@Configuration\n@EnableWebMvc\npublic final class ApplicationConfiguration {\n\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2094"]}},{"key":"java:S2096","repo":"java","name":"\"main\" should not \"throw\" anything","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere’s no reason for a \u003ccode\u003emain\u003c/code\u003e method to \u003ccode\u003ethrow\u003c/code\u003e anything. After all, what’s going to catch it?\u003c/p\u003e\n\u003cp\u003eInstead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and\nperform whatever logging or user communication is necessary, and \u003ccode\u003eexit\u003c/code\u003e with a non-zero (i.e. non-success) exit code if necessary.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic static void main(String args[]) throws Exception { // Noncompliant\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic static void main(String args[]) {\n try {\n    doSomething();\n  } catch (Throwable t) {\n    log.error(t);\n    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThere’s no reason for a \u003ccode\u003emain\u003c/code\u003e method to \u003ccode\u003ethrow\u003c/code\u003e anything. After all, what’s going to catch it?\u003c/p\u003e\n\u003cp\u003eInstead, the method should itself gracefully handle any exceptions that may bubble up to it, attach as much contextual information as possible, and\nperform whatever logging or user communication is necessary, and \u003ccode\u003eexit\u003c/code\u003e with a non-zero (i.e. non-success) exit code if necessary.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic static void main(String args[]) throws Exception { // Noncompliant\n  doSomething();\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic static void main(String args[]) {\n try {\n    doSomething();\n  } catch (Throwable t) {\n    log.error(t);\n    System.exit(1);  // Default exit code, 0, indicates success. Non-zero value means failure.\n  }\n}\n\u003c/pre\u003e","severity":"BLOCKER","status":"READY","isTemplate":false,"tags":[],"sysTags":["error-handling"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2096"]}},{"key":"java:S3066","repo":"java","name":"\"enum\" fields should not be publicly mutable","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003e\u003ccode\u003eenum\u003c/code\u003es are generally thought of as constant, but an \u003ccode\u003eenum\u003c/code\u003e with a \u003ccode\u003epublic\u003c/code\u003e field or \u003ccode\u003epublic\u003c/code\u003e setter is\nnon-constant. Ideally fields in an \u003ccode\u003eenum\u003c/code\u003e are \u003ccode\u003eprivate\u003c/code\u003e and set in the constructor, but if that’s not possible, their visibility\nshould be reduced as much as possible.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass \u003d landMass;\n  }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\u003c/pre\u003e","mdDesc":"\u003cp\u003e\u003ccode\u003eenum\u003c/code\u003es are generally thought of as constant, but an \u003ccode\u003eenum\u003c/code\u003e with a \u003ccode\u003epublic\u003c/code\u003e field or \u003ccode\u003epublic\u003c/code\u003e setter is\nnon-constant. Ideally fields in an \u003ccode\u003eenum\u003c/code\u003e are \u003ccode\u003eprivate\u003c/code\u003e and set in the constructor, but if that’s not possible, their visibility\nshould be reduced as much as possible.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  public int countryCount;  // Noncompliant\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\n  public void setLandMass(int landMass) {  // Noncompliant\n    this.landMass \u003d landMass;\n  }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic enum Continent {\n\n  NORTH_AMERICA (23, 24709000),\n  // ...\n  EUROPE (50, 39310000);\n\n  private int countryCount;\n  private int landMass;\n\n  Continent(int countryCount, int landMass) {\n    // ...\n  }\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["bad-practice"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"20min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"20min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"20min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"20min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S3066"]}},{"key":"java:S4032","repo":"java","name":"Packages containing only \"package-info.java\" should be removed","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThere is no reason to have a package that is empty except for \"package-info.java\". Such packages merely clutter a project, taking up space but\nadding no value.\u003c/p\u003e","mdDesc":"\u003cp\u003eThere is no reason to have a package that is empty except for \"package-info.java\". Such packages merely clutter a project, taking up space but\nadding no value.\u003c/p\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["unused"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4032"]}},{"key":"java:S4034","repo":"java","name":"\"Stream\" call chains should be simplified when possible","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eWhen using the \u003ccode\u003eStream\u003c/code\u003e API, call chains should be simplified as much as possible. Not only does it make the code easier to read, it\nalso avoid creating unnecessary temporary objects.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when one of the following substitution is possible:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eOriginal\u003c/th\u003e\n      \u003cth\u003ePreferred\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.filter(predicate).findFirst().isPresent()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.anyMatch(predicate)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.filter(predicate).findAny().isPresent()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.anyMatch(predicate)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e!stream.anyMatch(predicate)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.noneMatch(predicate)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e!stream.anyMatch(x -\u0026gt; !(...))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.allMatch(...)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.map(mapper).anyMatch(Boolean::booleanValue)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.anyMatch(predicate)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nboolean hasRed \u003d widgets.stream().filter(w -\u0026gt; w.getColor() \u003d\u003d RED).findFirst().isPresent(); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nboolean hasRed \u003d widgets.stream().anyMatch(w -\u0026gt; w.getColor() \u003d\u003d RED);\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eWhen using the \u003ccode\u003eStream\u003c/code\u003e API, call chains should be simplified as much as possible. Not only does it make the code easier to read, it\nalso avoid creating unnecessary temporary objects.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when one of the following substitution is possible:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eOriginal\u003c/th\u003e\n      \u003cth\u003ePreferred\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.filter(predicate).findFirst().isPresent()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.anyMatch(predicate)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.filter(predicate).findAny().isPresent()\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.anyMatch(predicate)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e!stream.anyMatch(predicate)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.noneMatch(predicate)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003e!stream.anyMatch(x -\u0026gt; !(...))\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.allMatch(...)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.map(mapper).anyMatch(Boolean::booleanValue)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003estream.anyMatch(predicate)\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nboolean hasRed \u003d widgets.stream().filter(w -\u0026gt; w.getColor() \u003d\u003d RED).findFirst().isPresent(); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nboolean hasRed \u003d widgets.stream().anyMatch(w -\u0026gt; w.getColor() \u003d\u003d RED);\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["clumsy"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4034"]}},{"key":"java:S4274","repo":"java","name":"Asserts should not be used to check the parameters of a public method","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eAn \u003ccode\u003eassert\u003c/code\u003e is inappropriate for parameter validation because assertions can be disabled at runtime in the JVM, meaning that a bad\noperational setting would completely eliminate the intended checks. Further, \u003ccode\u003eassert\u003c/code\u003es that fail throw \u003ccode\u003eAssertionError\u003c/code\u003es, rather\nthan throwing some type of \u003ccode\u003eException\u003c/code\u003e. Throwing \u003ccode\u003eError\u003c/code\u003es is completely outside of the normal realm of expected\n\u003ccode\u003ecatch\u003c/code\u003e/\u003ccode\u003ethrow\u003c/code\u003e behavior in normal programs.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003epublic\u003c/code\u003e method uses one or more of its parameters with \u003ccode\u003eassert\u003c/code\u003es.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n public void setPrice(int price) {\n  assert price \u0026gt;\u003d 0 \u0026amp;\u0026amp; price \u0026lt;\u003d MAX_PRICE;\n  // Set the price\n }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n public void setPrice(int price) {\n  if (price \u0026lt; 0 || price \u0026gt; MAX_PRICE) {\n    throw new IllegalArgumentException(\"Invalid price: \" + price);\n  }\n  // Set the price\n }\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html\"\u003eProgramming With Assertions\u003c/a\u003e\u003c/p\u003e","mdDesc":"\u003cp\u003eAn \u003ccode\u003eassert\u003c/code\u003e is inappropriate for parameter validation because assertions can be disabled at runtime in the JVM, meaning that a bad\noperational setting would completely eliminate the intended checks. Further, \u003ccode\u003eassert\u003c/code\u003es that fail throw \u003ccode\u003eAssertionError\u003c/code\u003es, rather\nthan throwing some type of \u003ccode\u003eException\u003c/code\u003e. Throwing \u003ccode\u003eError\u003c/code\u003es is completely outside of the normal realm of expected\n\u003ccode\u003ecatch\u003c/code\u003e/\u003ccode\u003ethrow\u003c/code\u003e behavior in normal programs.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a \u003ccode\u003epublic\u003c/code\u003e method uses one or more of its parameters with \u003ccode\u003eassert\u003c/code\u003es.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\n public void setPrice(int price) {\n  assert price \u0026gt;\u003d 0 \u0026amp;\u0026amp; price \u0026lt;\u003d MAX_PRICE;\n  // Set the price\n }\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\n public void setPrice(int price) {\n  if (price \u0026lt; 0 || price \u0026gt; MAX_PRICE) {\n    throw new IllegalArgumentException(\"Invalid price: \" + price);\n  }\n  // Set the price\n }\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cp\u003e\u003ca href\u003d\"https://docs.oracle.com/javase/7/docs/technotes/guides/language/assert.html\"\u003eProgramming With Assertions\u003c/a\u003e\u003c/p\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4274"]}},{"key":"java:S4276","repo":"java","name":"Functional Interfaces should be as specialised as possible","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe \u003ccode\u003ejava.util.function\u003c/code\u003e package provides a large array of functional interface definitions for use in lambda expressions and method\nreferences. In general it is recommended to use the more specialised form to avoid auto-boxing. For instance \u003ccode\u003eIntFunction\u0026lt;Foo\u0026gt;\u003c/code\u003e\nshould be preferred over \u003ccode\u003eFunction\u0026lt;Integer, Foo\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when any of the following substitution is possible:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eCurrent Interface\u003c/th\u003e\n      \u003cth\u003ePreferred Interface\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;Integer, R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntFunction\u0026lt;R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;Long, R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongFunction\u0026lt;R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;Double, R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoubleFunction\u0026lt;R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;Double,Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoubleToIntFunction\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;Double,Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoubleToLongFunction\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;Long,Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongToDoubleFunction\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;Long,Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongToIntFunction\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;R,Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eToIntFunction\u0026lt;R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;R,Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eToLongFunction\u0026lt;R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;R,Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eToDoubleFunction\u0026lt;R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;T,T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eUnaryOperator\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBiFunction\u0026lt;T,T,T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBinaryOperator\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eConsumer\u0026lt;Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntConsumer\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eConsumer\u0026lt;Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoubleConsumer\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eConsumer\u0026lt;Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongConsumer\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBiConsumer\u0026lt;T,Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eObjIntConsumer\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBiConsumer\u0026lt;T,Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eObjLongConsumer\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBiConsumer\u0026lt;T,Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eObjDoubleConsumer\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003ePredicate\u0026lt;Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntPredicate\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003ePredicate\u0026lt;Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoublePredicate\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003ePredicate\u0026lt;Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongPredicate\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eSupplier\u0026lt;Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntSupplier\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eSupplier\u0026lt;Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoubleSupplier\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eSupplier\u0026lt;Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongSupplier\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eSupplier\u0026lt;Boolean\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBooleanSupplier\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eUnaryOperator\u0026lt;Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntUnaryOperator\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eUnaryOperator\u0026lt;Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoubleUnaryOperator\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eUnaryOperator\u0026lt;Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongUnaryOperator\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBinaryOperator\u0026lt;Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntBinaryOperator\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBinaryOperator\u0026lt;Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongBinaryOperator\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBinaryOperator\u0026lt;Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoubleBinaryOperator\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;T, Boolean\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003ePredicate\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBiFunction\u0026lt;T,U,Boolean\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBiPredicate\u0026lt;T,U\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo implements Supplier\u0026lt;Integer\u0026gt; {  // Noncompliant\n    @Override\n    public Integer get() {\n      // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo implements IntSupplier {\n\n  @Override\n  public int getAsInt() {\n    // ...\n  }\n}\n\u003c/pre\u003e","mdDesc":"\u003cp\u003eThe \u003ccode\u003ejava.util.function\u003c/code\u003e package provides a large array of functional interface definitions for use in lambda expressions and method\nreferences. In general it is recommended to use the more specialised form to avoid auto-boxing. For instance \u003ccode\u003eIntFunction\u0026lt;Foo\u0026gt;\u003c/code\u003e\nshould be preferred over \u003ccode\u003eFunction\u0026lt;Integer, Foo\u0026gt;\u003c/code\u003e.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when any of the following substitution is possible:\u003c/p\u003e\n\u003ctable\u003e\n  \u003ccolgroup\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n    \u003ccol style\u003d\"width: 50%;\"\u003e\n  \u003c/colgroup\u003e\n  \u003cthead\u003e\n    \u003ctr\u003e\n      \u003cth\u003eCurrent Interface\u003c/th\u003e\n      \u003cth\u003ePreferred Interface\u003c/th\u003e\n    \u003c/tr\u003e\n  \u003c/thead\u003e\n  \u003ctbody\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;Integer, R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntFunction\u0026lt;R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;Long, R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongFunction\u0026lt;R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;Double, R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoubleFunction\u0026lt;R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;Double,Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoubleToIntFunction\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;Double,Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoubleToLongFunction\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;Long,Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongToDoubleFunction\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;Long,Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongToIntFunction\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;R,Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eToIntFunction\u0026lt;R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;R,Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eToLongFunction\u0026lt;R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;R,Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eToDoubleFunction\u0026lt;R\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;T,T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eUnaryOperator\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBiFunction\u0026lt;T,T,T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBinaryOperator\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eConsumer\u0026lt;Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntConsumer\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eConsumer\u0026lt;Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoubleConsumer\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eConsumer\u0026lt;Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongConsumer\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBiConsumer\u0026lt;T,Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eObjIntConsumer\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBiConsumer\u0026lt;T,Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eObjLongConsumer\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBiConsumer\u0026lt;T,Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eObjDoubleConsumer\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003ePredicate\u0026lt;Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntPredicate\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003ePredicate\u0026lt;Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoublePredicate\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003ePredicate\u0026lt;Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongPredicate\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eSupplier\u0026lt;Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntSupplier\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eSupplier\u0026lt;Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoubleSupplier\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eSupplier\u0026lt;Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongSupplier\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eSupplier\u0026lt;Boolean\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBooleanSupplier\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eUnaryOperator\u0026lt;Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntUnaryOperator\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eUnaryOperator\u0026lt;Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoubleUnaryOperator\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eUnaryOperator\u0026lt;Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongUnaryOperator\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBinaryOperator\u0026lt;Integer\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eIntBinaryOperator\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBinaryOperator\u0026lt;Long\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eLongBinaryOperator\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBinaryOperator\u0026lt;Double\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eDoubleBinaryOperator\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eFunction\u0026lt;T, Boolean\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003ePredicate\u0026lt;T\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n    \u003ctr\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBiFunction\u0026lt;T,U,Boolean\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n      \u003ctd\u003e\u003cp\u003e\u003ccode\u003eBiPredicate\u0026lt;T,U\u0026gt;\u003c/code\u003e\u003c/p\u003e\u003c/td\u003e\n    \u003c/tr\u003e\n  \u003c/tbody\u003e\n\u003c/table\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo implements Supplier\u0026lt;Integer\u0026gt; {  // Noncompliant\n    @Override\n    public Integer get() {\n      // ...\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\npublic class Foo implements IntSupplier {\n\n  @Override\n  public int getAsInt() {\n    // ...\n  }\n}\n\u003c/pre\u003e","severity":"MINOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S4276"]}},{"key":"java:S5361","repo":"java","name":"\"String#replace\" should be preferred to \"String#replaceAll\"","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eThe underlying implementation of \u003ccode\u003eString::replaceAll\u003c/code\u003e calls the \u003ccode\u003ejava.util.regex.Pattern.compile()\u003c/code\u003e method each time it is\ncalled even if the first argument is not a regular expression. This has a significant performance cost and therefore should be used with care.\u003c/p\u003e\n\u003cp\u003eWhen \u003ccode\u003eString::replaceAll\u003c/code\u003e is used, the first argument should be a real regular expression. If it’s not the case,\n\u003ccode\u003eString::replace\u003c/code\u003e does exactly the same thing as \u003ccode\u003eString::replaceAll\u003c/code\u003e without the performance drawback of the regex.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for each \u003ccode\u003eString::replaceAll\u003c/code\u003e used with a \u003ccode\u003eString\u003c/code\u003e as first parameter which doesn’t contains\nspecial regex character or pattern.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString init \u003d \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed \u003d init.replaceAll(\"Bob is\", \"It\u0027s\"); // Noncompliant\nchanged \u003d changed.replaceAll(\"\\\\.\\\\.\\\\.\", \";\"); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString init \u003d \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed \u003d init.replace(\"Bob is\", \"It\u0027s\");\nchanged \u003d changed.replace(\"...\", \";\");\n\u003c/pre\u003e\n\u003cp\u003eOr, with a regex:\u003c/p\u003e\n\u003cpre\u003e\nString init \u003d \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed \u003d init.replaceAll(\"\\\\w*\\\\sis\", \"It\u0027s\");\nchanged \u003d changed.replaceAll(\"\\\\.{3}\", \";\");\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\u0027/coding_rules#rule_key\u003djava%3AS4248\u0027\u003eS4248\u003c/a\u003e - Regex patterns should not be created needlessly \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eThe underlying implementation of \u003ccode\u003eString::replaceAll\u003c/code\u003e calls the \u003ccode\u003ejava.util.regex.Pattern.compile()\u003c/code\u003e method each time it is\ncalled even if the first argument is not a regular expression. This has a significant performance cost and therefore should be used with care.\u003c/p\u003e\n\u003cp\u003eWhen \u003ccode\u003eString::replaceAll\u003c/code\u003e is used, the first argument should be a real regular expression. If it’s not the case,\n\u003ccode\u003eString::replace\u003c/code\u003e does exactly the same thing as \u003ccode\u003eString::replaceAll\u003c/code\u003e without the performance drawback of the regex.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue for each \u003ccode\u003eString::replaceAll\u003c/code\u003e used with a \u003ccode\u003eString\u003c/code\u003e as first parameter which doesn’t contains\nspecial regex character or pattern.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nString init \u003d \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed \u003d init.replaceAll(\"Bob is\", \"It\u0027s\"); // Noncompliant\nchanged \u003d changed.replaceAll(\"\\\\.\\\\.\\\\.\", \";\"); // Noncompliant\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nString init \u003d \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed \u003d init.replace(\"Bob is\", \"It\u0027s\");\nchanged \u003d changed.replace(\"...\", \";\");\n\u003c/pre\u003e\n\u003cp\u003eOr, with a regex:\u003c/p\u003e\n\u003cpre\u003e\nString init \u003d \"Bob is a Bird... Bob is a Plane... Bob is Superman!\";\nString changed \u003d init.replaceAll(\"\\\\w*\\\\sis\", \"It\u0027s\");\nchanged \u003d changed.replaceAll(\"\\\\.{3}\", \";\");\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e {rule:java:S4248} - Regex patterns should not be created needlessly \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["performance","regex"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"2min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"2min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"2min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"2min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S5361"]}},{"key":"java:S6211","repo":"java","name":"Custom getter method should not be used to override record\u0027s getter behavior","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eBefore records appeared in Java 16, there was a common way to represent getters for private fields of a class:\u0026nbsp; a method named \"get\" with a\ncapitalized field name. For example, for a\u0026nbsp;\u003ccode\u003eString\u003c/code\u003e field named \"myField\" the signature of the getter method will be: \u003ccode\u003epublic\nString getMyField()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eIn records, getters are named differently. Getters created by default do not contain the \"get\" prefix. So for a record’s \u003ccode\u003eString\u003c/code\u003e field\n\"myField\" the getter method will be: \u003ccode\u003epublic String myField()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis means that if you want to override the default getter behavior it is better to use the method provided by records instead of creating a new\none. Otherwise, this will bring confusion to the users of the record as two getters will be available and even leads to bugs if the behavior is\ndifferent from the default one.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a record contains a getter named \"get\" with a capitalized field name that is not behaving the same as the default\none.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nrecord Person(String name, int age) {\n    public String getName() { // Noncompliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nrecord Person(String name, int age) {\n    @Override\n    public String name() { // Compliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\n\nrecord Person(String name, int age) {\n    public String getNameUpperCase() { // Compliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\nrecord Person(String name, int age) {\n    public String getName() { // Compliant, is equivalent to \u0027name()\u0027\n        return name;\n    }\n}\nrecord Person(String name, int age) {\n    @Override\n    public String name() { // Compliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n    public String getName() { // Compliant, equal to \u0027name()\u0027\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eIf the implementations of \u003ccode\u003egetMyField()\u003c/code\u003e and \u003ccode\u003emyField()\u003c/code\u003e methods are equivalent, the issue should not be raised as this was\nprobably done to support compatibility with the previous convention.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\"\u003eRecords specification\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eBefore records appeared in Java 16, there was a common way to represent getters for private fields of a class:\u0026nbsp; a method named \"get\" with a\ncapitalized field name. For example, for a\u0026nbsp;\u003ccode\u003eString\u003c/code\u003e field named \"myField\" the signature of the getter method will be: \u003ccode\u003epublic\nString getMyField()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eIn records, getters are named differently. Getters created by default do not contain the \"get\" prefix. So for a record’s \u003ccode\u003eString\u003c/code\u003e field\n\"myField\" the getter method will be: \u003ccode\u003epublic String myField()\u003c/code\u003e\u003c/p\u003e\n\u003cp\u003eThis means that if you want to override the default getter behavior it is better to use the method provided by records instead of creating a new\none. Otherwise, this will bring confusion to the users of the record as two getters will be available and even leads to bugs if the behavior is\ndifferent from the default one.\u003c/p\u003e\n\u003cp\u003eThis rule raises an issue when a record contains a getter named \"get\" with a capitalized field name that is not behaving the same as the default\none.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nrecord Person(String name, int age) {\n    public String getName() { // Noncompliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nrecord Person(String name, int age) {\n    @Override\n    public String name() { // Compliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\n\nrecord Person(String name, int age) {\n    public String getNameUpperCase() { // Compliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\nrecord Person(String name, int age) {\n    public String getName() { // Compliant, is equivalent to \u0027name()\u0027\n        return name;\n    }\n}\nrecord Person(String name, int age) {\n    @Override\n    public String name() { // Compliant\n        return name.toUpperCase(Locale.ROOT);\n    }\n    public String getName() { // Compliant, equal to \u0027name()\u0027\n        return name.toUpperCase(Locale.ROOT);\n    }\n}\n\u003c/pre\u003e\n\u003ch2\u003eExceptions\u003c/h2\u003e\n\u003cp\u003eIf the implementations of \u003ccode\u003egetMyField()\u003c/code\u003e and \u003ccode\u003emyField()\u003c/code\u003e methods are equivalent, the issue should not be raised as this was\nprobably done to support compatibility with the previous convention.\u003c/p\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://docs.oracle.com/javase/specs/jls/se16/html/jls-8.html#jls-8.10\"\u003eRecords specification\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"MAJOR","status":"READY","isTemplate":false,"tags":[],"sysTags":["java16"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"5min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"5min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"5min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"5min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6211"]}},{"key":"java:S6212","repo":"java","name":"Local-Variable Type Inference should be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eIn Java 10 \u003ca href\u003d\"https://openjdk.java.net/jeps/286\"\u003eLocal-Variable Type Inference\u003c/a\u003e was introduced. It allows you to omit the expected type of\na variable by declaring it with the \u003ccode\u003evar\u003c/code\u003e keyword.\u003c/p\u003e\n\u003cp\u003eWhile it is not always possible or cleaner to use this new way of declaring a variable, when the type on the left is the same as the one on the\nright in an assignment, using the \u003ccode\u003evar\u003c/code\u003e will result in a more concise code.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when the expected type of the variable is the same as the returned type of assigned expression and the type can be\neasily inferred by the reader, either when the tye is already mentioned in the name or the initializer, or when the expression is self-explained.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nMyClass myClass \u003d new MyClass();\n\nint i \u003d 10; // Type is self explained\n\nMyClass something \u003d MyClass.getMyClass(); // Type is already mentionned in the initializer\n\nMyClass myClass \u003d get(); // Type is already mentionned in the name{code}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvar myClass \u003d new MyClass();\n\nvar i \u003d 10;\n\nvar something \u003d MyClass.getMyClass();\n\nvar myClass \u003d get();\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/286\"\u003eJEP 286: Local-Variable Type Inference\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eIn Java 10 \u003ca href\u003d\"https://openjdk.java.net/jeps/286\"\u003eLocal-Variable Type Inference\u003c/a\u003e was introduced. It allows you to omit the expected type of\na variable by declaring it with the \u003ccode\u003evar\u003c/code\u003e keyword.\u003c/p\u003e\n\u003cp\u003eWhile it is not always possible or cleaner to use this new way of declaring a variable, when the type on the left is the same as the one on the\nright in an assignment, using the \u003ccode\u003evar\u003c/code\u003e will result in a more concise code.\u003c/p\u003e\n\u003cp\u003eThis rule reports an issue when the expected type of the variable is the same as the returned type of assigned expression and the type can be\neasily inferred by the reader, either when the tye is already mentioned in the name or the initializer, or when the expression is self-explained.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nMyClass myClass \u003d new MyClass();\n\nint i \u003d 10; // Type is self explained\n\nMyClass something \u003d MyClass.getMyClass(); // Type is already mentionned in the initializer\n\nMyClass myClass \u003d get(); // Type is already mentionned in the name{code}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\nvar myClass \u003d new MyClass();\n\nvar i \u003d 10;\n\nvar something \u003d MyClass.getMyClass();\n\nvar myClass \u003d get();\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://openjdk.java.net/jeps/286\"\u003eJEP 286: Local-Variable Type Inference\u003c/a\u003e \u003c/li\u003e\n\u003c/ul\u003e","severity":"INFO","status":"READY","isTemplate":false,"tags":[],"sysTags":["java10"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"0min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"0min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"0min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"0min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S6212"]}},{"key":"java:S2093","repo":"java","name":"Try-with-resources should be used","createdAt":"2022-05-20T21:16:40+0700","htmlDesc":"\u003cp\u003eJava 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer\nto bullet-proof, it should be preferred over the older \u003ccode\u003etry\u003c/code\u003e/\u003ccode\u003ecatch\u003c/code\u003e/\u003ccode\u003efinally\u003c/code\u003e version.\u003c/p\u003e\n\u003cp\u003eThis rule checks that \u003ccode\u003eclose\u003c/code\u003e-able resources are opened in a try-with-resources statement.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e7\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nFileReader fr \u003d null;\nBufferedReader br \u003d null;\ntry {\n  fr \u003d new FileReader(fileName);\n  br \u003d new BufferedReader(fr);\n  return br.readLine();\n} catch (...) {\n} finally {\n  if (br !\u003d null) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n  if (fr !\u003d null ) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry (\n    FileReader fr \u003d new FileReader(fileName);\n    BufferedReader br \u003d new BufferedReader(fr)\n  ) {\n  return br.readLine();\n}\ncatch (...) {}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\ntry (BufferedReader br \u003d\n        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don\u0027t want to\n  return br.readLine();\n}\ncatch (...) {}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/6DZGBQ\"\u003eCERT, ERR54-J.\u003c/a\u003e - Use a try-with-resources statement to safely handle closeable\n  resources \u003c/li\u003e\n\u003c/ul\u003e","mdDesc":"\u003cp\u003eJava 7 introduced the try-with-resources statement, which guarantees that the resource in question will be closed. Since the new syntax is closer\nto bullet-proof, it should be preferred over the older \u003ccode\u003etry\u003c/code\u003e/\u003ccode\u003ecatch\u003c/code\u003e/\u003ccode\u003efinally\u003c/code\u003e version.\u003c/p\u003e\n\u003cp\u003eThis rule checks that \u003ccode\u003eclose\u003c/code\u003e-able resources are opened in a try-with-resources statement.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e that this rule is automatically disabled when the project’s \u003ccode\u003esonar.java.source\u003c/code\u003e is lower than \u003ccode\u003e7\u003c/code\u003e.\u003c/p\u003e\n\u003ch2\u003eNoncompliant Code Example\u003c/h2\u003e\n\u003cpre\u003e\nFileReader fr \u003d null;\nBufferedReader br \u003d null;\ntry {\n  fr \u003d new FileReader(fileName);\n  br \u003d new BufferedReader(fr);\n  return br.readLine();\n} catch (...) {\n} finally {\n  if (br !\u003d null) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n  if (fr !\u003d null ) {\n    try {\n      br.close();\n    } catch(IOException e){...}\n  }\n}\n\u003c/pre\u003e\n\u003ch2\u003eCompliant Solution\u003c/h2\u003e\n\u003cpre\u003e\ntry (\n    FileReader fr \u003d new FileReader(fileName);\n    BufferedReader br \u003d new BufferedReader(fr)\n  ) {\n  return br.readLine();\n}\ncatch (...) {}\n\u003c/pre\u003e\n\u003cp\u003eor\u003c/p\u003e\n\u003cpre\u003e\ntry (BufferedReader br \u003d\n        new BufferedReader(new FileReader(fileName))) { // no need to name intermediate resources if you don\u0027t want to\n  return br.readLine();\n}\ncatch (...) {}\n\u003c/pre\u003e\n\u003ch2\u003eSee\u003c/h2\u003e\n\u003cul\u003e\n  \u003cli\u003e \u003ca href\u003d\"https://wiki.sei.cmu.edu/confluence/x/6DZGBQ\"\u003eCERT, ERR54-J.\u003c/a\u003e - Use a try-with-resources statement to safely handle closeable\n  resources \u003c/li\u003e\n\u003c/ul\u003e","severity":"CRITICAL","status":"READY","isTemplate":false,"tags":[],"sysTags":["cert","java8","pitfall"],"lang":"java","langName":"Java","params":[],"defaultDebtRemFnType":"CONSTANT_ISSUE","defaultDebtRemFnOffset":"15min","debtOverloaded":false,"debtRemFnType":"CONSTANT_ISSUE","debtRemFnOffset":"15min","type":"CODE_SMELL","defaultRemFnType":"CONSTANT_ISSUE","defaultRemFnBaseEffort":"15min","remFnType":"CONSTANT_ISSUE","remFnBaseEffort":"15min","remFnOverloaded":false,"scope":"MAIN","isExternal":false,"deprecatedKeys":{"deprecatedKey":["squid:S2093"]}}]}